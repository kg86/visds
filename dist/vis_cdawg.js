/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/cdawg.ts":
/*!**********************!*\
  !*** ./src/cdawg.ts ***!
  \**********************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.build_cdawg = void 0;
class CNode {
    constructor(birth_time, depth) {
        this.birth_time = birth_time;
        this.depth = depth;
        this.slink = this;
        this.out_edges = new Map();
        this.in_edges = [];
    }
    get is_explicit() {
        return this.out_edges.size !== 1;
    }
}
class Edge {
    constructor(birth_time, text, parent, edge_beg, edge_len, child) {
        this.birth_time = birth_time;
        this.text = text;
        this.parent = parent;
        this.edge_beg = edge_beg;
        this.edge_len = edge_len;
        this.child = child;
    }
    charAt(i) {
        return this.text()[this.edge_beg + i];
    }
    get str() {
        if (this.edge_len > 0) {
            return this.text().substr(this.edge_beg, this.edge_len);
        }
        else {
            return this.text().substr(this.edge_beg);
        }
    }
    get len() {
        return this.edge_len === -1
            ? this.text().length - this.edge_beg
            : this.edge_len;
    }
    set len(val) {
        this.edge_len = val;
    }
    get is_open() {
        return this.edge_len === -1;
    }
}
const dummy_node = new CNode(-1, -1);
const dummy_edge = new Edge(-1, () => "", dummy_node, -1, -1, dummy_node);
// TopNode is an implicit node.
// The root node's suffix link points to the top node.
// There is a special edge from the top node to the root node, which we can move any characters.
class TopNode extends CNode {
    constructor(root) {
        super(-1, -1);
        this.root = root;
        this.edge = new Edge(-1, () => "", dummy_node, -1, -1, this.root);
    }
    get atNode() {
        return true;
    }
}
// It represents an implicit node which is located at match_len on an edge.
// If it is at node, edge is an dummy_edge and match_len = 0
class State {
    static create_at_node_state(parent) {
        return new State(parent, undefined, undefined);
    }
    constructor(parent, edge = dummy_edge, match_len = 0) {
        if (parent instanceof TopNode) {
            // This is TopNode
            this.edge = parent.edge;
        }
        else {
            this.edge = edge;
        }
        this.parent = parent;
        this.match_len = match_len;
    }
    get atNode() {
        return this.match_len === 0;
    }
    // return a state that can be moved from the current state with a character char.
    // if cannot, return undefined.
    move(char) {
        if (this.parent instanceof TopNode)
            return new State(this.edge.child);
        const can_move = this.atNode
            ? this.parent.out_edges.has(char)
            : this.edge.charAt(this.match_len) === char;
        // console.log('can_move', can_move)
        if (!can_move) {
            return undefined;
        }
        else {
            const edge = this.atNode
                ? this.parent.out_edges.get(char)
                : this.edge;
            const match_len = this.atNode ? 0 : this.match_len;
            if (match_len + 1 < edge.len) {
                return new State(this.parent, edge, match_len + 1);
            }
            else {
                return State.create_at_node_state(edge.child);
            }
        }
    }
}
class CDAWG {
    constructor() {
        this.text = "";
        this.nodes = [];
        this.edges = [];
        this.root = this.create_node(0);
        this.top_node = new TopNode(this.root);
        this.root.slink = this.top_node;
        this.sink = this.create_node(-1);
        this.ap = new State(this.root, undefined, 0);
    }
    create_node(depth) {
        const node = new CNode(this.nodes.length, depth);
        this.nodes.push(node);
        return node;
    }
    create_closed_edge(parent, edge_beg, edge_len, child) {
        const edge = new Edge(this.edges.length, () => this.text, parent, edge_beg, edge_len, child);
        this.edges.push(edge);
        parent.out_edges.set(this.text[edge_beg], edge);
        return edge;
    }
    create_open_edge(parent, edge_beg) {
        const edge = new Edge(this.edges.length, () => this.text, parent, edge_beg, -1, this.sink);
        this.edges.push(edge);
        parent.out_edges.set(this.text[edge_beg], edge);
        return edge;
    }
    // return a state that moved from node with text[beg:beg+len].
    // It is guranteed that we can move node with text[beg:beg+len].
    move_trust(node, text, beg, len) {
        const _move_trust = (node, text, beg, len) => {
            const edge = node.out_edges.get(text[beg]);
            if (len < edge.len) {
                return new State(node, edge, len);
            }
            else if (len === edge.len) {
                return State.create_at_node_state(edge.child);
            }
            else {
                return this.move_trust(edge.child, text, beg + edge.len, len - edge.len);
            }
        };
        if (len === 0)
            return new State(node);
        else if (node instanceof TopNode) {
            if (len === 1)
                return new State(node.root);
            else
                return _move_trust(node.root, text, beg + 1, len - 1);
        }
        else
            return _move_trust(node, text, beg, len);
    }
    // create new node that has out_edges of the give node.
    copy_node(node, num_in_edge_left) {
        const new_node = this.create_node(node.depth - num_in_edge_left);
        const out_edges = Array.from(node.out_edges.entries());
        out_edges.sort(); // for test
        for (const [k, edge] of out_edges) {
            this.create_closed_edge(new_node, edge.edge_beg, edge.edge_len, edge.child);
        }
        // split in_edges
        new_node.in_edges = node.in_edges.slice(num_in_edge_left);
        node.in_edges = node.in_edges.slice(0, num_in_edge_left);
        new_node.in_edges.forEach((edge) => {
            edge.child = new_node;
        });
        new_node.slink = node.slink;
        node.slink = new_node;
        return new_node;
    }
    split(state) {
        const branch_node = this.create_node(state.match_len);
        const in_edge = this.create_closed_edge(state.parent, state.edge.edge_beg, state.match_len, branch_node);
        state.edge.parent = branch_node;
        if (!state.edge.is_open)
            state.edge.edge_len -= state.match_len;
        state.edge.edge_beg += state.match_len;
        branch_node.out_edges.set(state.edge.charAt(0), state.edge);
        branch_node.in_edges.push(in_edge);
        return branch_node;
    }
    insert(char) {
        console.log();
        console.log("insert char[", char, "]");
        this.text += char;
        if (this.text.length === 1) {
            this.create_open_edge(this.root, 0);
            this.ap = new State(this.root);
            this.sink.slink = this.root;
            return;
        }
        let next_state;
        let prev_branch = undefined;
        let prev_destination = undefined;
        while ((next_state = this.ap.move(char)) === undefined) {
            console.log("ap", this.ap, this.ap.atNode);
            if (this.ap.atNode) {
                // if there is a previouslly processed node, create suffix link from it to the active point
                if (prev_branch)
                    prev_branch.slink = this.ap.parent;
                prev_branch = this.ap.parent;
                prev_destination = this.sink;
                this.create_open_edge(this.ap.parent, this.text.length - 1);
                this.ap = new State(this.ap.parent.slink);
                console.log("first ap", this.ap);
            }
            else if (prev_branch && this.ap.edge.child === prev_destination) {
                // if there is a previously processed node (prev_branch) and its destination is equal to the destination of the active point, merge the active point to the prev_branch
                this.ap.edge.child = prev_branch;
                this.ap.edge.len = this.ap.match_len;
                prev_branch.in_edges.push(this.ap.edge);
                this.ap = this.move_trust(this.ap.parent.slink, this.text, this.ap.edge.edge_beg, this.ap.match_len);
            }
            else {
                // split and create a new open edge
                const edge_beg = this.ap.edge.edge_beg;
                const edge_len = this.ap.match_len;
                const branch_node = this.split(this.ap);
                if (prev_branch)
                    prev_branch.slink = branch_node;
                prev_branch = branch_node;
                prev_destination = this.ap.edge.child;
                this.create_open_edge(branch_node, this.text.length - 1);
                this.ap = this.move_trust(this.ap.parent.slink, this.text, edge_beg, edge_len);
            }
        }
        if (prev_branch && this.ap.atNode)
            prev_branch.slink = this.ap.parent;
        if (next_state.atNode &&
            next_state.parent.depth >
                this.ap.parent.depth + (this.ap.atNode ? 1 : this.ap.edge.len)) {
            // we reached next_state with non-primary edge
            const branch_node = this.copy_node(next_state.parent, next_state.parent.depth -
                (this.ap.parent.depth + (this.ap.atNode ? 1 : this.ap.edge.len)));
            next_state = new State(branch_node);
        }
        this.ap = next_state;
        if (this.ap.atNode) {
            this.sink.slink = this.ap.parent;
        }
        else {
            this.sink.slink = this.sink;
        }
        console.log("insert end, ap is", this.ap);
    }
    /// transforms CDAWG implicit to explicit.
    /// creates a node corresponding to an active node.
    explicit() {
        let prev_node = this.sink;
        while (!this.ap.atNode) {
            const edge_beg = this.ap.edge.edge_beg;
            const match_len = this.ap.match_len;
            const node = this.split(this.ap);
            prev_node.slink = node;
            prev_node = node;
            this.ap = this.move_trust(this.ap.parent.slink, this.text, edge_beg, match_len);
        }
        prev_node.slink = this.ap.parent;
    }
    json(show_suffix_links = true) {
        const nodes = [];
        const edges = [];
        const nid = new Map();
        const max_roundness = 0.5;
        const min_roundness = -0.5;
        const roundness = (edge) => {
            const ebirth = Array.from(edge.parent.out_edges.values()).map((e) => [
                e.birth_time,
                e,
            ]);
            ebirth.sort();
            let birth_idx = -1;
            for (let i = 0; i < ebirth.length; i++) {
                if (ebirth[i][1] === edge) {
                    birth_idx = i;
                }
            }
            if (edge.parent.out_edges.size === 1)
                return 0.0;
            else
                return (min_roundness +
                    ((max_roundness - min_roundness) * birth_idx) /
                        (edge.parent.out_edges.size - 1));
        };
        this.nodes.forEach((node) => {
            const n = {
                label: "" + node.birth_time,
                id: node.birth_time,
                level: -1,
            };
            nid.set(node, node.birth_time);
            nodes.push(n);
        });
        if (show_suffix_links) {
            this.nodes.forEach((node) => {
                if (node.slink != node && node !== this.root) {
                    // if (node.slink && node !== this.root) {
                    const e = {
                        from: nid.get(node),
                        to: nid.get(node.slink),
                        id: "e[" + nid.get(node) + "]-[" + nid.get(node.slink) + "]",
                        dashes: true,
                        // color: { color: node.is_explicit ? '#848484' : '#ff0000' },
                        color: { color: "#848484" },
                        // , label: edge.str
                        font: { align: "top" },
                        smooth: { type: "curvedCW", roundness: 0.4 },
                    };
                    edges.push(e);
                }
            });
        }
        const set_level_rec = (node, level) => {
            const n = nodes[nid.get(node)];
            if (n.level < level) {
                n.level = level;
                node.out_edges.forEach((edge) => {
                    set_level_rec(edge.child, n.level + 1);
                });
            }
        };
        set_level_rec(this.root, 0);
        this.edges.forEach((edge) => {
            const e = {
                from: nid.get(edge.parent),
                to: nid.get(edge.child),
                id: "[" +
                    nid.get(edge.parent) +
                    "(" +
                    edge.len +
                    ")]-[" +
                    nid.get(edge.child) +
                    "]",
                label: edge.str,
                font: { align: "top" },
                smooth: { type: "curvedCW", roundness: roundness(edge) },
            };
            edges.push(e);
        });
        return { nodes, edges };
    }
}
const build_cdawg = (text, implicit_cdawg = false) => {
    const cdawg = new CDAWG();
    for (const c of text) {
        cdawg.insert(c);
    }
    if (!implicit_cdawg) {
        cdawg.explicit();
    }
    return cdawg;
};
exports.build_cdawg = build_cdawg;
const main = (text) => {
    console.log("text", text);
    const cdawg = (0, exports.build_cdawg)(text);
    console.log(cdawg);
    console.log(cdawg.json);
    return cdawg;
};
console.log(__webpack_require__.c[__webpack_require__.s] === module);
if (__webpack_require__.c[__webpack_require__.s] === module) {
    main(process.argv.length === 3 ? process.argv[2] : "abcabcaba");
}


/***/ }),

/***/ "./src/vis_cdawg.ts":
/*!**************************!*\
  !*** ./src/vis_cdawg.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const vis = __webpack_require__(/*! vis-network */ "./node_modules/vis-network/peer/umd/vis-network.min.js");
const cdawg_1 = __webpack_require__(/*! ./cdawg */ "./src/cdawg.ts");
const visjs_default_options = __webpack_require__(/*! ./visjs_default_options */ "./src/visjs_default_options.ts");
const options = visjs_default_options.options;
options.layout.hierarchical.direction = "LR";
options.layout.hierarchical.levelSeparation = 255;
options.layout.hierarchical.nodeSpacing = 205;
options.layout.hierarchical.treeSpacing = 205;
options.edges.smooth.type = "curvedCCW";
const container = document.getElementById("network");
const network = new vis.Network(container, {}, options);
let networkData = {
    nodes: new vis.DataSet(),
    edges: new vis.DataSet(),
};
const load_params_from_url = () => {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    let params = {
        input_text: "abcabcaba",
        show_suffix_links: true,
        implicit_cdawg: true,
    };
    const urlkey = urlParams.get("input_text");
    if (urlkey !== null)
        params.input_text = urlkey;
    params.show_suffix_links = urlParams.get("show_suffix_links") === "true";
    params.implicit_cdawg = urlParams.get("implicit_cdawg") === "true";
    return params;
};
const load_params_from_html = () => {
    const input_text = document.getElementById("input_text")
        .value;
    const show_suffix_links = document.getElementById("show_suffix_links").checked;
    const implicit_cdawg = document.getElementById("implicit_cdawg").checked;
    const params = {
        input_text: input_text,
        show_suffix_links: show_suffix_links,
        implicit_cdawg: implicit_cdawg,
    };
    return params;
};
const set_params_to_url = (params) => {
    const url = new URL(window.location.toString());
    for (let key of Object.keys(params)) {
        url.searchParams.set(key, params[key].toString());
    }
    history.pushState({}, "", url.toString());
};
const set_params_to_html = (params) => {
    console.log("setparams");
    const input_text = document.getElementById("input_text");
    const show_suffix_links = document.getElementById("show_suffix_links");
    const implicit_cdawg = document.getElementById("implicit_cdawg");
    input_text.value = params.input_text;
    show_suffix_links.checked = params.show_suffix_links;
    implicit_cdawg.checked = params.implicit_cdawg;
};
const redraw = () => {
    // load and set parameters
    const url = new URL(window.location.toString());
    const params = load_params_from_html();
    set_params_to_url(params);
    const cdawg = (0, cdawg_1.build_cdawg)(params.input_text, params.implicit_cdawg);
    console.log(cdawg);
    const json = cdawg.json(params.show_suffix_links);
    console.log(json);
    networkData = {
        nodes: new vis.DataSet(json.nodes),
        edges: new vis.DataSet(json.edges),
    };
    network.setData(networkData);
};
const main = () => {
    // set event listener
    const input_text = document.getElementById("input_text");
    input_text.addEventListener("input", redraw);
    input_text.addEventListener("propertychange", redraw);
    const show_sl_btn = document.getElementById("show_suffix_links");
    show_sl_btn.addEventListener("change", redraw);
    const implicit_cdawg_btn = document.getElementById("implicit_cdawg");
    implicit_cdawg_btn.addEventListener("change", redraw);
    network.on("hoverEdge", function (e) {
        console.log("hoverEdge", e);
        // @ts-ignore
        networkData.edges.update({ id: e.edge, font: { size: 34 } });
    });
    network.on("blurEdge", function (e) {
        console.log("blurEdge", e);
        // @ts-ignore
        networkData.edges.update({ id: e.edge, font: { size: 14 } });
    });
    // load and set parameters
    const params = load_params_from_url();
    set_params_to_html(params);
    redraw();
};
main();


/***/ }),

/***/ "./src/visjs_default_options.ts":
/*!**************************************!*\
  !*** ./src/visjs_default_options.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.options = void 0;
exports.options = {
    height: "100%",
    layout: {
        hierarchical: {
            // enabled: true
            // direction: 'UD',
            direction: "LR",
            // sortMethod: 'directed',
            treeSpacing: 185,
            levelSeparation: 95,
            nodeSpacing: 40,
        },
    },
    nodes: {
        size: 10,
    },
    edges: {
        arrows: {
            to: {
                enabled: true,
                scaleFactor: 0.5,
            },
        },
        // edge label is not displayed at the center of the edge
        // if `smooth` is specified
        smooth: {
            enabled: true,
            // type: 'dynamic',
            type: "vertical",
            // type: 'horizontal', // This is better for UD
            // type: 'continuous',
            // type: 'curvedCCW',
            // type: 'straightCross',
            roundness: 1.0,
        },
    },
    interaction: {
        hover: true,
        navigationButtons: true,
    },
    physics: false,
};


/***/ }),

/***/ "./node_modules/vis-data/peer/umd/vis-data.js":
/*!****************************************************!*\
  !*** ./node_modules/vis-data/peer/umd/vis-data.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.4
 * @date    2022-03-15T15:23:59.245Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */

(function (global, factory) {
   true ? factory(exports) :
  0;
})(this, (function (exports) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};

  var defineProperty$e = {exports: {}};

  var check = function (it) {
    return it && it.Math == Math && it;
  }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


  var global$M = // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
  function () {
    return this;
  }() || Function('return this')();

  var fails$r = function (exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  var fails$q = fails$r;
  var functionBindNative = !fails$q(function () {
    var test = function () {
      /* empty */
    }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


    return typeof test != 'function' || test.hasOwnProperty('prototype');
  });

  var NATIVE_BIND$4 = functionBindNative;
  var FunctionPrototype$3 = Function.prototype;
  var apply$6 = FunctionPrototype$3.apply;
  var call$c = FunctionPrototype$3.call; // eslint-disable-next-line es/no-reflect -- safe

  var functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND$4 ? call$c.bind(apply$6) : function () {
    return call$c.apply(apply$6, arguments);
  });

  var NATIVE_BIND$3 = functionBindNative;
  var FunctionPrototype$2 = Function.prototype;
  var bind$d = FunctionPrototype$2.bind;
  var call$b = FunctionPrototype$2.call;
  var uncurryThis$t = NATIVE_BIND$3 && bind$d.bind(call$b, call$b);
  var functionUncurryThis = NATIVE_BIND$3 ? function (fn) {
    return fn && uncurryThis$t(fn);
  } : function (fn) {
    return fn && function () {
      return call$b.apply(fn, arguments);
    };
  };

  // https://tc39.es/ecma262/#sec-iscallable

  var isCallable$h = function (argument) {
    return typeof argument == 'function';
  };

  var objectGetOwnPropertyDescriptor = {};

  var fails$p = fails$r; // Detect IE8's incomplete defineProperty implementation

  var descriptors = !fails$p(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty({}, 1, {
      get: function () {
        return 7;
      }
    })[1] != 7;
  });

  var NATIVE_BIND$2 = functionBindNative;
  var call$a = Function.prototype.call;
  var functionCall = NATIVE_BIND$2 ? call$a.bind(call$a) : function () {
    return call$a.apply(call$a, arguments);
  };

  var objectPropertyIsEnumerable = {};

  var $propertyIsEnumerable$2 = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var getOwnPropertyDescriptor$5 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

  var NASHORN_BUG = getOwnPropertyDescriptor$5 && !$propertyIsEnumerable$2.call({
    1: 2
  }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

  objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor$5(this, V);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable$2;

  var createPropertyDescriptor$5 = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var uncurryThis$s = functionUncurryThis;
  var toString$9 = uncurryThis$s({}.toString);
  var stringSlice$1 = uncurryThis$s(''.slice);

  var classofRaw$1 = function (it) {
    return stringSlice$1(toString$9(it), 8, -1);
  };

  var global$L = global$M;
  var uncurryThis$r = functionUncurryThis;
  var fails$o = fails$r;
  var classof$f = classofRaw$1;
  var Object$9 = global$L.Object;
  var split = uncurryThis$r(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

  var indexedObject = fails$o(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins -- safe
    return !Object$9('z').propertyIsEnumerable(0);
  }) ? function (it) {
    return classof$f(it) == 'String' ? split(it, '') : Object$9(it);
  } : Object$9;

  var global$K = global$M;
  var TypeError$j = global$K.TypeError; // `RequireObjectCoercible` abstract operation
  // https://tc39.es/ecma262/#sec-requireobjectcoercible

  var requireObjectCoercible$5 = function (it) {
    if (it == undefined) throw TypeError$j("Can't call method on " + it);
    return it;
  };

  var IndexedObject$3 = indexedObject;
  var requireObjectCoercible$4 = requireObjectCoercible$5;

  var toIndexedObject$b = function (it) {
    return IndexedObject$3(requireObjectCoercible$4(it));
  };

  var isCallable$g = isCallable$h;

  var isObject$f = function (it) {
    return typeof it == 'object' ? it !== null : isCallable$g(it);
  };

  var path$q = {};

  var path$p = path$q;
  var global$J = global$M;
  var isCallable$f = isCallable$h;

  var aFunction = function (variable) {
    return isCallable$f(variable) ? variable : undefined;
  };

  var getBuiltIn$9 = function (namespace, method) {
    return arguments.length < 2 ? aFunction(path$p[namespace]) || aFunction(global$J[namespace]) : path$p[namespace] && path$p[namespace][method] || global$J[namespace] && global$J[namespace][method];
  };

  var uncurryThis$q = functionUncurryThis;
  var objectIsPrototypeOf = uncurryThis$q({}.isPrototypeOf);

  var getBuiltIn$8 = getBuiltIn$9;
  var engineUserAgent = getBuiltIn$8('navigator', 'userAgent') || '';

  var global$I = global$M;
  var userAgent$3 = engineUserAgent;
  var process = global$I.process;
  var Deno = global$I.Deno;
  var versions = process && process.versions || Deno && Deno.version;
  var v8 = versions && versions.v8;
  var match, version;

  if (v8) {
    match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
    // but their correct versions are not interesting for us

    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  } // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
  // so check `userAgent` even if `.v8` exists, but 0


  if (!version && userAgent$3) {
    match = userAgent$3.match(/Edge\/(\d+)/);

    if (!match || match[1] >= 74) {
      match = userAgent$3.match(/Chrome\/(\d+)/);
      if (match) version = +match[1];
    }
  }

  var engineV8Version = version;

  /* eslint-disable es/no-symbol -- required for testing */
  var V8_VERSION$2 = engineV8Version;
  var fails$n = fails$r; // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing

  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$n(function () {
    var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;
  });

  /* eslint-disable es/no-symbol -- required for testing */
  var NATIVE_SYMBOL$2 = nativeSymbol;
  var useSymbolAsUid = NATIVE_SYMBOL$2 && !Symbol.sham && typeof Symbol.iterator == 'symbol';

  var global$H = global$M;
  var getBuiltIn$7 = getBuiltIn$9;
  var isCallable$e = isCallable$h;
  var isPrototypeOf$i = objectIsPrototypeOf;
  var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
  var Object$8 = global$H.Object;
  var isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    var $Symbol = getBuiltIn$7('Symbol');
    return isCallable$e($Symbol) && isPrototypeOf$i($Symbol.prototype, Object$8(it));
  };

  var global$G = global$M;
  var String$4 = global$G.String;

  var tryToString$4 = function (argument) {
    try {
      return String$4(argument);
    } catch (error) {
      return 'Object';
    }
  };

  var global$F = global$M;
  var isCallable$d = isCallable$h;
  var tryToString$3 = tryToString$4;
  var TypeError$i = global$F.TypeError; // `Assert: IsCallable(argument) is true`

  var aCallable$7 = function (argument) {
    if (isCallable$d(argument)) return argument;
    throw TypeError$i(tryToString$3(argument) + ' is not a function');
  };

  var aCallable$6 = aCallable$7; // `GetMethod` abstract operation
  // https://tc39.es/ecma262/#sec-getmethod

  var getMethod$3 = function (V, P) {
    var func = V[P];
    return func == null ? undefined : aCallable$6(func);
  };

  var global$E = global$M;
  var call$9 = functionCall;
  var isCallable$c = isCallable$h;
  var isObject$e = isObject$f;
  var TypeError$h = global$E.TypeError; // `OrdinaryToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-ordinarytoprimitive

  var ordinaryToPrimitive$1 = function (input, pref) {
    var fn, val;
    if (pref === 'string' && isCallable$c(fn = input.toString) && !isObject$e(val = call$9(fn, input))) return val;
    if (isCallable$c(fn = input.valueOf) && !isObject$e(val = call$9(fn, input))) return val;
    if (pref !== 'string' && isCallable$c(fn = input.toString) && !isObject$e(val = call$9(fn, input))) return val;
    throw TypeError$h("Can't convert object to primitive value");
  };

  var shared$4 = {exports: {}};

  var global$D = global$M; // eslint-disable-next-line es/no-object-defineproperty -- safe

  var defineProperty$d = Object.defineProperty;

  var setGlobal$1 = function (key, value) {
    try {
      defineProperty$d(global$D, key, {
        value: value,
        configurable: true,
        writable: true
      });
    } catch (error) {
      global$D[key] = value;
    }

    return value;
  };

  var global$C = global$M;
  var setGlobal = setGlobal$1;
  var SHARED = '__core-js_shared__';
  var store$3 = global$C[SHARED] || setGlobal(SHARED, {});
  var sharedStore = store$3;

  var store$2 = sharedStore;
  (shared$4.exports = function (key, value) {
    return store$2[key] || (store$2[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.21.1',
    mode: 'pure' ,
    copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
    license: 'https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE',
    source: 'https://github.com/zloirock/core-js'
  });

  var global$B = global$M;
  var requireObjectCoercible$3 = requireObjectCoercible$5;
  var Object$7 = global$B.Object; // `ToObject` abstract operation
  // https://tc39.es/ecma262/#sec-toobject

  var toObject$e = function (argument) {
    return Object$7(requireObjectCoercible$3(argument));
  };

  var uncurryThis$p = functionUncurryThis;
  var toObject$d = toObject$e;
  var hasOwnProperty = uncurryThis$p({}.hasOwnProperty); // `HasOwnProperty` abstract operation
  // https://tc39.es/ecma262/#sec-hasownproperty

  var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject$d(it), key);
  };

  var uncurryThis$o = functionUncurryThis;
  var id$1 = 0;
  var postfix = Math.random();
  var toString$8 = uncurryThis$o(1.0.toString);

  var uid$4 = function (key) {
    return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$8(++id$1 + postfix, 36);
  };

  var global$A = global$M;
  var shared$3 = shared$4.exports;
  var hasOwn$f = hasOwnProperty_1;
  var uid$3 = uid$4;
  var NATIVE_SYMBOL$1 = nativeSymbol;
  var USE_SYMBOL_AS_UID = useSymbolAsUid;
  var WellKnownSymbolsStore$1 = shared$3('wks');
  var Symbol$2 = global$A.Symbol;
  var symbolFor = Symbol$2 && Symbol$2['for'];
  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$2 : Symbol$2 && Symbol$2.withoutSetter || uid$3;

  var wellKnownSymbol$j = function (name) {
    if (!hasOwn$f(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$1 || typeof WellKnownSymbolsStore$1[name] == 'string')) {
      var description = 'Symbol.' + name;

      if (NATIVE_SYMBOL$1 && hasOwn$f(Symbol$2, name)) {
        WellKnownSymbolsStore$1[name] = Symbol$2[name];
      } else if (USE_SYMBOL_AS_UID && symbolFor) {
        WellKnownSymbolsStore$1[name] = symbolFor(description);
      } else {
        WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
      }
    }

    return WellKnownSymbolsStore$1[name];
  };

  var global$z = global$M;
  var call$8 = functionCall;
  var isObject$d = isObject$f;
  var isSymbol$2 = isSymbol$3;
  var getMethod$2 = getMethod$3;
  var ordinaryToPrimitive = ordinaryToPrimitive$1;
  var wellKnownSymbol$i = wellKnownSymbol$j;
  var TypeError$g = global$z.TypeError;
  var TO_PRIMITIVE$1 = wellKnownSymbol$i('toPrimitive'); // `ToPrimitive` abstract operation
  // https://tc39.es/ecma262/#sec-toprimitive

  var toPrimitive$1 = function (input, pref) {
    if (!isObject$d(input) || isSymbol$2(input)) return input;
    var exoticToPrim = getMethod$2(input, TO_PRIMITIVE$1);
    var result;

    if (exoticToPrim) {
      if (pref === undefined) pref = 'default';
      result = call$8(exoticToPrim, input, pref);
      if (!isObject$d(result) || isSymbol$2(result)) return result;
      throw TypeError$g("Can't convert object to primitive value");
    }

    if (pref === undefined) pref = 'number';
    return ordinaryToPrimitive(input, pref);
  };

  var toPrimitive = toPrimitive$1;
  var isSymbol$1 = isSymbol$3; // `ToPropertyKey` abstract operation
  // https://tc39.es/ecma262/#sec-topropertykey

  var toPropertyKey$4 = function (argument) {
    var key = toPrimitive(argument, 'string');
    return isSymbol$1(key) ? key : key + '';
  };

  var global$y = global$M;
  var isObject$c = isObject$f;
  var document$1 = global$y.document; // typeof document.createElement is 'object' in old IE

  var EXISTS$1 = isObject$c(document$1) && isObject$c(document$1.createElement);

  var documentCreateElement$1 = function (it) {
    return EXISTS$1 ? document$1.createElement(it) : {};
  };

  var DESCRIPTORS$h = descriptors;
  var fails$m = fails$r;
  var createElement = documentCreateElement$1; // Thanks to IE8 for its funny defineProperty

  var ie8DomDefine = !DESCRIPTORS$h && !fails$m(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(createElement('div'), 'a', {
      get: function () {
        return 7;
      }
    }).a != 7;
  });

  var DESCRIPTORS$g = descriptors;
  var call$7 = functionCall;
  var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
  var createPropertyDescriptor$4 = createPropertyDescriptor$5;
  var toIndexedObject$a = toIndexedObject$b;
  var toPropertyKey$3 = toPropertyKey$4;
  var hasOwn$e = hasOwnProperty_1;
  var IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

  objectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject$a(O);
    P = toPropertyKey$3(P);
    if (IE8_DOM_DEFINE$1) try {
      return $getOwnPropertyDescriptor$2(O, P);
    } catch (error) {
      /* empty */
    }
    if (hasOwn$e(O, P)) return createPropertyDescriptor$4(!call$7(propertyIsEnumerableModule$2.f, O, P), O[P]);
  };

  var fails$l = fails$r;
  var isCallable$b = isCallable$h;
  var replacement = /#|\.prototype\./;

  var isForced$1 = function (feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : isCallable$b(detection) ? fails$l(detection) : !!detection;
  };

  var normalize = isForced$1.normalize = function (string) {
    return String(string).replace(replacement, '.').toLowerCase();
  };

  var data = isForced$1.data = {};
  var NATIVE = isForced$1.NATIVE = 'N';
  var POLYFILL = isForced$1.POLYFILL = 'P';
  var isForced_1 = isForced$1;

  var uncurryThis$n = functionUncurryThis;
  var aCallable$5 = aCallable$7;
  var NATIVE_BIND$1 = functionBindNative;
  var bind$c = uncurryThis$n(uncurryThis$n.bind); // optional / simple context binding

  var functionBindContext = function (fn, that) {
    aCallable$5(fn);
    return that === undefined ? fn : NATIVE_BIND$1 ? bind$c(fn, that) : function
      /* ...args */
    () {
      return fn.apply(that, arguments);
    };
  };

  var objectDefineProperty = {};

  var DESCRIPTORS$f = descriptors;
  var fails$k = fails$r; // V8 ~ Chrome 36-
  // https://bugs.chromium.org/p/v8/issues/detail?id=3334

  var v8PrototypeDefineBug = DESCRIPTORS$f && fails$k(function () {
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    return Object.defineProperty(function () {
      /* empty */
    }, 'prototype', {
      value: 42,
      writable: false
    }).prototype != 42;
  });

  var global$x = global$M;
  var isObject$b = isObject$f;
  var String$3 = global$x.String;
  var TypeError$f = global$x.TypeError; // `Assert: Type(argument) is Object`

  var anObject$b = function (argument) {
    if (isObject$b(argument)) return argument;
    throw TypeError$f(String$3(argument) + ' is not an object');
  };

  var global$w = global$M;
  var DESCRIPTORS$e = descriptors;
  var IE8_DOM_DEFINE = ie8DomDefine;
  var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
  var anObject$a = anObject$b;
  var toPropertyKey$2 = toPropertyKey$4;
  var TypeError$e = global$w.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe

  var $defineProperty$1 = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = 'enumerable';
  var CONFIGURABLE$1 = 'configurable';
  var WRITABLE = 'writable'; // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty

  objectDefineProperty.f = DESCRIPTORS$e ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
    anObject$a(O);
    P = toPropertyKey$2(P);
    anObject$a(Attributes);

    if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
      var current = $getOwnPropertyDescriptor$1(O, P);

      if (current && current[WRITABLE]) {
        O[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
          writable: false
        };
      }
    }

    return $defineProperty$1(O, P, Attributes);
  } : $defineProperty$1 : function defineProperty(O, P, Attributes) {
    anObject$a(O);
    P = toPropertyKey$2(P);
    anObject$a(Attributes);
    if (IE8_DOM_DEFINE) try {
      return $defineProperty$1(O, P, Attributes);
    } catch (error) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError$e('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var DESCRIPTORS$d = descriptors;
  var definePropertyModule$4 = objectDefineProperty;
  var createPropertyDescriptor$3 = createPropertyDescriptor$5;
  var createNonEnumerableProperty$6 = DESCRIPTORS$d ? function (object, key, value) {
    return definePropertyModule$4.f(object, key, createPropertyDescriptor$3(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var global$v = global$M;
  var apply$5 = functionApply;
  var uncurryThis$m = functionUncurryThis;
  var isCallable$a = isCallable$h;
  var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;
  var isForced = isForced_1;
  var path$o = path$q;
  var bind$b = functionBindContext;
  var createNonEnumerableProperty$5 = createNonEnumerableProperty$6;
  var hasOwn$d = hasOwnProperty_1;

  var wrapConstructor = function (NativeConstructor) {
    var Wrapper = function (a, b, c) {
      if (this instanceof Wrapper) {
        switch (arguments.length) {
          case 0:
            return new NativeConstructor();

          case 1:
            return new NativeConstructor(a);

          case 2:
            return new NativeConstructor(a, b);
        }

        return new NativeConstructor(a, b, c);
      }

      return apply$5(NativeConstructor, this, arguments);
    };

    Wrapper.prototype = NativeConstructor.prototype;
    return Wrapper;
  };
  /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
    options.name        - the .name of the function if it does not match the key
  */


  var _export = function (options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var PROTO = options.proto;
    var nativeSource = GLOBAL ? global$v : STATIC ? global$v[TARGET] : (global$v[TARGET] || {}).prototype;
    var target = GLOBAL ? path$o : path$o[TARGET] || createNonEnumerableProperty$5(path$o, TARGET, {})[TARGET];
    var targetPrototype = target.prototype;
    var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
    var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

    for (key in source) {
      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contains in native

      USE_NATIVE = !FORCED && nativeSource && hasOwn$d(nativeSource, key);
      targetProperty = target[key];
      if (USE_NATIVE) if (options.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$4(nativeSource, key);
        nativeProperty = descriptor && descriptor.value;
      } else nativeProperty = nativeSource[key]; // export native or implementation

      sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
      if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue; // bind timers to global for call from export context

      if (options.bind && USE_NATIVE) resultProperty = bind$b(sourceProperty, global$v); // wrap global constructors for prevent changs in this version
      else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); // make static versions for prototype methods
      else if (PROTO && isCallable$a(sourceProperty)) resultProperty = uncurryThis$m(sourceProperty); // default case
      else resultProperty = sourceProperty; // add a flag to not completely full polyfills

      if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty$5(resultProperty, 'sham', true);
      }

      createNonEnumerableProperty$5(target, key, resultProperty);

      if (PROTO) {
        VIRTUAL_PROTOTYPE = TARGET + 'Prototype';

        if (!hasOwn$d(path$o, VIRTUAL_PROTOTYPE)) {
          createNonEnumerableProperty$5(path$o, VIRTUAL_PROTOTYPE, {});
        } // export virtual prototype methods


        createNonEnumerableProperty$5(path$o[VIRTUAL_PROTOTYPE], key, sourceProperty); // export real prototype methods

        if (options.real && targetPrototype && !targetPrototype[key]) {
          createNonEnumerableProperty$5(targetPrototype, key, sourceProperty);
        }
      }
    }
  };

  var $$C = _export;
  var DESCRIPTORS$c = descriptors;
  var defineProperty$c = objectDefineProperty.f; // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  // eslint-disable-next-line es/no-object-defineproperty -- safe

  $$C({
    target: 'Object',
    stat: true,
    forced: Object.defineProperty !== defineProperty$c,
    sham: !DESCRIPTORS$c
  }, {
    defineProperty: defineProperty$c
  });

  var path$n = path$q;
  var Object$6 = path$n.Object;

  var defineProperty$b = defineProperty$e.exports = function defineProperty(it, key, desc) {
    return Object$6.defineProperty(it, key, desc);
  };

  if (Object$6.defineProperty.sham) defineProperty$b.sham = true;

  var parent$V = defineProperty$e.exports;
  var defineProperty$a = parent$V;

  var parent$U = defineProperty$a;
  var defineProperty$9 = parent$U;

  var parent$T = defineProperty$9;
  var defineProperty$8 = parent$T;

  var defineProperty$7 = defineProperty$8;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;

      defineProperty$7(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);

    defineProperty$7(Constructor, "prototype", {
      writable: false
    });

    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      defineProperty$7(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var uncurryThis$l = functionUncurryThis;
  var arraySlice$5 = uncurryThis$l([].slice);

  var global$u = global$M;
  var uncurryThis$k = functionUncurryThis;
  var aCallable$4 = aCallable$7;
  var isObject$a = isObject$f;
  var hasOwn$c = hasOwnProperty_1;
  var arraySlice$4 = arraySlice$5;
  var NATIVE_BIND = functionBindNative;
  var Function$2 = global$u.Function;
  var concat$6 = uncurryThis$k([].concat);
  var join = uncurryThis$k([].join);
  var factories = {};

  var construct$4 = function (C, argsLength, args) {
    if (!hasOwn$c(factories, argsLength)) {
      for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';

      factories[argsLength] = Function$2('C,a', 'return new C(' + join(list, ',') + ')');
    }

    return factories[argsLength](C, args);
  }; // `Function.prototype.bind` method implementation
  // https://tc39.es/ecma262/#sec-function.prototype.bind


  var functionBind = NATIVE_BIND ? Function$2.bind : function bind(that
  /* , ...args */
  ) {
    var F = aCallable$4(this);
    var Prototype = F.prototype;
    var partArgs = arraySlice$4(arguments, 1);

    var boundFunction = function
      /* args... */
    bound() {
      var args = concat$6(partArgs, arraySlice$4(arguments));
      return this instanceof boundFunction ? construct$4(F, args.length, args) : F.apply(that, args);
    };

    if (isObject$a(Prototype)) boundFunction.prototype = Prototype;
    return boundFunction;
  };

  var $$B = _export;
  var bind$a = functionBind; // `Function.prototype.bind` method
  // https://tc39.es/ecma262/#sec-function.prototype.bind

  $$B({
    target: 'Function',
    proto: true,
    forced: Function.bind !== bind$a
  }, {
    bind: bind$a
  });

  var path$m = path$q;

  var entryVirtual$k = function (CONSTRUCTOR) {
    return path$m[CONSTRUCTOR + 'Prototype'];
  };

  var entryVirtual$j = entryVirtual$k;
  var bind$9 = entryVirtual$j('Function').bind;

  var isPrototypeOf$h = objectIsPrototypeOf;
  var method$e = bind$9;
  var FunctionPrototype$1 = Function.prototype;

  var bind$8 = function (it) {
    var own = it.bind;
    return it === FunctionPrototype$1 || isPrototypeOf$h(FunctionPrototype$1, it) && own === FunctionPrototype$1.bind ? method$e : own;
  };

  var parent$S = bind$8;
  var bind$7 = parent$S;

  var bind$6 = bind$7;

  var ceil = Math.ceil;
  var floor$1 = Math.floor; // `ToIntegerOrInfinity` abstract operation
  // https://tc39.es/ecma262/#sec-tointegerorinfinity

  var toIntegerOrInfinity$4 = function (argument) {
    var number = +argument; // eslint-disable-next-line no-self-compare -- safe

    return number !== number || number === 0 ? 0 : (number > 0 ? floor$1 : ceil)(number);
  };

  var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
  var min$2 = Math.min; // `ToLength` abstract operation
  // https://tc39.es/ecma262/#sec-tolength

  var toLength$1 = function (argument) {
    return argument > 0 ? min$2(toIntegerOrInfinity$3(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  var toLength = toLength$1; // `LengthOfArrayLike` abstract operation
  // https://tc39.es/ecma262/#sec-lengthofarraylike

  var lengthOfArrayLike$d = function (obj) {
    return toLength(obj.length);
  };

  var global$t = global$M;
  var aCallable$3 = aCallable$7;
  var toObject$c = toObject$e;
  var IndexedObject$2 = indexedObject;
  var lengthOfArrayLike$c = lengthOfArrayLike$d;
  var TypeError$d = global$t.TypeError; // `Array.prototype.{ reduce, reduceRight }` methods implementation

  var createMethod$5 = function (IS_RIGHT) {
    return function (that, callbackfn, argumentsLength, memo) {
      aCallable$3(callbackfn);
      var O = toObject$c(that);
      var self = IndexedObject$2(O);
      var length = lengthOfArrayLike$c(O);
      var index = IS_RIGHT ? length - 1 : 0;
      var i = IS_RIGHT ? -1 : 1;
      if (argumentsLength < 2) while (true) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }

        index += i;

        if (IS_RIGHT ? index < 0 : length <= index) {
          throw TypeError$d('Reduce of empty array with no initial value');
        }
      }

      for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }

      return memo;
    };
  };

  var arrayReduce = {
    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    left: createMethod$5(false),
    // `Array.prototype.reduceRight` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduceright
    right: createMethod$5(true)
  };

  var fails$j = fails$r;

  var arrayMethodIsStrict$5 = function (METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !!method && fails$j(function () {
      // eslint-disable-next-line no-useless-call -- required for testing
      method.call(null, argument || function () {
        return 1;
      }, 1);
    });
  };

  var classof$e = classofRaw$1;
  var global$s = global$M;
  var engineIsNode = classof$e(global$s.process) == 'process';

  var $$A = _export;
  var $reduce = arrayReduce.left;
  var arrayMethodIsStrict$4 = arrayMethodIsStrict$5;
  var CHROME_VERSION = engineV8Version;
  var IS_NODE = engineIsNode;
  var STRICT_METHOD$4 = arrayMethodIsStrict$4('reduce'); // Chrome 80-82 has a critical bug
  // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

  var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce

  $$A({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD$4 || CHROME_BUG
  }, {
    reduce: function reduce(callbackfn
    /* , initialValue */
    ) {
      var length = arguments.length;
      return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
    }
  });

  var entryVirtual$i = entryVirtual$k;
  var reduce$3 = entryVirtual$i('Array').reduce;

  var isPrototypeOf$g = objectIsPrototypeOf;
  var method$d = reduce$3;
  var ArrayPrototype$e = Array.prototype;

  var reduce$2 = function (it) {
    var own = it.reduce;
    return it === ArrayPrototype$e || isPrototypeOf$g(ArrayPrototype$e, it) && own === ArrayPrototype$e.reduce ? method$d : own;
  };

  var parent$R = reduce$2;
  var reduce$1 = parent$R;

  var reduce = reduce$1;

  var classof$d = classofRaw$1; // `IsArray` abstract operation
  // https://tc39.es/ecma262/#sec-isarray
  // eslint-disable-next-line es/no-array-isarray -- safe

  var isArray$d = Array.isArray || function isArray(argument) {
    return classof$d(argument) == 'Array';
  };

  var wellKnownSymbol$h = wellKnownSymbol$j;
  var TO_STRING_TAG$3 = wellKnownSymbol$h('toStringTag');
  var test$2 = {};
  test$2[TO_STRING_TAG$3] = 'z';
  var toStringTagSupport = String(test$2) === '[object z]';

  var global$r = global$M;
  var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
  var isCallable$9 = isCallable$h;
  var classofRaw = classofRaw$1;
  var wellKnownSymbol$g = wellKnownSymbol$j;
  var TO_STRING_TAG$2 = wellKnownSymbol$g('toStringTag');
  var Object$5 = global$r.Object; // ES3 wrong here

  var CORRECT_ARGUMENTS = classofRaw(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (error) {
      /* empty */
    }
  }; // getting tag from ES6+ `Object.prototype.toString`


  var classof$c = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function (it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (tag = tryGet(O = Object$5(it), TO_STRING_TAG$2)) == 'string' ? tag // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable$9(O.callee) ? 'Arguments' : result;
  };

  var uncurryThis$j = functionUncurryThis;
  var isCallable$8 = isCallable$h;
  var store$1 = sharedStore;
  var functionToString = uncurryThis$j(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

  if (!isCallable$8(store$1.inspectSource)) {
    store$1.inspectSource = function (it) {
      return functionToString(it);
    };
  }

  var inspectSource$2 = store$1.inspectSource;

  var uncurryThis$i = functionUncurryThis;
  var fails$i = fails$r;
  var isCallable$7 = isCallable$h;
  var classof$b = classof$c;
  var getBuiltIn$6 = getBuiltIn$9;
  var inspectSource$1 = inspectSource$2;

  var noop = function () {
    /* empty */
  };

  var empty = [];
  var construct$3 = getBuiltIn$6('Reflect', 'construct');
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec$2 = uncurryThis$i(constructorRegExp.exec);
  var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable$7(argument)) return false;

    try {
      construct$3(noop, empty, argument);
      return true;
    } catch (error) {
      return false;
    }
  };

  var isConstructorLegacy = function isConstructor(argument) {
    if (!isCallable$7(argument)) return false;

    switch (classof$b(argument)) {
      case 'AsyncFunction':
      case 'GeneratorFunction':
      case 'AsyncGeneratorFunction':
        return false;
    }

    try {
      // we can't check .prototype since constructors produced by .bind haven't it
      // `Function#toString` throws on some built-it function in some legacy engines
      // (for example, `DOMQuad` and similar in FF41-)
      return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));
    } catch (error) {
      return true;
    }
  };

  isConstructorLegacy.sham = true; // `IsConstructor` abstract operation
  // https://tc39.es/ecma262/#sec-isconstructor

  var isConstructor$4 = !construct$3 || fails$i(function () {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
      called = true;
    }) || called;
  }) ? isConstructorLegacy : isConstructorModern;

  var global$q = global$M;
  var isArray$c = isArray$d;
  var isConstructor$3 = isConstructor$4;
  var isObject$9 = isObject$f;
  var wellKnownSymbol$f = wellKnownSymbol$j;
  var SPECIES$3 = wellKnownSymbol$f('species');
  var Array$5 = global$q.Array; // a part of `ArraySpeciesCreate` abstract operation
  // https://tc39.es/ecma262/#sec-arrayspeciescreate

  var arraySpeciesConstructor$1 = function (originalArray) {
    var C;

    if (isArray$c(originalArray)) {
      C = originalArray.constructor; // cross-realm fallback

      if (isConstructor$3(C) && (C === Array$5 || isArray$c(C.prototype))) C = undefined;else if (isObject$9(C)) {
        C = C[SPECIES$3];
        if (C === null) C = undefined;
      }
    }

    return C === undefined ? Array$5 : C;
  };

  var arraySpeciesConstructor = arraySpeciesConstructor$1; // `ArraySpeciesCreate` abstract operation
  // https://tc39.es/ecma262/#sec-arrayspeciescreate

  var arraySpeciesCreate$4 = function (originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
  };

  var bind$5 = functionBindContext;
  var uncurryThis$h = functionUncurryThis;
  var IndexedObject$1 = indexedObject;
  var toObject$b = toObject$e;
  var lengthOfArrayLike$b = lengthOfArrayLike$d;
  var arraySpeciesCreate$3 = arraySpeciesCreate$4;
  var push$5 = uncurryThis$h([].push); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation

  var createMethod$4 = function (TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_REJECT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function ($this, callbackfn, that, specificCreate) {
      var O = toObject$b($this);
      var self = IndexedObject$1(O);
      var boundFunction = bind$5(callbackfn, that);
      var length = lengthOfArrayLike$b(self);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate$3;
      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
      var value, result;

      for (; length > index; index++) if (NO_HOLES || index in self) {
        value = self[index];
        result = boundFunction(value, index, O);

        if (TYPE) {
          if (IS_MAP) target[index] = result; // map
          else if (result) switch (TYPE) {
            case 3:
              return true;
            // some

            case 5:
              return value;
            // find

            case 6:
              return index;
            // findIndex

            case 2:
              push$5(target, value);
            // filter
          } else switch (TYPE) {
            case 4:
              return false;
            // every

            case 7:
              push$5(target, value);
            // filterReject
          }
        }
      }

      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };

  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    forEach: createMethod$4(0),
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    map: createMethod$4(1),
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    filter: createMethod$4(2),
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    some: createMethod$4(3),
    // `Array.prototype.every` method
    // https://tc39.es/ecma262/#sec-array.prototype.every
    every: createMethod$4(4),
    // `Array.prototype.find` method
    // https://tc39.es/ecma262/#sec-array.prototype.find
    find: createMethod$4(5),
    // `Array.prototype.findIndex` method
    // https://tc39.es/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod$4(6),
    // `Array.prototype.filterReject` method
    // https://github.com/tc39/proposal-array-filtering
    filterReject: createMethod$4(7)
  };

  var fails$h = fails$r;
  var wellKnownSymbol$e = wellKnownSymbol$j;
  var V8_VERSION$1 = engineV8Version;
  var SPECIES$2 = wellKnownSymbol$e('species');

  var arrayMethodHasSpeciesSupport$5 = function (METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return V8_VERSION$1 >= 51 || !fails$h(function () {
      var array = [];
      var constructor = array.constructor = {};

      constructor[SPECIES$2] = function () {
        return {
          foo: 1
        };
      };

      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };

  var $$z = _export;
  var $filter = arrayIteration.filter;
  var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
  var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$4('filter'); // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  // with adding support of @@species

  $$z({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$3
  }, {
    filter: function filter(callbackfn
    /* , thisArg */
    ) {
      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var entryVirtual$h = entryVirtual$k;
  var filter$3 = entryVirtual$h('Array').filter;

  var isPrototypeOf$f = objectIsPrototypeOf;
  var method$c = filter$3;
  var ArrayPrototype$d = Array.prototype;

  var filter$2 = function (it) {
    var own = it.filter;
    return it === ArrayPrototype$d || isPrototypeOf$f(ArrayPrototype$d, it) && own === ArrayPrototype$d.filter ? method$c : own;
  };

  var parent$Q = filter$2;
  var filter$1 = parent$Q;

  var filter = filter$1;

  var $$y = _export;
  var $map = arrayIteration.map;
  var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
  var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$3('map'); // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  // with adding support of @@species

  $$y({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$2
  }, {
    map: function map(callbackfn
    /* , thisArg */
    ) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var entryVirtual$g = entryVirtual$k;
  var map$6 = entryVirtual$g('Array').map;

  var isPrototypeOf$e = objectIsPrototypeOf;
  var method$b = map$6;
  var ArrayPrototype$c = Array.prototype;

  var map$5 = function (it) {
    var own = it.map;
    return it === ArrayPrototype$c || isPrototypeOf$e(ArrayPrototype$c, it) && own === ArrayPrototype$c.map ? method$b : own;
  };

  var parent$P = map$5;
  var map$4 = parent$P;

  var map$3 = map$4;

  var global$p = global$M;
  var isArray$b = isArray$d;
  var lengthOfArrayLike$a = lengthOfArrayLike$d;
  var bind$4 = functionBindContext;
  var TypeError$c = global$p.TypeError; // `FlattenIntoArray` abstract operation
  // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

  var flattenIntoArray$1 = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? bind$4(mapper, thisArg) : false;
    var element, elementLen;

    while (sourceIndex < sourceLen) {
      if (sourceIndex in source) {
        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

        if (depth > 0 && isArray$b(element)) {
          elementLen = lengthOfArrayLike$a(element);
          targetIndex = flattenIntoArray$1(target, original, element, elementLen, targetIndex, depth - 1) - 1;
        } else {
          if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError$c('Exceed the acceptable array length');
          target[targetIndex] = element;
        }

        targetIndex++;
      }

      sourceIndex++;
    }

    return targetIndex;
  };

  var flattenIntoArray_1 = flattenIntoArray$1;

  var $$x = _export;
  var flattenIntoArray = flattenIntoArray_1;
  var aCallable$2 = aCallable$7;
  var toObject$a = toObject$e;
  var lengthOfArrayLike$9 = lengthOfArrayLike$d;
  var arraySpeciesCreate$2 = arraySpeciesCreate$4; // `Array.prototype.flatMap` method
  // https://tc39.es/ecma262/#sec-array.prototype.flatmap

  $$x({
    target: 'Array',
    proto: true
  }, {
    flatMap: function flatMap(callbackfn
    /* , thisArg */
    ) {
      var O = toObject$a(this);
      var sourceLen = lengthOfArrayLike$9(O);
      var A;
      aCallable$2(callbackfn);
      A = arraySpeciesCreate$2(O, 0);
      A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      return A;
    }
  });

  var entryVirtual$f = entryVirtual$k;
  var flatMap$3 = entryVirtual$f('Array').flatMap;

  var isPrototypeOf$d = objectIsPrototypeOf;
  var method$a = flatMap$3;
  var ArrayPrototype$b = Array.prototype;

  var flatMap$2 = function (it) {
    var own = it.flatMap;
    return it === ArrayPrototype$b || isPrototypeOf$d(ArrayPrototype$b, it) && own === ArrayPrototype$b.flatMap ? method$a : own;
  };

  var parent$O = flatMap$2;
  var flatMap$1 = parent$O;

  var flatMap = flatMap$1;

  /**
   * Create new data pipe.
   *
   * @param from - The source data set or data view.
   * @remarks
   * Example usage:
   * ```typescript
   * interface AppItem {
   *   whoami: string;
   *   appData: unknown;
   *   visData: VisItem;
   * }
   * interface VisItem {
   *   id: number;
   *   label: string;
   *   color: string;
   *   x: number;
   *   y: number;
   * }
   *
   * const ds1 = new DataSet<AppItem, "whoami">([], { fieldId: "whoami" });
   * const ds2 = new DataSet<VisItem, "id">();
   *
   * const pipe = createNewDataPipeFrom(ds1)
   *   .filter((item): boolean => item.enabled === true)
   *   .map<VisItem, "id">((item): VisItem => item.visData)
   *   .to(ds2);
   *
   * pipe.start();
   * ```
   * @returns A factory whose methods can be used to configure the pipe.
   */
  function createNewDataPipeFrom(from) {
    return new DataPipeUnderConstruction(from);
  }
  /**
   * Internal implementation of the pipe. This should be accessible only through
   * `createNewDataPipeFrom` from the outside.
   *
   * @typeParam SI - Source item type.
   * @typeParam SP - Source item type's id property name.
   * @typeParam TI - Target item type.
   * @typeParam TP - Target item type's id property name.
   */

  var SimpleDataPipe = /*#__PURE__*/function () {
    /**
     * Bound listeners for use with `DataInterface['on' | 'off']`.
     */

    /**
     * Create a new data pipe.
     *
     * @param _source - The data set or data view that will be observed.
     * @param _transformers - An array of transforming functions to be used to
     * filter or transform the items in the pipe.
     * @param _target - The data set or data view that will receive the items.
     */
    function SimpleDataPipe(_source, _transformers, _target) {
      var _context, _context2, _context3;

      _classCallCheck(this, SimpleDataPipe);

      _defineProperty(this, "_source", void 0);

      _defineProperty(this, "_transformers", void 0);

      _defineProperty(this, "_target", void 0);

      _defineProperty(this, "_listeners", {
        add: bind$6(_context = this._add).call(_context, this),
        remove: bind$6(_context2 = this._remove).call(_context2, this),
        update: bind$6(_context3 = this._update).call(_context3, this)
      });

      this._source = _source;
      this._transformers = _transformers;
      this._target = _target;
    }
    /** @inheritDoc */


    _createClass(SimpleDataPipe, [{
      key: "all",
      value: function all() {
        this._target.update(this._transformItems(this._source.get()));

        return this;
      }
      /** @inheritDoc */

    }, {
      key: "start",
      value: function start() {
        this._source.on("add", this._listeners.add);

        this._source.on("remove", this._listeners.remove);

        this._source.on("update", this._listeners.update);

        return this;
      }
      /** @inheritDoc */

    }, {
      key: "stop",
      value: function stop() {
        this._source.off("add", this._listeners.add);

        this._source.off("remove", this._listeners.remove);

        this._source.off("update", this._listeners.update);

        return this;
      }
      /**
       * Apply the transformers to the items.
       *
       * @param items - The items to be transformed.
       * @returns The transformed items.
       */

    }, {
      key: "_transformItems",
      value: function _transformItems(items) {
        var _context4;

        return reduce(_context4 = this._transformers).call(_context4, function (items, transform) {
          return transform(items);
        }, items);
      }
      /**
       * Handle an add event.
       *
       * @param _name - Ignored.
       * @param payload - The payload containing the ids of the added items.
       */

    }, {
      key: "_add",
      value: function _add(_name, payload) {
        if (payload == null) {
          return;
        }

        this._target.add(this._transformItems(this._source.get(payload.items)));
      }
      /**
       * Handle an update event.
       *
       * @param _name - Ignored.
       * @param payload - The payload containing the ids of the updated items.
       */

    }, {
      key: "_update",
      value: function _update(_name, payload) {
        if (payload == null) {
          return;
        }

        this._target.update(this._transformItems(this._source.get(payload.items)));
      }
      /**
       * Handle a remove event.
       *
       * @param _name - Ignored.
       * @param payload - The payload containing the data of the removed items.
       */

    }, {
      key: "_remove",
      value: function _remove(_name, payload) {
        if (payload == null) {
          return;
        }

        this._target.remove(this._transformItems(payload.oldData));
      }
    }]);

    return SimpleDataPipe;
  }();
  /**
   * Internal implementation of the pipe factory. This should be accessible
   * only through `createNewDataPipeFrom` from the outside.
   *
   * @typeParam TI - Target item type.
   * @typeParam TP - Target item type's id property name.
   */


  var DataPipeUnderConstruction = /*#__PURE__*/function () {
    /**
     * Array transformers used to transform items within the pipe. This is typed
     * as any for the sake of simplicity.
     */

    /**
     * Create a new data pipe factory. This is an internal constructor that
     * should never be called from outside of this file.
     *
     * @param _source - The source data set or data view for this pipe.
     */
    function DataPipeUnderConstruction(_source) {
      _classCallCheck(this, DataPipeUnderConstruction);

      _defineProperty(this, "_source", void 0);

      _defineProperty(this, "_transformers", []);

      this._source = _source;
    }
    /**
     * Filter the items.
     *
     * @param callback - A filtering function that returns true if given item
     * should be piped and false if not.
     * @returns This factory for further configuration.
     */


    _createClass(DataPipeUnderConstruction, [{
      key: "filter",
      value: function filter$1(callback) {
        this._transformers.push(function (input) {
          return filter(input).call(input, callback);
        });

        return this;
      }
      /**
       * Map each source item to a new type.
       *
       * @param callback - A mapping function that takes a source item and returns
       * corresponding mapped item.
       * @typeParam TI - Target item type.
       * @typeParam TP - Target item type's id property name.
       * @returns This factory for further configuration.
       */

    }, {
      key: "map",
      value: function map(callback) {
        this._transformers.push(function (input) {
          return map$3(input).call(input, callback);
        });

        return this;
      }
      /**
       * Map each source item to zero or more items of a new type.
       *
       * @param callback - A mapping function that takes a source item and returns
       * an array of corresponding mapped items.
       * @typeParam TI - Target item type.
       * @typeParam TP - Target item type's id property name.
       * @returns This factory for further configuration.
       */

    }, {
      key: "flatMap",
      value: function flatMap$1(callback) {
        this._transformers.push(function (input) {
          return flatMap(input).call(input, callback);
        });

        return this;
      }
      /**
       * Connect this pipe to given data set.
       *
       * @param target - The data set that will receive the items from this pipe.
       * @returns The pipe connected between given data sets and performing
       * configured transformation on the processed items.
       */

    }, {
      key: "to",
      value: function to(target) {
        return new SimpleDataPipe(this._source, this._transformers, target);
      }
    }]);

    return DataPipeUnderConstruction;
  }();

  var global$o = global$M;
  var classof$a = classof$c;
  var String$2 = global$o.String;

  var toString$7 = function (argument) {
    if (classof$a(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
    return String$2(argument);
  };

  var uncurryThis$g = functionUncurryThis;
  var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
  var toString$6 = toString$7;
  var requireObjectCoercible$2 = requireObjectCoercible$5;
  var charAt$2 = uncurryThis$g(''.charAt);
  var charCodeAt$1 = uncurryThis$g(''.charCodeAt);
  var stringSlice = uncurryThis$g(''.slice);

  var createMethod$3 = function (CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = toString$6(requireObjectCoercible$2($this));
      var position = toIntegerOrInfinity$2(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
      first = charCodeAt$1(S, position);
      return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$2(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
    };
  };

  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.es/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod$3(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod$3(true)
  };

  var global$n = global$M;
  var isCallable$6 = isCallable$h;
  var inspectSource = inspectSource$2;
  var WeakMap$1 = global$n.WeakMap;
  var nativeWeakMap = isCallable$6(WeakMap$1) && /native code/.test(inspectSource(WeakMap$1));

  var shared$2 = shared$4.exports;
  var uid$2 = uid$4;
  var keys$7 = shared$2('keys');

  var sharedKey$4 = function (key) {
    return keys$7[key] || (keys$7[key] = uid$2(key));
  };

  var hiddenKeys$6 = {};

  var NATIVE_WEAK_MAP = nativeWeakMap;
  var global$m = global$M;
  var uncurryThis$f = functionUncurryThis;
  var isObject$8 = isObject$f;
  var createNonEnumerableProperty$4 = createNonEnumerableProperty$6;
  var hasOwn$b = hasOwnProperty_1;
  var shared$1 = sharedStore;
  var sharedKey$3 = sharedKey$4;
  var hiddenKeys$5 = hiddenKeys$6;
  var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
  var TypeError$b = global$m.TypeError;
  var WeakMap = global$m.WeakMap;
  var set$3, get, has;

  var enforce = function (it) {
    return has(it) ? get(it) : set$3(it, {});
  };

  var getterFor = function (TYPE) {
    return function (it) {
      var state;

      if (!isObject$8(it) || (state = get(it)).type !== TYPE) {
        throw TypeError$b('Incompatible receiver, ' + TYPE + ' required');
      }

      return state;
    };
  };

  if (NATIVE_WEAK_MAP || shared$1.state) {
    var store = shared$1.state || (shared$1.state = new WeakMap());
    var wmget = uncurryThis$f(store.get);
    var wmhas = uncurryThis$f(store.has);
    var wmset = uncurryThis$f(store.set);

    set$3 = function (it, metadata) {
      if (wmhas(store, it)) throw new TypeError$b(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      wmset(store, it, metadata);
      return metadata;
    };

    get = function (it) {
      return wmget(store, it) || {};
    };

    has = function (it) {
      return wmhas(store, it);
    };
  } else {
    var STATE = sharedKey$3('state');
    hiddenKeys$5[STATE] = true;

    set$3 = function (it, metadata) {
      if (hasOwn$b(it, STATE)) throw new TypeError$b(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty$4(it, STATE, metadata);
      return metadata;
    };

    get = function (it) {
      return hasOwn$b(it, STATE) ? it[STATE] : {};
    };

    has = function (it) {
      return hasOwn$b(it, STATE);
    };
  }

  var internalState = {
    set: set$3,
    get: get,
    has: has,
    enforce: enforce,
    getterFor: getterFor
  };

  var DESCRIPTORS$b = descriptors;
  var hasOwn$a = hasOwnProperty_1;
  var FunctionPrototype = Function.prototype; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

  var getDescriptor = DESCRIPTORS$b && Object.getOwnPropertyDescriptor;
  var EXISTS = hasOwn$a(FunctionPrototype, 'name'); // additional protection from minified / mangled / dropped function names

  var PROPER = EXISTS && function something() {
    /* empty */
  }.name === 'something';

  var CONFIGURABLE = EXISTS && (!DESCRIPTORS$b || DESCRIPTORS$b && getDescriptor(FunctionPrototype, 'name').configurable);
  var functionName = {
    EXISTS: EXISTS,
    PROPER: PROPER,
    CONFIGURABLE: CONFIGURABLE
  };

  var objectDefineProperties = {};

  var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
  var max$3 = Math.max;
  var min$1 = Math.min; // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

  var toAbsoluteIndex$5 = function (index, length) {
    var integer = toIntegerOrInfinity$1(index);
    return integer < 0 ? max$3(integer + length, 0) : min$1(integer, length);
  };

  var toIndexedObject$9 = toIndexedObject$b;
  var toAbsoluteIndex$4 = toAbsoluteIndex$5;
  var lengthOfArrayLike$8 = lengthOfArrayLike$d; // `Array.prototype.{ indexOf, includes }` methods implementation

  var createMethod$2 = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject$9($this);
      var length = lengthOfArrayLike$8(O);
      var index = toAbsoluteIndex$4(fromIndex, length);
      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare -- NaN check

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
      }
      return !IS_INCLUDES && -1;
    };
  };

  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: createMethod$2(true),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod$2(false)
  };

  var uncurryThis$e = functionUncurryThis;
  var hasOwn$9 = hasOwnProperty_1;
  var toIndexedObject$8 = toIndexedObject$b;
  var indexOf = arrayIncludes.indexOf;
  var hiddenKeys$4 = hiddenKeys$6;
  var push$4 = uncurryThis$e([].push);

  var objectKeysInternal = function (object, names) {
    var O = toIndexedObject$8(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) !hasOwn$9(hiddenKeys$4, key) && hasOwn$9(O, key) && push$4(result, key); // Don't enum bug & hidden keys


    while (names.length > i) if (hasOwn$9(O, key = names[i++])) {
      ~indexOf(result, key) || push$4(result, key);
    }

    return result;
  };

  var enumBugKeys$3 = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

  var internalObjectKeys$1 = objectKeysInternal;
  var enumBugKeys$2 = enumBugKeys$3; // `Object.keys` method
  // https://tc39.es/ecma262/#sec-object.keys
  // eslint-disable-next-line es/no-object-keys -- safe

  var objectKeys$4 = Object.keys || function keys(O) {
    return internalObjectKeys$1(O, enumBugKeys$2);
  };

  var DESCRIPTORS$a = descriptors;
  var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
  var definePropertyModule$3 = objectDefineProperty;
  var anObject$9 = anObject$b;
  var toIndexedObject$7 = toIndexedObject$b;
  var objectKeys$3 = objectKeys$4; // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  // eslint-disable-next-line es/no-object-defineproperties -- safe

  objectDefineProperties.f = DESCRIPTORS$a && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject$9(O);
    var props = toIndexedObject$7(Properties);
    var keys = objectKeys$3(Properties);
    var length = keys.length;
    var index = 0;
    var key;

    while (length > index) definePropertyModule$3.f(O, key = keys[index++], props[key]);

    return O;
  };

  var getBuiltIn$5 = getBuiltIn$9;
  var html$1 = getBuiltIn$5('document', 'documentElement');

  /* global ActiveXObject -- old IE, WSH */
  var anObject$8 = anObject$b;
  var definePropertiesModule$1 = objectDefineProperties;
  var enumBugKeys$1 = enumBugKeys$3;
  var hiddenKeys$3 = hiddenKeys$6;
  var html = html$1;
  var documentCreateElement = documentCreateElement$1;
  var sharedKey$2 = sharedKey$4;
  var GT = '>';
  var LT = '<';
  var PROTOTYPE$1 = 'prototype';
  var SCRIPT = 'script';
  var IE_PROTO$1 = sharedKey$2('IE_PROTO');

  var EmptyConstructor = function () {
    /* empty */
  };

  var scriptTag = function (content) {
    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
  }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


  var NullProtoObjectViaActiveX = function (activeXDocument) {
    activeXDocument.write(scriptTag(''));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak

    return temp;
  }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


  var NullProtoObjectViaIFrame = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var JS = 'java' + SCRIPT + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag('document.F=Object'));
    iframeDocument.close();
    return iframeDocument.F;
  }; // Check for document.domain and active x support
  // No need to use active x approach when document.domain is not set
  // see https://github.com/es-shims/es5-shim/issues/150
  // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
  // avoid IE GC bug


  var activeXDocument;

  var NullProtoObject = function () {
    try {
      activeXDocument = new ActiveXObject('htmlfile');
    } catch (error) {
      /* ignore */
    }

    NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
    : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH

    var length = enumBugKeys$1.length;

    while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length]];

    return NullProtoObject();
  };

  hiddenKeys$3[IE_PROTO$1] = true; // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create

  var objectCreate = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      EmptyConstructor[PROTOTYPE$1] = anObject$8(O);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE$1] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO$1] = O;
    } else result = NullProtoObject();

    return Properties === undefined ? result : definePropertiesModule$1.f(result, Properties);
  };

  var fails$g = fails$r;
  var correctPrototypeGetter = !fails$g(function () {
    function F() {
      /* empty */
    }

    F.prototype.constructor = null; // eslint-disable-next-line es/no-object-getprototypeof -- required for testing

    return Object.getPrototypeOf(new F()) !== F.prototype;
  });

  var global$l = global$M;
  var hasOwn$8 = hasOwnProperty_1;
  var isCallable$5 = isCallable$h;
  var toObject$9 = toObject$e;
  var sharedKey$1 = sharedKey$4;
  var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
  var IE_PROTO = sharedKey$1('IE_PROTO');
  var Object$4 = global$l.Object;
  var ObjectPrototype$2 = Object$4.prototype; // `Object.getPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.getprototypeof

  var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? Object$4.getPrototypeOf : function (O) {
    var object = toObject$9(O);
    if (hasOwn$8(object, IE_PROTO)) return object[IE_PROTO];
    var constructor = object.constructor;

    if (isCallable$5(constructor) && object instanceof constructor) {
      return constructor.prototype;
    }

    return object instanceof Object$4 ? ObjectPrototype$2 : null;
  };

  var createNonEnumerableProperty$3 = createNonEnumerableProperty$6;

  var redefine$4 = function (target, key, value, options) {
    if (options && options.enumerable) target[key] = value;else createNonEnumerableProperty$3(target, key, value);
  };

  var fails$f = fails$r;
  var isCallable$4 = isCallable$h;
  var create$a = objectCreate;
  var getPrototypeOf$6 = objectGetPrototypeOf;
  var redefine$3 = redefine$4;
  var wellKnownSymbol$d = wellKnownSymbol$j;
  var ITERATOR$5 = wellKnownSymbol$d('iterator');
  var BUGGY_SAFARI_ITERATORS$1 = false; // `%IteratorPrototype%` object
  // https://tc39.es/ecma262/#sec-%iteratorprototype%-object

  var IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;
  /* eslint-disable es/no-array-prototype-keys -- safe */

  if ([].keys) {
    arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;else {
      PrototypeOfArrayIteratorPrototype = getPrototypeOf$6(getPrototypeOf$6(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
    }
  }

  var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$1 == undefined || fails$f(function () {
    var test = {}; // FF44- legacy iterators case

    return IteratorPrototype$1[ITERATOR$5].call(test) !== test;
  });
  if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};else IteratorPrototype$1 = create$a(IteratorPrototype$1); // `%IteratorPrototype%[@@iterator]()` method
  // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator

  if (!isCallable$4(IteratorPrototype$1[ITERATOR$5])) {
    redefine$3(IteratorPrototype$1, ITERATOR$5, function () {
      return this;
    });
  }

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype$1,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
  };

  var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
  var classof$9 = classof$c; // `Object.prototype.toString` method implementation
  // https://tc39.es/ecma262/#sec-object.prototype.tostring

  var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
    return '[object ' + classof$9(this) + ']';
  };

  var TO_STRING_TAG_SUPPORT = toStringTagSupport;
  var defineProperty$6 = objectDefineProperty.f;
  var createNonEnumerableProperty$2 = createNonEnumerableProperty$6;
  var hasOwn$7 = hasOwnProperty_1;
  var toString$5 = objectToString;
  var wellKnownSymbol$c = wellKnownSymbol$j;
  var TO_STRING_TAG$1 = wellKnownSymbol$c('toStringTag');

  var setToStringTag$5 = function (it, TAG, STATIC, SET_METHOD) {
    if (it) {
      var target = STATIC ? it : it.prototype;

      if (!hasOwn$7(target, TO_STRING_TAG$1)) {
        defineProperty$6(target, TO_STRING_TAG$1, {
          configurable: true,
          value: TAG
        });
      }

      if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
        createNonEnumerableProperty$2(target, 'toString', toString$5);
      }
    }
  };

  var iterators = {};

  var IteratorPrototype = iteratorsCore.IteratorPrototype;
  var create$9 = objectCreate;
  var createPropertyDescriptor$2 = createPropertyDescriptor$5;
  var setToStringTag$4 = setToStringTag$5;
  var Iterators$5 = iterators;

  var returnThis$1 = function () {
    return this;
  };

  var createIteratorConstructor$1 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = create$9(IteratorPrototype, {
      next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next)
    });
    setToStringTag$4(IteratorConstructor, TO_STRING_TAG, false, true);
    Iterators$5[TO_STRING_TAG] = returnThis$1;
    return IteratorConstructor;
  };

  var global$k = global$M;
  var isCallable$3 = isCallable$h;
  var String$1 = global$k.String;
  var TypeError$a = global$k.TypeError;

  var aPossiblePrototype$1 = function (argument) {
    if (typeof argument == 'object' || isCallable$3(argument)) return argument;
    throw TypeError$a("Can't set " + String$1(argument) + ' as a prototype');
  };

  /* eslint-disable no-proto -- safe */
  var uncurryThis$d = functionUncurryThis;
  var anObject$7 = anObject$b;
  var aPossiblePrototype = aPossiblePrototype$1; // `Object.setPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.setprototypeof
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  // eslint-disable-next-line es/no-object-setprototypeof -- safe

  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;

    try {
      // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
      setter = uncurryThis$d(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
      setter(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) {
      /* empty */
    }

    return function setPrototypeOf(O, proto) {
      anObject$7(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER) setter(O, proto);else O.__proto__ = proto;
      return O;
    };
  }() : undefined);

  var $$w = _export;
  var call$6 = functionCall;
  var FunctionName = functionName;
  var createIteratorConstructor = createIteratorConstructor$1;
  var getPrototypeOf$5 = objectGetPrototypeOf;
  var setToStringTag$3 = setToStringTag$5;
  var redefine$2 = redefine$4;
  var wellKnownSymbol$b = wellKnownSymbol$j;
  var Iterators$4 = iterators;
  var IteratorsCore = iteratorsCore;
  var PROPER_FUNCTION_NAME$1 = FunctionName.PROPER;
  var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR$4 = wellKnownSymbol$b('iterator');
  var KEYS = 'keys';
  var VALUES = 'values';
  var ENTRIES = 'entries';

  var returnThis = function () {
    return this;
  };

  var defineIterator$3 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);

    var getIterationMethod = function (KIND) {
      if (KIND === DEFAULT && defaultIterator) return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

      switch (KIND) {
        case KEYS:
          return function keys() {
            return new IteratorConstructor(this, KIND);
          };

        case VALUES:
          return function values() {
            return new IteratorConstructor(this, KIND);
          };

        case ENTRIES:
          return function entries() {
            return new IteratorConstructor(this, KIND);
          };
      }

      return function () {
        return new IteratorConstructor(this);
      };
    };

    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$4] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY; // fix native

    if (anyNativeIterator) {
      CurrentIteratorPrototype = getPrototypeOf$5(anyNativeIterator.call(new Iterable()));

      if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {


        setToStringTag$3(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
        Iterators$4[TO_STRING_TAG] = returnThis;
      }
    } // fix Array.prototype.{ values, @@iterator }.name in V8 / FF


    if (PROPER_FUNCTION_NAME$1 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      {
        INCORRECT_VALUES_NAME = true;

        defaultIterator = function values() {
          return call$6(nativeIterator, this);
        };
      }
    } // export additional methods


    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED) for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine$2(IterablePrototype, KEY, methods[KEY]);
        }
      } else $$w({
        target: NAME,
        proto: true,
        forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
      }, methods);
    } // define iterator


    if ((FORCED) && IterablePrototype[ITERATOR$4] !== defaultIterator) {
      redefine$2(IterablePrototype, ITERATOR$4, defaultIterator, {
        name: DEFAULT
      });
    }

    Iterators$4[NAME] = defaultIterator;
    return methods;
  };

  var charAt$1 = stringMultibyte.charAt;
  var toString$4 = toString$7;
  var InternalStateModule$4 = internalState;
  var defineIterator$2 = defineIterator$3;
  var STRING_ITERATOR = 'String Iterator';
  var setInternalState$4 = InternalStateModule$4.set;
  var getInternalState$2 = InternalStateModule$4.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
  // https://tc39.es/ecma262/#sec-string.prototype-@@iterator

  defineIterator$2(String, 'String', function (iterated) {
    setInternalState$4(this, {
      type: STRING_ITERATOR,
      string: toString$4(iterated),
      index: 0
    }); // `%StringIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
  }, function next() {
    var state = getInternalState$2(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return {
      value: undefined,
      done: true
    };
    point = charAt$1(string, index);
    state.index += point.length;
    return {
      value: point,
      done: false
    };
  });

  var call$5 = functionCall;
  var anObject$6 = anObject$b;
  var getMethod$1 = getMethod$3;

  var iteratorClose$2 = function (iterator, kind, value) {
    var innerResult, innerError;
    anObject$6(iterator);

    try {
      innerResult = getMethod$1(iterator, 'return');

      if (!innerResult) {
        if (kind === 'throw') throw value;
        return value;
      }

      innerResult = call$5(innerResult, iterator);
    } catch (error) {
      innerError = true;
      innerResult = error;
    }

    if (kind === 'throw') throw value;
    if (innerError) throw innerResult;
    anObject$6(innerResult);
    return value;
  };

  var anObject$5 = anObject$b;
  var iteratorClose$1 = iteratorClose$2; // call something on iterator step with safe closing on error

  var callWithSafeIterationClosing$1 = function (iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject$5(value)[0], value[1]) : fn(value);
    } catch (error) {
      iteratorClose$1(iterator, 'throw', error);
    }
  };

  var wellKnownSymbol$a = wellKnownSymbol$j;
  var Iterators$3 = iterators;
  var ITERATOR$3 = wellKnownSymbol$a('iterator');
  var ArrayPrototype$a = Array.prototype; // check on default Array iterator

  var isArrayIteratorMethod$2 = function (it) {
    return it !== undefined && (Iterators$3.Array === it || ArrayPrototype$a[ITERATOR$3] === it);
  };

  var toPropertyKey$1 = toPropertyKey$4;
  var definePropertyModule$2 = objectDefineProperty;
  var createPropertyDescriptor$1 = createPropertyDescriptor$5;

  var createProperty$6 = function (object, key, value) {
    var propertyKey = toPropertyKey$1(key);
    if (propertyKey in object) definePropertyModule$2.f(object, propertyKey, createPropertyDescriptor$1(0, value));else object[propertyKey] = value;
  };

  var classof$8 = classof$c;
  var getMethod = getMethod$3;
  var Iterators$2 = iterators;
  var wellKnownSymbol$9 = wellKnownSymbol$j;
  var ITERATOR$2 = wellKnownSymbol$9('iterator');

  var getIteratorMethod$8 = function (it) {
    if (it != undefined) return getMethod(it, ITERATOR$2) || getMethod(it, '@@iterator') || Iterators$2[classof$8(it)];
  };

  var global$j = global$M;
  var call$4 = functionCall;
  var aCallable$1 = aCallable$7;
  var anObject$4 = anObject$b;
  var tryToString$2 = tryToString$4;
  var getIteratorMethod$7 = getIteratorMethod$8;
  var TypeError$9 = global$j.TypeError;

  var getIterator$7 = function (argument, usingIterator) {
    var iteratorMethod = arguments.length < 2 ? getIteratorMethod$7(argument) : usingIterator;
    if (aCallable$1(iteratorMethod)) return anObject$4(call$4(iteratorMethod, argument));
    throw TypeError$9(tryToString$2(argument) + ' is not iterable');
  };

  var global$i = global$M;
  var bind$3 = functionBindContext;
  var call$3 = functionCall;
  var toObject$8 = toObject$e;
  var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
  var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
  var isConstructor$2 = isConstructor$4;
  var lengthOfArrayLike$7 = lengthOfArrayLike$d;
  var createProperty$5 = createProperty$6;
  var getIterator$6 = getIterator$7;
  var getIteratorMethod$6 = getIteratorMethod$8;
  var Array$4 = global$i.Array; // `Array.from` method implementation
  // https://tc39.es/ecma262/#sec-array.from

  var arrayFrom = function from(arrayLike
  /* , mapfn = undefined, thisArg = undefined */
  ) {
    var O = toObject$8(arrayLike);
    var IS_CONSTRUCTOR = isConstructor$2(this);
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    if (mapping) mapfn = bind$3(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
    var iteratorMethod = getIteratorMethod$6(O);
    var index = 0;
    var length, result, step, iterator, next, value; // if the target is not iterable or it's an array with the default iterator - use a simple case

    if (iteratorMethod && !(this == Array$4 && isArrayIteratorMethod$1(iteratorMethod))) {
      iterator = getIterator$6(O, iteratorMethod);
      next = iterator.next;
      result = IS_CONSTRUCTOR ? new this() : [];

      for (; !(step = call$3(next, iterator)).done; index++) {
        value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
        createProperty$5(result, index, value);
      }
    } else {
      length = lengthOfArrayLike$7(O);
      result = IS_CONSTRUCTOR ? new this(length) : Array$4(length);

      for (; length > index; index++) {
        value = mapping ? mapfn(O[index], index) : O[index];
        createProperty$5(result, index, value);
      }
    }

    result.length = index;
    return result;
  };

  var wellKnownSymbol$8 = wellKnownSymbol$j;
  var ITERATOR$1 = wellKnownSymbol$8('iterator');
  var SAFE_CLOSING = false;

  try {
    var called = 0;
    var iteratorWithReturn = {
      next: function () {
        return {
          done: !!called++
        };
      },
      'return': function () {
        SAFE_CLOSING = true;
      }
    };

    iteratorWithReturn[ITERATOR$1] = function () {
      return this;
    }; // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing


    Array.from(iteratorWithReturn, function () {
      throw 2;
    });
  } catch (error) {
    /* empty */
  }

  var checkCorrectnessOfIteration$1 = function (exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;

    try {
      var object = {};

      object[ITERATOR$1] = function () {
        return {
          next: function () {
            return {
              done: ITERATION_SUPPORT = true
            };
          }
        };
      };

      exec(object);
    } catch (error) {
      /* empty */
    }

    return ITERATION_SUPPORT;
  };

  var $$v = _export;
  var from$6 = arrayFrom;
  var checkCorrectnessOfIteration = checkCorrectnessOfIteration$1;
  var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
    // eslint-disable-next-line es/no-array-from -- required for testing
    Array.from(iterable);
  }); // `Array.from` method
  // https://tc39.es/ecma262/#sec-array.from

  $$v({
    target: 'Array',
    stat: true,
    forced: INCORRECT_ITERATION
  }, {
    from: from$6
  });

  var path$l = path$q;
  var from$5 = path$l.Array.from;

  var parent$N = from$5;
  var from$4 = parent$N;

  var from$3 = from$4;

  var toIndexedObject$6 = toIndexedObject$b;
  var Iterators$1 = iterators;
  var InternalStateModule$3 = internalState;
  objectDefineProperty.f;
  var defineIterator$1 = defineIterator$3;
  var ARRAY_ITERATOR = 'Array Iterator';
  var setInternalState$3 = InternalStateModule$3.set;
  var getInternalState$1 = InternalStateModule$3.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
  // https://tc39.es/ecma262/#sec-array.prototype.entries
  // `Array.prototype.keys` method
  // https://tc39.es/ecma262/#sec-array.prototype.keys
  // `Array.prototype.values` method
  // https://tc39.es/ecma262/#sec-array.prototype.values
  // `Array.prototype[@@iterator]` method
  // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
  // `CreateArrayIterator` internal method
  // https://tc39.es/ecma262/#sec-createarrayiterator

  defineIterator$1(Array, 'Array', function (iterated, kind) {
    setInternalState$3(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject$6(iterated),
      // target
      index: 0,
      // next index
      kind: kind // kind

    }); // `%ArrayIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
  }, function () {
    var state = getInternalState$1(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;

    if (!target || index >= target.length) {
      state.target = undefined;
      return {
        value: undefined,
        done: true
      };
    }

    if (kind == 'keys') return {
      value: index,
      done: false
    };
    if (kind == 'values') return {
      value: target[index],
      done: false
    };
    return {
      value: [index, target[index]],
      done: false
    };
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
  // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
  // https://tc39.es/ecma262/#sec-createmappedargumentsobject

  Iterators$1.Arguments = Iterators$1.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  var getIteratorMethod$5 = getIteratorMethod$8;
  var getIteratorMethod_1 = getIteratorMethod$5;

  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods

  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  var DOMIterables$4 = domIterables;
  var global$h = global$M;
  var classof$7 = classof$c;
  var createNonEnumerableProperty$1 = createNonEnumerableProperty$6;
  var Iterators = iterators;
  var wellKnownSymbol$7 = wellKnownSymbol$j;
  var TO_STRING_TAG = wellKnownSymbol$7('toStringTag');

  for (var COLLECTION_NAME in DOMIterables$4) {
    var Collection = global$h[COLLECTION_NAME];
    var CollectionPrototype = Collection && Collection.prototype;

    if (CollectionPrototype && classof$7(CollectionPrototype) !== TO_STRING_TAG) {
      createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }

    Iterators[COLLECTION_NAME] = Iterators.Array;
  }

  var parent$M = getIteratorMethod_1;
  var getIteratorMethod$4 = parent$M;

  var parent$L = getIteratorMethod$4;
  var getIteratorMethod$3 = parent$L;

  var parent$K = getIteratorMethod$3;
  var getIteratorMethod$2 = parent$K;

  var getIteratorMethod$1 = getIteratorMethod$2;

  var objectGetOwnPropertyNames = {};

  var internalObjectKeys = objectKeysInternal;
  var enumBugKeys = enumBugKeys$3;
  var hiddenKeys$2 = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  // eslint-disable-next-line es/no-object-getownpropertynames -- safe

  objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys$2);
  };

  var objectGetOwnPropertyNamesExternal = {};

  var global$g = global$M;
  var toAbsoluteIndex$3 = toAbsoluteIndex$5;
  var lengthOfArrayLike$6 = lengthOfArrayLike$d;
  var createProperty$4 = createProperty$6;
  var Array$3 = global$g.Array;
  var max$2 = Math.max;

  var arraySliceSimple = function (O, start, end) {
    var length = lengthOfArrayLike$6(O);
    var k = toAbsoluteIndex$3(start, length);
    var fin = toAbsoluteIndex$3(end === undefined ? length : end, length);
    var result = Array$3(max$2(fin - k, 0));

    for (var n = 0; k < fin; k++, n++) createProperty$4(result, n, O[k]);

    result.length = n;
    return result;
  };

  /* eslint-disable es/no-object-getownpropertynames -- safe */
  var classof$6 = classofRaw$1;
  var toIndexedObject$5 = toIndexedObject$b;
  var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
  var arraySlice$3 = arraySliceSimple;
  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return $getOwnPropertyNames$1(it);
    } catch (error) {
      return arraySlice$3(windowNames);
    }
  }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


  objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
    return windowNames && classof$6(it) == 'Window' ? getWindowNames(it) : $getOwnPropertyNames$1(toIndexedObject$5(it));
  };

  var objectGetOwnPropertySymbols = {};

  objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

  var wellKnownSymbolWrapped = {};

  var wellKnownSymbol$6 = wellKnownSymbol$j;
  wellKnownSymbolWrapped.f = wellKnownSymbol$6;

  var path$k = path$q;
  var hasOwn$6 = hasOwnProperty_1;
  var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
  var defineProperty$5 = objectDefineProperty.f;

  var defineWellKnownSymbol$l = function (NAME) {
    var Symbol = path$k.Symbol || (path$k.Symbol = {});
    if (!hasOwn$6(Symbol, NAME)) defineProperty$5(Symbol, NAME, {
      value: wrappedWellKnownSymbolModule$1.f(NAME)
    });
  };

  var $$u = _export;
  var global$f = global$M;
  var getBuiltIn$4 = getBuiltIn$9;
  var apply$4 = functionApply;
  var call$2 = functionCall;
  var uncurryThis$c = functionUncurryThis;
  var DESCRIPTORS$9 = descriptors;
  var NATIVE_SYMBOL = nativeSymbol;
  var fails$e = fails$r;
  var hasOwn$5 = hasOwnProperty_1;
  var isArray$a = isArray$d;
  var isCallable$2 = isCallable$h;
  var isObject$7 = isObject$f;
  var isPrototypeOf$c = objectIsPrototypeOf;
  var isSymbol = isSymbol$3;
  var anObject$3 = anObject$b;
  var toObject$7 = toObject$e;
  var toIndexedObject$4 = toIndexedObject$b;
  var toPropertyKey = toPropertyKey$4;
  var $toString = toString$7;
  var createPropertyDescriptor = createPropertyDescriptor$5;
  var nativeObjectCreate = objectCreate;
  var objectKeys$2 = objectKeys$4;
  var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
  var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
  var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
  var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
  var definePropertyModule$1 = objectDefineProperty;
  var definePropertiesModule = objectDefineProperties;
  var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
  var arraySlice$2 = arraySlice$5;
  var redefine$1 = redefine$4;
  var shared = shared$4.exports;
  var sharedKey = sharedKey$4;
  var hiddenKeys$1 = hiddenKeys$6;
  var uid$1 = uid$4;
  var wellKnownSymbol$5 = wellKnownSymbol$j;
  var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
  var defineWellKnownSymbol$k = defineWellKnownSymbol$l;
  var setToStringTag$2 = setToStringTag$5;
  var InternalStateModule$2 = internalState;
  var $forEach$1 = arrayIteration.forEach;
  var HIDDEN = sharedKey('hidden');
  var SYMBOL = 'Symbol';
  var PROTOTYPE = 'prototype';
  var TO_PRIMITIVE = wellKnownSymbol$5('toPrimitive');
  var setInternalState$2 = InternalStateModule$2.set;
  var getInternalState = InternalStateModule$2.getterFor(SYMBOL);
  var ObjectPrototype$1 = Object[PROTOTYPE];
  var $Symbol = global$f.Symbol;
  var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
  var TypeError$8 = global$f.TypeError;
  var QObject = global$f.QObject;
  var $stringify$1 = getBuiltIn$4('JSON', 'stringify');
  var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$1.f;
  var nativeDefineProperty = definePropertyModule$1.f;
  var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
  var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
  var push$3 = uncurryThis$c([].push);
  var AllSymbols = shared('symbols');
  var ObjectPrototypeSymbols = shared('op-symbols');
  var StringToSymbolRegistry = shared('string-to-symbol-registry');
  var SymbolToStringRegistry = shared('symbol-to-string-registry');
  var WellKnownSymbolsStore = shared('wks'); // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

  var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

  var setSymbolDescriptor = DESCRIPTORS$9 && fails$e(function () {
    return nativeObjectCreate(nativeDefineProperty({}, 'a', {
      get: function () {
        return nativeDefineProperty(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
    if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
    nativeDefineProperty(O, P, Attributes);

    if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
      nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty;

  var wrap$1 = function (tag, description) {
    var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
    setInternalState$2(symbol, {
      type: SYMBOL,
      tag: tag,
      description: description
    });
    if (!DESCRIPTORS$9) symbol.description = description;
    return symbol;
  };

  var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject$3(O);
    var key = toPropertyKey(P);
    anObject$3(Attributes);

    if (hasOwn$5(AllSymbols, key)) {
      if (!Attributes.enumerable) {
        if (!hasOwn$5(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
        O[HIDDEN][key] = true;
      } else {
        if (hasOwn$5(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
        Attributes = nativeObjectCreate(Attributes, {
          enumerable: createPropertyDescriptor(0, false)
        });
      }

      return setSymbolDescriptor(O, key, Attributes);
    }

    return nativeDefineProperty(O, key, Attributes);
  };

  var $defineProperties = function defineProperties(O, Properties) {
    anObject$3(O);
    var properties = toIndexedObject$4(Properties);
    var keys = objectKeys$2(properties).concat($getOwnPropertySymbols(properties));
    $forEach$1(keys, function (key) {
      if (!DESCRIPTORS$9 || call$2($propertyIsEnumerable$1, properties, key)) $defineProperty(O, key, properties[key]);
    });
    return O;
  };

  var $create = function create(O, Properties) {
    return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
  };

  var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
    var P = toPropertyKey(V);
    var enumerable = call$2(nativePropertyIsEnumerable, this, P);
    if (this === ObjectPrototype$1 && hasOwn$5(AllSymbols, P) && !hasOwn$5(ObjectPrototypeSymbols, P)) return false;
    return enumerable || !hasOwn$5(this, P) || !hasOwn$5(AllSymbols, P) || hasOwn$5(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject$4(O);
    var key = toPropertyKey(P);
    if (it === ObjectPrototype$1 && hasOwn$5(AllSymbols, key) && !hasOwn$5(ObjectPrototypeSymbols, key)) return;
    var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);

    if (descriptor && hasOwn$5(AllSymbols, key) && !(hasOwn$5(it, HIDDEN) && it[HIDDEN][key])) {
      descriptor.enumerable = true;
    }

    return descriptor;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject$4(O));
    var result = [];
    $forEach$1(names, function (key) {
      if (!hasOwn$5(AllSymbols, key) && !hasOwn$5(hiddenKeys$1, key)) push$3(result, key);
    });
    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$4(O));
    var result = [];
    $forEach$1(names, function (key) {
      if (hasOwn$5(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$5(ObjectPrototype$1, key))) {
        push$3(result, AllSymbols[key]);
      }
    });
    return result;
  }; // `Symbol` constructor
  // https://tc39.es/ecma262/#sec-symbol-constructor


  if (!NATIVE_SYMBOL) {
    $Symbol = function Symbol() {
      if (isPrototypeOf$c(SymbolPrototype, this)) throw TypeError$8('Symbol is not a constructor');
      var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
      var tag = uid$1(description);

      var setter = function (value) {
        if (this === ObjectPrototype$1) call$2(setter, ObjectPrototypeSymbols, value);
        if (hasOwn$5(this, HIDDEN) && hasOwn$5(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
      };

      if (DESCRIPTORS$9 && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, {
        configurable: true,
        set: setter
      });
      return wrap$1(tag, description);
    };

    SymbolPrototype = $Symbol[PROTOTYPE];
    redefine$1(SymbolPrototype, 'toString', function toString() {
      return getInternalState(this).tag;
    });
    redefine$1($Symbol, 'withoutSetter', function (description) {
      return wrap$1(uid$1(description), description);
    });
    propertyIsEnumerableModule$1.f = $propertyIsEnumerable$1;
    definePropertyModule$1.f = $defineProperty;
    definePropertiesModule.f = $defineProperties;
    getOwnPropertyDescriptorModule$1.f = $getOwnPropertyDescriptor;
    getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    getOwnPropertySymbolsModule$2.f = $getOwnPropertySymbols;

    wrappedWellKnownSymbolModule.f = function (name) {
      return wrap$1(wellKnownSymbol$5(name), name);
    };

    if (DESCRIPTORS$9) {
      // https://github.com/tc39/proposal-Symbol-description
      nativeDefineProperty(SymbolPrototype, 'description', {
        configurable: true,
        get: function description() {
          return getInternalState(this).description;
        }
      });
    }
  }

  $$u({
    global: true,
    wrap: true,
    forced: !NATIVE_SYMBOL,
    sham: !NATIVE_SYMBOL
  }, {
    Symbol: $Symbol
  });
  $forEach$1(objectKeys$2(WellKnownSymbolsStore), function (name) {
    defineWellKnownSymbol$k(name);
  });
  $$u({
    target: SYMBOL,
    stat: true,
    forced: !NATIVE_SYMBOL
  }, {
    // `Symbol.for` method
    // https://tc39.es/ecma262/#sec-symbol.for
    'for': function (key) {
      var string = $toString(key);
      if (hasOwn$5(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
      var symbol = $Symbol(string);
      StringToSymbolRegistry[string] = symbol;
      SymbolToStringRegistry[symbol] = string;
      return symbol;
    },
    // `Symbol.keyFor` method
    // https://tc39.es/ecma262/#sec-symbol.keyfor
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError$8(sym + ' is not a symbol');
      if (hasOwn$5(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
    },
    useSetter: function () {
      USE_SETTER = true;
    },
    useSimple: function () {
      USE_SETTER = false;
    }
  });
  $$u({
    target: 'Object',
    stat: true,
    forced: !NATIVE_SYMBOL,
    sham: !DESCRIPTORS$9
  }, {
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    create: $create,
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    defineProperty: $defineProperty,
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    defineProperties: $defineProperties,
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });
  $$u({
    target: 'Object',
    stat: true,
    forced: !NATIVE_SYMBOL
  }, {
    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    getOwnPropertyNames: $getOwnPropertyNames,
    // `Object.getOwnPropertySymbols` method
    // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
    getOwnPropertySymbols: $getOwnPropertySymbols
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443

  $$u({
    target: 'Object',
    stat: true,
    forced: fails$e(function () {
      getOwnPropertySymbolsModule$2.f(1);
    })
  }, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return getOwnPropertySymbolsModule$2.f(toObject$7(it));
    }
  }); // `JSON.stringify` method behavior with symbols
  // https://tc39.es/ecma262/#sec-json.stringify

  if ($stringify$1) {
    var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails$e(function () {
      var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

      return $stringify$1([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
      || $stringify$1({
        a: symbol
      }) != '{}' // V8 throws on boxed symbols
      || $stringify$1(Object(symbol)) != '{}';
    });
    $$u({
      target: 'JSON',
      stat: true,
      forced: FORCED_JSON_STRINGIFY
    }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      stringify: function stringify(it, replacer, space) {
        var args = arraySlice$2(arguments);
        var $replacer = replacer;
        if (!isObject$7(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

        if (!isArray$a(replacer)) replacer = function (key, value) {
          if (isCallable$2($replacer)) value = call$2($replacer, this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return apply$4($stringify$1, null, args);
      }
    });
  } // `Symbol.prototype[@@toPrimitive]` method
  // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive


  if (!SymbolPrototype[TO_PRIMITIVE]) {
    var valueOf = SymbolPrototype.valueOf; // eslint-disable-next-line no-unused-vars -- required for .length

    redefine$1(SymbolPrototype, TO_PRIMITIVE, function (hint) {
      // TODO: improve hint logic
      return call$2(valueOf, this);
    });
  } // `Symbol.prototype[@@toStringTag]` property
  // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag


  setToStringTag$2($Symbol, SYMBOL);
  hiddenKeys$1[HIDDEN] = true;

  var path$j = path$q;
  var getOwnPropertySymbols$2 = path$j.Object.getOwnPropertySymbols;

  var parent$J = getOwnPropertySymbols$2;
  var getOwnPropertySymbols$1 = parent$J;

  var getOwnPropertySymbols = getOwnPropertySymbols$1;

  var getOwnPropertyDescriptor$3 = {exports: {}};

  var $$t = _export;
  var fails$d = fails$r;
  var toIndexedObject$3 = toIndexedObject$b;
  var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
  var DESCRIPTORS$8 = descriptors;
  var FAILS_ON_PRIMITIVES$3 = fails$d(function () {
    nativeGetOwnPropertyDescriptor(1);
  });
  var FORCED$5 = !DESCRIPTORS$8 || FAILS_ON_PRIMITIVES$3; // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

  $$t({
    target: 'Object',
    stat: true,
    forced: FORCED$5,
    sham: !DESCRIPTORS$8
  }, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
      return nativeGetOwnPropertyDescriptor(toIndexedObject$3(it), key);
    }
  });

  var path$i = path$q;
  var Object$3 = path$i.Object;

  var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor$3.exports = function getOwnPropertyDescriptor(it, key) {
    return Object$3.getOwnPropertyDescriptor(it, key);
  };

  if (Object$3.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor$2.sham = true;

  var parent$I = getOwnPropertyDescriptor$3.exports;
  var getOwnPropertyDescriptor$1 = parent$I;

  var getOwnPropertyDescriptor = getOwnPropertyDescriptor$1;

  var getBuiltIn$3 = getBuiltIn$9;
  var uncurryThis$b = functionUncurryThis;
  var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
  var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
  var anObject$2 = anObject$b;
  var concat$5 = uncurryThis$b([].concat); // all object keys, includes non-enumerable and symbols

  var ownKeys$6 = getBuiltIn$3('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = getOwnPropertyNamesModule$1.f(anObject$2(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
    return getOwnPropertySymbols ? concat$5(keys, getOwnPropertySymbols(it)) : keys;
  };

  var $$s = _export;
  var DESCRIPTORS$7 = descriptors;
  var ownKeys$5 = ownKeys$6;
  var toIndexedObject$2 = toIndexedObject$b;
  var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
  var createProperty$3 = createProperty$6; // `Object.getOwnPropertyDescriptors` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors

  $$s({
    target: 'Object',
    stat: true,
    sham: !DESCRIPTORS$7
  }, {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = toIndexedObject$2(object);
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var keys = ownKeys$5(O);
      var result = {};
      var index = 0;
      var key, descriptor;

      while (keys.length > index) {
        descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
        if (descriptor !== undefined) createProperty$3(result, key, descriptor);
      }

      return result;
    }
  });

  var path$h = path$q;
  var getOwnPropertyDescriptors$2 = path$h.Object.getOwnPropertyDescriptors;

  var parent$H = getOwnPropertyDescriptors$2;
  var getOwnPropertyDescriptors$1 = parent$H;

  var getOwnPropertyDescriptors = getOwnPropertyDescriptors$1;

  var defineProperties$4 = {exports: {}};

  var $$r = _export;
  var DESCRIPTORS$6 = descriptors;
  var defineProperties$3 = objectDefineProperties.f; // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  // eslint-disable-next-line es/no-object-defineproperties -- safe

  $$r({
    target: 'Object',
    stat: true,
    forced: Object.defineProperties !== defineProperties$3,
    sham: !DESCRIPTORS$6
  }, {
    defineProperties: defineProperties$3
  });

  var path$g = path$q;
  var Object$2 = path$g.Object;

  var defineProperties$2 = defineProperties$4.exports = function defineProperties(T, D) {
    return Object$2.defineProperties(T, D);
  };

  if (Object$2.defineProperties.sham) defineProperties$2.sham = true;

  var parent$G = defineProperties$4.exports;
  var defineProperties$1 = parent$G;

  var defineProperties = defineProperties$1;

  var defineProperty$4 = defineProperty$a;

  var $$q = _export;
  var isArray$9 = isArray$d; // `Array.isArray` method
  // https://tc39.es/ecma262/#sec-array.isarray

  $$q({
    target: 'Array',
    stat: true
  }, {
    isArray: isArray$9
  });

  var path$f = path$q;
  var isArray$8 = path$f.Array.isArray;

  var parent$F = isArray$8;
  var isArray$7 = parent$F;

  var parent$E = isArray$7;
  var isArray$6 = parent$E;

  var parent$D = isArray$6;
  var isArray$5 = parent$D;

  var isArray$4 = isArray$5;

  function _arrayWithHoles(arr) {
    if (isArray$4(arr)) return arr;
  }

  var $$p = _export;
  var global$e = global$M;
  var fails$c = fails$r;
  var isArray$3 = isArray$d;
  var isObject$6 = isObject$f;
  var toObject$6 = toObject$e;
  var lengthOfArrayLike$5 = lengthOfArrayLike$d;
  var createProperty$2 = createProperty$6;
  var arraySpeciesCreate$1 = arraySpeciesCreate$4;
  var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
  var wellKnownSymbol$4 = wellKnownSymbol$j;
  var V8_VERSION = engineV8Version;
  var IS_CONCAT_SPREADABLE = wellKnownSymbol$4('isConcatSpreadable');
  var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
  var TypeError$7 = global$e.TypeError; // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/679

  var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$c(function () {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });
  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$2('concat');

  var isConcatSpreadable = function (O) {
    if (!isObject$6(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray$3(O);
  };

  var FORCED$4 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
  // https://tc39.es/ecma262/#sec-array.prototype.concat
  // with adding support of @@isConcatSpreadable and @@species

  $$p({
    target: 'Array',
    proto: true,
    forced: FORCED$4
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    concat: function concat(arg) {
      var O = toObject$6(this);
      var A = arraySpeciesCreate$1(O, 0);
      var n = 0;
      var i, k, length, len, E;

      for (i = -1, length = arguments.length; i < length; i++) {
        E = i === -1 ? O : arguments[i];

        if (isConcatSpreadable(E)) {
          len = lengthOfArrayLike$5(E);
          if (n + len > MAX_SAFE_INTEGER$1) throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

          for (k = 0; k < len; k++, n++) if (k in E) createProperty$2(A, n, E[k]);
        } else {
          if (n >= MAX_SAFE_INTEGER$1) throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty$2(A, n++, E);
        }
      }

      A.length = n;
      return A;
    }
  });

  var defineWellKnownSymbol$j = defineWellKnownSymbol$l; // `Symbol.asyncIterator` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.asynciterator

  defineWellKnownSymbol$j('asyncIterator');

  var defineWellKnownSymbol$i = defineWellKnownSymbol$l; // `Symbol.hasInstance` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.hasinstance

  defineWellKnownSymbol$i('hasInstance');

  var defineWellKnownSymbol$h = defineWellKnownSymbol$l; // `Symbol.isConcatSpreadable` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable

  defineWellKnownSymbol$h('isConcatSpreadable');

  var defineWellKnownSymbol$g = defineWellKnownSymbol$l; // `Symbol.iterator` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.iterator

  defineWellKnownSymbol$g('iterator');

  var defineWellKnownSymbol$f = defineWellKnownSymbol$l; // `Symbol.match` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.match

  defineWellKnownSymbol$f('match');

  var defineWellKnownSymbol$e = defineWellKnownSymbol$l; // `Symbol.matchAll` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.matchall

  defineWellKnownSymbol$e('matchAll');

  var defineWellKnownSymbol$d = defineWellKnownSymbol$l; // `Symbol.replace` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.replace

  defineWellKnownSymbol$d('replace');

  var defineWellKnownSymbol$c = defineWellKnownSymbol$l; // `Symbol.search` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.search

  defineWellKnownSymbol$c('search');

  var defineWellKnownSymbol$b = defineWellKnownSymbol$l; // `Symbol.species` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.species

  defineWellKnownSymbol$b('species');

  var defineWellKnownSymbol$a = defineWellKnownSymbol$l; // `Symbol.split` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.split

  defineWellKnownSymbol$a('split');

  var defineWellKnownSymbol$9 = defineWellKnownSymbol$l; // `Symbol.toPrimitive` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.toprimitive

  defineWellKnownSymbol$9('toPrimitive');

  var defineWellKnownSymbol$8 = defineWellKnownSymbol$l; // `Symbol.toStringTag` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.tostringtag

  defineWellKnownSymbol$8('toStringTag');

  var defineWellKnownSymbol$7 = defineWellKnownSymbol$l; // `Symbol.unscopables` well-known symbol
  // https://tc39.es/ecma262/#sec-symbol.unscopables

  defineWellKnownSymbol$7('unscopables');

  var global$d = global$M;
  var setToStringTag$1 = setToStringTag$5; // JSON[@@toStringTag] property
  // https://tc39.es/ecma262/#sec-json-@@tostringtag

  setToStringTag$1(global$d.JSON, 'JSON', true);

  var path$e = path$q;
  var symbol$5 = path$e.Symbol;

  var parent$C = symbol$5;
  var symbol$4 = parent$C;

  var parent$B = symbol$4;
  var symbol$3 = parent$B;

  var defineWellKnownSymbol$6 = defineWellKnownSymbol$l; // `Symbol.asyncDispose` well-known symbol
  // https://github.com/tc39/proposal-using-statement

  defineWellKnownSymbol$6('asyncDispose');

  var defineWellKnownSymbol$5 = defineWellKnownSymbol$l; // `Symbol.dispose` well-known symbol
  // https://github.com/tc39/proposal-using-statement

  defineWellKnownSymbol$5('dispose');

  var defineWellKnownSymbol$4 = defineWellKnownSymbol$l; // `Symbol.matcher` well-known symbol
  // https://github.com/tc39/proposal-pattern-matching

  defineWellKnownSymbol$4('matcher');

  var defineWellKnownSymbol$3 = defineWellKnownSymbol$l; // `Symbol.metadata` well-known symbol
  // https://github.com/tc39/proposal-decorators

  defineWellKnownSymbol$3('metadata');

  var defineWellKnownSymbol$2 = defineWellKnownSymbol$l; // `Symbol.observable` well-known symbol
  // https://github.com/tc39/proposal-observable

  defineWellKnownSymbol$2('observable');

  var defineWellKnownSymbol$1 = defineWellKnownSymbol$l; // `Symbol.patternMatch` well-known symbol
  // https://github.com/tc39/proposal-pattern-matching

  defineWellKnownSymbol$1('patternMatch');

  var defineWellKnownSymbol = defineWellKnownSymbol$l;
  defineWellKnownSymbol('replaceAll');

  var parent$A = symbol$3; // TODO: Remove from `core-js@4`
  // TODO: Remove from `core-js@4`

  var symbol$2 = parent$A;

  var symbol$1 = symbol$2;

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof symbol$1 !== "undefined" && getIteratorMethod$1(arr) || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  var $$o = _export;
  var global$c = global$M;
  var isArray$2 = isArray$d;
  var isConstructor$1 = isConstructor$4;
  var isObject$5 = isObject$f;
  var toAbsoluteIndex$2 = toAbsoluteIndex$5;
  var lengthOfArrayLike$4 = lengthOfArrayLike$d;
  var toIndexedObject$1 = toIndexedObject$b;
  var createProperty$1 = createProperty$6;
  var wellKnownSymbol$3 = wellKnownSymbol$j;
  var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
  var un$Slice = arraySlice$5;
  var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('slice');
  var SPECIES$1 = wellKnownSymbol$3('species');
  var Array$2 = global$c.Array;
  var max$1 = Math.max; // `Array.prototype.slice` method
  // https://tc39.es/ecma262/#sec-array.prototype.slice
  // fallback for not array-like ES3 strings and DOM objects

  $$o({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT$1
  }, {
    slice: function slice(start, end) {
      var O = toIndexedObject$1(this);
      var length = lengthOfArrayLike$4(O);
      var k = toAbsoluteIndex$2(start, length);
      var fin = toAbsoluteIndex$2(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

      var Constructor, result, n;

      if (isArray$2(O)) {
        Constructor = O.constructor; // cross-realm fallback

        if (isConstructor$1(Constructor) && (Constructor === Array$2 || isArray$2(Constructor.prototype))) {
          Constructor = undefined;
        } else if (isObject$5(Constructor)) {
          Constructor = Constructor[SPECIES$1];
          if (Constructor === null) Constructor = undefined;
        }

        if (Constructor === Array$2 || Constructor === undefined) {
          return un$Slice(O, k, fin);
        }
      }

      result = new (Constructor === undefined ? Array$2 : Constructor)(max$1(fin - k, 0));

      for (n = 0; k < fin; k++, n++) if (k in O) createProperty$1(result, n, O[k]);

      result.length = n;
      return result;
    }
  });

  var entryVirtual$e = entryVirtual$k;
  var slice$6 = entryVirtual$e('Array').slice;

  var isPrototypeOf$b = objectIsPrototypeOf;
  var method$9 = slice$6;
  var ArrayPrototype$9 = Array.prototype;

  var slice$5 = function (it) {
    var own = it.slice;
    return it === ArrayPrototype$9 || isPrototypeOf$b(ArrayPrototype$9, it) && own === ArrayPrototype$9.slice ? method$9 : own;
  };

  var parent$z = slice$5;
  var slice$4 = parent$z;

  var parent$y = slice$4;
  var slice$3 = parent$y;

  var parent$x = slice$3;
  var slice$2 = parent$x;

  var slice$1 = slice$2;

  var parent$w = from$4;
  var from$2 = parent$w;

  var parent$v = from$2;
  var from$1 = parent$v;

  var from = from$1;

  function _arrayLikeToArray$4(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray$4(o, minLen) {
    var _context;

    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);

    var n = slice$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);

    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest();
  }

  var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
  var iterator$5 = WrappedWellKnownSymbolModule.f('iterator');

  var parent$u = iterator$5;
  var iterator$4 = parent$u;

  var parent$t = iterator$4;
  var iterator$3 = parent$t;

  var parent$s = iterator$3;
  var iterator$2 = parent$s;

  var iterator$1 = iterator$2;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof symbol$1 && "symbol" == typeof iterator$1 ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof symbol$1 && obj.constructor === symbol$1 && obj !== symbol$1.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _arrayWithoutHoles(arr) {
    if (isArray$4(arr)) return _arrayLikeToArray$4(arr);
  }

  function _iterableToArray(iter) {
    if (typeof symbol$1 !== "undefined" && getIteratorMethod$1(iter) != null || iter["@@iterator"] != null) return from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
  }

  var symbol = symbol$4;

  var entryVirtual$d = entryVirtual$k;
  var concat$4 = entryVirtual$d('Array').concat;

  var isPrototypeOf$a = objectIsPrototypeOf;
  var method$8 = concat$4;
  var ArrayPrototype$8 = Array.prototype;

  var concat$3 = function (it) {
    var own = it.concat;
    return it === ArrayPrototype$8 || isPrototypeOf$a(ArrayPrototype$8, it) && own === ArrayPrototype$8.concat ? method$8 : own;
  };

  var parent$r = concat$3;
  var concat$2 = parent$r;

  var concat$1 = concat$2;

  var slice = slice$4;

  var $$n = _export;
  var ownKeys$4 = ownKeys$6; // `Reflect.ownKeys` method
  // https://tc39.es/ecma262/#sec-reflect.ownkeys

  $$n({
    target: 'Reflect',
    stat: true
  }, {
    ownKeys: ownKeys$4
  });

  var path$d = path$q;
  var ownKeys$3 = path$d.Reflect.ownKeys;

  var parent$q = ownKeys$3;
  var ownKeys$2 = parent$q;

  var ownKeys$1 = ownKeys$2;

  var isArray$1 = isArray$7;

  var $$m = _export;
  var toObject$5 = toObject$e;
  var nativeKeys = objectKeys$4;
  var fails$b = fails$r;
  var FAILS_ON_PRIMITIVES$2 = fails$b(function () {
    nativeKeys(1);
  }); // `Object.keys` method
  // https://tc39.es/ecma262/#sec-object.keys

  $$m({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$2
  }, {
    keys: function keys(it) {
      return nativeKeys(toObject$5(it));
    }
  });

  var path$c = path$q;
  var keys$6 = path$c.Object.keys;

  var parent$p = keys$6;
  var keys$5 = parent$p;

  var keys$4 = keys$5;

  var $$l = _export;
  var global$b = global$M;
  var uncurryThis$a = functionUncurryThis;
  var Date$1 = global$b.Date;
  var getTime = uncurryThis$a(Date$1.prototype.getTime); // `Date.now` method
  // https://tc39.es/ecma262/#sec-date.now

  $$l({
    target: 'Date',
    stat: true
  }, {
    now: function now() {
      return getTime(new Date$1());
    }
  });

  var path$b = path$q;
  path$b.Date.now;

  var $forEach = arrayIteration.forEach;
  var arrayMethodIsStrict$3 = arrayMethodIsStrict$5;
  var STRICT_METHOD$3 = arrayMethodIsStrict$3('forEach'); // `Array.prototype.forEach` method implementation
  // https://tc39.es/ecma262/#sec-array.prototype.foreach

  var arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn
  /* , thisArg */
  ) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // eslint-disable-next-line es/no-array-prototype-foreach -- safe
  } : [].forEach;

  var $$k = _export;
  var forEach$5 = arrayForEach; // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  // eslint-disable-next-line es/no-array-prototype-foreach -- safe

  $$k({
    target: 'Array',
    proto: true,
    forced: [].forEach != forEach$5
  }, {
    forEach: forEach$5
  });

  var entryVirtual$c = entryVirtual$k;
  var forEach$4 = entryVirtual$c('Array').forEach;

  var parent$o = forEach$4;
  var forEach$3 = parent$o;

  var classof$5 = classof$c;
  var hasOwn$4 = hasOwnProperty_1;
  var isPrototypeOf$9 = objectIsPrototypeOf;
  var method$7 = forEach$3;
  var ArrayPrototype$7 = Array.prototype;
  var DOMIterables$3 = {
    DOMTokenList: true,
    NodeList: true
  };

  var forEach$2 = function (it) {
    var own = it.forEach;
    return it === ArrayPrototype$7 || isPrototypeOf$9(ArrayPrototype$7, it) && own === ArrayPrototype$7.forEach || hasOwn$4(DOMIterables$3, classof$5(it)) ? method$7 : own;
  };

  var forEach$1 = forEach$2;

  var $$j = _export;
  var uncurryThis$9 = functionUncurryThis;
  var isArray = isArray$d;
  var un$Reverse = uncurryThis$9([].reverse);
  var test$1 = [1, 2]; // `Array.prototype.reverse` method
  // https://tc39.es/ecma262/#sec-array.prototype.reverse
  // fix for Safari 12.0 bug
  // https://bugs.webkit.org/show_bug.cgi?id=188794

  $$j({
    target: 'Array',
    proto: true,
    forced: String(test$1) === String(test$1.reverse())
  }, {
    reverse: function reverse() {
      // eslint-disable-next-line no-self-assign -- dirty hack
      if (isArray(this)) this.length = this.length;
      return un$Reverse(this);
    }
  });

  var entryVirtual$b = entryVirtual$k;
  var reverse$3 = entryVirtual$b('Array').reverse;

  var isPrototypeOf$8 = objectIsPrototypeOf;
  var method$6 = reverse$3;
  var ArrayPrototype$6 = Array.prototype;

  var reverse$2 = function (it) {
    var own = it.reverse;
    return it === ArrayPrototype$6 || isPrototypeOf$8(ArrayPrototype$6, it) && own === ArrayPrototype$6.reverse ? method$6 : own;
  };

  var parent$n = reverse$2;
  var reverse$1 = parent$n;

  var reverse = reverse$1;

  var $$i = _export;
  var global$a = global$M;
  var toAbsoluteIndex$1 = toAbsoluteIndex$5;
  var toIntegerOrInfinity = toIntegerOrInfinity$4;
  var lengthOfArrayLike$3 = lengthOfArrayLike$d;
  var toObject$4 = toObject$e;
  var arraySpeciesCreate = arraySpeciesCreate$4;
  var createProperty = createProperty$6;
  var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
  var TypeError$6 = global$a.TypeError;
  var max = Math.max;
  var min = Math.min;
  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
  // https://tc39.es/ecma262/#sec-array.prototype.splice
  // with adding support of @@species

  $$i({
    target: 'Array',
    proto: true,
    forced: !HAS_SPECIES_SUPPORT
  }, {
    splice: function splice(start, deleteCount
    /* , ...items */
    ) {
      var O = toObject$4(this);
      var len = lengthOfArrayLike$3(O);
      var actualStart = toAbsoluteIndex$1(start, len);
      var argumentsLength = arguments.length;
      var insertCount, actualDeleteCount, A, k, from, to;

      if (argumentsLength === 0) {
        insertCount = actualDeleteCount = 0;
      } else if (argumentsLength === 1) {
        insertCount = 0;
        actualDeleteCount = len - actualStart;
      } else {
        insertCount = argumentsLength - 2;
        actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
      }

      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
        throw TypeError$6(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
      }

      A = arraySpeciesCreate(O, actualDeleteCount);

      for (k = 0; k < actualDeleteCount; k++) {
        from = actualStart + k;
        if (from in O) createProperty(A, k, O[from]);
      }

      A.length = actualDeleteCount;

      if (insertCount < actualDeleteCount) {
        for (k = actualStart; k < len - actualDeleteCount; k++) {
          from = k + actualDeleteCount;
          to = k + insertCount;
          if (from in O) O[to] = O[from];else delete O[to];
        }

        for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
      } else if (insertCount > actualDeleteCount) {
        for (k = len - actualDeleteCount; k > actualStart; k--) {
          from = k + actualDeleteCount - 1;
          to = k + insertCount - 1;
          if (from in O) O[to] = O[from];else delete O[to];
        }
      }

      for (k = 0; k < insertCount; k++) {
        O[k + actualStart] = arguments[k + 2];
      }

      O.length = len - actualDeleteCount + insertCount;
      return A;
    }
  });

  var entryVirtual$a = entryVirtual$k;
  var splice$3 = entryVirtual$a('Array').splice;

  var isPrototypeOf$7 = objectIsPrototypeOf;
  var method$5 = splice$3;
  var ArrayPrototype$5 = Array.prototype;

  var splice$2 = function (it) {
    var own = it.splice;
    return it === ArrayPrototype$5 || isPrototypeOf$7(ArrayPrototype$5, it) && own === ArrayPrototype$5.splice ? method$5 : own;
  };

  var parent$m = splice$2;
  var splice$1 = parent$m;

  var splice = splice$1;

  var DESCRIPTORS$5 = descriptors;
  var uncurryThis$8 = functionUncurryThis;
  var call$1 = functionCall;
  var fails$a = fails$r;
  var objectKeys$1 = objectKeys$4;
  var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
  var propertyIsEnumerableModule = objectPropertyIsEnumerable;
  var toObject$3 = toObject$e;
  var IndexedObject = indexedObject; // eslint-disable-next-line es/no-object-assign -- safe

  var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing

  var defineProperty$3 = Object.defineProperty;
  var concat = uncurryThis$8([].concat); // `Object.assign` method
  // https://tc39.es/ecma262/#sec-object.assign

  var objectAssign = !$assign || fails$a(function () {
    // should have correct order of operations (Edge bug)
    if (DESCRIPTORS$5 && $assign({
      b: 1
    }, $assign(defineProperty$3({}, 'a', {
      enumerable: true,
      get: function () {
        defineProperty$3(this, 'b', {
          value: 3,
          enumerable: false
        });
      }
    }), {
      b: 2
    })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

    var A = {};
    var B = {}; // eslint-disable-next-line es/no-symbol -- safe

    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function (chr) {
      B[chr] = chr;
    });
    return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join('') != alphabet;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars -- required for `.length`
    var T = toObject$3(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    var propertyIsEnumerable = propertyIsEnumerableModule.f;

    while (argumentsLength > index) {
      var S = IndexedObject(arguments[index++]);
      var keys = getOwnPropertySymbols ? concat(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
      var length = keys.length;
      var j = 0;
      var key;

      while (length > j) {
        key = keys[j++];
        if (!DESCRIPTORS$5 || call$1(propertyIsEnumerable, S, key)) T[key] = S[key];
      }
    }

    return T;
  } : $assign;

  var $$h = _export;
  var assign$5 = objectAssign; // `Object.assign` method
  // https://tc39.es/ecma262/#sec-object.assign
  // eslint-disable-next-line es/no-object-assign -- required for testing

  $$h({
    target: 'Object',
    stat: true,
    forced: Object.assign !== assign$5
  }, {
    assign: assign$5
  });

  var path$a = path$q;
  var assign$4 = path$a.Object.assign;

  var parent$l = assign$4;
  var assign$3 = parent$l;

  var assign$2 = assign$3;

  var $$g = _export;
  var $includes = arrayIncludes.includes;
  // https://tc39.es/ecma262/#sec-array.prototype.includes

  $$g({
    target: 'Array',
    proto: true
  }, {
    includes: function includes(el
    /* , fromIndex = 0 */
    ) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  var entryVirtual$9 = entryVirtual$k;
  entryVirtual$9('Array').includes;

  var isObject$4 = isObject$f;
  var classof$4 = classofRaw$1;
  var wellKnownSymbol$2 = wellKnownSymbol$j;
  var MATCH$1 = wellKnownSymbol$2('match'); // `IsRegExp` abstract operation
  // https://tc39.es/ecma262/#sec-isregexp

  var isRegexp = function (it) {
    var isRegExp;
    return isObject$4(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$4(it) == 'RegExp');
  };

  var global$9 = global$M;
  var isRegExp = isRegexp;
  var TypeError$5 = global$9.TypeError;

  var notARegexp = function (it) {
    if (isRegExp(it)) {
      throw TypeError$5("The method doesn't accept regular expressions");
    }

    return it;
  };

  var wellKnownSymbol$1 = wellKnownSymbol$j;
  var MATCH = wellKnownSymbol$1('match');

  var correctIsRegexpLogic = function (METHOD_NAME) {
    var regexp = /./;

    try {
      '/./'[METHOD_NAME](regexp);
    } catch (error1) {
      try {
        regexp[MATCH] = false;
        return '/./'[METHOD_NAME](regexp);
      } catch (error2) {
        /* empty */
      }
    }

    return false;
  };

  var $$f = _export;
  var uncurryThis$7 = functionUncurryThis;
  var notARegExp = notARegexp;
  var requireObjectCoercible$1 = requireObjectCoercible$5;
  var toString$3 = toString$7;
  var correctIsRegExpLogic = correctIsRegexpLogic;
  var stringIndexOf = uncurryThis$7(''.indexOf); // `String.prototype.includes` method
  // https://tc39.es/ecma262/#sec-string.prototype.includes

  $$f({
    target: 'String',
    proto: true,
    forced: !correctIsRegExpLogic('includes')
  }, {
    includes: function includes(searchString
    /* , position = 0 */
    ) {
      return !!~stringIndexOf(toString$3(requireObjectCoercible$1(this)), toString$3(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var entryVirtual$8 = entryVirtual$k;
  entryVirtual$8('String').includes;

  var $$e = _export;
  var fails$9 = fails$r;
  var toObject$2 = toObject$e;
  var nativeGetPrototypeOf = objectGetPrototypeOf;
  var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
  var FAILS_ON_PRIMITIVES$1 = fails$9(function () {
    nativeGetPrototypeOf(1);
  }); // `Object.getPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.getprototypeof

  $$e({
    target: 'Object',
    stat: true,
    forced: FAILS_ON_PRIMITIVES$1,
    sham: !CORRECT_PROTOTYPE_GETTER
  }, {
    getPrototypeOf: function getPrototypeOf(it) {
      return nativeGetPrototypeOf(toObject$2(it));
    }
  });

  var path$9 = path$q;
  var getPrototypeOf$4 = path$9.Object.getPrototypeOf;

  var parent$k = getPrototypeOf$4;
  var getPrototypeOf$3 = parent$k;

  var DESCRIPTORS$4 = descriptors;
  var uncurryThis$6 = functionUncurryThis;
  var objectKeys = objectKeys$4;
  var toIndexedObject = toIndexedObject$b;
  var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
  var propertyIsEnumerable = uncurryThis$6($propertyIsEnumerable);
  var push$2 = uncurryThis$6([].push); // `Object.{ entries, values }` methods implementation

  var createMethod$1 = function (TO_ENTRIES) {
    return function (it) {
      var O = toIndexedObject(it);
      var keys = objectKeys(O);
      var length = keys.length;
      var i = 0;
      var result = [];
      var key;

      while (length > i) {
        key = keys[i++];

        if (!DESCRIPTORS$4 || propertyIsEnumerable(O, key)) {
          push$2(result, TO_ENTRIES ? [key, O[key]] : O[key]);
        }
      }

      return result;
    };
  };

  var objectToArray = {
    // `Object.entries` method
    // https://tc39.es/ecma262/#sec-object.entries
    entries: createMethod$1(true),
    // `Object.values` method
    // https://tc39.es/ecma262/#sec-object.values
    values: createMethod$1(false)
  };

  var $$d = _export;
  var $values = objectToArray.values; // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values

  $$d({
    target: 'Object',
    stat: true
  }, {
    values: function values(O) {
      return $values(O);
    }
  });

  var path$8 = path$q;
  path$8.Object.values;

  var whitespaces$3 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' + '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var uncurryThis$5 = functionUncurryThis;
  var requireObjectCoercible = requireObjectCoercible$5;
  var toString$2 = toString$7;
  var whitespaces$2 = whitespaces$3;
  var replace$1 = uncurryThis$5(''.replace);
  var whitespace = '[' + whitespaces$2 + ']';
  var ltrim = RegExp('^' + whitespace + whitespace + '*');
  var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

  var createMethod = function (TYPE) {
    return function ($this) {
      var string = toString$2(requireObjectCoercible($this));
      if (TYPE & 1) string = replace$1(string, ltrim, '');
      if (TYPE & 2) string = replace$1(string, rtrim, '');
      return string;
    };
  };

  var stringTrim = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimstart
    start: createMethod(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.es/ecma262/#sec-string.prototype.trimend
    end: createMethod(2),
    // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    trim: createMethod(3)
  };

  var global$8 = global$M;
  var fails$8 = fails$r;
  var uncurryThis$4 = functionUncurryThis;
  var toString$1 = toString$7;
  var trim = stringTrim.trim;
  var whitespaces$1 = whitespaces$3;
  var $parseInt$1 = global$8.parseInt;
  var Symbol$1 = global$8.Symbol;
  var ITERATOR = Symbol$1 && Symbol$1.iterator;
  var hex = /^[+-]?0x/i;
  var exec$1 = uncurryThis$4(hex.exec);
  var FORCED$3 = $parseInt$1(whitespaces$1 + '08') !== 8 || $parseInt$1(whitespaces$1 + '0x16') !== 22 // MS Edge 18- broken with boxed symbols
  || ITERATOR && !fails$8(function () {
    $parseInt$1(Object(ITERATOR));
  }); // `parseInt` method
  // https://tc39.es/ecma262/#sec-parseint-string-radix

  var numberParseInt = FORCED$3 ? function parseInt(string, radix) {
    var S = trim(toString$1(string));
    return $parseInt$1(S, radix >>> 0 || (exec$1(hex, S) ? 16 : 10));
  } : $parseInt$1;

  var $$c = _export;
  var $parseInt = numberParseInt; // `parseInt` method
  // https://tc39.es/ecma262/#sec-parseint-string-radix

  $$c({
    global: true,
    forced: parseInt != $parseInt
  }, {
    parseInt: $parseInt
  });

  var path$7 = path$q;
  path$7.parseInt;

  /* eslint-disable es/no-array-prototype-indexof -- required for testing */


  var $$b = _export;
  var uncurryThis$3 = functionUncurryThis;
  var $IndexOf = arrayIncludes.indexOf;
  var arrayMethodIsStrict$2 = arrayMethodIsStrict$5;
  var un$IndexOf = uncurryThis$3([].indexOf);
  var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
  var STRICT_METHOD$2 = arrayMethodIsStrict$2('indexOf'); // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof

  $$b({
    target: 'Array',
    proto: true,
    forced: NEGATIVE_ZERO || !STRICT_METHOD$2
  }, {
    indexOf: function indexOf(searchElement
    /* , fromIndex = 0 */
    ) {
      var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
      return NEGATIVE_ZERO // convert -0 to +0
      ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
    }
  });

  var entryVirtual$7 = entryVirtual$k;
  entryVirtual$7('Array').indexOf;

  var PROPER_FUNCTION_NAME = functionName.PROPER;
  var fails$7 = fails$r;
  var whitespaces = whitespaces$3;
  var non = '\u200B\u0085\u180E'; // check that a method works with the correct list
  // of whitespaces and has a correct name

  var stringTrimForced = function (METHOD_NAME) {
    return fails$7(function () {
      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
    });
  };

  var $$a = _export;
  var $trim = stringTrim.trim;
  var forcedStringTrimMethod = stringTrimForced; // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim

  $$a({
    target: 'String',
    proto: true,
    forced: forcedStringTrimMethod('trim')
  }, {
    trim: function trim() {
      return $trim(this);
    }
  });

  var entryVirtual$6 = entryVirtual$k;
  entryVirtual$6('String').trim;

  var $$9 = _export;
  var DESCRIPTORS$3 = descriptors;
  var create$8 = objectCreate; // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create

  $$9({
    target: 'Object',
    stat: true,
    sham: !DESCRIPTORS$3
  }, {
    create: create$8
  });

  var path$6 = path$q;
  var Object$1 = path$6.Object;

  var create$7 = function create(P, D) {
    return Object$1.create(P, D);
  };

  var parent$j = create$7;
  var create$6 = parent$j;

  var create$5 = create$6;

  var $$8 = _export;
  var global$7 = global$M;
  var getBuiltIn$2 = getBuiltIn$9;
  var apply$3 = functionApply;
  var uncurryThis$2 = functionUncurryThis;
  var fails$6 = fails$r;
  var Array$1 = global$7.Array;
  var $stringify = getBuiltIn$2('JSON', 'stringify');
  var exec = uncurryThis$2(/./.exec);
  var charAt = uncurryThis$2(''.charAt);
  var charCodeAt = uncurryThis$2(''.charCodeAt);
  var replace = uncurryThis$2(''.replace);
  var numberToString = uncurryThis$2(1.0.toString);
  var tester = /[\uD800-\uDFFF]/g;
  var low = /^[\uD800-\uDBFF]$/;
  var hi = /^[\uDC00-\uDFFF]$/;

  var fix = function (match, offset, string) {
    var prev = charAt(string, offset - 1);
    var next = charAt(string, offset + 1);

    if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
      return '\\u' + numberToString(charCodeAt(match, 0), 16);
    }

    return match;
  };

  var FORCED$2 = fails$6(function () {
    return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"' || $stringify('\uDEAD') !== '"\\udead"';
  });

  if ($stringify) {
    // `JSON.stringify` method
    // https://tc39.es/ecma262/#sec-json.stringify
    // https://github.com/tc39/proposal-well-formed-stringify
    $$8({
      target: 'JSON',
      stat: true,
      forced: FORCED$2
    }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      stringify: function stringify(it, replacer, space) {
        for (var i = 0, l = arguments.length, args = Array$1(l); i < l; i++) args[i] = arguments[i];

        var result = apply$3($stringify, null, args);
        return typeof result == 'string' ? replace(result, tester, fix) : result;
      }
    });
  }

  var path$5 = path$q;
  var apply$2 = functionApply; // eslint-disable-next-line es/no-json -- safe

  if (!path$5.JSON) path$5.JSON = {
    stringify: JSON.stringify
  }; // eslint-disable-next-line no-unused-vars -- required for `.length`

  var stringify$3 = function stringify(it, replacer, space) {
    return apply$2(path$5.JSON.stringify, null, arguments);
  };

  var parent$i = stringify$3;
  var stringify$2 = parent$i;

  var stringify$1 = stringify$2;

  var global$6 = global$M;
  var TypeError$4 = global$6.TypeError;

  var validateArgumentsLength$1 = function (passed, required) {
    if (passed < required) throw TypeError$4('Not enough arguments');
    return passed;
  };

  var $$7 = _export;
  var global$5 = global$M;
  var apply$1 = functionApply;
  var isCallable$1 = isCallable$h;
  var userAgent$2 = engineUserAgent;
  var arraySlice$1 = arraySlice$5;
  var validateArgumentsLength = validateArgumentsLength$1;
  var MSIE = /MSIE .\./.test(userAgent$2); // <- dirty ie9- check

  var Function$1 = global$5.Function;

  var wrap = function (scheduler) {
    return function (handler, timeout
    /* , ...arguments */
    ) {
      var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
      var fn = isCallable$1(handler) ? handler : Function$1(handler);
      var args = boundArgs ? arraySlice$1(arguments, 2) : undefined;
      return scheduler(boundArgs ? function () {
        apply$1(fn, this, args);
      } : fn, timeout);
    };
  }; // ie9- setTimeout & setInterval additional parameters fix
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers


  $$7({
    global: true,
    bind: true,
    forced: MSIE
  }, {
    // `setTimeout` method
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
    setTimeout: wrap(global$5.setTimeout),
    // `setInterval` method
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
    setInterval: wrap(global$5.setInterval)
  });

  var path$4 = path$q;
  var setTimeout$2 = path$4.setTimeout;

  var setTimeout$1 = setTimeout$2;

  var toObject$1 = toObject$e;
  var toAbsoluteIndex = toAbsoluteIndex$5;
  var lengthOfArrayLike$2 = lengthOfArrayLike$d; // `Array.prototype.fill` method implementation
  // https://tc39.es/ecma262/#sec-array.prototype.fill

  var arrayFill = function fill(value
  /* , start = 0, end = @length */
  ) {
    var O = toObject$1(this);
    var length = lengthOfArrayLike$2(O);
    var argumentsLength = arguments.length;
    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
    var end = argumentsLength > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

    while (endPos > index) O[index++] = value;

    return O;
  };

  var $$6 = _export;
  var fill = arrayFill;
  // https://tc39.es/ecma262/#sec-array.prototype.fill

  $$6({
    target: 'Array',
    proto: true
  }, {
    fill: fill
  }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

  var entryVirtual$5 = entryVirtual$k;
  entryVirtual$5('Array').fill;

  var componentEmitter = {exports: {}};

  (function (module) {
    /**
     * Expose `Emitter`.
     */
    {
      module.exports = Emitter;
    }
    /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */


    function Emitter(obj) {
      if (obj) return mixin(obj);
    }
    /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }

      return obj;
    }
    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
      return this;
    };
    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.once = function (event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }

      on.fn = fn;
      this.on(event, on);
      return this;
    };
    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {}; // all

      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      } // specific event


      var callbacks = this._callbacks['$' + event];
      if (!callbacks) return this; // remove all handlers

      if (1 == arguments.length) {
        delete this._callbacks['$' + event];
        return this;
      } // remove specific handler


      var cb;

      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];

        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      } // Remove event specific arrays for event types that no
      // one is subscribed for to avoid memory leak.


      if (callbacks.length === 0) {
        delete this._callbacks['$' + event];
      }

      return this;
    };
    /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */


    Emitter.prototype.emit = function (event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1),
          callbacks = this._callbacks['$' + event];

      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }

      if (callbacks) {
        callbacks = callbacks.slice(0);

        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }

      return this;
    };
    /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */


    Emitter.prototype.listeners = function (event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks['$' + event] || [];
    };
    /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */


    Emitter.prototype.hasListeners = function (event) {
      return !!this.listeners(event).length;
    };
  })(componentEmitter);

  var Emitter = componentEmitter.exports;

  /*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license */
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized$1(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }
  /**
   * @private
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} target
   * @param {...Object} objects_to_assign
   * @returns {Object} target
   */


  var assign;

  if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var output = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];

        if (source !== undefined && source !== null) {
          for (var nextKey in source) {
            if (source.hasOwnProperty(nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }

      return output;
    };
  } else {
    assign = Object.assign;
  }

  var assign$1 = assign;
  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
  var TEST_ELEMENT = typeof document === "undefined" ? {
    style: {}
  } : document.createElement('div');
  var TYPE_FUNCTION = 'function';
  var round = Math.round,
      abs = Math.abs;
  var now = Date.now;
  /**
   * @private
   * get the prefixed property
   * @param {Object} obj
   * @param {String} property
   * @returns {String|Undefined} prefixed
   */

  function prefixed(obj, property) {
    var prefix;
    var prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);
    var i = 0;

    while (i < VENDOR_PREFIXES.length) {
      prefix = VENDOR_PREFIXES[i];
      prop = prefix ? prefix + camelProp : property;

      if (prop in obj) {
        return prop;
      }

      i++;
    }

    return undefined;
  }
  /* eslint-disable no-new-func, no-nested-ternary */


  var win;

  if (typeof window === "undefined") {
    // window is undefined in node.js
    win = {};
  } else {
    win = window;
  }

  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

  function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
      return false;
    }

    var touchMap = {};
    var cssSupports = win.CSS && win.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {
      // If css.supports is not supported but there is native touch-action assume it supports
      // all values. This is the case for IE 10 and 11.
      return touchMap[val] = cssSupports ? win.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
  }

  var TOUCH_ACTION_COMPUTE = 'compute';
  var TOUCH_ACTION_AUTO = 'auto';
  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented

  var TOUCH_ACTION_NONE = 'none';
  var TOUCH_ACTION_PAN_X = 'pan-x';
  var TOUCH_ACTION_PAN_Y = 'pan-y';
  var TOUCH_ACTION_MAP = getTouchActionProps();
  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
  var SUPPORT_TOUCH = ('ontouchstart' in win);
  var SUPPORT_POINTER_EVENTS = prefixed(win, 'PointerEvent') !== undefined;
  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
  var INPUT_TYPE_TOUCH = 'touch';
  var INPUT_TYPE_PEN = 'pen';
  var INPUT_TYPE_MOUSE = 'mouse';
  var INPUT_TYPE_KINECT = 'kinect';
  var COMPUTE_INTERVAL = 25;
  var INPUT_START = 1;
  var INPUT_MOVE = 2;
  var INPUT_END = 4;
  var INPUT_CANCEL = 8;
  var DIRECTION_NONE = 1;
  var DIRECTION_LEFT = 2;
  var DIRECTION_RIGHT = 4;
  var DIRECTION_UP = 8;
  var DIRECTION_DOWN = 16;
  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
  var PROPS_XY = ['x', 'y'];
  var PROPS_CLIENT_XY = ['clientX', 'clientY'];
  /**
   * @private
   * walk objects and arrays
   * @param {Object} obj
   * @param {Function} iterator
   * @param {Object} context
   */

  function each(obj, iterator, context) {
    var i;

    if (!obj) {
      return;
    }

    if (obj.forEach) {
      obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
      i = 0;

      while (i < obj.length) {
        iterator.call(context, obj[i], i, obj);
        i++;
      }
    } else {
      for (i in obj) {
        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
      }
    }
  }
  /**
   * @private
   * let a boolean value also be a function that must return a boolean
   * this first item in args will be used as the context
   * @param {Boolean|Function} val
   * @param {Array} [args]
   * @returns {Boolean}
   */


  function boolOrFn(val, args) {
    if (typeof val === TYPE_FUNCTION) {
      return val.apply(args ? args[0] || undefined : undefined, args);
    }

    return val;
  }
  /**
   * @private
   * small indexOf wrapper
   * @param {String} str
   * @param {String} find
   * @returns {Boolean} found
   */


  function inStr(str, find) {
    return str.indexOf(find) > -1;
  }
  /**
   * @private
   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
   * @param {String} actions
   * @returns {*}
   */


  function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
      return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning

    if (hasPanX && hasPanY) {
      return TOUCH_ACTION_NONE;
    } // pan-x OR pan-y


    if (hasPanX || hasPanY) {
      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    } // manipulation


    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
      return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
  }
  /**
   * @private
   * Touch Action
   * sets the touchAction property or uses the js alternative
   * @param {Manager} manager
   * @param {String} value
   * @constructor
   */


  var TouchAction = /*#__PURE__*/function () {
    function TouchAction(manager, value) {
      this.manager = manager;
      this.set(value);
    }
    /**
     * @private
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */


    var _proto = TouchAction.prototype;

    _proto.set = function set(value) {
      // find out the touch-action by the event handlers
      if (value === TOUCH_ACTION_COMPUTE) {
        value = this.compute();
      }

      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
      }

      this.actions = value.toLowerCase().trim();
    };
    /**
     * @private
     * just re-set the touchAction value
     */


    _proto.update = function update() {
      this.set(this.manager.options.touchAction);
    };
    /**
     * @private
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */


    _proto.compute = function compute() {
      var actions = [];
      each(this.manager.recognizers, function (recognizer) {
        if (boolOrFn(recognizer.options.enable, [recognizer])) {
          actions = actions.concat(recognizer.getTouchAction());
        }
      });
      return cleanTouchActions(actions.join(' '));
    };
    /**
     * @private
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */


    _proto.preventDefaults = function preventDefaults(input) {
      var srcEvent = input.srcEvent;
      var direction = input.offsetDirection; // if the touch action did prevented once this session

      if (this.manager.session.prevented) {
        srcEvent.preventDefault();
        return;
      }

      var actions = this.actions;
      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

      if (hasNone) {
        // do not prevent defaults if this is a tap gesture
        var isTapPointer = input.pointers.length === 1;
        var isTapMovement = input.distance < 2;
        var isTapTouchTime = input.deltaTime < 250;

        if (isTapPointer && isTapMovement && isTapTouchTime) {
          return;
        }
      }

      if (hasPanX && hasPanY) {
        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
        return;
      }

      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
        return this.preventSrc(srcEvent);
      }
    };
    /**
     * @private
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */


    _proto.preventSrc = function preventSrc(srcEvent) {
      this.manager.session.prevented = true;
      srcEvent.preventDefault();
    };

    return TouchAction;
  }();
  /**
   * @private
   * find if a node is in the given parent
   * @method hasParent
   * @param {HTMLElement} node
   * @param {HTMLElement} parent
   * @return {Boolean} found
   */


  function hasParent(node, parent) {
    while (node) {
      if (node === parent) {
        return true;
      }

      node = node.parentNode;
    }

    return false;
  }
  /**
   * @private
   * get the center of all the pointers
   * @param {Array} pointers
   * @return {Object} center contains `x` and `y` properties
   */


  function getCenter(pointers) {
    var pointersLength = pointers.length; // no need to loop when only one touch

    if (pointersLength === 1) {
      return {
        x: round(pointers[0].clientX),
        y: round(pointers[0].clientY)
      };
    }

    var x = 0;
    var y = 0;
    var i = 0;

    while (i < pointersLength) {
      x += pointers[i].clientX;
      y += pointers[i].clientY;
      i++;
    }

    return {
      x: round(x / pointersLength),
      y: round(y / pointersLength)
    };
  }
  /**
   * @private
   * create a simple clone from the input used for storage of firstInput and firstMultiple
   * @param {Object} input
   * @returns {Object} clonedInputData
   */


  function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;

    while (i < input.pointers.length) {
      pointers[i] = {
        clientX: round(input.pointers[i].clientX),
        clientY: round(input.pointers[i].clientY)
      };
      i++;
    }

    return {
      timeStamp: now(),
      pointers: pointers,
      center: getCenter(pointers),
      deltaX: input.deltaX,
      deltaY: input.deltaY
    };
  }
  /**
   * @private
   * calculate the absolute distance between two points
   * @param {Object} p1 {x, y}
   * @param {Object} p2 {x, y}
   * @param {Array} [props] containing x and y keys
   * @return {Number} distance
   */


  function getDistance(p1, p2, props) {
    if (!props) {
      props = PROPS_XY;
    }

    var x = p2[props[0]] - p1[props[0]];
    var y = p2[props[1]] - p1[props[1]];
    return Math.sqrt(x * x + y * y);
  }
  /**
   * @private
   * calculate the angle between two coordinates
   * @param {Object} p1
   * @param {Object} p2
   * @param {Array} [props] containing x and y keys
   * @return {Number} angle
   */


  function getAngle(p1, p2, props) {
    if (!props) {
      props = PROPS_XY;
    }

    var x = p2[props[0]] - p1[props[0]];
    var y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
  }
  /**
   * @private
   * get the direction between two points
   * @param {Number} x
   * @param {Number} y
   * @return {Number} direction
   */


  function getDirection(x, y) {
    if (x === y) {
      return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }

    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
  }

  function computeDeltaXY(session, input) {
    var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;
    // jscs throwing error on defalut destructured values and without defaults tests fail

    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
      prevDelta = session.prevDelta = {
        x: prevInput.deltaX || 0,
        y: prevInput.deltaY || 0
      };
      offset = session.offsetDelta = {
        x: center.x,
        y: center.y
      };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
  }
  /**
   * @private
   * calculate the velocity between two points. unit is in px per ms.
   * @param {Number} deltaTime
   * @param {Number} x
   * @param {Number} y
   * @return {Object} velocity `x` and `y`
   */


  function getVelocity(deltaTime, x, y) {
    return {
      x: x / deltaTime || 0,
      y: y / deltaTime || 0
    };
  }
  /**
   * @private
   * calculate the scale factor between two pointersets
   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} scale
   */


  function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
  }
  /**
   * @private
   * calculate the rotation degrees between two pointersets
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} rotation
   */


  function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
  }
  /**
   * @private
   * velocity is calculated every x ms
   * @param {Object} session
   * @param {Object} input
   */


  function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input;
    var deltaTime = input.timeStamp - last.timeStamp;
    var velocity;
    var velocityX;
    var velocityY;
    var direction;

    if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
      var deltaX = input.deltaX - last.deltaX;
      var deltaY = input.deltaY - last.deltaY;
      var v = getVelocity(deltaTime, deltaX, deltaY);
      velocityX = v.x;
      velocityY = v.y;
      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
      direction = getDirection(deltaX, deltaY);
      session.lastInterval = input;
    } else {
      // use latest velocity info if it doesn't overtake a minimum period
      velocity = last.velocity;
      velocityX = last.velocityX;
      velocityY = last.velocityY;
      direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
  }
  /**
  * @private
   * extend the data with some usable properties like scale, rotate, velocity etc
   * @param {Object} manager
   * @param {Object} input
   */


  function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length; // store the first input to calculate the distance and direction

    if (!session.firstInput) {
      session.firstInput = simpleCloneInputData(input);
    } // to compute scale and rotation we need to store the multiple touches


    if (pointersLength > 1 && !session.firstMultiple) {
      session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
      session.firstMultiple = false;
    }

    var firstInput = session.firstInput,
        firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);
    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
    computeIntervalInputData(session, input); // find the correct target

    var target = manager.element;
    var srcEvent = input.srcEvent;
    var srcEventTarget;

    if (srcEvent.composedPath) {
      srcEventTarget = srcEvent.composedPath()[0];
    } else if (srcEvent.path) {
      srcEventTarget = srcEvent.path[0];
    } else {
      srcEventTarget = srcEvent.target;
    }

    if (hasParent(srcEventTarget, target)) {
      target = srcEventTarget;
    }

    input.target = target;
  }
  /**
   * @private
   * handle input events
   * @param {Manager} manager
   * @param {String} eventType
   * @param {Object} input
   */


  function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
      manager.session = {};
    } // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'


    input.eventType = eventType; // compute scale, rotation etc

    computeInputData(manager, input); // emit secret event

    manager.emit('hammer.input', input);
    manager.recognize(input);
    manager.session.prevInput = input;
  }
  /**
   * @private
   * split string on whitespace
   * @param {String} str
   * @returns {Array} words
   */


  function splitStr(str) {
    return str.trim().split(/\s+/g);
  }
  /**
   * @private
   * addEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */


  function addEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
      target.addEventListener(type, handler, false);
    });
  }
  /**
   * @private
   * removeEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */


  function removeEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
      target.removeEventListener(type, handler, false);
    });
  }
  /**
   * @private
   * get the window object of an element
   * @param {HTMLElement} element
   * @returns {DocumentView|Window}
   */


  function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return doc.defaultView || doc.parentWindow || window;
  }
  /**
   * @private
   * create new input type manager
   * @param {Manager} manager
   * @param {Function} callback
   * @returns {Input}
   * @constructor
   */


  var Input = /*#__PURE__*/function () {
    function Input(manager, callback) {
      var self = this;
      this.manager = manager;
      this.callback = callback;
      this.element = manager.element;
      this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
      // so when disabled the input events are completely bypassed.

      this.domHandler = function (ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
          self.handler(ev);
        }
      };

      this.init();
    }
    /**
     * @private
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */


    var _proto = Input.prototype;

    _proto.handler = function handler() {};
    /**
     * @private
     * bind the events
     */


    _proto.init = function init() {
      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    };
    /**
     * @private
     * unbind the events
     */


    _proto.destroy = function destroy() {
      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    };

    return Input;
  }();
  /**
   * @private
   * find if a array contains the object using indexOf or a simple polyFill
   * @param {Array} src
   * @param {String} find
   * @param {String} [findByKey]
   * @return {Boolean|Number} false when not found, or the index
   */


  function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
      return src.indexOf(find);
    } else {
      var i = 0;

      while (i < src.length) {
        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
          // do not use === here, test fails
          return i;
        }

        i++;
      }

      return -1;
    }
  }

  var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
  }; // in IE10 the pointer types is defined as an enum

  var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816

  };
  var POINTER_ELEMENT_EVENTS = 'pointerdown';
  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive

  if (win.MSPointerEvent && !win.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
  }
  /**
   * @private
   * Pointer events input
   * @constructor
   * @extends Input
   */


  var PointerEventInput = /*#__PURE__*/function (_Input) {
    _inheritsLoose(PointerEventInput, _Input);

    function PointerEventInput() {
      var _this;

      var proto = PointerEventInput.prototype;
      proto.evEl = POINTER_ELEMENT_EVENTS;
      proto.evWin = POINTER_WINDOW_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.store = _this.manager.session.pointerEvents = [];
      return _this;
    }
    /**
     * @private
     * handle mouse events
     * @param {Object} ev
     */


    var _proto = PointerEventInput.prototype;

    _proto.handler = function handler(ev) {
      var store = this.store;
      var removePointer = false;
      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
      var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store

      var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down

      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
        if (storeIndex < 0) {
          store.push(ev);
          storeIndex = store.length - 1;
        }
      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        removePointer = true;
      } // it not found, so the pointer hasn't been down (so it's probably a hover)


      if (storeIndex < 0) {
        return;
      } // update the event in the store


      store[storeIndex] = ev;
      this.callback(this.manager, eventType, {
        pointers: store,
        changedPointers: [ev],
        pointerType: pointerType,
        srcEvent: ev
      });

      if (removePointer) {
        // remove from the store
        store.splice(storeIndex, 1);
      }
    };

    return PointerEventInput;
  }(Input);
  /**
   * @private
   * convert array-like objects to real arrays
   * @param {Object} obj
   * @returns {Array}
   */


  function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
  }
  /**
   * @private
   * unique array with objects based on a key (like 'id') or just by the array's value
   * @param {Array} src [{id:1},{id:2},{id:1}]
   * @param {String} [key]
   * @param {Boolean} [sort=False]
   * @returns {Array} [{id:1},{id:2}]
   */


  function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
      var val = key ? src[i][key] : src[i];

      if (inArray(values, val) < 0) {
        results.push(src[i]);
      }

      values[i] = val;
      i++;
    }

    if (sort) {
      if (!key) {
        results = results.sort();
      } else {
        results = results.sort(function (a, b) {
          return a[key] > b[key];
        });
      }
    }

    return results;
  }

  var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
  };
  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
  /**
   * @private
   * Multi-user touch events input
   * @constructor
   * @extends Input
   */

  var TouchInput = /*#__PURE__*/function (_Input) {
    _inheritsLoose(TouchInput, _Input);

    function TouchInput() {
      var _this;

      TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;

      return _this;
    }

    var _proto = TouchInput.prototype;

    _proto.handler = function handler(ev) {
      var type = TOUCH_INPUT_MAP[ev.type];
      var touches = getTouches.call(this, ev, type);

      if (!touches) {
        return;
      }

      this.callback(this.manager, type, {
        pointers: touches[0],
        changedPointers: touches[1],
        pointerType: INPUT_TYPE_TOUCH,
        srcEvent: ev
      });
    };

    return TouchInput;
  }(Input);

  function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds; // when there is only one touch, the process can be simplified

    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
      targetIds[allTouches[0].identifier] = true;
      return [allTouches, allTouches];
    }

    var i;
    var targetTouches;
    var changedTouches = toArray(ev.changedTouches);
    var changedTargetTouches = [];
    var target = this.target; // get target touches from touches

    targetTouches = allTouches.filter(function (touch) {
      return hasParent(touch.target, target);
    }); // collect touches

    if (type === INPUT_START) {
      i = 0;

      while (i < targetTouches.length) {
        targetIds[targetTouches[i].identifier] = true;
        i++;
      }
    } // filter changed touches to only contain touches that exist in the collected target ids


    i = 0;

    while (i < changedTouches.length) {
      if (targetIds[changedTouches[i].identifier]) {
        changedTargetTouches.push(changedTouches[i]);
      } // cleanup removed touches


      if (type & (INPUT_END | INPUT_CANCEL)) {
        delete targetIds[changedTouches[i].identifier];
      }

      i++;
    }

    if (!changedTargetTouches.length) {
      return;
    }

    return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
  }

  var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
  };
  var MOUSE_ELEMENT_EVENTS = 'mousedown';
  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
  /**
   * @private
   * Mouse events input
   * @constructor
   * @extends Input
   */

  var MouseInput = /*#__PURE__*/function (_Input) {
    _inheritsLoose(MouseInput, _Input);

    function MouseInput() {
      var _this;

      var proto = MouseInput.prototype;
      proto.evEl = MOUSE_ELEMENT_EVENTS;
      proto.evWin = MOUSE_WINDOW_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.pressed = false; // mousedown state

      return _this;
    }
    /**
     * @private
     * handle mouse events
     * @param {Object} ev
     */


    var _proto = MouseInput.prototype;

    _proto.handler = function handler(ev) {
      var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down

      if (eventType & INPUT_START && ev.button === 0) {
        this.pressed = true;
      }

      if (eventType & INPUT_MOVE && ev.which !== 1) {
        eventType = INPUT_END;
      } // mouse must be down


      if (!this.pressed) {
        return;
      }

      if (eventType & INPUT_END) {
        this.pressed = false;
      }

      this.callback(this.manager, eventType, {
        pointers: [ev],
        changedPointers: [ev],
        pointerType: INPUT_TYPE_MOUSE,
        srcEvent: ev
      });
    };

    return MouseInput;
  }(Input);
  /**
   * @private
   * Combined touch and mouse input
   *
   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
   * This because touch devices also emit mouse events while doing a touch.
   *
   * @constructor
   * @extends Input
   */


  var DEDUP_TIMEOUT = 2500;
  var DEDUP_DISTANCE = 25;

  function setLastTouch(eventData) {
    var _eventData$changedPoi = eventData.changedPointers,
        touch = _eventData$changedPoi[0];

    if (touch.identifier === this.primaryTouch) {
      var lastTouch = {
        x: touch.clientX,
        y: touch.clientY
      };
      var lts = this.lastTouches;
      this.lastTouches.push(lastTouch);

      var removeLastTouch = function removeLastTouch() {
        var i = lts.indexOf(lastTouch);

        if (i > -1) {
          lts.splice(i, 1);
        }
      };

      setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
  }

  function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
      this.primaryTouch = eventData.changedPointers[0].identifier;
      setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
      setLastTouch.call(this, eventData);
    }
  }

  function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX;
    var y = eventData.srcEvent.clientY;

    for (var i = 0; i < this.lastTouches.length; i++) {
      var t = this.lastTouches[i];
      var dx = Math.abs(x - t.x);
      var dy = Math.abs(y - t.y);

      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
        return true;
      }
    }

    return false;
  }

  var TouchMouseInput = /*#__PURE__*/function () {
    var TouchMouseInput = /*#__PURE__*/function (_Input) {
      _inheritsLoose(TouchMouseInput, _Input);

      function TouchMouseInput(_manager, callback) {
        var _this;

        _this = _Input.call(this, _manager, callback) || this;

        _this.handler = function (manager, inputEvent, inputData) {
          var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
          var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;

          if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
          } // when we're in a touch event, record touches to  de-dupe synthetic mouse event


          if (isTouch) {
            recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);
          } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) {
            return;
          }

          _this.callback(manager, inputEvent, inputData);
        };

        _this.touch = new TouchInput(_this.manager, _this.handler);
        _this.mouse = new MouseInput(_this.manager, _this.handler);
        _this.primaryTouch = null;
        _this.lastTouches = [];
        return _this;
      }
      /**
       * @private
       * handle mouse and touch events
       * @param {Hammer} manager
       * @param {String} inputEvent
       * @param {Object} inputData
       */


      var _proto = TouchMouseInput.prototype;
      /**
       * @private
       * remove the event listeners
       */

      _proto.destroy = function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
      };

      return TouchMouseInput;
    }(Input);

    return TouchMouseInput;
  }();
  /**
   * @private
   * create new input type manager
   * called by the Manager constructor
   * @param {Hammer} manager
   * @returns {Input}
   */


  function createInputInstance(manager) {
    var Type; // let inputClass = manager.options.inputClass;

    var inputClass = manager.options.inputClass;

    if (inputClass) {
      Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
      Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
      Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
      Type = MouseInput;
    } else {
      Type = TouchMouseInput;
    }

    return new Type(manager, inputHandler);
  }
  /**
   * @private
   * if the argument is an array, we want to execute the fn on each entry
   * if it aint an array we don't want to do a thing.
   * this is used by all the methods that accept a single and array argument.
   * @param {*|Array} arg
   * @param {String} fn
   * @param {Object} [context]
   * @returns {Boolean}
   */


  function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
      each(arg, context[fn], context);
      return true;
    }

    return false;
  }

  var STATE_POSSIBLE = 1;
  var STATE_BEGAN = 2;
  var STATE_CHANGED = 4;
  var STATE_ENDED = 8;
  var STATE_RECOGNIZED = STATE_ENDED;
  var STATE_CANCELLED = 16;
  var STATE_FAILED = 32;
  /**
   * @private
   * get a unique id
   * @returns {number} uniqueId
   */

  var _uniqueId = 1;

  function uniqueId() {
    return _uniqueId++;
  }
  /**
   * @private
   * get a recognizer by name if it is bound to a manager
   * @param {Recognizer|String} otherRecognizer
   * @param {Recognizer} recognizer
   * @returns {Recognizer}
   */


  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;

    if (manager) {
      return manager.get(otherRecognizer);
    }

    return otherRecognizer;
  }
  /**
   * @private
   * get a usable string, used as event postfix
   * @param {constant} state
   * @returns {String} state
   */


  function stateStr(state) {
    if (state & STATE_CANCELLED) {
      return 'cancel';
    } else if (state & STATE_ENDED) {
      return 'end';
    } else if (state & STATE_CHANGED) {
      return 'move';
    } else if (state & STATE_BEGAN) {
      return 'start';
    }

    return '';
  }
  /**
   * @private
   * Recognizer flow explained; *
   * All recognizers have the initial state of POSSIBLE when a input session starts.
   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
   * Example session for mouse-input: mousedown -> mousemove -> mouseup
   *
   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
   * which determines with state it should be.
   *
   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
   * POSSIBLE to give it another change on the next cycle.
   *
   *               Possible
   *                  |
   *            +-----+---------------+
   *            |                     |
   *      +-----+-----+               |
   *      |           |               |
   *   Failed      Cancelled          |
   *                          +-------+------+
   *                          |              |
   *                      Recognized       Began
   *                                         |
   *                                      Changed
   *                                         |
   *                                  Ended/Recognized
   */

  /**
   * @private
   * Recognizer
   * Every recognizer needs to extend from this class.
   * @constructor
   * @param {Object} options
   */


  var Recognizer = /*#__PURE__*/function () {
    function Recognizer(options) {
      if (options === void 0) {
        options = {};
      }

      this.options = _extends({
        enable: true
      }, options);
      this.id = uniqueId();
      this.manager = null; // default is enable true

      this.state = STATE_POSSIBLE;
      this.simultaneous = {};
      this.requireFail = [];
    }
    /**
     * @private
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */


    var _proto = Recognizer.prototype;

    _proto.set = function set(options) {
      assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state

      this.manager && this.manager.touchAction.update();
      return this;
    };
    /**
     * @private
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */


    _proto.recognizeWith = function recognizeWith(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
        return this;
      }

      var simultaneous = this.simultaneous;
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

      if (!simultaneous[otherRecognizer.id]) {
        simultaneous[otherRecognizer.id] = otherRecognizer;
        otherRecognizer.recognizeWith(this);
      }

      return this;
    };
    /**
     * @private
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */


    _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
        return this;
      }

      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      delete this.simultaneous[otherRecognizer.id];
      return this;
    };
    /**
     * @private
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */


    _proto.requireFailure = function requireFailure(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
        return this;
      }

      var requireFail = this.requireFail;
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

      if (inArray(requireFail, otherRecognizer) === -1) {
        requireFail.push(otherRecognizer);
        otherRecognizer.requireFailure(this);
      }

      return this;
    };
    /**
     * @private
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */


    _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
        return this;
      }

      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      var index = inArray(this.requireFail, otherRecognizer);

      if (index > -1) {
        this.requireFail.splice(index, 1);
      }

      return this;
    };
    /**
     * @private
     * has require failures boolean
     * @returns {boolean}
     */


    _proto.hasRequireFailures = function hasRequireFailures() {
      return this.requireFail.length > 0;
    };
    /**
     * @private
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */


    _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
      return !!this.simultaneous[otherRecognizer.id];
    };
    /**
     * @private
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */


    _proto.emit = function emit(input) {
      var self = this;
      var state = this.state;

      function emit(event) {
        self.manager.emit(event, input);
      } // 'panstart' and 'panmove'


      if (state < STATE_ENDED) {
        emit(self.options.event + stateStr(state));
      }

      emit(self.options.event); // simple 'eventName' events

      if (input.additionalEvent) {
        // additional event(panleft, panright, pinchin, pinchout...)
        emit(input.additionalEvent);
      } // panend and pancancel


      if (state >= STATE_ENDED) {
        emit(self.options.event + stateStr(state));
      }
    };
    /**
     * @private
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */


    _proto.tryEmit = function tryEmit(input) {
      if (this.canEmit()) {
        return this.emit(input);
      } // it's failing anyway


      this.state = STATE_FAILED;
    };
    /**
     * @private
     * can we emit?
     * @returns {boolean}
     */


    _proto.canEmit = function canEmit() {
      var i = 0;

      while (i < this.requireFail.length) {
        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
          return false;
        }

        i++;
      }

      return true;
    };
    /**
     * @private
     * update the recognizer
     * @param {Object} inputData
     */


    _proto.recognize = function recognize(inputData) {
      // make a new copy of the inputData
      // so we can change the inputData without messing up the other recognizers
      var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?

      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
        this.reset();
        this.state = STATE_FAILED;
        return;
      } // reset when we've reached the end


      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
        this.state = STATE_POSSIBLE;
      }

      this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
      // so trigger an event

      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
        this.tryEmit(inputDataClone);
      }
    };
    /**
     * @private
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {constant} STATE
     */

    /* jshint ignore:start */


    _proto.process = function process(inputData) {};
    /* jshint ignore:end */

    /**
     * @private
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */


    _proto.getTouchAction = function getTouchAction() {};
    /**
     * @private
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */


    _proto.reset = function reset() {};

    return Recognizer;
  }();
  /**
   * @private
   * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
   * a single tap.
   *
   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
   * multi-taps being recognized.
   * @constructor
   * @extends Recognizer
   */


  var TapRecognizer = /*#__PURE__*/function (_Recognizer) {
    _inheritsLoose(TapRecognizer, _Recognizer);

    function TapRecognizer(options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      _this = _Recognizer.call(this, _extends({
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300,
        // max time between the multi-tap taps
        time: 250,
        // max time of the pointer to be down (like finger on the screen)
        threshold: 9,
        // a minimal movement is ok, but keep it low
        posThreshold: 10
      }, options)) || this; // previous time and center,
      // used for tap counting

      _this.pTime = false;
      _this.pCenter = false;
      _this._timer = null;
      _this._input = null;
      _this.count = 0;
      return _this;
    }

    var _proto = TapRecognizer.prototype;

    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_MANIPULATION];
    };

    _proto.process = function process(input) {
      var _this2 = this;

      var options = this.options;
      var validPointers = input.pointers.length === options.pointers;
      var validMovement = input.distance < options.threshold;
      var validTouchTime = input.deltaTime < options.time;
      this.reset();

      if (input.eventType & INPUT_START && this.count === 0) {
        return this.failTimeout();
      } // we only allow little movement
      // and we've reached an end event, so a tap is possible


      if (validMovement && validTouchTime && validPointers) {
        if (input.eventType !== INPUT_END) {
          return this.failTimeout();
        }

        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
        this.pTime = input.timeStamp;
        this.pCenter = input.center;

        if (!validMultiTap || !validInterval) {
          this.count = 1;
        } else {
          this.count += 1;
        }

        this._input = input; // if tap count matches we have recognized it,
        // else it has began recognizing...

        var tapCount = this.count % options.taps;

        if (tapCount === 0) {
          // no failing requirements, immediately trigger the tap event
          // or wait as long as the multitap interval to trigger
          if (!this.hasRequireFailures()) {
            return STATE_RECOGNIZED;
          } else {
            this._timer = setTimeout(function () {
              _this2.state = STATE_RECOGNIZED;

              _this2.tryEmit();
            }, options.interval);
            return STATE_BEGAN;
          }
        }
      }

      return STATE_FAILED;
    };

    _proto.failTimeout = function failTimeout() {
      var _this3 = this;

      this._timer = setTimeout(function () {
        _this3.state = STATE_FAILED;
      }, this.options.interval);
      return STATE_FAILED;
    };

    _proto.reset = function reset() {
      clearTimeout(this._timer);
    };

    _proto.emit = function emit() {
      if (this.state === STATE_RECOGNIZED) {
        this._input.tapCount = this.count;
        this.manager.emit(this.options.event, this._input);
      }
    };

    return TapRecognizer;
  }(Recognizer);
  /**
   * @private
   * This recognizer is just used as a base for the simple attribute recognizers.
   * @constructor
   * @extends Recognizer
   */


  var AttrRecognizer = /*#__PURE__*/function (_Recognizer) {
    _inheritsLoose(AttrRecognizer, _Recognizer);

    function AttrRecognizer(options) {
      if (options === void 0) {
        options = {};
      }

      return _Recognizer.call(this, _extends({
        pointers: 1
      }, options)) || this;
    }
    /**
     * @private
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */


    var _proto = AttrRecognizer.prototype;

    _proto.attrTest = function attrTest(input) {
      var optionPointers = this.options.pointers;
      return optionPointers === 0 || input.pointers.length === optionPointers;
    };
    /**
     * @private
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */


    _proto.process = function process(input) {
      var state = this.state;
      var eventType = input.eventType;
      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
      var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED

      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
        return state | STATE_CANCELLED;
      } else if (isRecognized || isValid) {
        if (eventType & INPUT_END) {
          return state | STATE_ENDED;
        } else if (!(state & STATE_BEGAN)) {
          return STATE_BEGAN;
        }

        return state | STATE_CHANGED;
      }

      return STATE_FAILED;
    };

    return AttrRecognizer;
  }(Recognizer);
  /**
   * @private
   * direction cons to string
   * @param {constant} direction
   * @returns {String}
   */


  function directionStr(direction) {
    if (direction === DIRECTION_DOWN) {
      return 'down';
    } else if (direction === DIRECTION_UP) {
      return 'up';
    } else if (direction === DIRECTION_LEFT) {
      return 'left';
    } else if (direction === DIRECTION_RIGHT) {
      return 'right';
    }

    return '';
  }
  /**
   * @private
   * Pan
   * Recognized when the pointer is down and moved in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */


  var PanRecognizer = /*#__PURE__*/function (_AttrRecognizer) {
    _inheritsLoose(PanRecognizer, _AttrRecognizer);

    function PanRecognizer(options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      _this = _AttrRecognizer.call(this, _extends({
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
      }, options)) || this;
      _this.pX = null;
      _this.pY = null;
      return _this;
    }

    var _proto = PanRecognizer.prototype;

    _proto.getTouchAction = function getTouchAction() {
      var direction = this.options.direction;
      var actions = [];

      if (direction & DIRECTION_HORIZONTAL) {
        actions.push(TOUCH_ACTION_PAN_Y);
      }

      if (direction & DIRECTION_VERTICAL) {
        actions.push(TOUCH_ACTION_PAN_X);
      }

      return actions;
    };

    _proto.directionTest = function directionTest(input) {
      var options = this.options;
      var hasMoved = true;
      var distance = input.distance;
      var direction = input.direction;
      var x = input.deltaX;
      var y = input.deltaY; // lock to axis?

      if (!(direction & options.direction)) {
        if (options.direction & DIRECTION_HORIZONTAL) {
          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
          hasMoved = x !== this.pX;
          distance = Math.abs(input.deltaX);
        } else {
          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
          hasMoved = y !== this.pY;
          distance = Math.abs(input.deltaY);
        }
      }

      input.direction = direction;
      return hasMoved && distance > options.threshold && direction & options.direction;
    };

    _proto.attrTest = function attrTest(input) {
      return AttrRecognizer.prototype.attrTest.call(this, input) && ( // replace with a super call
      this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
    };

    _proto.emit = function emit(input) {
      this.pX = input.deltaX;
      this.pY = input.deltaY;
      var direction = directionStr(input.direction);

      if (direction) {
        input.additionalEvent = this.options.event + direction;
      }

      _AttrRecognizer.prototype.emit.call(this, input);
    };

    return PanRecognizer;
  }(AttrRecognizer);
  /**
   * @private
   * Swipe
   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */


  var SwipeRecognizer = /*#__PURE__*/function (_AttrRecognizer) {
    _inheritsLoose(SwipeRecognizer, _AttrRecognizer);

    function SwipeRecognizer(options) {
      if (options === void 0) {
        options = {};
      }

      return _AttrRecognizer.call(this, _extends({
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
      }, options)) || this;
    }

    var _proto = SwipeRecognizer.prototype;

    _proto.getTouchAction = function getTouchAction() {
      return PanRecognizer.prototype.getTouchAction.call(this);
    };

    _proto.attrTest = function attrTest(input) {
      var direction = this.options.direction;
      var velocity;

      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
        velocity = input.overallVelocity;
      } else if (direction & DIRECTION_HORIZONTAL) {
        velocity = input.overallVelocityX;
      } else if (direction & DIRECTION_VERTICAL) {
        velocity = input.overallVelocityY;
      }

      return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    };

    _proto.emit = function emit(input) {
      var direction = directionStr(input.offsetDirection);

      if (direction) {
        this.manager.emit(this.options.event + direction, input);
      }

      this.manager.emit(this.options.event, input);
    };

    return SwipeRecognizer;
  }(AttrRecognizer);
  /**
   * @private
   * Pinch
   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
   * @constructor
   * @extends AttrRecognizer
   */


  var PinchRecognizer = /*#__PURE__*/function (_AttrRecognizer) {
    _inheritsLoose(PinchRecognizer, _AttrRecognizer);

    function PinchRecognizer(options) {
      if (options === void 0) {
        options = {};
      }

      return _AttrRecognizer.call(this, _extends({
        event: 'pinch',
        threshold: 0,
        pointers: 2
      }, options)) || this;
    }

    var _proto = PinchRecognizer.prototype;

    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_NONE];
    };

    _proto.attrTest = function attrTest(input) {
      return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    };

    _proto.emit = function emit(input) {
      if (input.scale !== 1) {
        var inOut = input.scale < 1 ? 'in' : 'out';
        input.additionalEvent = this.options.event + inOut;
      }

      _AttrRecognizer.prototype.emit.call(this, input);
    };

    return PinchRecognizer;
  }(AttrRecognizer);
  /**
   * @private
   * Rotate
   * Recognized when two or more pointer are moving in a circular motion.
   * @constructor
   * @extends AttrRecognizer
   */


  var RotateRecognizer = /*#__PURE__*/function (_AttrRecognizer) {
    _inheritsLoose(RotateRecognizer, _AttrRecognizer);

    function RotateRecognizer(options) {
      if (options === void 0) {
        options = {};
      }

      return _AttrRecognizer.call(this, _extends({
        event: 'rotate',
        threshold: 0,
        pointers: 2
      }, options)) || this;
    }

    var _proto = RotateRecognizer.prototype;

    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_NONE];
    };

    _proto.attrTest = function attrTest(input) {
      return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    };

    return RotateRecognizer;
  }(AttrRecognizer);
  /**
   * @private
   * Press
   * Recognized when the pointer is down for x ms without any movement.
   * @constructor
   * @extends Recognizer
   */


  var PressRecognizer = /*#__PURE__*/function (_Recognizer) {
    _inheritsLoose(PressRecognizer, _Recognizer);

    function PressRecognizer(options) {
      var _this;

      if (options === void 0) {
        options = {};
      }

      _this = _Recognizer.call(this, _extends({
        event: 'press',
        pointers: 1,
        time: 251,
        // minimal time of the pointer to be pressed
        threshold: 9
      }, options)) || this;
      _this._timer = null;
      _this._input = null;
      return _this;
    }

    var _proto = PressRecognizer.prototype;

    _proto.getTouchAction = function getTouchAction() {
      return [TOUCH_ACTION_AUTO];
    };

    _proto.process = function process(input) {
      var _this2 = this;

      var options = this.options;
      var validPointers = input.pointers.length === options.pointers;
      var validMovement = input.distance < options.threshold;
      var validTime = input.deltaTime > options.time;
      this._input = input; // we only allow little movement
      // and we've reached an end event, so a tap is possible

      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
        this.reset();
      } else if (input.eventType & INPUT_START) {
        this.reset();
        this._timer = setTimeout(function () {
          _this2.state = STATE_RECOGNIZED;

          _this2.tryEmit();
        }, options.time);
      } else if (input.eventType & INPUT_END) {
        return STATE_RECOGNIZED;
      }

      return STATE_FAILED;
    };

    _proto.reset = function reset() {
      clearTimeout(this._timer);
    };

    _proto.emit = function emit(input) {
      if (this.state !== STATE_RECOGNIZED) {
        return;
      }

      if (input && input.eventType & INPUT_END) {
        this.manager.emit(this.options.event + "up", input);
      } else {
        this._input.timeStamp = now();
        this.manager.emit(this.options.event, this._input);
      }
    };

    return PressRecognizer;
  }(Recognizer);

  var defaults = {
    /**
     * @private
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * @private
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @private
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * @private
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * @private
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * @private
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
      /**
       * @private
       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */
      userSelect: "none",

      /**
       * @private
       * Disable the Windows Phone grippers when pressing an element.
       * @type {String}
       * @default 'none'
       */
      touchSelect: "none",

      /**
       * @private
       * Disables the default callout shown when you touch and hold a touch target.
       * On iOS, when you touch and hold a touch target such as a link, Safari displays
       * a callout containing information about the link. This property allows you to disable that callout.
       * @type {String}
       * @default 'none'
       */
      touchCallout: "none",

      /**
       * @private
       * Specifies whether zooming is enabled. Used by IE10>
       * @type {String}
       * @default 'none'
       */
      contentZooming: "none",

      /**
       * @private
       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */
      userDrag: "none",

      /**
       * @private
       * Overrides the highlight color shown when the user taps a link or a JavaScript
       * clickable element in iOS. This property obeys the alpha value, if specified.
       * @type {String}
       * @default 'rgba(0,0,0,0)'
       */
      tapHighlightColor: "rgba(0,0,0,0)"
    }
  };
  /**
   * @private
   * Default recognizer setup when calling `Hammer()`
   * When creating a new Manager these will be skipped.
   * This is separated with other defaults because of tree-shaking.
   * @type {Array}
   */

  var preset = [[RotateRecognizer, {
    enable: false
  }], [PinchRecognizer, {
    enable: false
  }, ['rotate']], [SwipeRecognizer, {
    direction: DIRECTION_HORIZONTAL
  }], [PanRecognizer, {
    direction: DIRECTION_HORIZONTAL
  }, ['swipe']], [TapRecognizer], [TapRecognizer, {
    event: 'doubletap',
    taps: 2
  }, ['tap']], [PressRecognizer]];
  var STOP = 1;
  var FORCED_STOP = 2;
  /**
   * @private
   * add/remove the css properties as defined in manager.options.cssProps
   * @param {Manager} manager
   * @param {Boolean} add
   */

  function toggleCssProps(manager, add) {
    var element = manager.element;

    if (!element.style) {
      return;
    }

    var prop;
    each(manager.options.cssProps, function (value, name) {
      prop = prefixed(element.style, name);

      if (add) {
        manager.oldCssProps[prop] = element.style[prop];
        element.style[prop] = value;
      } else {
        element.style[prop] = manager.oldCssProps[prop] || "";
      }
    });

    if (!add) {
      manager.oldCssProps = {};
    }
  }
  /**
   * @private
   * trigger dom event
   * @param {String} event
   * @param {Object} data
   */


  function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent("Event");
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
  }
  /**
  * @private
   * Manager
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */


  var Manager = /*#__PURE__*/function () {
    function Manager(element, options) {
      var _this = this;

      this.options = assign$1({}, defaults, options || {});
      this.options.inputTarget = this.options.inputTarget || element;
      this.handlers = {};
      this.session = {};
      this.recognizers = [];
      this.oldCssProps = {};
      this.element = element;
      this.input = createInputInstance(this);
      this.touchAction = new TouchAction(this, this.options.touchAction);
      toggleCssProps(this, true);
      each(this.options.recognizers, function (item) {
        var recognizer = _this.add(new item[0](item[1]));

        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
      }, this);
    }
    /**
     * @private
     * set options
     * @param {Object} options
     * @returns {Manager}
     */


    var _proto = Manager.prototype;

    _proto.set = function set(options) {
      assign$1(this.options, options); // Options that need a little more setup

      if (options.touchAction) {
        this.touchAction.update();
      }

      if (options.inputTarget) {
        // Clean up existing event listeners and reinitialize
        this.input.destroy();
        this.input.target = options.inputTarget;
        this.input.init();
      }

      return this;
    };
    /**
     * @private
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */


    _proto.stop = function stop(force) {
      this.session.stopped = force ? FORCED_STOP : STOP;
    };
    /**
     * @private
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */


    _proto.recognize = function recognize(inputData) {
      var session = this.session;

      if (session.stopped) {
        return;
      } // run the touch-action polyfill


      this.touchAction.preventDefaults(inputData);
      var recognizer;
      var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
      // if no recognizer is detecting a thing, it is set to `null`

      var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
      // or when we're in a new session

      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
        session.curRecognizer = null;
        curRecognizer = null;
      }

      var i = 0;

      while (i < recognizers.length) {
        recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
        // 1.   allow if the session is NOT forced stopped (see the .stop() method)
        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
        //      that is being recognized.
        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
        //      this can be setup with the `recognizeWith()` method on the recognizer.

        if (session.stopped !== FORCED_STOP && ( // 1
        !curRecognizer || recognizer === curRecognizer || // 2
        recognizer.canRecognizeWith(curRecognizer))) {
          // 3
          recognizer.recognize(inputData);
        } else {
          recognizer.reset();
        } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
        // current active recognizer. but only if we don't already have an active recognizer


        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
          session.curRecognizer = recognizer;
          curRecognizer = recognizer;
        }

        i++;
      }
    };
    /**
     * @private
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */


    _proto.get = function get(recognizer) {
      if (recognizer instanceof Recognizer) {
        return recognizer;
      }

      var recognizers = this.recognizers;

      for (var i = 0; i < recognizers.length; i++) {
        if (recognizers[i].options.event === recognizer) {
          return recognizers[i];
        }
      }

      return null;
    };
    /**
     * @private add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */


    _proto.add = function add(recognizer) {
      if (invokeArrayArg(recognizer, "add", this)) {
        return this;
      } // remove existing


      var existing = this.get(recognizer.options.event);

      if (existing) {
        this.remove(existing);
      }

      this.recognizers.push(recognizer);
      recognizer.manager = this;
      this.touchAction.update();
      return recognizer;
    };
    /**
     * @private
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */


    _proto.remove = function remove(recognizer) {
      if (invokeArrayArg(recognizer, "remove", this)) {
        return this;
      }

      var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists

      if (recognizer) {
        var recognizers = this.recognizers;
        var index = inArray(recognizers, targetRecognizer);

        if (index !== -1) {
          recognizers.splice(index, 1);
          this.touchAction.update();
        }
      }

      return this;
    };
    /**
     * @private
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */


    _proto.on = function on(events, handler) {
      if (events === undefined || handler === undefined) {
        return this;
      }

      var handlers = this.handlers;
      each(splitStr(events), function (event) {
        handlers[event] = handlers[event] || [];
        handlers[event].push(handler);
      });
      return this;
    };
    /**
     * @private unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */


    _proto.off = function off(events, handler) {
      if (events === undefined) {
        return this;
      }

      var handlers = this.handlers;
      each(splitStr(events), function (event) {
        if (!handler) {
          delete handlers[event];
        } else {
          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
        }
      });
      return this;
    };
    /**
     * @private emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */


    _proto.emit = function emit(event, data) {
      // we also want to trigger dom events
      if (this.options.domEvents) {
        triggerDomEvent(event, data);
      } // no handlers, so skip it all


      var handlers = this.handlers[event] && this.handlers[event].slice();

      if (!handlers || !handlers.length) {
        return;
      }

      data.type = event;

      data.preventDefault = function () {
        data.srcEvent.preventDefault();
      };

      var i = 0;

      while (i < handlers.length) {
        handlers[i](data);
        i++;
      }
    };
    /**
     * @private
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */


    _proto.destroy = function destroy() {
      this.element && toggleCssProps(this, false);
      this.handlers = {};
      this.session = {};
      this.input.destroy();
      this.element = null;
    };

    return Manager;
  }();

  var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
  };
  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
  /**
   * @private
   * Touch events input
   * @constructor
   * @extends Input
   */

  var SingleTouchInput = /*#__PURE__*/function (_Input) {
    _inheritsLoose(SingleTouchInput, _Input);

    function SingleTouchInput() {
      var _this;

      var proto = SingleTouchInput.prototype;
      proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
      proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
      _this = _Input.apply(this, arguments) || this;
      _this.started = false;
      return _this;
    }

    var _proto = SingleTouchInput.prototype;

    _proto.handler = function handler(ev) {
      var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?

      if (type === INPUT_START) {
        this.started = true;
      }

      if (!this.started) {
        return;
      }

      var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state

      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
        this.started = false;
      }

      this.callback(this.manager, type, {
        pointers: touches[0],
        changedPointers: touches[1],
        pointerType: INPUT_TYPE_TOUCH,
        srcEvent: ev
      });
    };

    return SingleTouchInput;
  }(Input);

  function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
      all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
  }
  /**
   * @private
   * wrap a method with a deprecation warning and stack trace
   * @param {Function} method
   * @param {String} name
   * @param {String} message
   * @returns {Function} A new function wrapping the supplied method.
   */


  function deprecate(method, name, message) {
    var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
    return function () {
      var e = new Error('get-stack-trace');
      var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
      var log = window.console && (window.console.warn || window.console.log);

      if (log) {
        log.call(window.console, deprecationMessage, stack);
      }

      return method.apply(this, arguments);
    };
  }
  /**
   * @private
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} dest
   * @param {Object} src
   * @param {Boolean} [merge=false]
   * @returns {Object} dest
   */


  var extend = deprecate(function (dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;

    while (i < keys.length) {
      if (!merge || merge && dest[keys[i]] === undefined) {
        dest[keys[i]] = src[keys[i]];
      }

      i++;
    }

    return dest;
  }, 'extend', 'Use `assign`.');
  /**
   * @private
   * merge the values from src in the dest.
   * means that properties that exist in dest will not be overwritten by src
   * @param {Object} dest
   * @param {Object} src
   * @returns {Object} dest
   */

  var merge$1 = deprecate(function (dest, src) {
    return extend(dest, src, true);
  }, 'merge', 'Use `assign`.');
  /**
   * @private
   * simple class inheritance
   * @param {Function} child
   * @param {Function} base
   * @param {Object} [properties]
   */

  function inherit(child, base, properties) {
    var baseP = base.prototype;
    var childP;
    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
      assign$1(childP, properties);
    }
  }
  /**
   * @private
   * simple function bind
   * @param {Function} fn
   * @param {Object} context
   * @returns {Function}
   */


  function bindFn(fn, context) {
    return function boundFn() {
      return fn.apply(context, arguments);
    };
  }
  /**
   * @private
   * Simple way to create a manager with a default set of recognizers.
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */


  var Hammer = /*#__PURE__*/function () {
    var Hammer =
    /**
      * @private
      * @const {string}
      */
    function Hammer(element, options) {
      if (options === void 0) {
        options = {};
      }

      return new Manager(element, _extends({
        recognizers: preset.concat()
      }, options));
    };

    Hammer.VERSION = "2.0.17-rc";
    Hammer.DIRECTION_ALL = DIRECTION_ALL;
    Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
    Hammer.DIRECTION_LEFT = DIRECTION_LEFT;
    Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;
    Hammer.DIRECTION_UP = DIRECTION_UP;
    Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
    Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
    Hammer.DIRECTION_NONE = DIRECTION_NONE;
    Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
    Hammer.INPUT_START = INPUT_START;
    Hammer.INPUT_MOVE = INPUT_MOVE;
    Hammer.INPUT_END = INPUT_END;
    Hammer.INPUT_CANCEL = INPUT_CANCEL;
    Hammer.STATE_POSSIBLE = STATE_POSSIBLE;
    Hammer.STATE_BEGAN = STATE_BEGAN;
    Hammer.STATE_CHANGED = STATE_CHANGED;
    Hammer.STATE_ENDED = STATE_ENDED;
    Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;
    Hammer.STATE_CANCELLED = STATE_CANCELLED;
    Hammer.STATE_FAILED = STATE_FAILED;
    Hammer.Manager = Manager;
    Hammer.Input = Input;
    Hammer.TouchAction = TouchAction;
    Hammer.TouchInput = TouchInput;
    Hammer.MouseInput = MouseInput;
    Hammer.PointerEventInput = PointerEventInput;
    Hammer.TouchMouseInput = TouchMouseInput;
    Hammer.SingleTouchInput = SingleTouchInput;
    Hammer.Recognizer = Recognizer;
    Hammer.AttrRecognizer = AttrRecognizer;
    Hammer.Tap = TapRecognizer;
    Hammer.Pan = PanRecognizer;
    Hammer.Swipe = SwipeRecognizer;
    Hammer.Pinch = PinchRecognizer;
    Hammer.Rotate = RotateRecognizer;
    Hammer.Press = PressRecognizer;
    Hammer.on = addEventListeners;
    Hammer.off = removeEventListeners;
    Hammer.each = each;
    Hammer.merge = merge$1;
    Hammer.extend = extend;
    Hammer.bindFn = bindFn;
    Hammer.assign = assign$1;
    Hammer.inherit = inherit;
    Hammer.bindFn = bindFn;
    Hammer.prefixed = prefixed;
    Hammer.toArray = toArray;
    Hammer.inArray = inArray;
    Hammer.uniqueArray = uniqueArray;
    Hammer.splitStr = splitStr;
    Hammer.boolOrFn = boolOrFn;
    Hammer.hasParent = hasParent;
    Hammer.addEventListeners = addEventListeners;
    Hammer.removeEventListeners = removeEventListeners;
    Hammer.defaults = assign$1({}, defaults, {
      preset: preset
    });
    return Hammer;
  }(); //  style loader but by script tag, not by the loader.
  var RealHammer = Hammer;

  function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"]; if (!it) { if (isArray$1(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$3(o, minLen) { var _context21; if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = slice(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return from$3(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

  function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  /**
   * Use this symbol to delete properies in deepObjectAssign.
   */

  var DELETE = symbol("DELETE");
  /**
   * Pure version of deepObjectAssign, it doesn't modify any of it's arguments.
   *
   * @param base - The base object that fullfils the whole interface T.
   * @param updates - Updates that may change or delete props.
   * @returns A brand new instance with all the supplied objects deeply merged.
   */


  function pureDeepObjectAssign(base) {
    var _context;

    for (var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      updates[_key - 1] = arguments[_key];
    }

    return deepObjectAssign.apply(void 0, concat$1(_context = [{}, base]).call(_context, updates));
  }
  /**
   * Deep version of object assign with additional deleting by the DELETE symbol.
   *
   * @param values - Objects to be deeply merged.
   * @returns The first object from values.
   */


  function deepObjectAssign() {
    var merged = deepObjectAssignNonentry.apply(void 0, arguments);
    stripDelete(merged);
    return merged;
  }
  /**
   * Deep version of object assign with additional deleting by the DELETE symbol.
   *
   * @remarks
   * This doesn't strip the DELETE symbols so they may end up in the final object.
   * @param values - Objects to be deeply merged.
   * @returns The first object from values.
   */


  function deepObjectAssignNonentry() {
    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      values[_key2] = arguments[_key2];
    }

    if (values.length < 2) {
      return values[0];
    } else if (values.length > 2) {
      var _context2;

      return deepObjectAssignNonentry.apply(void 0, concat$1(_context2 = [deepObjectAssign(values[0], values[1])]).call(_context2, _toConsumableArray(slice(values).call(values, 2))));
    }

    var a = values[0];
    var b = values[1];

    var _iterator = _createForOfIteratorHelper$3(ownKeys$1(b)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;
        if (!Object.prototype.propertyIsEnumerable.call(b, prop)) ;else if (b[prop] === DELETE) {
          delete a[prop];
        } else if (a[prop] !== null && b[prop] !== null && _typeof(a[prop]) === "object" && _typeof(b[prop]) === "object" && !isArray$1(a[prop]) && !isArray$1(b[prop])) {
          a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
        } else {
          a[prop] = clone(b[prop]);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return a;
  }
  /**
   * Deep clone given object or array. In case of primitive simply return.
   *
   * @param a - Anything.
   * @returns Deep cloned object/array or unchanged a.
   */


  function clone(a) {
    if (isArray$1(a)) {
      return map$3(a).call(a, function (value) {
        return clone(value);
      });
    } else if (_typeof(a) === "object" && a !== null) {
      return deepObjectAssignNonentry({}, a);
    } else {
      return a;
    }
  }
  /**
   * Strip DELETE from given object.
   *
   * @param a - Object which may contain DELETE but won't after this is executed.
   */


  function stripDelete(a) {
    for (var _i = 0, _Object$keys = keys$4(a); _i < _Object$keys.length; _i++) {
      var prop = _Object$keys[_i];

      if (a[prop] === DELETE) {
        delete a[prop];
      } else if (_typeof(a[prop]) === "object" && a[prop] !== null) {
        stripDelete(a[prop]);
      }
    }
  }
  /**
   * Setup a mock hammer.js object, for unit testing.
   *
   * Inspiration: https://github.com/uber/deck.gl/pull/658
   *
   * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
   */


  function hammerMock() {
    var noop = function noop() {};

    return {
      on: noop,
      off: noop,
      destroy: noop,
      emit: noop,
      get: function get() {
        return {
          set: noop
        };
      }
    };
  }

  var Hammer$1 = typeof window !== "undefined" ? window.Hammer || RealHammer : function () {
    // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
    return hammerMock();
  };
  /**
   * Turn an element into an clickToUse element.
   * When not active, the element has a transparent overlay. When the overlay is
   * clicked, the mode is changed to active.
   * When active, the element is displayed with a blue border around it, and
   * the interactive contents of the element can be used. When clicked outside
   * the element, the elements mode is changed to inactive.
   *
   * @param {Element} container
   * @class Activator
   */

  function Activator$1(container) {
    var _this = this,
        _context3;

    this._cleanupQueue = [];
    this.active = false;
    this._dom = {
      container: container,
      overlay: document.createElement("div")
    };

    this._dom.overlay.classList.add("vis-overlay");

    this._dom.container.appendChild(this._dom.overlay);

    this._cleanupQueue.push(function () {
      _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
    });

    var hammer = Hammer$1(this._dom.overlay);
    hammer.on("tap", bind$6(_context3 = this._onTapOverlay).call(_context3, this));

    this._cleanupQueue.push(function () {
      hammer.destroy(); // FIXME: cleaning up hammer instances doesn't work (Timeline not removed
      // from memory)
    }); // block all touch events (except tap)


    var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];

    forEach$1(events).call(events, function (event) {
      hammer.on(event, function (event) {
        event.srcEvent.stopPropagation();
      });
    }); // attach a click event to the window, in order to deactivate when clicking outside the timeline


    if (document && document.body) {
      this._onClick = function (event) {
        if (!_hasParent(event.target, container)) {
          _this.deactivate();
        }
      };

      document.body.addEventListener("click", this._onClick);

      this._cleanupQueue.push(function () {
        document.body.removeEventListener("click", _this._onClick);
      });
    } // prepare escape key listener for deactivating when active


    this._escListener = function (event) {
      if ("key" in event ? event.key === "Escape" : event.keyCode === 27
      /* the keyCode is for IE11 */
      ) {
        _this.deactivate();
      }
    };
  } // turn into an event emitter


  Emitter(Activator$1.prototype); // The currently active activator

  Activator$1.current = null;
  /**
   * Destroy the activator. Cleans up all created DOM and event listeners
   */

  Activator$1.prototype.destroy = function () {
    var _context4, _context5;

    this.deactivate();

    var _iterator2 = _createForOfIteratorHelper$3(reverse(_context4 = splice(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var callback = _step2.value;
        callback();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
  /**
   * Activate the element
   * Overlay is hidden, element is decorated with a blue shadow border
   */


  Activator$1.prototype.activate = function () {
    // we allow only one active activator at a time
    if (Activator$1.current) {
      Activator$1.current.deactivate();
    }

    Activator$1.current = this;
    this.active = true;
    this._dom.overlay.style.display = "none";

    this._dom.container.classList.add("vis-active");

    this.emit("change");
    this.emit("activate"); // ugly hack: bind ESC after emitting the events, as the Network rebinds all
    // keyboard events on a 'change' event

    document.body.addEventListener("keydown", this._escListener);
  };
  /**
   * Deactivate the element
   * Overlay is displayed on top of the element
   */


  Activator$1.prototype.deactivate = function () {
    this.active = false;
    this._dom.overlay.style.display = "block";

    this._dom.container.classList.remove("vis-active");

    document.body.removeEventListener("keydown", this._escListener);
    this.emit("change");
    this.emit("deactivate");
  };
  /**
   * Handle a tap event: activate the container
   *
   * @param {Event}  event   The event
   * @private
   */


  Activator$1.prototype._onTapOverlay = function (event) {
    // activate the container
    this.activate();
    event.srcEvent.stopPropagation();
  };
  /**
   * Test whether the element has the requested parent element somewhere in
   * its chain of parent nodes.
   *
   * @param {HTMLElement} element
   * @param {HTMLElement} parent
   * @returns {boolean} Returns true when the parent is found somewhere in the
   *                    chain of parent nodes.
   * @private
   */


  function _hasParent(element, parent) {
    while (element) {
      if (element === parent) {
        return true;
      }

      element = element.parentNode;
    }

    return false;
  } // utility functions

  var global$4 = global$M;
  var isConstructor = isConstructor$4;
  var tryToString$1 = tryToString$4;
  var TypeError$3 = global$4.TypeError; // `Assert: IsConstructor(argument) is true`

  var aConstructor$1 = function (argument) {
    if (isConstructor(argument)) return argument;
    throw TypeError$3(tryToString$1(argument) + ' is not a constructor');
  };

  var $$5 = _export;
  var getBuiltIn$1 = getBuiltIn$9;
  var apply = functionApply;
  var bind$2 = functionBind;
  var aConstructor = aConstructor$1;
  var anObject$1 = anObject$b;
  var isObject$3 = isObject$f;
  var create$4 = objectCreate;
  var fails$5 = fails$r;
  var nativeConstruct = getBuiltIn$1('Reflect', 'construct');
  var ObjectPrototype = Object.prototype;
  var push$1 = [].push; // `Reflect.construct` method
  // https://tc39.es/ecma262/#sec-reflect.construct
  // MS Edge supports only 2 arguments and argumentsList argument is optional
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it

  var NEW_TARGET_BUG = fails$5(function () {
    function F() {
      /* empty */
    }

    return !(nativeConstruct(function () {
      /* empty */
    }, [], F) instanceof F);
  });
  var ARGS_BUG = !fails$5(function () {
    nativeConstruct(function () {
      /* empty */
    });
  });
  var FORCED$1 = NEW_TARGET_BUG || ARGS_BUG;
  $$5({
    target: 'Reflect',
    stat: true,
    forced: FORCED$1,
    sham: FORCED$1
  }, {
    construct: function construct(Target, args
    /* , newTarget */
    ) {
      aConstructor(Target);
      anObject$1(args);
      var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);

      if (Target == newTarget) {
        // w/o altered newTarget, optimization for 0-4 arguments
        switch (args.length) {
          case 0:
            return new Target();

          case 1:
            return new Target(args[0]);

          case 2:
            return new Target(args[0], args[1]);

          case 3:
            return new Target(args[0], args[1], args[2]);

          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        } // w/o altered newTarget, lot of arguments case


        var $args = [null];
        apply(push$1, $args, args);
        return new (apply(bind$2, Target, $args))();
      } // with altered newTarget, not support built-in constructors


      var proto = newTarget.prototype;
      var instance = create$4(isObject$3(proto) ? proto : ObjectPrototype);
      var result = apply(Target, instance, args);
      return isObject$3(result) ? result : instance;
    }
  });

  var path$3 = path$q;
  var construct$2 = path$3.Reflect.construct;

  var parent$h = construct$2;
  var construct$1 = parent$h;

  var construct = construct$1;

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var parent$g = create$6;
  var create$3 = parent$g;

  var parent$f = create$3;
  var create$2 = parent$f;

  var create$1 = create$2;

  var $$4 = _export;
  var setPrototypeOf$5 = objectSetPrototypeOf; // `Object.setPrototypeOf` method
  // https://tc39.es/ecma262/#sec-object.setprototypeof

  $$4({
    target: 'Object',
    stat: true
  }, {
    setPrototypeOf: setPrototypeOf$5
  });

  var path$2 = path$q;
  var setPrototypeOf$4 = path$2.Object.setPrototypeOf;

  var parent$e = setPrototypeOf$4;
  var setPrototypeOf$3 = parent$e;

  var parent$d = setPrototypeOf$3;
  var setPrototypeOf$2 = parent$d;

  var parent$c = setPrototypeOf$2;
  var setPrototypeOf$1 = parent$c;

  var setPrototypeOf = setPrototypeOf$1;

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = create$1(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });

    defineProperty$7(subClass, "prototype", {
      writable: false
    });

    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  var parent$b = getPrototypeOf$3;
  var getPrototypeOf$2 = parent$b;

  var parent$a = getPrototypeOf$2;
  var getPrototypeOf$1 = parent$a;

  var getPrototypeOf = getPrototypeOf$1;

  function _getPrototypeOf(o) {
    _getPrototypeOf = setPrototypeOf ? getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  var runtime = {exports: {}};

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  (function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function (obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function (skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function () {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function (exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function (type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function (record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function (finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function (tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function (iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  })(runtime);

  var regenerator = runtime.exports;

  var internalMetadata = {exports: {}};

  var fails$4 = fails$r;
  var arrayBufferNonExtensible = fails$4(function () {
    if (typeof ArrayBuffer == 'function') {
      var buffer = new ArrayBuffer(8); // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe

      if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', {
        value: 8
      });
    }
  });

  var fails$3 = fails$r;
  var isObject$2 = isObject$f;
  var classof$3 = classofRaw$1;
  var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible; // eslint-disable-next-line es/no-object-isextensible -- safe

  var $isExtensible = Object.isExtensible;
  var FAILS_ON_PRIMITIVES = fails$3(function () {
    $isExtensible(1);
  }); // `Object.isExtensible` method
  // https://tc39.es/ecma262/#sec-object.isextensible

  var objectIsExtensible = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
    if (!isObject$2(it)) return false;
    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$3(it) == 'ArrayBuffer') return false;
    return $isExtensible ? $isExtensible(it) : true;
  } : $isExtensible;

  var fails$2 = fails$r;
  var freezing = !fails$2(function () {
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
    return Object.isExtensible(Object.preventExtensions({}));
  });

  var $$3 = _export;
  var uncurryThis$1 = functionUncurryThis;
  var hiddenKeys = hiddenKeys$6;
  var isObject$1 = isObject$f;
  var hasOwn$3 = hasOwnProperty_1;
  var defineProperty$2 = objectDefineProperty.f;
  var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
  var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
  var isExtensible = objectIsExtensible;
  var uid = uid$4;
  var FREEZING = freezing;
  var REQUIRED = false;
  var METADATA = uid('meta');
  var id = 0;

  var setMetadata = function (it) {
    defineProperty$2(it, METADATA, {
      value: {
        objectID: 'O' + id++,
        // object ID
        weakData: {} // weak collections IDs

      }
    });
  };

  var fastKey$1 = function (it, create) {
    // return a primitive with prefix
    if (!isObject$1(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

    if (!hasOwn$3(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F'; // not necessary to add metadata

      if (!create) return 'E'; // add missing metadata

      setMetadata(it); // return object ID
    }

    return it[METADATA].objectID;
  };

  var getWeakData = function (it, create) {
    if (!hasOwn$3(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true; // not necessary to add metadata

      if (!create) return false; // add missing metadata

      setMetadata(it); // return the store of weak collections IDs
    }

    return it[METADATA].weakData;
  }; // add metadata on freeze-family methods calling


  var onFreeze = function (it) {
    if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn$3(it, METADATA)) setMetadata(it);
    return it;
  };

  var enable = function () {
    meta.enable = function () {
      /* empty */
    };

    REQUIRED = true;
    var getOwnPropertyNames = getOwnPropertyNamesModule.f;
    var splice = uncurryThis$1([].splice);
    var test = {};
    test[METADATA] = 1; // prevent exposing of metadata key

    if (getOwnPropertyNames(test).length) {
      getOwnPropertyNamesModule.f = function (it) {
        var result = getOwnPropertyNames(it);

        for (var i = 0, length = result.length; i < length; i++) {
          if (result[i] === METADATA) {
            splice(result, i, 1);
            break;
          }
        }

        return result;
      };

      $$3({
        target: 'Object',
        stat: true,
        forced: true
      }, {
        getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
      });
    }
  };

  var meta = internalMetadata.exports = {
    enable: enable,
    fastKey: fastKey$1,
    getWeakData: getWeakData,
    onFreeze: onFreeze
  };
  hiddenKeys[METADATA] = true;

  var global$3 = global$M;
  var bind$1 = functionBindContext;
  var call = functionCall;
  var anObject = anObject$b;
  var tryToString = tryToString$4;
  var isArrayIteratorMethod = isArrayIteratorMethod$2;
  var lengthOfArrayLike$1 = lengthOfArrayLike$d;
  var isPrototypeOf$6 = objectIsPrototypeOf;
  var getIterator$5 = getIterator$7;
  var getIteratorMethod = getIteratorMethod$8;
  var iteratorClose = iteratorClose$2;
  var TypeError$2 = global$3.TypeError;

  var Result = function (stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };

  var ResultPrototype = Result.prototype;

  var iterate$2 = function (iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn = bind$1(unboundFunction, that);
    var iterator, iterFn, index, length, result, next, step;

    var stop = function (condition) {
      if (iterator) iteratorClose(iterator, 'normal', condition);
      return new Result(true, condition);
    };

    var callFn = function (value) {
      if (AS_ENTRIES) {
        anObject(value);
        return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
      }

      return INTERRUPTED ? fn(value, stop) : fn(value);
    };

    if (IS_ITERATOR) {
      iterator = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (!iterFn) throw TypeError$2(tryToString(iterable) + ' is not iterable'); // optimisation for array iterators

      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = lengthOfArrayLike$1(iterable); length > index; index++) {
          result = callFn(iterable[index]);
          if (result && isPrototypeOf$6(ResultPrototype, result)) return result;
        }

        return new Result(false);
      }

      iterator = getIterator$5(iterable, iterFn);
    }

    next = iterator.next;

    while (!(step = call(next, iterator)).done) {
      try {
        result = callFn(step.value);
      } catch (error) {
        iteratorClose(iterator, 'throw', error);
      }

      if (typeof result == 'object' && result && isPrototypeOf$6(ResultPrototype, result)) return result;
    }

    return new Result(false);
  };

  var global$2 = global$M;
  var isPrototypeOf$5 = objectIsPrototypeOf;
  var TypeError$1 = global$2.TypeError;

  var anInstance$2 = function (it, Prototype) {
    if (isPrototypeOf$5(Prototype, it)) return it;
    throw TypeError$1('Incorrect invocation');
  };

  var $$2 = _export;
  var global$1 = global$M;
  var InternalMetadataModule = internalMetadata.exports;
  var fails$1 = fails$r;
  var createNonEnumerableProperty = createNonEnumerableProperty$6;
  var iterate$1 = iterate$2;
  var anInstance$1 = anInstance$2;
  var isCallable = isCallable$h;
  var isObject = isObject$f;
  var setToStringTag = setToStringTag$5;
  var defineProperty$1 = objectDefineProperty.f;
  var forEach = arrayIteration.forEach;
  var DESCRIPTORS$2 = descriptors;
  var InternalStateModule$1 = internalState;
  var setInternalState$1 = InternalStateModule$1.set;
  var internalStateGetterFor$1 = InternalStateModule$1.getterFor;

  var collection$2 = function (CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
    var ADDER = IS_MAP ? 'set' : 'add';
    var NativeConstructor = global$1[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var exported = {};
    var Constructor;

    if (!DESCRIPTORS$2 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$1(function () {
      new NativeConstructor().entries().next();
    }))) {
      // create collection constructor
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      InternalMetadataModule.enable();
    } else {
      Constructor = wrapper(function (target, iterable) {
        setInternalState$1(anInstance$1(target, Prototype), {
          type: CONSTRUCTOR_NAME,
          collection: new NativeConstructor()
        });
        if (iterable != undefined) iterate$1(iterable, target[ADDER], {
          that: target,
          AS_ENTRIES: IS_MAP
        });
      });
      var Prototype = Constructor.prototype;
      var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
      forEach(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {
        var IS_ADDER = KEY == 'add' || KEY == 'set';

        if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {
          createNonEnumerableProperty(Prototype, KEY, function (a, b) {
            var collection = getInternalState(this).collection;
            if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
            var result = collection[KEY](a === 0 ? 0 : a, b);
            return IS_ADDER ? this : result;
          });
        }
      });
      IS_WEAK || defineProperty$1(Prototype, 'size', {
        configurable: true,
        get: function () {
          return getInternalState(this).collection.size;
        }
      });
    }

    setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
    exported[CONSTRUCTOR_NAME] = Constructor;
    $$2({
      global: true,
      forced: true
    }, exported);
    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
    return Constructor;
  };

  var redefine = redefine$4;

  var redefineAll$1 = function (target, src, options) {
    for (var key in src) {
      if (options && options.unsafe && target[key]) target[key] = src[key];else redefine(target, key, src[key], options);
    }

    return target;
  };

  var getBuiltIn = getBuiltIn$9;
  var definePropertyModule = objectDefineProperty;
  var wellKnownSymbol = wellKnownSymbol$j;
  var DESCRIPTORS$1 = descriptors;
  var SPECIES = wellKnownSymbol('species');

  var setSpecies$1 = function (CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty = definePropertyModule.f;

    if (DESCRIPTORS$1 && Constructor && !Constructor[SPECIES]) {
      defineProperty(Constructor, SPECIES, {
        configurable: true,
        get: function () {
          return this;
        }
      });
    }
  };

  var defineProperty = objectDefineProperty.f;
  var create = objectCreate;
  var redefineAll = redefineAll$1;
  var bind = functionBindContext;
  var anInstance = anInstance$2;
  var iterate = iterate$2;
  var defineIterator = defineIterator$3;
  var setSpecies = setSpecies$1;
  var DESCRIPTORS = descriptors;
  var fastKey = internalMetadata.exports.fastKey;
  var InternalStateModule = internalState;
  var setInternalState = InternalStateModule.set;
  var internalStateGetterFor = InternalStateModule.getterFor;
  var collectionStrong$2 = {
    getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var Constructor = wrapper(function (that, iterable) {
        anInstance(that, Prototype);
        setInternalState(that, {
          type: CONSTRUCTOR_NAME,
          index: create(null),
          first: undefined,
          last: undefined,
          size: 0
        });
        if (!DESCRIPTORS) that.size = 0;
        if (iterable != undefined) iterate(iterable, that[ADDER], {
          that: that,
          AS_ENTRIES: IS_MAP
        });
      });
      var Prototype = Constructor.prototype;
      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

      var define = function (that, key, value) {
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        var previous, index; // change existing entry

        if (entry) {
          entry.value = value; // create new entry
        } else {
          state.last = entry = {
            index: index = fastKey(key, true),
            key: key,
            value: value,
            previous: previous = state.last,
            next: undefined,
            removed: false
          };
          if (!state.first) state.first = entry;
          if (previous) previous.next = entry;
          if (DESCRIPTORS) state.size++;else that.size++; // add to index

          if (index !== 'F') state.index[index] = entry;
        }

        return that;
      };

      var getEntry = function (that, key) {
        var state = getInternalState(that); // fast case

        var index = fastKey(key);
        var entry;
        if (index !== 'F') return state.index[index]; // frozen object case

        for (entry = state.first; entry; entry = entry.next) {
          if (entry.key == key) return entry;
        }
      };

      redefineAll(Prototype, {
        // `{ Map, Set }.prototype.clear()` methods
        // https://tc39.es/ecma262/#sec-map.prototype.clear
        // https://tc39.es/ecma262/#sec-set.prototype.clear
        clear: function clear() {
          var that = this;
          var state = getInternalState(that);
          var data = state.index;
          var entry = state.first;

          while (entry) {
            entry.removed = true;
            if (entry.previous) entry.previous = entry.previous.next = undefined;
            delete data[entry.index];
            entry = entry.next;
          }

          state.first = state.last = undefined;
          if (DESCRIPTORS) state.size = 0;else that.size = 0;
        },
        // `{ Map, Set }.prototype.delete(key)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.delete
        // https://tc39.es/ecma262/#sec-set.prototype.delete
        'delete': function (key) {
          var that = this;
          var state = getInternalState(that);
          var entry = getEntry(that, key);

          if (entry) {
            var next = entry.next;
            var prev = entry.previous;
            delete state.index[entry.index];
            entry.removed = true;
            if (prev) prev.next = next;
            if (next) next.previous = prev;
            if (state.first == entry) state.first = next;
            if (state.last == entry) state.last = prev;
            if (DESCRIPTORS) state.size--;else that.size--;
          }

          return !!entry;
        },
        // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.foreach
        // https://tc39.es/ecma262/#sec-set.prototype.foreach
        forEach: function forEach(callbackfn
        /* , that = undefined */
        ) {
          var state = getInternalState(this);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          var entry;

          while (entry = entry ? entry.next : state.first) {
            boundFunction(entry.value, entry.key, this); // revert to the last existing entry

            while (entry && entry.removed) entry = entry.previous;
          }
        },
        // `{ Map, Set}.prototype.has(key)` methods
        // https://tc39.es/ecma262/#sec-map.prototype.has
        // https://tc39.es/ecma262/#sec-set.prototype.has
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      redefineAll(Prototype, IS_MAP ? {
        // `Map.prototype.get(key)` method
        // https://tc39.es/ecma262/#sec-map.prototype.get
        get: function get(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        // `Map.prototype.set(key, value)` method
        // https://tc39.es/ecma262/#sec-map.prototype.set
        set: function set(key, value) {
          return define(this, key === 0 ? 0 : key, value);
        }
      } : {
        // `Set.prototype.add(value)` method
        // https://tc39.es/ecma262/#sec-set.prototype.add
        add: function add(value) {
          return define(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (DESCRIPTORS) defineProperty(Prototype, 'size', {
        get: function () {
          return getInternalState(this).size;
        }
      });
      return Constructor;
    },
    setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
      var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.entries
      // https://tc39.es/ecma262/#sec-map.prototype.keys
      // https://tc39.es/ecma262/#sec-map.prototype.values
      // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
      // https://tc39.es/ecma262/#sec-set.prototype.entries
      // https://tc39.es/ecma262/#sec-set.prototype.keys
      // https://tc39.es/ecma262/#sec-set.prototype.values
      // https://tc39.es/ecma262/#sec-set.prototype-@@iterator

      defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
        setInternalState(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind: kind,
          last: undefined
        });
      }, function () {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var entry = state.last; // revert to the last existing entry

        while (entry && entry.removed) entry = entry.previous; // get next entry


        if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
          // or finish the iteration
          state.target = undefined;
          return {
            value: undefined,
            done: true
          };
        } // return step by kind


        if (kind == 'keys') return {
          value: entry.key,
          done: false
        };
        if (kind == 'values') return {
          value: entry.value,
          done: false
        };
        return {
          value: [entry.key, entry.value],
          done: false
        };
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // `{ Map, Set }.prototype[@@species]` accessors
      // https://tc39.es/ecma262/#sec-get-map-@@species
      // https://tc39.es/ecma262/#sec-get-set-@@species

      setSpecies(CONSTRUCTOR_NAME);
    }
  };

  var collection$1 = collection$2;
  var collectionStrong$1 = collectionStrong$2; // `Map` constructor
  // https://tc39.es/ecma262/#sec-map-objects

  collection$1('Map', function (init) {
    return function Map() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  }, collectionStrong$1);

  var path$1 = path$q;
  var map$2 = path$1.Map;

  var parent$9 = map$2;
  var map$1 = parent$9;

  var map = map$1;

  var $$1 = _export;
  var $some = arrayIteration.some;
  var arrayMethodIsStrict$1 = arrayMethodIsStrict$5;
  var STRICT_METHOD$1 = arrayMethodIsStrict$1('some'); // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some

  $$1({
    target: 'Array',
    proto: true,
    forced: !STRICT_METHOD$1
  }, {
    some: function some(callbackfn
    /* , thisArg */
    ) {
      return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var entryVirtual$4 = entryVirtual$k;
  var some$3 = entryVirtual$4('Array').some;

  var isPrototypeOf$4 = objectIsPrototypeOf;
  var method$4 = some$3;
  var ArrayPrototype$4 = Array.prototype;

  var some$2 = function (it) {
    var own = it.some;
    return it === ArrayPrototype$4 || isPrototypeOf$4(ArrayPrototype$4, it) && own === ArrayPrototype$4.some ? method$4 : own;
  };

  var parent$8 = some$2;
  var some$1 = parent$8;

  var some = some$1;

  var entryVirtual$3 = entryVirtual$k;
  var keys$3 = entryVirtual$3('Array').keys;

  var parent$7 = keys$3;
  var keys$2 = parent$7;

  var classof$2 = classof$c;
  var hasOwn$2 = hasOwnProperty_1;
  var isPrototypeOf$3 = objectIsPrototypeOf;
  var method$3 = keys$2;
  var ArrayPrototype$3 = Array.prototype;
  var DOMIterables$2 = {
    DOMTokenList: true,
    NodeList: true
  };

  var keys$1 = function (it) {
    var own = it.keys;
    return it === ArrayPrototype$3 || isPrototypeOf$3(ArrayPrototype$3, it) && own === ArrayPrototype$3.keys || hasOwn$2(DOMIterables$2, classof$2(it)) ? method$3 : own;
  };

  var keys = keys$1;

  var arraySlice = arraySliceSimple;
  var floor = Math.floor;

  var mergeSort = function (array, comparefn) {
    var length = array.length;
    var middle = floor(length / 2);
    return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
  };

  var insertionSort = function (array, comparefn) {
    var length = array.length;
    var i = 1;
    var element, j;

    while (i < length) {
      j = i;
      element = array[i];

      while (j && comparefn(array[j - 1], element) > 0) {
        array[j] = array[--j];
      }

      if (j !== i++) array[j] = element;
    }

    return array;
  };

  var merge = function (array, left, right, comparefn) {
    var llength = left.length;
    var rlength = right.length;
    var lindex = 0;
    var rindex = 0;

    while (lindex < llength || rindex < rlength) {
      array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
    }

    return array;
  };

  var arraySort = mergeSort;

  var userAgent$1 = engineUserAgent;
  var firefox = userAgent$1.match(/firefox\/(\d+)/i);
  var engineFfVersion = !!firefox && +firefox[1];

  var UA = engineUserAgent;
  var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

  var userAgent = engineUserAgent;
  var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
  var engineWebkitVersion = !!webkit && +webkit[1];

  var $ = _export;
  var uncurryThis = functionUncurryThis;
  var aCallable = aCallable$7;
  var toObject = toObject$e;
  var lengthOfArrayLike = lengthOfArrayLike$d;
  var toString = toString$7;
  var fails = fails$r;
  var internalSort = arraySort;
  var arrayMethodIsStrict = arrayMethodIsStrict$5;
  var FF = engineFfVersion;
  var IE_OR_EDGE = engineIsIeOrEdge;
  var V8 = engineV8Version;
  var WEBKIT = engineWebkitVersion;
  var test = [];
  var un$Sort = uncurryThis(test.sort);
  var push = uncurryThis(test.push); // IE8-

  var FAILS_ON_UNDEFINED = fails(function () {
    test.sort(undefined);
  }); // V8 bug

  var FAILS_ON_NULL = fails(function () {
    test.sort(null);
  }); // Old WebKit

  var STRICT_METHOD = arrayMethodIsStrict('sort');
  var STABLE_SORT = !fails(function () {
    // feature detection can be too slow, so check engines versions
    if (V8) return V8 < 70;
    if (FF && FF > 3) return;
    if (IE_OR_EDGE) return true;
    if (WEBKIT) return WEBKIT < 603;
    var result = '';
    var code, chr, value, index; // generate an array with more 512 elements (Chakra and old V8 fails only in this case)

    for (code = 65; code < 76; code++) {
      chr = String.fromCharCode(code);

      switch (code) {
        case 66:
        case 69:
        case 70:
        case 72:
          value = 3;
          break;

        case 68:
        case 71:
          value = 4;
          break;

        default:
          value = 2;
      }

      for (index = 0; index < 47; index++) {
        test.push({
          k: chr + index,
          v: value
        });
      }
    }

    test.sort(function (a, b) {
      return b.v - a.v;
    });

    for (index = 0; index < test.length; index++) {
      chr = test[index].k.charAt(0);
      if (result.charAt(result.length - 1) !== chr) result += chr;
    }

    return result !== 'DGBEFHACIJK';
  });
  var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

  var getSortCompare = function (comparefn) {
    return function (x, y) {
      if (y === undefined) return -1;
      if (x === undefined) return 1;
      if (comparefn !== undefined) return +comparefn(x, y) || 0;
      return toString(x) > toString(y) ? 1 : -1;
    };
  }; // `Array.prototype.sort` method
  // https://tc39.es/ecma262/#sec-array.prototype.sort


  $({
    target: 'Array',
    proto: true,
    forced: FORCED
  }, {
    sort: function sort(comparefn) {
      if (comparefn !== undefined) aCallable(comparefn);
      var array = toObject(this);
      if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);
      var items = [];
      var arrayLength = lengthOfArrayLike(array);
      var itemsLength, index;

      for (index = 0; index < arrayLength; index++) {
        if (index in array) push(items, array[index]);
      }

      internalSort(items, getSortCompare(comparefn));
      itemsLength = items.length;
      index = 0;

      while (index < itemsLength) array[index] = items[index++];

      while (index < arrayLength) delete array[index++];

      return array;
    }
  });

  var entryVirtual$2 = entryVirtual$k;
  var sort$3 = entryVirtual$2('Array').sort;

  var isPrototypeOf$2 = objectIsPrototypeOf;
  var method$2 = sort$3;
  var ArrayPrototype$2 = Array.prototype;

  var sort$2 = function (it) {
    var own = it.sort;
    return it === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it) && own === ArrayPrototype$2.sort ? method$2 : own;
  };

  var parent$6 = sort$2;
  var sort$1 = parent$6;

  var sort = sort$1;

  var entryVirtual$1 = entryVirtual$k;
  var values$3 = entryVirtual$1('Array').values;

  var parent$5 = values$3;
  var values$2 = parent$5;

  var classof$1 = classof$c;
  var hasOwn$1 = hasOwnProperty_1;
  var isPrototypeOf$1 = objectIsPrototypeOf;
  var method$1 = values$2;
  var ArrayPrototype$1 = Array.prototype;
  var DOMIterables$1 = {
    DOMTokenList: true,
    NodeList: true
  };

  var values$1 = function (it) {
    var own = it.values;
    return it === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it) && own === ArrayPrototype$1.values || hasOwn$1(DOMIterables$1, classof$1(it)) ? method$1 : own;
  };

  var values = values$1;

  var iterator = iterator$4;

  var entryVirtual = entryVirtual$k;
  var entries$3 = entryVirtual('Array').entries;

  var parent$4 = entries$3;
  var entries$2 = parent$4;

  var classof = classof$c;
  var hasOwn = hasOwnProperty_1;
  var isPrototypeOf = objectIsPrototypeOf;
  var method = entries$2;
  var ArrayPrototype = Array.prototype;
  var DOMIterables = {
    DOMTokenList: true,
    NodeList: true
  };

  var entries$1 = function (it) {
    var own = it.entries;
    return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
  };

  var entries = entries$1;

  // Unique ID creation requires a high quality random # generator. In the browser we therefore
  // require the crypto API and do not support built-in fallback to lower quality random number
  // generators (like Math.random()).
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
      // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
      // find the complete implementation of crypto (msCrypto) on IE11.
      getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

      if (!getRandomValues) {
        throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
      }
    }

    return getRandomValues(rnds8);
  }

  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  function validate(uuid) {
    return typeof uuid === 'string' && REGEX.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  var byteToHex = [];

  for (var i = 0; i < 256; ++i) {
    byteToHex.push((i + 0x100).toString(16).substr(1));
  }

  function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }

    return uuid;
  }

  function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }

      return buf;
    }

    return stringify(rnds);
  }

  /**
   * Determine whether a value can be used as an id.
   *
   * @param value - Input value of unknown type.
   * @returns True if the value is valid id, false otherwise.
   */
  function isId(value) {
    return typeof value === "string" || typeof value === "number";
  }

  /**
   * A queue.
   *
   * @typeParam T - The type of method names to be replaced by queued versions.
   */
  var Queue = /*#__PURE__*/function () {
    /** Delay in milliseconds. If defined the queue will be periodically flushed. */

    /** Maximum number of entries in the queue before it will be flushed. */

    /**
     * Construct a new Queue.
     *
     * @param options - Queue configuration.
     */
    function Queue(options) {
      _classCallCheck(this, Queue);

      _defineProperty(this, "delay", void 0);

      _defineProperty(this, "max", void 0);

      _defineProperty(this, "_queue", []);

      _defineProperty(this, "_timeout", null);

      _defineProperty(this, "_extended", null);

      // options
      this.delay = null;
      this.max = Infinity;
      this.setOptions(options);
    }
    /**
     * Update the configuration of the queue.
     *
     * @param options - Queue configuration.
     */


    _createClass(Queue, [{
      key: "setOptions",
      value: function setOptions(options) {
        if (options && typeof options.delay !== "undefined") {
          this.delay = options.delay;
        }

        if (options && typeof options.max !== "undefined") {
          this.max = options.max;
        }

        this._flushIfNeeded();
      }
      /**
       * Extend an object with queuing functionality.
       * The object will be extended with a function flush, and the methods provided in options.replace will be replaced with queued ones.
       *
       * @param object - The object to be extended.
       * @param options - Additional options.
       * @returns The created queue.
       */

    }, {
      key: "destroy",
      value:
      /**
       * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
       */
      function destroy() {
        this.flush();

        if (this._extended) {
          var object = this._extended.object;
          var methods = this._extended.methods;

          for (var i = 0; i < methods.length; i++) {
            var method = methods[i];

            if (method.original) {
              // @TODO: better solution?
              object[method.name] = method.original;
            } else {
              // @TODO: better solution?
              delete object[method.name];
            }
          }

          this._extended = null;
        }
      }
      /**
       * Replace a method on an object with a queued version.
       *
       * @param object - Object having the method.
       * @param method - The method name.
       */

    }, {
      key: "replace",
      value: function replace(object, method) {
        /* eslint-disable-next-line @typescript-eslint/no-this-alias -- Function this is necessary in the function bellow, so class this has to be saved into a variable here. */
        var me = this;
        var original = object[method];

        if (!original) {
          throw new Error("Method " + method + " undefined");
        }

        object[method] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          // add this call to the queue
          me.queue({
            args: args,
            fn: original,
            context: this
          });
        };
      }
      /**
       * Queue a call.
       *
       * @param entry - The function or entry to be queued.
       */

    }, {
      key: "queue",
      value: function queue(entry) {
        if (typeof entry === "function") {
          this._queue.push({
            fn: entry
          });
        } else {
          this._queue.push(entry);
        }

        this._flushIfNeeded();
      }
      /**
       * Check whether the queue needs to be flushed.
       */

    }, {
      key: "_flushIfNeeded",
      value: function _flushIfNeeded() {
        var _this = this;

        // flush when the maximum is exceeded.
        if (this._queue.length > this.max) {
          this.flush();
        } // flush after a period of inactivity when a delay is configured


        if (this._timeout != null) {
          clearTimeout(this._timeout);
          this._timeout = null;
        }

        if (this.queue.length > 0 && typeof this.delay === "number") {
          this._timeout = setTimeout$1(function () {
            _this.flush();
          }, this.delay);
        }
      }
      /**
       * Flush all queued calls
       */

    }, {
      key: "flush",
      value: function flush() {
        var _context, _context2;

        forEach$1(_context = splice(_context2 = this._queue).call(_context2, 0)).call(_context, function (entry) {
          entry.fn.apply(entry.context || entry.fn, entry.args || []);
        });
      }
    }], [{
      key: "extend",
      value: function extend(object, options) {
        var queue = new Queue(options);

        if (object.flush !== undefined) {
          throw new Error("Target object already has a property flush");
        }

        object.flush = function () {
          queue.flush();
        };

        var methods = [{
          name: "flush",
          original: undefined
        }];

        if (options && options.replace) {
          for (var i = 0; i < options.replace.length; i++) {
            var name = options.replace[i];
            methods.push({
              name: name,
              // @TODO: better solution?
              original: object[name]
            }); // @TODO: better solution?

            queue.replace(object, name);
          }
        }

        queue._extended = {
          object: object,
          methods: methods
        };
        return queue;
      }
    }]);

    return Queue;
  }();

  /**
   * [[DataSet]] code that can be reused in [[DataView]] or other similar implementations of [[DataInterface]].
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */
  var DataSetPart = /*#__PURE__*/function () {
    function DataSetPart() {
      _classCallCheck(this, DataSetPart);

      _defineProperty(this, "_subscribers", {
        "*": [],
        add: [],
        remove: [],
        update: []
      });

      _defineProperty(this, "subscribe", DataSetPart.prototype.on);

      _defineProperty(this, "unsubscribe", DataSetPart.prototype.off);
    }

    _createClass(DataSetPart, [{
      key: "_trigger",
      value:
      /**
       * Trigger an event
       *
       * @param event - Event name.
       * @param payload - Event payload.
       * @param senderId - Id of the sender.
       */
      function _trigger(event, payload, senderId) {
        var _context, _context2;

        if (event === "*") {
          throw new Error("Cannot trigger event *");
        }

        forEach$1(_context = concat$1(_context2 = []).call(_context2, _toConsumableArray(this._subscribers[event]), _toConsumableArray(this._subscribers["*"]))).call(_context, function (subscriber) {
          subscriber(event, payload, senderId != null ? senderId : null);
        });
      }
      /**
       * Subscribe to an event, add an event listener.
       *
       * @remarks Non-function callbacks are ignored.
       * @param event - Event name.
       * @param callback - Callback method.
       */

    }, {
      key: "on",
      value: function on(event, callback) {
        if (typeof callback === "function") {
          this._subscribers[event].push(callback);
        } // @TODO: Maybe throw for invalid callbacks?

      }
      /**
       * Unsubscribe from an event, remove an event listener.
       *
       * @remarks If the same callback was subscribed more than once **all** occurences will be removed.
       * @param event - Event name.
       * @param callback - Callback method.
       */

    }, {
      key: "off",
      value: function off(event, callback) {
        var _context3;

        this._subscribers[event] = filter(_context3 = this._subscribers[event]).call(_context3, function (subscriber) {
          return subscriber !== callback;
        });
      }
      /**
       * @deprecated Use on instead (PS: DataView.subscribe === DataView.on).
       */

    }]);

    return DataSetPart;
  }();

  var collection = collection$2;
  var collectionStrong = collectionStrong$2; // `Set` constructor
  // https://tc39.es/ecma262/#sec-set-objects

  collection('Set', function (init) {
    return function Set() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  }, collectionStrong);

  var path = path$q;
  var set$2 = path.Set;

  var parent$3 = set$2;
  var set$1 = parent$3;

  var set = set$1;

  var getIterator$4 = getIterator$7;
  var getIterator_1 = getIterator$4;

  var parent$2 = getIterator_1;
  var getIterator$3 = parent$2;

  var parent$1 = getIterator$3;
  var getIterator$2 = parent$1;

  var parent = getIterator$2;
  var getIterator$1 = parent;

  var getIterator = getIterator$1;

  var _Symbol$iterator;

  function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"]; if (!it) { if (isArray$1(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$2(o, minLen) { var _context10; if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = slice(_context10 = Object.prototype.toString.call(o)).call(_context10, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return from$3(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  _Symbol$iterator = iterator;

  /**
   * Data stream
   *
   * @remarks
   * [[DataStream]] offers an always up to date stream of items from a [[DataSet]] or [[DataView]].
   * That means that the stream is evaluated at the time of iteration, conversion to another data type or when [[cache]] is called, not when the [[DataStream]] was created.
   * Multiple invocations of for example [[toItemArray]] may yield different results (if the data source like for example [[DataSet]] gets modified).
   * @typeParam Item - The item type this stream is going to work with.
   */
  var DataStream = /*#__PURE__*/function () {
    /**
     * Create a new data stream.
     *
     * @param pairs - The id, item pairs.
     */
    function DataStream(pairs) {
      _classCallCheck(this, DataStream);

      _defineProperty(this, "_pairs", void 0);

      this._pairs = pairs;
    }
    /**
     * Return an iterable of key, value pairs for every entry in the stream.
     */


    _createClass(DataStream, [{
      key: _Symbol$iterator,
      value:
      /*#__PURE__*/
      regenerator.mark(function value() {
        var _iterator, _step, _step$value, id, item;

        return regenerator.wrap(function value$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _iterator = _createForOfIteratorHelper$2(this._pairs);
                _context.prev = 1;

                _iterator.s();

              case 3:
                if ((_step = _iterator.n()).done) {
                  _context.next = 9;
                  break;
                }

                _step$value = _slicedToArray(_step.value, 2), id = _step$value[0], item = _step$value[1];
                _context.next = 7;
                return [id, item];

              case 7:
                _context.next = 3;
                break;

              case 9:
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](1);

                _iterator.e(_context.t0);

              case 14:
                _context.prev = 14;

                _iterator.f();

                return _context.finish(14);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, value, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an iterable of key, value pairs for every entry in the stream.
       */

    }, {
      key: "entries",
      value:
      /*#__PURE__*/
      regenerator.mark(function entries() {
        var _iterator2, _step2, _step2$value, id, item;

        return regenerator.wrap(function entries$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iterator2 = _createForOfIteratorHelper$2(this._pairs);
                _context2.prev = 1;

                _iterator2.s();

              case 3:
                if ((_step2 = _iterator2.n()).done) {
                  _context2.next = 9;
                  break;
                }

                _step2$value = _slicedToArray(_step2.value, 2), id = _step2$value[0], item = _step2$value[1];
                _context2.next = 7;
                return [id, item];

              case 7:
                _context2.next = 3;
                break;

              case 9:
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](1);

                _iterator2.e(_context2.t0);

              case 14:
                _context2.prev = 14;

                _iterator2.f();

                return _context2.finish(14);

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, entries, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an iterable of keys in the stream.
       */

    }, {
      key: "keys",
      value:
      /*#__PURE__*/
      regenerator.mark(function keys() {
        var _iterator3, _step3, _step3$value, id;

        return regenerator.wrap(function keys$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _iterator3 = _createForOfIteratorHelper$2(this._pairs);
                _context3.prev = 1;

                _iterator3.s();

              case 3:
                if ((_step3 = _iterator3.n()).done) {
                  _context3.next = 9;
                  break;
                }

                _step3$value = _slicedToArray(_step3.value, 1), id = _step3$value[0];
                _context3.next = 7;
                return id;

              case 7:
                _context3.next = 3;
                break;

              case 9:
                _context3.next = 14;
                break;

              case 11:
                _context3.prev = 11;
                _context3.t0 = _context3["catch"](1);

                _iterator3.e(_context3.t0);

              case 14:
                _context3.prev = 14;

                _iterator3.f();

                return _context3.finish(14);

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, keys, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an iterable of values in the stream.
       */

    }, {
      key: "values",
      value:
      /*#__PURE__*/
      regenerator.mark(function values() {
        var _iterator4, _step4, _step4$value, item;

        return regenerator.wrap(function values$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iterator4 = _createForOfIteratorHelper$2(this._pairs);
                _context4.prev = 1;

                _iterator4.s();

              case 3:
                if ((_step4 = _iterator4.n()).done) {
                  _context4.next = 9;
                  break;
                }

                _step4$value = _slicedToArray(_step4.value, 2), item = _step4$value[1];
                _context4.next = 7;
                return item;

              case 7:
                _context4.next = 3;
                break;

              case 9:
                _context4.next = 14;
                break;

              case 11:
                _context4.prev = 11;
                _context4.t0 = _context4["catch"](1);

                _iterator4.e(_context4.t0);

              case 14:
                _context4.prev = 14;

                _iterator4.f();

                return _context4.finish(14);

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, values, this, [[1, 11, 14, 17]]);
      })
      /**
       * Return an array containing all the ids in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       * @returns The array with all ids from this stream.
       */

    }, {
      key: "toIdArray",
      value: function toIdArray() {
        var _context5;

        return map$3(_context5 = _toConsumableArray(this._pairs)).call(_context5, function (pair) {
          return pair[0];
        });
      }
      /**
       * Return an array containing all the items in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       * @returns The array with all items from this stream.
       */

    }, {
      key: "toItemArray",
      value: function toItemArray() {
        var _context6;

        return map$3(_context6 = _toConsumableArray(this._pairs)).call(_context6, function (pair) {
          return pair[1];
        });
      }
      /**
       * Return an array containing all the entries in this stream.
       *
       * @remarks
       * The array may contain duplicities.
       * @returns The array with all entries from this stream.
       */

    }, {
      key: "toEntryArray",
      value: function toEntryArray() {
        return _toConsumableArray(this._pairs);
      }
      /**
       * Return an object map containing all the items in this stream accessible by ids.
       *
       * @remarks
       * In case of duplicate ids (coerced to string so `7 == '7'`) the last encoutered appears in the returned object.
       * @returns The object map of all id → item pairs from this stream.
       */

    }, {
      key: "toObjectMap",
      value: function toObjectMap() {
        var map = create$5(null);

        var _iterator5 = _createForOfIteratorHelper$2(this._pairs),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _step5$value = _slicedToArray(_step5.value, 2),
                id = _step5$value[0],
                item = _step5$value[1];

            map[id] = item;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return map;
      }
      /**
       * Return a map containing all the items in this stream accessible by ids.
       *
       * @returns The map of all id → item pairs from this stream.
       */

    }, {
      key: "toMap",
      value: function toMap() {
        return new map(this._pairs);
      }
      /**
       * Return a set containing all the (unique) ids in this stream.
       *
       * @returns The set of all ids from this stream.
       */

    }, {
      key: "toIdSet",
      value: function toIdSet() {
        return new set(this.toIdArray());
      }
      /**
       * Return a set containing all the (unique) items in this stream.
       *
       * @returns The set of all items from this stream.
       */

    }, {
      key: "toItemSet",
      value: function toItemSet() {
        return new set(this.toItemArray());
      }
      /**
       * Cache the items from this stream.
       *
       * @remarks
       * This method allows for items to be fetched immediatelly and used (possibly multiple times) later.
       * It can also be used to optimize performance as [[DataStream]] would otherwise reevaluate everything upon each iteration.
       *
       * ## Example
       * ```javascript
       * const ds = new DataSet([…])
       *
       * const cachedStream = ds.stream()
       *   .filter(…)
       *   .sort(…)
       *   .map(…)
       *   .cached(…) // Data are fetched, processed and cached here.
       *
       * ds.clear()
       * chachedStream // Still has all the items.
       * ```
       * @returns A new [[DataStream]] with cached items (detached from the original [[DataSet]]).
       */

    }, {
      key: "cache",
      value: function cache() {
        return new DataStream(_toConsumableArray(this._pairs));
      }
      /**
       * Get the distinct values of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       * @typeParam T - The type of the distinct value.
       * @returns A set of all distinct properties.
       */

    }, {
      key: "distinct",
      value: function distinct(callback) {
        var set$1 = new set();

        var _iterator6 = _createForOfIteratorHelper$2(this._pairs),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _step6$value = _slicedToArray(_step6.value, 2),
                id = _step6$value[0],
                item = _step6$value[1];

            set$1.add(callback(item, id));
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return set$1;
      }
      /**
       * Filter the items of the stream.
       *
       * @param callback - The function that decides whether an item will be included.
       * @returns A new data stream with the filtered items.
       */

    }, {
      key: "filter",
      value: function filter(callback) {
        var pairs = this._pairs;
        return new DataStream(_defineProperty({}, iterator, /*#__PURE__*/regenerator.mark(function _callee() {
          var _iterator7, _step7, _step7$value, id, item;

          return regenerator.wrap(function _callee$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _iterator7 = _createForOfIteratorHelper$2(pairs);
                  _context7.prev = 1;

                  _iterator7.s();

                case 3:
                  if ((_step7 = _iterator7.n()).done) {
                    _context7.next = 10;
                    break;
                  }

                  _step7$value = _slicedToArray(_step7.value, 2), id = _step7$value[0], item = _step7$value[1];

                  if (!callback(item, id)) {
                    _context7.next = 8;
                    break;
                  }

                  _context7.next = 8;
                  return [id, item];

                case 8:
                  _context7.next = 3;
                  break;

                case 10:
                  _context7.next = 15;
                  break;

                case 12:
                  _context7.prev = 12;
                  _context7.t0 = _context7["catch"](1);

                  _iterator7.e(_context7.t0);

                case 15:
                  _context7.prev = 15;

                  _iterator7.f();

                  return _context7.finish(15);

                case 18:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee, null, [[1, 12, 15, 18]]);
        })));
      }
      /**
       * Execute a callback for each item of the stream.
       *
       * @param callback - The function that will be invoked for each item.
       */

    }, {
      key: "forEach",
      value: function forEach(callback) {
        var _iterator8 = _createForOfIteratorHelper$2(this._pairs),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _step8$value = _slicedToArray(_step8.value, 2),
                id = _step8$value[0],
                item = _step8$value[1];

            callback(item, id);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      }
      /**
       * Map the items into a different type.
       *
       * @param callback - The function that does the conversion.
       * @typeParam Mapped - The type of the item after mapping.
       * @returns A new data stream with the mapped items.
       */

    }, {
      key: "map",
      value: function map(callback) {
        var pairs = this._pairs;
        return new DataStream(_defineProperty({}, iterator, /*#__PURE__*/regenerator.mark(function _callee2() {
          var _iterator9, _step9, _step9$value, id, item;

          return regenerator.wrap(function _callee2$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _iterator9 = _createForOfIteratorHelper$2(pairs);
                  _context8.prev = 1;

                  _iterator9.s();

                case 3:
                  if ((_step9 = _iterator9.n()).done) {
                    _context8.next = 9;
                    break;
                  }

                  _step9$value = _slicedToArray(_step9.value, 2), id = _step9$value[0], item = _step9$value[1];
                  _context8.next = 7;
                  return [id, callback(item, id)];

                case 7:
                  _context8.next = 3;
                  break;

                case 9:
                  _context8.next = 14;
                  break;

                case 11:
                  _context8.prev = 11;
                  _context8.t0 = _context8["catch"](1);

                  _iterator9.e(_context8.t0);

                case 14:
                  _context8.prev = 14;

                  _iterator9.f();

                  return _context8.finish(14);

                case 17:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee2, null, [[1, 11, 14, 17]]);
        })));
      }
      /**
       * Get the item with the maximum value of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       * @returns The item with the maximum if found otherwise null.
       */

    }, {
      key: "max",
      value: function max(callback) {
        var iter = getIterator(this._pairs);

        var curr = iter.next();

        if (curr.done) {
          return null;
        }

        var maxItem = curr.value[1];
        var maxValue = callback(curr.value[1], curr.value[0]);

        while (!(curr = iter.next()).done) {
          var _curr$value = _slicedToArray(curr.value, 2),
              id = _curr$value[0],
              item = _curr$value[1];

          var _value = callback(item, id);

          if (_value > maxValue) {
            maxValue = _value;
            maxItem = item;
          }
        }

        return maxItem;
      }
      /**
       * Get the item with the minimum value of given property.
       *
       * @param callback - The function that picks and possibly converts the property.
       * @returns The item with the minimum if found otherwise null.
       */

    }, {
      key: "min",
      value: function min(callback) {
        var iter = getIterator(this._pairs);

        var curr = iter.next();

        if (curr.done) {
          return null;
        }

        var minItem = curr.value[1];
        var minValue = callback(curr.value[1], curr.value[0]);

        while (!(curr = iter.next()).done) {
          var _curr$value2 = _slicedToArray(curr.value, 2),
              id = _curr$value2[0],
              item = _curr$value2[1];

          var _value2 = callback(item, id);

          if (_value2 < minValue) {
            minValue = _value2;
            minItem = item;
          }
        }

        return minItem;
      }
      /**
       * Reduce the items into a single value.
       *
       * @param callback - The function that does the reduction.
       * @param accumulator - The initial value of the accumulator.
       * @typeParam T - The type of the accumulated value.
       * @returns The reduced value.
       */

    }, {
      key: "reduce",
      value: function reduce(callback, accumulator) {
        var _iterator10 = _createForOfIteratorHelper$2(this._pairs),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var _step10$value = _slicedToArray(_step10.value, 2),
                id = _step10$value[0],
                item = _step10$value[1];

            accumulator = callback(accumulator, item, id);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }

        return accumulator;
      }
      /**
       * Sort the items.
       *
       * @param callback - Item comparator.
       * @returns A new stream with sorted items.
       */

    }, {
      key: "sort",
      value: function sort$1(callback) {
        var _this = this;

        return new DataStream(_defineProperty({}, iterator, function () {
          var _context9;

          return getIterator(sort(_context9 = _toConsumableArray(_this._pairs)).call(_context9, function (_ref, _ref2) {
            var _ref3 = _slicedToArray(_ref, 2),
                idA = _ref3[0],
                itemA = _ref3[1];

            var _ref4 = _slicedToArray(_ref2, 2),
                idB = _ref4[0],
                itemB = _ref4[1];

            return callback(itemA, itemB, idA, idB);
          }));
        }));
      }
    }]);

    return DataStream;
  }();

  function ownKeys(object, enumerableOnly) { var keys = keys$4(object); if (getOwnPropertySymbols) { var symbols = getOwnPropertySymbols(object); enumerableOnly && (symbols = filter(symbols).call(symbols, function (sym) { return getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var _context10, _context11; var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? forEach$1(_context10 = ownKeys(Object(source), !0)).call(_context10, function (key) { _defineProperty(target, key, source[key]); }) : getOwnPropertyDescriptors ? defineProperties(target, getOwnPropertyDescriptors(source)) : forEach$1(_context11 = ownKeys(Object(source))).call(_context11, function (key) { defineProperty$4(target, key, getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"]; if (!it) { if (isArray$1(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$1(o, minLen) { var _context9; if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = slice(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return from$3(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !construct) return false; if (construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * Add an id to given item if it doesn't have one already.
   *
   * @remarks
   * The item will be modified.
   * @param item - The item that will have an id after a call to this function.
   * @param idProp - The key of the id property.
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   * @returns true
   */

  function ensureFullItem(item, idProp) {
    if (item[idProp] == null) {
      // generate an id
      item[idProp] = v4();
    }

    return item;
  }
  /**
   * # DataSet
   *
   * Vis.js comes with a flexible DataSet, which can be used to hold and
   * manipulate unstructured data and listen for changes in the data. The DataSet
   * is key/value based. Data items can be added, updated and removed from the
   * DataSet, and one can subscribe to changes in the DataSet. The data in the
   * DataSet can be filtered and ordered. Data can be normalized when appending it
   * to the DataSet as well.
   *
   * ## Example
   *
   * The following example shows how to use a DataSet.
   *
   * ```javascript
   * // create a DataSet
   * var options = {};
   * var data = new vis.DataSet(options);
   *
   * // add items
   * // note that the data items can contain different properties and data formats
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // subscribe to any change in the DataSet
   * data.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an existing item
   * data.update({id: 2, group: 1});
   *
   * // remove an item
   * data.remove(4);
   *
   * // get all ids
   * var ids = data.getIds();
   * console.log('ids', ids);
   *
   * // get a specific item
   * var item1 = data.get(1);
   * console.log('item1', item1);
   *
   * // retrieve a filtered subset of the data
   * var items = data.get({
   *   filter: function (item) {
   *     return item.group == 1;
   *   }
   * });
   * console.log('filtered items', items);
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */


  var DataSet = /*#__PURE__*/function (_DataSetPart) {
    _inherits(DataSet, _DataSetPart);

    var _super = _createSuper$1(DataSet);

    /**
     * Construct a new DataSet.
     *
     * @param data - Initial data or options.
     * @param options - Options (type error if data is also options).
     */
    function DataSet(data, options) {
      var _this;

      _classCallCheck(this, DataSet);

      _this = _super.call(this); // correctly read optional arguments

      _defineProperty(_assertThisInitialized(_this), "flush", void 0);

      _defineProperty(_assertThisInitialized(_this), "length", void 0);

      _defineProperty(_assertThisInitialized(_this), "_options", void 0);

      _defineProperty(_assertThisInitialized(_this), "_data", void 0);

      _defineProperty(_assertThisInitialized(_this), "_idProp", void 0);

      _defineProperty(_assertThisInitialized(_this), "_queue", null);

      if (data && !isArray$1(data)) {
        options = data;
        data = [];
      }

      _this._options = options || {};
      _this._data = new map(); // map with data indexed by id

      _this.length = 0; // number of items in the DataSet

      _this._idProp = _this._options.fieldId || "id"; // name of the field containing id
      // add initial data when provided

      if (data && data.length) {
        _this.add(data);
      }

      _this.setOptions(options);

      return _this;
    }
    /**
     * Set new options.
     *
     * @param options - The new options.
     */


    _createClass(DataSet, [{
      key: "idProp",
      get:
      /** Flush all queued calls. */

      /** @inheritDoc */

      /** @inheritDoc */
      function get() {
        return this._idProp;
      }
    }, {
      key: "setOptions",
      value: function setOptions(options) {
        if (options && options.queue !== undefined) {
          if (options.queue === false) {
            // delete queue if loaded
            if (this._queue) {
              this._queue.destroy();

              this._queue = null;
            }
          } else {
            // create queue and update its options
            if (!this._queue) {
              this._queue = Queue.extend(this, {
                replace: ["add", "update", "remove"]
              });
            }

            if (options.queue && _typeof(options.queue) === "object") {
              this._queue.setOptions(options.queue);
            }
          }
        }
      }
      /**
       * Add a data item or an array with items.
       *
       * After the items are added to the DataSet, the DataSet will trigger an event `add`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet()
       *
       * // add items
       * const ids = data.add([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { text: 'item without an id' }
       * ])
       *
       * console.log(ids) // [1, 2, '<UUIDv4>']
       * ```
       *
       * @param data - Items to be added (ids will be generated if missing).
       * @param senderId - Sender id.
       * @returns addedIds - Array with the ids (generated if not present) of the added items.
       * @throws When an item with the same id as any of the added items already exists.
       */

    }, {
      key: "add",
      value: function add(data, senderId) {
        var _this2 = this;

        var addedIds = [];
        var id;

        if (isArray$1(data)) {
          // Array
          var idsToAdd = map$3(data).call(data, function (d) {
            return d[_this2._idProp];
          });

          if (some(idsToAdd).call(idsToAdd, function (id) {
            return _this2._data.has(id);
          })) {
            throw new Error("A duplicate id was found in the parameter array.");
          }

          for (var i = 0, len = data.length; i < len; i++) {
            id = this._addItem(data[i]);
            addedIds.push(id);
          }
        } else if (data && _typeof(data) === "object") {
          // Single item
          id = this._addItem(data);
          addedIds.push(id);
        } else {
          throw new Error("Unknown dataType");
        }

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }

        return addedIds;
      }
      /**
       * Update existing items. When an item does not exist, it will be created.
       *
       * @remarks
       * The provided properties will be merged in the existing item. When an item does not exist, it will be created.
       *
       * After the items are updated, the DataSet will trigger an event `add` for the added items, and an event `update`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' }
       * ])
       *
       * // update items
       * const ids = data.update([
       *   { id: 2, text: 'item 2 (updated)' },
       *   { id: 4, text: 'item 4 (new)' }
       * ])
       *
       * console.log(ids) // [2, 4]
       * ```
       *
       * ## Warning for TypeScript users
       * This method may introduce partial items into the data set. Use add or updateOnly instead for better type safety.
       * @param data - Items to be updated (if the id is already present) or added (if the id is missing).
       * @param senderId - Sender id.
       * @returns updatedIds - The ids of the added (these may be newly generated if there was no id in the item from the data) or updated items.
       * @throws When the supplied data is neither an item nor an array of items.
       */

    }, {
      key: "update",
      value: function update(data, senderId) {
        var _this3 = this;

        var addedIds = [];
        var updatedIds = [];
        var oldData = [];
        var updatedData = [];
        var idProp = this._idProp;

        var addOrUpdate = function addOrUpdate(item) {
          var origId = item[idProp];

          if (origId != null && _this3._data.has(origId)) {
            var fullItem = item; // it has an id, therefore it is a fullitem

            var oldItem = assign$2({}, _this3._data.get(origId)); // update item


            var id = _this3._updateItem(fullItem);

            updatedIds.push(id);
            updatedData.push(fullItem);
            oldData.push(oldItem);
          } else {
            // add new item
            var _id = _this3._addItem(item);

            addedIds.push(_id);
          }
        };

        if (isArray$1(data)) {
          // Array
          for (var i = 0, len = data.length; i < len; i++) {
            if (data[i] && _typeof(data[i]) === "object") {
              addOrUpdate(data[i]);
            } else {
              console.warn("Ignoring input item, which is not an object at index " + i);
            }
          }
        } else if (data && _typeof(data) === "object") {
          // Single item
          addOrUpdate(data);
        } else {
          throw new Error("Unknown dataType");
        }

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }

        if (updatedIds.length) {
          var props = {
            items: updatedIds,
            oldData: oldData,
            data: updatedData
          }; // TODO: remove deprecated property 'data' some day
          //Object.defineProperty(props, 'data', {
          //  'get': (function() {
          //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
          //    return updatedData;
          //  }).bind(this)
          //});

          this._trigger("update", props, senderId);
        }

        return concat$1(addedIds).call(addedIds, updatedIds);
      }
      /**
       * Update existing items. When an item does not exist, an error will be thrown.
       *
       * @remarks
       * The provided properties will be deeply merged into the existing item.
       * When an item does not exist (id not present in the data set or absent), an error will be thrown and nothing will be changed.
       *
       * After the items are updated, the DataSet will trigger an event `update`.
       * When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       *
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' },
       * ])
       *
       * // update items
       * const ids = data.update([
       *   { id: 2, text: 'item 2 (updated)' }, // works
       *   // { id: 4, text: 'item 4 (new)' }, // would throw
       *   // { text: 'item 4 (new)' }, // would also throw
       * ])
       *
       * console.log(ids) // [2]
       * ```
       * @param data - Updates (the id and optionally other props) to the items in this data set.
       * @param senderId - Sender id.
       * @returns updatedIds - The ids of the updated items.
       * @throws When the supplied data is neither an item nor an array of items, when the ids are missing.
       */

    }, {
      key: "updateOnly",
      value: function updateOnly(data, senderId) {
        var _context,
            _this4 = this;

        if (!isArray$1(data)) {
          data = [data];
        }

        var updateEventData = map$3(_context = map$3(data).call(data, function (update) {
          var oldData = _this4._data.get(update[_this4._idProp]);

          if (oldData == null) {
            throw new Error("Updating non-existent items is not allowed.");
          }

          return {
            oldData: oldData,
            update: update
          };
        })).call(_context, function (_ref) {
          var oldData = _ref.oldData,
              update = _ref.update;
          var id = oldData[_this4._idProp];
          var updatedData = pureDeepObjectAssign(oldData, update);

          _this4._data.set(id, updatedData);

          return {
            id: id,
            oldData: oldData,
            updatedData: updatedData
          };
        });

        if (updateEventData.length) {
          var props = {
            items: map$3(updateEventData).call(updateEventData, function (value) {
              return value.id;
            }),
            oldData: map$3(updateEventData).call(updateEventData, function (value) {
              return value.oldData;
            }),
            data: map$3(updateEventData).call(updateEventData, function (value) {
              return value.updatedData;
            })
          }; // TODO: remove deprecated property 'data' some day
          //Object.defineProperty(props, 'data', {
          //  'get': (function() {
          //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
          //    return updatedData;
          //  }).bind(this)
          //});

          this._trigger("update", props, senderId);

          return props.items;
        } else {
          return [];
        }
      }
      /** @inheritDoc */

    }, {
      key: "get",
      value: function get(first, second) {
        // @TODO: Woudn't it be better to split this into multiple methods?
        // parse the arguments
        var id = undefined;
        var ids = undefined;
        var options = undefined;

        if (isId(first)) {
          // get(id [, options])
          id = first;
          options = second;
        } else if (isArray$1(first)) {
          // get(ids [, options])
          ids = first;
          options = second;
        } else {
          // get([, options])
          options = first;
        } // determine the return type


        var returnType = options && options.returnType === "Object" ? "Object" : "Array"; // @TODO: WTF is this? Or am I missing something?
        // var returnType
        // if (options && options.returnType) {
        //   var allowedValues = ['Array', 'Object']
        //   returnType =
        //     allowedValues.indexOf(options.returnType) == -1
        //       ? 'Array'
        //       : options.returnType
        // } else {
        //   returnType = 'Array'
        // }
        // build options

        var filter$1 = options && filter(options);

        var items = [];
        var item = undefined;
        var itemIds = undefined;
        var itemId = undefined; // convert items

        if (id != null) {
          // return a single item
          item = this._data.get(id);

          if (item && filter$1 && !filter$1(item)) {
            item = undefined;
          }
        } else if (ids != null) {
          // return a subset of items
          for (var i = 0, len = ids.length; i < len; i++) {
            item = this._data.get(ids[i]);

            if (item != null && (!filter$1 || filter$1(item))) {
              items.push(item);
            }
          }
        } else {
          var _context2;

          // return all items
          itemIds = _toConsumableArray(keys(_context2 = this._data).call(_context2));

          for (var _i = 0, _len = itemIds.length; _i < _len; _i++) {
            itemId = itemIds[_i];
            item = this._data.get(itemId);

            if (item != null && (!filter$1 || filter$1(item))) {
              items.push(item);
            }
          }
        } // order the results


        if (options && options.order && id == undefined) {
          this._sort(items, options.order);
        } // filter fields of the items


        if (options && options.fields) {
          var fields = options.fields;

          if (id != undefined && item != null) {
            item = this._filterFields(item, fields);
          } else {
            for (var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++) {
              items[_i2] = this._filterFields(items[_i2], fields);
            }
          }
        } // return the results


        if (returnType == "Object") {
          var result = {};

          for (var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++) {
            var resultant = items[_i3]; // @TODO: Shoudn't this be this._fieldId?
            // result[resultant.id] = resultant

            var _id2 = resultant[this._idProp];
            result[_id2] = resultant;
          }

          return result;
        } else {
          if (id != null) {
            var _item;

            // a single item
            return (_item = item) !== null && _item !== void 0 ? _item : null;
          } else {
            // just return our array
            return items;
          }
        }
      }
      /** @inheritDoc */

    }, {
      key: "getIds",
      value: function getIds(options) {
        var data = this._data;

        var filter$1 = options && filter(options);

        var order = options && options.order;

        var itemIds = _toConsumableArray(keys(data).call(data));

        var ids = [];

        if (filter$1) {
          // get filtered items
          if (order) {
            // create ordered list
            var items = [];

            for (var i = 0, len = itemIds.length; i < len; i++) {
              var id = itemIds[i];

              var item = this._data.get(id);

              if (item != null && filter$1(item)) {
                items.push(item);
              }
            }

            this._sort(items, order);

            for (var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++) {
              ids.push(items[_i4][this._idProp]);
            }
          } else {
            // create unordered list
            for (var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++) {
              var _id3 = itemIds[_i5];

              var _item2 = this._data.get(_id3);

              if (_item2 != null && filter$1(_item2)) {
                ids.push(_item2[this._idProp]);
              }
            }
          }
        } else {
          // get all items
          if (order) {
            // create an ordered list
            var _items = [];

            for (var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++) {
              var _id4 = itemIds[_i6];

              _items.push(data.get(_id4));
            }

            this._sort(_items, order);

            for (var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++) {
              ids.push(_items[_i7][this._idProp]);
            }
          } else {
            // create unordered list
            for (var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++) {
              var _id5 = itemIds[_i8];

              var _item3 = data.get(_id5);

              if (_item3 != null) {
                ids.push(_item3[this._idProp]);
              }
            }
          }
        }

        return ids;
      }
      /** @inheritDoc */

    }, {
      key: "getDataSet",
      value: function getDataSet() {
        return this;
      }
      /** @inheritDoc */

    }, {
      key: "forEach",
      value: function forEach(callback, options) {
        var filter$1 = options && filter(options);

        var data = this._data;

        var itemIds = _toConsumableArray(keys(data).call(data));

        if (options && options.order) {
          // execute forEach on ordered list
          var items = this.get(options);

          for (var i = 0, len = items.length; i < len; i++) {
            var item = items[i];
            var id = item[this._idProp];
            callback(item, id);
          }
        } else {
          // unordered
          for (var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++) {
            var _id6 = itemIds[_i9];

            var _item4 = this._data.get(_id6);

            if (_item4 != null && (!filter$1 || filter$1(_item4))) {
              callback(_item4, _id6);
            }
          }
        }
      }
      /** @inheritDoc */

    }, {
      key: "map",
      value: function map(callback, options) {
        var filter$1 = options && filter(options);

        var mappedItems = [];
        var data = this._data;

        var itemIds = _toConsumableArray(keys(data).call(data)); // convert and filter items


        for (var i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];

          var item = this._data.get(id);

          if (item != null && (!filter$1 || filter$1(item))) {
            mappedItems.push(callback(item, id));
          }
        } // order items


        if (options && options.order) {
          this._sort(mappedItems, options.order);
        }

        return mappedItems;
      }
      /**
       * Filter the fields of an item.
       *
       * @param item - The item whose fields should be filtered.
       * @param fields - The names of the fields that will be kept.
       * @typeParam K - Field name type.
       * @returns The item without any additional fields.
       */

    }, {
      key: "_filterFields",
      value: function _filterFields(item, fields) {
        var _context3;

        if (!item) {
          // item is null
          return item;
        }

        return reduce(_context3 = isArray$1(fields) ? // Use the supplied array
        fields : // Use the keys of the supplied object
        keys$4(fields)).call(_context3, function (filteredItem, field) {
          filteredItem[field] = item[field];
          return filteredItem;
        }, {});
      }
      /**
       * Sort the provided array with items.
       *
       * @param items - Items to be sorted in place.
       * @param order - A field name or custom sort function.
       * @typeParam T - The type of the items in the items array.
       */

    }, {
      key: "_sort",
      value: function _sort(items, order) {
        if (typeof order === "string") {
          // order by provided field name
          var name = order; // field name

          sort(items).call(items, function (a, b) {
            // @TODO: How to treat missing properties?
            var av = a[name];
            var bv = b[name];
            return av > bv ? 1 : av < bv ? -1 : 0;
          });
        } else if (typeof order === "function") {
          // order by sort function
          sort(items).call(items, order);
        } else {
          // TODO: extend order by an Object {field:string, direction:string}
          //       where direction can be 'asc' or 'desc'
          throw new TypeError("Order must be a function or a string");
        }
      }
      /**
       * Remove an item or multiple items by “reference” (only the id is used) or by id.
       *
       * The method ignores removal of non-existing items, and returns an array containing the ids of the items which are actually removed from the DataSet.
       *
       * After the items are removed, the DataSet will trigger an event `remove` for the removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * ## Example
       * ```javascript
       * // create a DataSet
       * const data = new vis.DataSet([
       *   { id: 1, text: 'item 1' },
       *   { id: 2, text: 'item 2' },
       *   { id: 3, text: 'item 3' }
       * ])
       *
       * // remove items
       * const ids = data.remove([2, { id: 3 }, 4])
       *
       * console.log(ids) // [2, 3]
       * ```
       *
       * @param id - One or more items or ids of items to be removed.
       * @param senderId - Sender id.
       * @returns The ids of the removed items.
       */

    }, {
      key: "remove",
      value: function remove(id, senderId) {
        var removedIds = [];
        var removedItems = []; // force everything to be an array for simplicity

        var ids = isArray$1(id) ? id : [id];

        for (var i = 0, len = ids.length; i < len; i++) {
          var item = this._remove(ids[i]);

          if (item) {
            var itemId = item[this._idProp];

            if (itemId != null) {
              removedIds.push(itemId);
              removedItems.push(item);
            }
          }
        }

        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          }, senderId);
        }

        return removedIds;
      }
      /**
       * Remove an item by its id or reference.
       *
       * @param id - Id of an item or the item itself.
       * @returns The removed item if removed, null otherwise.
       */

    }, {
      key: "_remove",
      value: function _remove(id) {
        // @TODO: It origianlly returned the item although the docs say id.
        // The code expects the item, so probably an error in the docs.
        var ident; // confirm the id to use based on the args type

        if (isId(id)) {
          ident = id;
        } else if (id && _typeof(id) === "object") {
          ident = id[this._idProp]; // look for the identifier field using ._idProp
        } // do the removing if the item is found


        if (ident != null && this._data.has(ident)) {
          var item = this._data.get(ident) || null;

          this._data.delete(ident);

          --this.length;
          return item;
        }

        return null;
      }
      /**
       * Clear the entire data set.
       *
       * After the items are removed, the [[DataSet]] will trigger an event `remove` for all removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
       *
       * @param senderId - Sender id.
       * @returns removedIds - The ids of all removed items.
       */

    }, {
      key: "clear",
      value: function clear(senderId) {
        var _context4;

        var ids = _toConsumableArray(keys(_context4 = this._data).call(_context4));

        var items = [];

        for (var i = 0, len = ids.length; i < len; i++) {
          items.push(this._data.get(ids[i]));
        }

        this._data.clear();

        this.length = 0;

        this._trigger("remove", {
          items: ids,
          oldData: items
        }, senderId);

        return ids;
      }
      /**
       * Find the item with maximum value of a specified field.
       *
       * @param field - Name of the property that should be searched for max value.
       * @returns Item containing max value, or null if no items.
       */

    }, {
      key: "max",
      value: function max(field) {
        var _context5;

        var max = null;
        var maxField = null;

        var _iterator = _createForOfIteratorHelper$1(values(_context5 = this._data).call(_context5)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            var itemField = item[field];

            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
              max = item;
              maxField = itemField;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return max || null;
      }
      /**
       * Find the item with minimum value of a specified field.
       *
       * @param field - Name of the property that should be searched for min value.
       * @returns Item containing min value, or null if no items.
       */

    }, {
      key: "min",
      value: function min(field) {
        var _context6;

        var min = null;
        var minField = null;

        var _iterator2 = _createForOfIteratorHelper$1(values(_context6 = this._data).call(_context6)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            var itemField = item[field];

            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
              min = item;
              minField = itemField;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return min || null;
      }
      /**
       * Find all distinct values of a specified field
       *
       * @param prop - The property name whose distinct values should be returned.
       * @returns Unordered array containing all distinct values. Items without specified property are ignored.
       */

    }, {
      key: "distinct",
      value: function distinct(prop) {
        var data = this._data;

        var itemIds = _toConsumableArray(keys(data).call(data));

        var values = [];
        var count = 0;

        for (var i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];
          var item = data.get(id);
          var value = item[prop];
          var exists = false;

          for (var j = 0; j < count; j++) {
            if (values[j] == value) {
              exists = true;
              break;
            }
          }

          if (!exists && value !== undefined) {
            values[count] = value;
            count++;
          }
        }

        return values;
      }
      /**
       * Add a single item. Will fail when an item with the same id already exists.
       *
       * @param item - A new item to be added.
       * @returns Added item's id. An id is generated when it is not present in the item.
       */

    }, {
      key: "_addItem",
      value: function _addItem(item) {
        var fullItem = ensureFullItem(item, this._idProp);
        var id = fullItem[this._idProp]; // check whether this id is already taken

        if (this._data.has(id)) {
          // item already exists
          throw new Error("Cannot add item: item with id " + id + " already exists");
        }

        this._data.set(id, fullItem);

        ++this.length;
        return id;
      }
      /**
       * Update a single item: merge with existing item.
       * Will fail when the item has no id, or when there does not exist an item with the same id.
       *
       * @param update - The new item
       * @returns The id of the updated item.
       */

    }, {
      key: "_updateItem",
      value: function _updateItem(update) {
        var id = update[this._idProp];

        if (id == null) {
          throw new Error("Cannot update item: item has no id (item: " + stringify$1(update) + ")");
        }

        var item = this._data.get(id);

        if (!item) {
          // item doesn't exist
          throw new Error("Cannot update item: no item with id " + id + " found");
        }

        this._data.set(id, _objectSpread(_objectSpread({}, item), update));

        return id;
      }
      /** @inheritDoc */

    }, {
      key: "stream",
      value: function stream(ids) {
        if (ids) {
          var data = this._data;
          return new DataStream(_defineProperty({}, iterator, /*#__PURE__*/regenerator.mark(function _callee() {
            var _iterator3, _step3, id, item;

            return regenerator.wrap(function _callee$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _iterator3 = _createForOfIteratorHelper$1(ids);
                    _context7.prev = 1;

                    _iterator3.s();

                  case 3:
                    if ((_step3 = _iterator3.n()).done) {
                      _context7.next = 11;
                      break;
                    }

                    id = _step3.value;
                    item = data.get(id);

                    if (!(item != null)) {
                      _context7.next = 9;
                      break;
                    }

                    _context7.next = 9;
                    return [id, item];

                  case 9:
                    _context7.next = 3;
                    break;

                  case 11:
                    _context7.next = 16;
                    break;

                  case 13:
                    _context7.prev = 13;
                    _context7.t0 = _context7["catch"](1);

                    _iterator3.e(_context7.t0);

                  case 16:
                    _context7.prev = 16;

                    _iterator3.f();

                    return _context7.finish(16);

                  case 19:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee, null, [[1, 13, 16, 19]]);
          })));
        } else {
          var _context8;

          return new DataStream(_defineProperty({}, iterator, bind$6(_context8 = entries(this._data)).call(_context8, this._data)));
        }
      }
    }]);

    return DataSet;
  }(DataSetPart);

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"]; if (!it) { if (isArray$1(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { var _context5; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = slice(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return from$3(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !construct) return false; if (construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * DataView
   *
   * A DataView offers a filtered and/or formatted view on a DataSet. One can subscribe to changes in a DataView, and easily get filtered or formatted data without having to specify filters and field types all the time.
   *
   * ## Example
   * ```javascript
   * // create a DataSet
   * var data = new vis.DataSet();
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // create a DataView
   * // the view will only contain items having a property group with value 1,
   * // and will only output fields id, text, and date.
   * var view = new vis.DataView(data, {
   *   filter: function (item) {
   *     return (item.group == 1);
   *   },
   *   fields: ['id', 'text', 'date']
   * });
   *
   * // subscribe to any change in the DataView
   * view.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an item in the data set
   * data.update({id: 2, group: 1});
   *
   * // get all ids in the view
   * var ids = view.getIds();
   * console.log('ids', ids); // will output [1, 2]
   *
   * // get all items in the view
   * var items = view.get();
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */

  var DataView = /*#__PURE__*/function (_DataSetPart) {
    _inherits(DataView, _DataSetPart);

    var _super = _createSuper(DataView);

    /**
     * Create a DataView.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @param options - Options to configure this data view.
     */
    function DataView(data, options) {
      var _context;

      var _this;

      _classCallCheck(this, DataView);

      _this = _super.call(this);

      _defineProperty(_assertThisInitialized(_this), "length", 0);

      _defineProperty(_assertThisInitialized(_this), "_listener", void 0);

      _defineProperty(_assertThisInitialized(_this), "_data", void 0);

      _defineProperty(_assertThisInitialized(_this), "_ids", new set());

      _defineProperty(_assertThisInitialized(_this), "_options", void 0);

      _this._options = options || {};
      _this._listener = bind$6(_context = _this._onEvent).call(_context, _assertThisInitialized(_this));

      _this.setData(data);

      return _this;
    } // TODO: implement a function .config() to dynamically update things like configured filter
    // and trigger changes accordingly

    /**
     * Set a data source for the view.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @remarks
     * Note that when the data view is bound to a data set it won't be garbage
     * collected unless the data set is too. Use `dataView.setData(null)` or
     * `dataView.dispose()` to enable garbage collection before you lose the last
     * reference.
     */


    _createClass(DataView, [{
      key: "idProp",
      get:
      /** @inheritDoc */

      /** @inheritDoc */
      function get() {
        return this.getDataSet().idProp;
      }
    }, {
      key: "setData",
      value: function setData(data) {
        if (this._data) {
          // unsubscribe from current dataset
          if (this._data.off) {
            this._data.off("*", this._listener);
          } // trigger a remove of all items in memory


          var ids = this._data.getIds({
            filter: filter(this._options)
          });

          var items = this._data.get(ids);

          this._ids.clear();

          this.length = 0;

          this._trigger("remove", {
            items: ids,
            oldData: items
          });
        }

        if (data != null) {
          this._data = data; // trigger an add of all added items

          var _ids = this._data.getIds({
            filter: filter(this._options)
          });

          for (var i = 0, len = _ids.length; i < len; i++) {
            var id = _ids[i];

            this._ids.add(id);
          }

          this.length = _ids.length;

          this._trigger("add", {
            items: _ids
          });
        } else {
          this._data = new DataSet();
        } // subscribe to new dataset


        if (this._data.on) {
          this._data.on("*", this._listener);
        }
      }
      /**
       * Refresh the DataView.
       * Useful when the DataView has a filter function containing a variable parameter.
       */

    }, {
      key: "refresh",
      value: function refresh() {
        var ids = this._data.getIds({
          filter: filter(this._options)
        });

        var oldIds = _toConsumableArray(this._ids);

        var newIds = {};
        var addedIds = [];
        var removedIds = [];
        var removedItems = []; // check for additions

        for (var i = 0, len = ids.length; i < len; i++) {
          var id = ids[i];
          newIds[id] = true;

          if (!this._ids.has(id)) {
            addedIds.push(id);

            this._ids.add(id);
          }
        } // check for removals


        for (var _i = 0, _len = oldIds.length; _i < _len; _i++) {
          var _id = oldIds[_i];

          var item = this._data.get(_id);

          if (item == null) {
            // @TODO: Investigate.
            // Doesn't happen during tests or examples.
            // Is it really impossible or could it eventually happen?
            // How to handle it if it does? The types guarantee non-nullable items.
            console.error("If you see this, report it please.");
          } else if (!newIds[_id]) {
            removedIds.push(_id);
            removedItems.push(item);

            this._ids.delete(_id);
          }
        }

        this.length += addedIds.length - removedIds.length; // trigger events

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          });
        }

        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          });
        }
      }
      /** @inheritDoc */

    }, {
      key: "get",
      value: function get(first, second) {
        if (this._data == null) {
          return null;
        } // parse the arguments


        var ids = null;
        var options;

        if (isId(first) || isArray$1(first)) {
          ids = first;
          options = second;
        } else {
          options = first;
        } // extend the options with the default options and provided options


        var viewOptions = assign$2({}, this._options, options); // create a combined filter method when needed


        var thisFilter = filter(this._options);

        var optionsFilter = options && filter(options);

        if (thisFilter && optionsFilter) {
          viewOptions.filter = function (item) {
            return thisFilter(item) && optionsFilter(item);
          };
        }

        if (ids == null) {
          return this._data.get(viewOptions);
        } else {
          return this._data.get(ids, viewOptions);
        }
      }
      /** @inheritDoc */

    }, {
      key: "getIds",
      value: function getIds(options) {
        if (this._data.length) {
          var defaultFilter = filter(this._options);

          var optionsFilter = options != null ? filter(options) : null;
          var filter$1;

          if (optionsFilter) {
            if (defaultFilter) {
              filter$1 = function filter(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter$1 = optionsFilter;
            }
          } else {
            filter$1 = defaultFilter;
          }

          return this._data.getIds({
            filter: filter$1,
            order: options && options.order
          });
        } else {
          return [];
        }
      }
      /** @inheritDoc */

    }, {
      key: "forEach",
      value: function forEach(callback, options) {
        if (this._data) {
          var _context2;

          var defaultFilter = filter(this._options);

          var optionsFilter = options && filter(options);

          var filter$1;

          if (optionsFilter) {
            if (defaultFilter) {
              filter$1 = function filter(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter$1 = optionsFilter;
            }
          } else {
            filter$1 = defaultFilter;
          }

          forEach$1(_context2 = this._data).call(_context2, callback, {
            filter: filter$1,
            order: options && options.order
          });
        }
      }
      /** @inheritDoc */

    }, {
      key: "map",
      value: function map(callback, options) {
        if (this._data) {
          var _context3;

          var defaultFilter = filter(this._options);

          var optionsFilter = options && filter(options);

          var filter$1;

          if (optionsFilter) {
            if (defaultFilter) {
              filter$1 = function filter(item) {
                return defaultFilter(item) && optionsFilter(item);
              };
            } else {
              filter$1 = optionsFilter;
            }
          } else {
            filter$1 = defaultFilter;
          }

          return map$3(_context3 = this._data).call(_context3, callback, {
            filter: filter$1,
            order: options && options.order
          });
        } else {
          return [];
        }
      }
      /** @inheritDoc */

    }, {
      key: "getDataSet",
      value: function getDataSet() {
        return this._data.getDataSet();
      }
      /** @inheritDoc */

    }, {
      key: "stream",
      value: function stream(ids) {
        var _context4;

        return this._data.stream(ids || _defineProperty({}, iterator, bind$6(_context4 = keys(this._ids)).call(_context4, this._ids)));
      }
      /**
       * Render the instance unusable prior to garbage collection.
       *
       * @remarks
       * The intention of this method is to help discover scenarios where the data
       * view is being used when the programmer thinks it has been garbage collected
       * already. It's stricter version of `dataView.setData(null)`.
       */

    }, {
      key: "dispose",
      value: function dispose() {
        var _this$_data;

        if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) {
          this._data.off("*", this._listener);
        }

        var message = "This data view has already been disposed of.";
        var replacement = {
          get: function get() {
            throw new Error(message);
          },
          set: function set() {
            throw new Error(message);
          },
          configurable: false
        };

        var _iterator = _createForOfIteratorHelper(ownKeys$1(DataView.prototype)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;

            defineProperty$4(this, key, replacement);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      /**
       * Event listener. Will propagate all events from the connected data set to the subscribers of the DataView, but will filter the items and only trigger when there are changes in the filtered data set.
       *
       * @param event - The name of the event.
       * @param params - Parameters of the event.
       * @param senderId - Id supplied by the sender.
       */

    }, {
      key: "_onEvent",
      value: function _onEvent(event, params, senderId) {
        if (!params || !params.items || !this._data) {
          return;
        }

        var ids = params.items;
        var addedIds = [];
        var updatedIds = [];
        var removedIds = [];
        var oldItems = [];
        var updatedItems = [];
        var removedItems = [];

        switch (event) {
          case "add":
            // filter the ids of the added items
            for (var i = 0, len = ids.length; i < len; i++) {
              var id = ids[i];
              var item = this.get(id);

              if (item) {
                this._ids.add(id);

                addedIds.push(id);
              }
            }

            break;

          case "update":
            // determine the event from the views viewpoint: an updated
            // item can be added, updated, or removed from this view.
            for (var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++) {
              var _id2 = ids[_i2];

              var _item = this.get(_id2);

              if (_item) {
                if (this._ids.has(_id2)) {
                  updatedIds.push(_id2);
                  updatedItems.push(params.data[_i2]);
                  oldItems.push(params.oldData[_i2]);
                } else {
                  this._ids.add(_id2);

                  addedIds.push(_id2);
                }
              } else {
                if (this._ids.has(_id2)) {
                  this._ids.delete(_id2);

                  removedIds.push(_id2);
                  removedItems.push(params.oldData[_i2]);
                }
              }
            }

            break;

          case "remove":
            // filter the ids of the removed items
            for (var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++) {
              var _id3 = ids[_i3];

              if (this._ids.has(_id3)) {
                this._ids.delete(_id3);

                removedIds.push(_id3);
                removedItems.push(params.oldData[_i3]);
              }
            }

            break;
        }

        this.length += addedIds.length - removedIds.length;

        if (addedIds.length) {
          this._trigger("add", {
            items: addedIds
          }, senderId);
        }

        if (updatedIds.length) {
          this._trigger("update", {
            items: updatedIds,
            oldData: oldItems,
            data: updatedItems
          }, senderId);
        }

        if (removedIds.length) {
          this._trigger("remove", {
            items: removedIds,
            oldData: removedItems
          }, senderId);
        }
      }
    }]);

    return DataView;
  }(DataSetPart);

  /**
   * Check that given value is compatible with Vis Data Set interface.
   *
   * @param idProp - The expected property to contain item id.
   * @param v - The value to be tested.
   * @returns True if all expected values and methods match, false otherwise.
   */
  function isDataSetLike(idProp, v) {
    return _typeof(v) === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof forEach$1(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$3(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
  }

  /**
   * Check that given value is compatible with Vis Data View interface.
   *
   * @param idProp - The expected property to contain item id.
   * @param v - The value to be tested.
   * @returns True if all expected values and methods match, false otherwise.
   */

  function isDataViewLike(idProp, v) {
    return _typeof(v) === "object" && v !== null && idProp === v.idProp && typeof forEach$1(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$3(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
  }

  exports.DELETE = DELETE;
  exports.DataSet = DataSet;
  exports.DataStream = DataStream;
  exports.DataView = DataView;
  exports.Queue = Queue;
  exports.createNewDataPipeFrom = createNewDataPipeFrom;
  exports.isDataSetLike = isDataSetLike;
  exports.isDataViewLike = isDataViewLike;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=vis-data.js.map


/***/ }),

/***/ "./node_modules/vis-network/peer/umd/vis-network.min.js":
/*!**************************************************************!*\
  !*** ./node_modules/vis-network/peer/umd/vis-network.min.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.2
 * @date    2022-03-28T20:13:51.046Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */
!function(t,e){ true?e(exports,__webpack_require__(/*! vis-data/peer/umd/vis-data.js */ "./node_modules/vis-data/peer/umd/vis-data.js")):0}(this,(function(t,e){var i="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:{},o=function(t){return t&&t.Math==Math&&t},n=o("object"==typeof globalThis&&globalThis)||o("object"==typeof window&&window)||o("object"==typeof self&&self)||o("object"==typeof i&&i)||function(){return this}()||Function("return this")(),r=function(t){try{return!!t()}catch(t){return!0}},s=!r((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")})),a=s,h=Function.prototype,d=h.apply,l=h.call,c="object"==typeof Reflect&&Reflect.apply||(a?l.bind(d):function(){return l.apply(d,arguments)}),u=s,f=Function.prototype,p=f.bind,v=f.call,g=u&&p.bind(v,v),y=u?function(t){return t&&g(t)}:function(t){return t&&function(){return v.apply(t,arguments)}},m=function(t){return"function"==typeof t},b={},w=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),k=s,_=Function.prototype.call,x=k?_.bind(_):function(){return _.apply(_,arguments)},E={},O={}.propertyIsEnumerable,C=Object.getOwnPropertyDescriptor,S=C&&!O.call({1:2},1);E.f=S?function(t){var e=C(this,t);return!!e&&e.enumerable}:O;var T,M,P=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},D=y,B=D({}.toString),I=D("".slice),z=function(t){return I(B(t),8,-1)},F=y,N=r,A=z,R=n.Object,j=F("".split),L=N((function(){return!R("z").propertyIsEnumerable(0)}))?function(t){return"String"==A(t)?j(t,""):R(t)}:R,H=n.TypeError,W=function(t){if(null==t)throw H("Can't call method on "+t);return t},V=L,q=W,U=function(t){return V(q(t))},Y=m,X=function(t){return"object"==typeof t?null!==t:Y(t)},G={},K=G,$=n,Z=m,Q=function(t){return Z(t)?t:void 0},J=function(t,e){return arguments.length<2?Q(K[t])||Q($[t]):K[t]&&K[t][e]||$[t]&&$[t][e]},tt=y({}.isPrototypeOf),et=J("navigator","userAgent")||"",it=n,ot=et,nt=it.process,rt=it.Deno,st=nt&&nt.versions||rt&&rt.version,at=st&&st.v8;at&&(M=(T=at.split("."))[0]>0&&T[0]<4?1:+(T[0]+T[1])),!M&&ot&&(!(T=ot.match(/Edge\/(\d+)/))||T[1]>=74)&&(T=ot.match(/Chrome\/(\d+)/))&&(M=+T[1]);var ht=M,dt=ht,lt=r,ct=!!Object.getOwnPropertySymbols&&!lt((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&dt&&dt<41})),ut=ct&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,ft=J,pt=m,vt=tt,gt=ut,yt=n.Object,mt=gt?function(t){return"symbol"==typeof t}:function(t){var e=ft("Symbol");return pt(e)&&vt(e.prototype,yt(t))},bt=n.String,wt=function(t){try{return bt(t)}catch(t){return"Object"}},kt=m,_t=wt,xt=n.TypeError,Et=function(t){if(kt(t))return t;throw xt(_t(t)+" is not a function")},Ot=Et,Ct=function(t,e){var i=t[e];return null==i?void 0:Ot(i)},St=x,Tt=m,Mt=X,Pt=n.TypeError,Dt={exports:{}},Bt=n,It=Object.defineProperty,zt=function(t,e){try{It(Bt,t,{value:e,configurable:!0,writable:!0})}catch(i){Bt[t]=e}return e},Ft="__core-js_shared__",Nt=n[Ft]||zt(Ft,{}),At=Nt;(Dt.exports=function(t,e){return At[t]||(At[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:"pure",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"});var Rt=W,jt=n.Object,Lt=function(t){return jt(Rt(t))},Ht=Lt,Wt=y({}.hasOwnProperty),Vt=Object.hasOwn||function(t,e){return Wt(Ht(t),e)},qt=y,Ut=0,Yt=Math.random(),Xt=qt(1..toString),Gt=function(t){return"Symbol("+(void 0===t?"":t)+")_"+Xt(++Ut+Yt,36)},Kt=n,$t=Dt.exports,Zt=Vt,Qt=Gt,Jt=ct,te=ut,ee=$t("wks"),ie=Kt.Symbol,oe=ie&&ie.for,ne=te?ie:ie&&ie.withoutSetter||Qt,re=function(t){if(!Zt(ee,t)||!Jt&&"string"!=typeof ee[t]){var e="Symbol."+t;Jt&&Zt(ie,t)?ee[t]=ie[t]:ee[t]=te&&oe?oe(e):ne(e)}return ee[t]},se=x,ae=X,he=mt,de=Ct,le=function(t,e){var i,o;if("string"===e&&Tt(i=t.toString)&&!Mt(o=St(i,t)))return o;if(Tt(i=t.valueOf)&&!Mt(o=St(i,t)))return o;if("string"!==e&&Tt(i=t.toString)&&!Mt(o=St(i,t)))return o;throw Pt("Can't convert object to primitive value")},ce=re,ue=n.TypeError,fe=ce("toPrimitive"),pe=function(t,e){if(!ae(t)||he(t))return t;var i,o=de(t,fe);if(o){if(void 0===e&&(e="default"),i=se(o,t,e),!ae(i)||he(i))return i;throw ue("Can't convert object to primitive value")}return void 0===e&&(e="number"),le(t,e)},ve=mt,ge=function(t){var e=pe(t,"string");return ve(e)?e:e+""},ye=X,me=n.document,be=ye(me)&&ye(me.createElement),we=function(t){return be?me.createElement(t):{}},ke=we,_e=!w&&!r((function(){return 7!=Object.defineProperty(ke("div"),"a",{get:function(){return 7}}).a})),xe=w,Ee=x,Oe=E,Ce=P,Se=U,Te=ge,Me=Vt,Pe=_e,De=Object.getOwnPropertyDescriptor;b.f=xe?De:function(t,e){if(t=Se(t),e=Te(e),Pe)try{return De(t,e)}catch(t){}if(Me(t,e))return Ce(!Ee(Oe.f,t,e),t[e])};var Be=r,Ie=m,ze=/#|\.prototype\./,Fe=function(t,e){var i=Ae[Ne(t)];return i==je||i!=Re&&(Ie(e)?Be(e):!!e)},Ne=Fe.normalize=function(t){return String(t).replace(ze,".").toLowerCase()},Ae=Fe.data={},Re=Fe.NATIVE="N",je=Fe.POLYFILL="P",Le=Fe,He=Et,We=s,Ve=y(y.bind),qe=function(t,e){return He(t),void 0===e?t:We?Ve(t,e):function(){return t.apply(e,arguments)}},Ue={},Ye=w&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype})),Xe=n,Ge=X,Ke=Xe.String,$e=Xe.TypeError,Ze=function(t){if(Ge(t))return t;throw $e(Ke(t)+" is not an object")},Qe=w,Je=_e,ti=Ye,ei=Ze,ii=ge,oi=n.TypeError,ni=Object.defineProperty,ri=Object.getOwnPropertyDescriptor,si="enumerable",ai="configurable",hi="writable";Ue.f=Qe?ti?function(t,e,i){if(ei(t),e=ii(e),ei(i),"function"==typeof t&&"prototype"===e&&"value"in i&&hi in i&&!i.writable){var o=ri(t,e);o&&o.writable&&(t[e]=i.value,i={configurable:ai in i?i.configurable:o.configurable,enumerable:si in i?i.enumerable:o.enumerable,writable:!1})}return ni(t,e,i)}:ni:function(t,e,i){if(ei(t),e=ii(e),ei(i),Je)try{return ni(t,e,i)}catch(t){}if("get"in i||"set"in i)throw oi("Accessors not supported");return"value"in i&&(t[e]=i.value),t};var di=Ue,li=P,ci=w?function(t,e,i){return di.f(t,e,li(1,i))}:function(t,e,i){return t[e]=i,t},ui=n,fi=c,pi=y,vi=m,gi=b.f,yi=Le,mi=G,bi=qe,wi=ci,ki=Vt,_i=function(t){var e=function(i,o,n){if(this instanceof e){switch(arguments.length){case 0:return new t;case 1:return new t(i);case 2:return new t(i,o)}return new t(i,o,n)}return fi(t,this,arguments)};return e.prototype=t.prototype,e},xi=function(t,e){var i,o,n,r,s,a,h,d,l=t.target,c=t.global,u=t.stat,f=t.proto,p=c?ui:u?ui[l]:(ui[l]||{}).prototype,v=c?mi:mi[l]||wi(mi,l,{})[l],g=v.prototype;for(n in e)i=!yi(c?n:l+(u?".":"#")+n,t.forced)&&p&&ki(p,n),s=v[n],i&&(a=t.noTargetGet?(d=gi(p,n))&&d.value:p[n]),r=i&&a?a:e[n],i&&typeof s==typeof r||(h=t.bind&&i?bi(r,ui):t.wrap&&i?_i(r):f&&vi(r)?pi(r):r,(t.sham||r&&r.sham||s&&s.sham)&&wi(h,"sham",!0),wi(v,n,h),f&&(ki(mi,o=l+"Prototype")||wi(mi,o,{}),wi(mi[o],n,r),t.real&&g&&!g[n]&&wi(g,n,r)))},Ei=Math.ceil,Oi=Math.floor,Ci=function(t){var e=+t;return e!=e||0===e?0:(e>0?Oi:Ei)(e)},Si=Ci,Ti=Math.max,Mi=Math.min,Pi=function(t,e){var i=Si(t);return i<0?Ti(i+e,0):Mi(i,e)},Di=Ci,Bi=Math.min,Ii=function(t){return t>0?Bi(Di(t),9007199254740991):0},zi=function(t){return Ii(t.length)},Fi=U,Ni=Pi,Ai=zi,Ri=function(t){return function(e,i,o){var n,r=Fi(e),s=Ai(r),a=Ni(o,s);if(t&&i!=i){for(;s>a;)if((n=r[a++])!=n)return!0}else for(;s>a;a++)if((t||a in r)&&r[a]===i)return t||a||0;return!t&&-1}},ji={includes:Ri(!0),indexOf:Ri(!1)},Li={},Hi=Vt,Wi=U,Vi=ji.indexOf,qi=Li,Ui=y([].push),Yi=function(t,e){var i,o=Wi(t),n=0,r=[];for(i in o)!Hi(qi,i)&&Hi(o,i)&&Ui(r,i);for(;e.length>n;)Hi(o,i=e[n++])&&(~Vi(r,i)||Ui(r,i));return r},Xi=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Gi=Yi,Ki=Xi,$i=Object.keys||function(t){return Gi(t,Ki)},Zi={};Zi.f=Object.getOwnPropertySymbols;var Qi=w,Ji=y,to=x,eo=r,io=$i,oo=Zi,no=E,ro=Lt,so=L,ao=Object.assign,ho=Object.defineProperty,lo=Ji([].concat),co=!ao||eo((function(){if(Qi&&1!==ao({b:1},ao(ho({},"a",{enumerable:!0,get:function(){ho(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},i=Symbol(),o="abcdefghijklmnopqrst";return t[i]=7,o.split("").forEach((function(t){e[t]=t})),7!=ao({},t)[i]||io(ao({},e)).join("")!=o}))?function(t,e){for(var i=ro(t),o=arguments.length,n=1,r=oo.f,s=no.f;o>n;)for(var a,h=so(arguments[n++]),d=r?lo(io(h),r(h)):io(h),l=d.length,c=0;l>c;)a=d[c++],Qi&&!to(s,h,a)||(i[a]=h[a]);return i}:ao,uo=co;xi({target:"Object",stat:!0,forced:Object.assign!==uo},{assign:uo});var fo=G.Object.assign,po=y([].slice),vo=y,go=Et,yo=X,mo=Vt,bo=po,wo=s,ko=n.Function,_o=vo([].concat),xo=vo([].join),Eo={},Oo=function(t,e,i){if(!mo(Eo,e)){for(var o=[],n=0;n<e;n++)o[n]="a["+n+"]";Eo[e]=ko("C,a","return new C("+xo(o,",")+")")}return Eo[e](t,i)},Co=wo?ko.bind:function(t){var e=go(this),i=e.prototype,o=bo(arguments,1),n=function(){var i=_o(o,bo(arguments));return this instanceof n?Oo(e,i.length,i):e.apply(t,i)};return yo(i)&&(n.prototype=i),n},So=Co;xi({target:"Function",proto:!0,forced:Function.bind!==So},{bind:So});var To=G,Mo=function(t){return To[t+"Prototype"]},Po=Mo("Function").bind,Do=tt,Bo=Po,Io=Function.prototype,zo=function(t){var e=t.bind;return t===Io||Do(Io,t)&&e===Io.bind?Bo:e},Fo=zo;function No(t,e,i,o){t.beginPath(),t.arc(e,i,o,0,2*Math.PI,!1),t.closePath()}function Ao(t,e,i,o,n,r){var s=Math.PI/180;o-2*r<0&&(r=o/2),n-2*r<0&&(r=n/2),t.beginPath(),t.moveTo(e+r,i),t.lineTo(e+o-r,i),t.arc(e+o-r,i+r,r,270*s,360*s,!1),t.lineTo(e+o,i+n-r),t.arc(e+o-r,i+n-r,r,0,90*s,!1),t.lineTo(e+r,i+n),t.arc(e+r,i+n-r,r,90*s,180*s,!1),t.lineTo(e,i+r),t.arc(e+r,i+r,r,180*s,270*s,!1),t.closePath()}function Ro(t,e,i,o,n){var r=.5522848,s=o/2*r,a=n/2*r,h=e+o,d=i+n,l=e+o/2,c=i+n/2;t.beginPath(),t.moveTo(e,c),t.bezierCurveTo(e,c-a,l-s,i,l,i),t.bezierCurveTo(l+s,i,h,c-a,h,c),t.bezierCurveTo(h,c+a,l+s,d,l,d),t.bezierCurveTo(l-s,d,e,c+a,e,c),t.closePath()}function jo(t,e,i,o,n){var r=n*(1/3),s=.5522848,a=o/2*s,h=r/2*s,d=e+o,l=i+r,c=e+o/2,u=i+r/2,f=i+(n-r/2),p=i+n;t.beginPath(),t.moveTo(d,u),t.bezierCurveTo(d,u+h,c+a,l,c,l),t.bezierCurveTo(c-a,l,e,u+h,e,u),t.bezierCurveTo(e,u-h,c-a,i,c,i),t.bezierCurveTo(c+a,i,d,u-h,d,u),t.lineTo(d,f),t.bezierCurveTo(d,f+h,c+a,p,c,p),t.bezierCurveTo(c-a,p,e,f+h,e,f),t.lineTo(e,u)}function Lo(t,e,i,o,n,r){t.beginPath(),t.moveTo(e,i);for(var s=r.length,a=o-e,h=n-i,d=h/a,l=Math.sqrt(a*a+h*h),c=0,u=!0,f=0,p=+r[0];l>=.1;)(p=+r[c++%s])>l&&(p=l),f=Math.sqrt(p*p/(1+d*d)),e+=f=a<0?-f:f,i+=d*f,!0===u?t.lineTo(e,i):t.moveTo(e,i),l-=p,u=!u}var Ho={circle:No,dashedLine:Lo,database:jo,diamond:function(t,e,i,o){t.beginPath(),t.lineTo(e,i+o),t.lineTo(e+o,i),t.lineTo(e,i-o),t.lineTo(e-o,i),t.closePath()},ellipse:Ro,ellipse_vis:Ro,hexagon:function(t,e,i,o){t.beginPath();var n=2*Math.PI/6;t.moveTo(e+o,i);for(var r=1;r<6;r++)t.lineTo(e+o*Math.cos(n*r),i+o*Math.sin(n*r));t.closePath()},roundRect:Ao,square:function(t,e,i,o){t.beginPath(),t.rect(e-o,i-o,2*o,2*o),t.closePath()},star:function(t,e,i,o){t.beginPath(),i+=.1*(o*=.82);for(var n=0;n<10;n++){var r=n%2==0?1.3*o:.5*o;t.lineTo(e+r*Math.sin(2*n*Math.PI/10),i-r*Math.cos(2*n*Math.PI/10))}t.closePath()},triangle:function(t,e,i,o){t.beginPath(),i+=.275*(o*=1.15);var n=2*o,r=n/2,s=Math.sqrt(3)/6*n,a=Math.sqrt(n*n-r*r);t.moveTo(e,i-(a-s)),t.lineTo(e+r,i+s),t.lineTo(e-r,i+s),t.lineTo(e,i-(a-s)),t.closePath()},triangleDown:function(t,e,i,o){t.beginPath(),i-=.275*(o*=1.15);var n=2*o,r=n/2,s=Math.sqrt(3)/6*n,a=Math.sqrt(n*n-r*r);t.moveTo(e,i+(a-s)),t.lineTo(e+r,i-s),t.lineTo(e-r,i-s),t.lineTo(e,i+(a-s)),t.closePath()}};var Wo={exports:{}};!function(t){function e(t){if(t)return function(t){for(var i in e.prototype)t[i]=e.prototype[i];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function i(){this.off(t,i),e.apply(this,arguments)}return i.fn=e,this.on(t,i),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i,o=this._callbacks["$"+t];if(!o)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var n=0;n<o.length;n++)if((i=o[n])===e||i.fn===e){o.splice(n,1);break}return 0===o.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),i=this._callbacks["$"+t],o=1;o<arguments.length;o++)e[o-1]=arguments[o];if(i){o=0;for(var n=(i=i.slice(0)).length;o<n;++o)i[o].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}}(Wo);var Vo=Wo.exports,qo={};qo[re("toStringTag")]="z";var Uo="[object z]"===String(qo),Yo=n,Xo=Uo,Go=m,Ko=z,$o=re("toStringTag"),Zo=Yo.Object,Qo="Arguments"==Ko(function(){return arguments}()),Jo=Xo?Ko:function(t){var e,i,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(i=function(t,e){try{return t[e]}catch(t){}}(e=Zo(t),$o))?i:Qo?Ko(e):"Object"==(o=Ko(e))&&Go(e.callee)?"Arguments":o},tn=Jo,en=n.String,on=function(t){if("Symbol"===tn(t))throw TypeError("Cannot convert a Symbol value to a string");return en(t)},nn=y,rn=Ci,sn=on,an=W,hn=nn("".charAt),dn=nn("".charCodeAt),ln=nn("".slice),cn=function(t){return function(e,i){var o,n,r=sn(an(e)),s=rn(i),a=r.length;return s<0||s>=a?t?"":void 0:(o=dn(r,s))<55296||o>56319||s+1===a||(n=dn(r,s+1))<56320||n>57343?t?hn(r,s):o:t?ln(r,s,s+2):n-56320+(o-55296<<10)+65536}},un={codeAt:cn(!1),charAt:cn(!0)},fn=m,pn=Nt,vn=y(Function.toString);fn(pn.inspectSource)||(pn.inspectSource=function(t){return vn(t)});var gn,yn,mn,bn=pn.inspectSource,wn=m,kn=bn,_n=n.WeakMap,xn=wn(_n)&&/native code/.test(kn(_n)),En=Dt.exports,On=Gt,Cn=En("keys"),Sn=function(t){return Cn[t]||(Cn[t]=On(t))},Tn=xn,Mn=n,Pn=y,Dn=X,Bn=ci,In=Vt,zn=Nt,Fn=Sn,Nn=Li,An="Object already initialized",Rn=Mn.TypeError,jn=Mn.WeakMap;if(Tn||zn.state){var Ln=zn.state||(zn.state=new jn),Hn=Pn(Ln.get),Wn=Pn(Ln.has),Vn=Pn(Ln.set);gn=function(t,e){if(Wn(Ln,t))throw new Rn(An);return e.facade=t,Vn(Ln,t,e),e},yn=function(t){return Hn(Ln,t)||{}},mn=function(t){return Wn(Ln,t)}}else{var qn=Fn("state");Nn[qn]=!0,gn=function(t,e){if(In(t,qn))throw new Rn(An);return e.facade=t,Bn(t,qn,e),e},yn=function(t){return In(t,qn)?t[qn]:{}},mn=function(t){return In(t,qn)}}var Un={set:gn,get:yn,has:mn,enforce:function(t){return mn(t)?yn(t):gn(t,{})},getterFor:function(t){return function(e){var i;if(!Dn(e)||(i=yn(e)).type!==t)throw Rn("Incompatible receiver, "+t+" required");return i}}},Yn=w,Xn=Vt,Gn=Function.prototype,Kn=Yn&&Object.getOwnPropertyDescriptor,$n=Xn(Gn,"name"),Zn={EXISTS:$n,PROPER:$n&&"something"===function(){}.name,CONFIGURABLE:$n&&(!Yn||Yn&&Kn(Gn,"name").configurable)},Qn={},Jn=w,tr=Ye,er=Ue,ir=Ze,or=U,nr=$i;Qn.f=Jn&&!tr?Object.defineProperties:function(t,e){ir(t);for(var i,o=or(e),n=nr(e),r=n.length,s=0;r>s;)er.f(t,i=n[s++],o[i]);return t};var rr,sr=J("document","documentElement"),ar=Ze,hr=Qn,dr=Xi,lr=Li,cr=sr,ur=we,fr=Sn("IE_PROTO"),pr=function(){},vr=function(t){return"<script>"+t+"</"+"script>"},gr=function(t){t.write(vr("")),t.close();var e=t.parentWindow.Object;return t=null,e},yr=function(){try{rr=new ActiveXObject("htmlfile")}catch(t){}var t,e;yr="undefined"!=typeof document?document.domain&&rr?gr(rr):((e=ur("iframe")).style.display="none",cr.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(vr("document.F=Object")),t.close(),t.F):gr(rr);for(var i=dr.length;i--;)delete yr.prototype[dr[i]];return yr()};lr[fr]=!0;var mr,br,wr,kr=Object.create||function(t,e){var i;return null!==t?(pr.prototype=ar(t),i=new pr,pr.prototype=null,i[fr]=t):i=yr(),void 0===e?i:hr.f(i,e)},_r=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})),xr=n,Er=Vt,Or=m,Cr=Lt,Sr=_r,Tr=Sn("IE_PROTO"),Mr=xr.Object,Pr=Mr.prototype,Dr=Sr?Mr.getPrototypeOf:function(t){var e=Cr(t);if(Er(e,Tr))return e[Tr];var i=e.constructor;return Or(i)&&e instanceof i?i.prototype:e instanceof Mr?Pr:null},Br=ci,Ir=function(t,e,i,o){o&&o.enumerable?t[e]=i:Br(t,e,i)},zr=r,Fr=m,Nr=kr,Ar=Dr,Rr=Ir,jr=re("iterator"),Lr=!1;[].keys&&("next"in(wr=[].keys())?(br=Ar(Ar(wr)))!==Object.prototype&&(mr=br):Lr=!0);var Hr=null==mr||zr((function(){var t={};return mr[jr].call(t)!==t}));Fr((mr=Hr?{}:Nr(mr))[jr])||Rr(mr,jr,(function(){return this}));var Wr={IteratorPrototype:mr,BUGGY_SAFARI_ITERATORS:Lr},Vr=Jo,qr=Uo?{}.toString:function(){return"[object "+Vr(this)+"]"},Ur=Uo,Yr=Ue.f,Xr=ci,Gr=Vt,Kr=qr,$r=re("toStringTag"),Zr=function(t,e,i,o){if(t){var n=i?t:t.prototype;Gr(n,$r)||Yr(n,$r,{configurable:!0,value:e}),o&&!Ur&&Xr(n,"toString",Kr)}},Qr={},Jr=Wr.IteratorPrototype,ts=kr,es=P,is=Zr,os=Qr,ns=function(){return this},rs=n,ss=m,as=rs.String,hs=rs.TypeError,ds=y,ls=Ze,cs=function(t){if("object"==typeof t||ss(t))return t;throw hs("Can't set "+as(t)+" as a prototype")},us=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,i={};try{(t=ds(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(i,[]),e=i instanceof Array}catch(t){}return function(i,o){return ls(i),cs(o),e?t(i,o):i.__proto__=o,i}}():void 0),fs=xi,ps=x,vs=function(t,e,i,o){var n=e+" Iterator";return t.prototype=ts(Jr,{next:es(+!o,i)}),is(t,n,!1,!0),os[n]=ns,t},gs=Dr,ys=Zr,ms=Ir,bs=Qr,ws=Zn.PROPER,ks=Wr.BUGGY_SAFARI_ITERATORS,_s=re("iterator"),xs="keys",Es="values",Os="entries",Cs=function(){return this},Ss=function(t,e,i,o,n,r,s){vs(i,e,o);var a,h,d,l=function(t){if(t===n&&v)return v;if(!ks&&t in f)return f[t];switch(t){case xs:case Es:case Os:return function(){return new i(this,t)}}return function(){return new i(this)}},c=e+" Iterator",u=!1,f=t.prototype,p=f[_s]||f["@@iterator"]||n&&f[n],v=!ks&&p||l(n),g="Array"==e&&f.entries||p;if(g&&(a=gs(g.call(new t)))!==Object.prototype&&a.next&&(ys(a,c,!0,!0),bs[c]=Cs),ws&&n==Es&&p&&p.name!==Es&&(u=!0,v=function(){return ps(p,this)}),n)if(h={values:l(Es),keys:r?v:l(xs),entries:l(Os)},s)for(d in h)(ks||u||!(d in f))&&ms(f,d,h[d]);else fs({target:e,proto:!0,forced:ks||u},h);return s&&f[_s]!==v&&ms(f,_s,v,{name:n}),bs[e]=v,h},Ts=un.charAt,Ms=on,Ps=Un,Ds=Ss,Bs="String Iterator",Is=Ps.set,zs=Ps.getterFor(Bs);Ds(String,"String",(function(t){Is(this,{type:Bs,string:Ms(t),index:0})}),(function(){var t,e=zs(this),i=e.string,o=e.index;return o>=i.length?{value:void 0,done:!0}:(t=Ts(i,o),e.index+=t.length,{value:t,done:!1})}));var Fs=x,Ns=Ze,As=Ct,Rs=function(t,e,i){var o,n;Ns(t);try{if(!(o=As(t,"return"))){if("throw"===e)throw i;return i}o=Fs(o,t)}catch(t){n=!0,o=t}if("throw"===e)throw i;if(n)throw o;return Ns(o),i},js=Ze,Ls=Rs,Hs=Qr,Ws=re("iterator"),Vs=Array.prototype,qs=function(t){return void 0!==t&&(Hs.Array===t||Vs[Ws]===t)},Us=y,Ys=r,Xs=m,Gs=Jo,Ks=bn,$s=function(){},Zs=[],Qs=J("Reflect","construct"),Js=/^\s*(?:class|function)\b/,ta=Us(Js.exec),ea=!Js.exec($s),ia=function(t){if(!Xs(t))return!1;try{return Qs($s,Zs,t),!0}catch(t){return!1}},oa=function(t){if(!Xs(t))return!1;switch(Gs(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return ea||!!ta(Js,Ks(t))}catch(t){return!0}};oa.sham=!0;var na=!Qs||Ys((function(){var t;return ia(ia.call)||!ia(Object)||!ia((function(){t=!0}))||t}))?oa:ia,ra=ge,sa=Ue,aa=P,ha=function(t,e,i){var o=ra(e);o in t?sa.f(t,o,aa(0,i)):t[o]=i},da=Jo,la=Ct,ca=Qr,ua=re("iterator"),fa=function(t){if(null!=t)return la(t,ua)||la(t,"@@iterator")||ca[da(t)]},pa=x,va=Et,ga=Ze,ya=wt,ma=fa,ba=n.TypeError,wa=function(t,e){var i=arguments.length<2?ma(t):e;if(va(i))return ga(pa(i,t));throw ba(ya(t)+" is not iterable")},ka=qe,_a=x,xa=Lt,Ea=function(t,e,i,o){try{return o?e(js(i)[0],i[1]):e(i)}catch(e){Ls(t,"throw",e)}},Oa=qs,Ca=na,Sa=zi,Ta=ha,Ma=wa,Pa=fa,Da=n.Array,Ba=re("iterator"),Ia=!1;try{var za=0,Fa={next:function(){return{done:!!za++}},return:function(){Ia=!0}};Fa[Ba]=function(){return this},Array.from(Fa,(function(){throw 2}))}catch(t){}var Na=function(t){var e=xa(t),i=Ca(this),o=arguments.length,n=o>1?arguments[1]:void 0,r=void 0!==n;r&&(n=ka(n,o>2?arguments[2]:void 0));var s,a,h,d,l,c,u=Pa(e),f=0;if(!u||this==Da&&Oa(u))for(s=Sa(e),a=i?new this(s):Da(s);s>f;f++)c=r?n(e[f],f):e[f],Ta(a,f,c);else for(l=(d=Ma(e,u)).next,a=i?new this:[];!(h=_a(l,d)).done;f++)c=r?Ea(d,n,[h.value,f],!0):h.value,Ta(a,f,c);return a.length=f,a},Aa=function(t,e){if(!e&&!Ia)return!1;var i=!1;try{var o={};o[Ba]=function(){return{next:function(){return{done:i=!0}}}},t(o)}catch(t){}return i};xi({target:"Array",stat:!0,forced:!Aa((function(t){Array.from(t)}))},{from:Na});var Ra=G.Array.from,ja=Ra,La=U,Ha=Qr,Wa=Un;Ue.f;var Va=Ss,qa="Array Iterator",Ua=Wa.set,Ya=Wa.getterFor(qa);Va(Array,"Array",(function(t,e){Ua(this,{type:qa,target:La(t),index:0,kind:e})}),(function(){var t=Ya(this),e=t.target,i=t.kind,o=t.index++;return!e||o>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==i?{value:o,done:!1}:"values"==i?{value:e[o],done:!1}:{value:[o,e[o]],done:!1}}),"values"),Ha.Arguments=Ha.Array;var Xa=fa,Ga={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Ka=n,$a=Jo,Za=ci,Qa=Qr,Ja=re("toStringTag");for(var th in Ga){var eh=Ka[th],ih=eh&&eh.prototype;ih&&$a(ih)!==Ja&&Za(ih,Ja,th),Qa[th]=Qa.Array}var oh=Xa,nh=z,rh=Array.isArray||function(t){return"Array"==nh(t)},sh={},ah=Yi,hh=Xi.concat("length","prototype");sh.f=Object.getOwnPropertyNames||function(t){return ah(t,hh)};var dh={},lh=Pi,ch=zi,uh=ha,fh=n.Array,ph=Math.max,vh=function(t,e,i){for(var o=ch(t),n=lh(e,o),r=lh(void 0===i?o:i,o),s=fh(ph(r-n,0)),a=0;n<r;n++,a++)uh(s,a,t[n]);return s.length=a,s},gh=z,yh=U,mh=sh.f,bh=vh,wh="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];dh.f=function(t){return wh&&"Window"==gh(t)?function(t){try{return mh(t)}catch(t){return bh(wh)}}(t):mh(yh(t))};var kh={},_h=re;kh.f=_h;var xh=G,Eh=Vt,Oh=kh,Ch=Ue.f,Sh=function(t){var e=xh.Symbol||(xh.Symbol={});Eh(e,t)||Ch(e,t,{value:Oh.f(t)})},Th=n,Mh=rh,Ph=na,Dh=X,Bh=re("species"),Ih=Th.Array,zh=function(t){var e;return Mh(t)&&(e=t.constructor,(Ph(e)&&(e===Ih||Mh(e.prototype))||Dh(e)&&null===(e=e[Bh]))&&(e=void 0)),void 0===e?Ih:e},Fh=function(t,e){return new(zh(t))(0===e?0:e)},Nh=qe,Ah=L,Rh=Lt,jh=zi,Lh=Fh,Hh=y([].push),Wh=function(t){var e=1==t,i=2==t,o=3==t,n=4==t,r=6==t,s=7==t,a=5==t||r;return function(h,d,l,c){for(var u,f,p=Rh(h),v=Ah(p),g=Nh(d,l),y=jh(v),m=0,b=c||Lh,w=e?b(h,y):i||s?b(h,0):void 0;y>m;m++)if((a||m in v)&&(f=g(u=v[m],m,p),t))if(e)w[m]=f;else if(f)switch(t){case 3:return!0;case 5:return u;case 6:return m;case 2:Hh(w,u)}else switch(t){case 4:return!1;case 7:Hh(w,u)}return r?-1:o||n?n:w}},Vh={forEach:Wh(0),map:Wh(1),filter:Wh(2),some:Wh(3),every:Wh(4),find:Wh(5),findIndex:Wh(6),filterReject:Wh(7)},qh=xi,Uh=n,Yh=J,Xh=c,Gh=x,Kh=y,$h=w,Zh=ct,Qh=r,Jh=Vt,td=rh,ed=m,id=X,od=tt,nd=mt,rd=Ze,sd=Lt,ad=U,hd=ge,dd=on,ld=P,cd=kr,ud=$i,fd=sh,pd=dh,vd=Zi,gd=b,yd=Ue,md=Qn,bd=E,wd=po,kd=Ir,_d=Dt.exports,xd=Li,Ed=Gt,Od=re,Cd=kh,Sd=Sh,Td=Zr,Md=Un,Pd=Vh.forEach,Dd=Sn("hidden"),Bd="Symbol",Id=Od("toPrimitive"),zd=Md.set,Fd=Md.getterFor(Bd),Nd=Object.prototype,Ad=Uh.Symbol,Rd=Ad&&Ad.prototype,jd=Uh.TypeError,Ld=Uh.QObject,Hd=Yh("JSON","stringify"),Wd=gd.f,Vd=yd.f,qd=pd.f,Ud=bd.f,Yd=Kh([].push),Xd=_d("symbols"),Gd=_d("op-symbols"),Kd=_d("string-to-symbol-registry"),$d=_d("symbol-to-string-registry"),Zd=_d("wks"),Qd=!Ld||!Ld.prototype||!Ld.prototype.findChild,Jd=$h&&Qh((function(){return 7!=cd(Vd({},"a",{get:function(){return Vd(this,"a",{value:7}).a}})).a}))?function(t,e,i){var o=Wd(Nd,e);o&&delete Nd[e],Vd(t,e,i),o&&t!==Nd&&Vd(Nd,e,o)}:Vd,tl=function(t,e){var i=Xd[t]=cd(Rd);return zd(i,{type:Bd,tag:t,description:e}),$h||(i.description=e),i},el=function(t,e,i){t===Nd&&el(Gd,e,i),rd(t);var o=hd(e);return rd(i),Jh(Xd,o)?(i.enumerable?(Jh(t,Dd)&&t[Dd][o]&&(t[Dd][o]=!1),i=cd(i,{enumerable:ld(0,!1)})):(Jh(t,Dd)||Vd(t,Dd,ld(1,{})),t[Dd][o]=!0),Jd(t,o,i)):Vd(t,o,i)},il=function(t,e){rd(t);var i=ad(e),o=ud(i).concat(sl(i));return Pd(o,(function(e){$h&&!Gh(ol,i,e)||el(t,e,i[e])})),t},ol=function(t){var e=hd(t),i=Gh(Ud,this,e);return!(this===Nd&&Jh(Xd,e)&&!Jh(Gd,e))&&(!(i||!Jh(this,e)||!Jh(Xd,e)||Jh(this,Dd)&&this[Dd][e])||i)},nl=function(t,e){var i=ad(t),o=hd(e);if(i!==Nd||!Jh(Xd,o)||Jh(Gd,o)){var n=Wd(i,o);return!n||!Jh(Xd,o)||Jh(i,Dd)&&i[Dd][o]||(n.enumerable=!0),n}},rl=function(t){var e=qd(ad(t)),i=[];return Pd(e,(function(t){Jh(Xd,t)||Jh(xd,t)||Yd(i,t)})),i},sl=function(t){var e=t===Nd,i=qd(e?Gd:ad(t)),o=[];return Pd(i,(function(t){!Jh(Xd,t)||e&&!Jh(Nd,t)||Yd(o,Xd[t])})),o};if(Zh||(Ad=function(){if(od(Rd,this))throw jd("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?dd(arguments[0]):void 0,e=Ed(t),i=function(t){this===Nd&&Gh(i,Gd,t),Jh(this,Dd)&&Jh(this[Dd],e)&&(this[Dd][e]=!1),Jd(this,e,ld(1,t))};return $h&&Qd&&Jd(Nd,e,{configurable:!0,set:i}),tl(e,t)},kd(Rd=Ad.prototype,"toString",(function(){return Fd(this).tag})),kd(Ad,"withoutSetter",(function(t){return tl(Ed(t),t)})),bd.f=ol,yd.f=el,md.f=il,gd.f=nl,fd.f=pd.f=rl,vd.f=sl,Cd.f=function(t){return tl(Od(t),t)},$h&&Vd(Rd,"description",{configurable:!0,get:function(){return Fd(this).description}})),qh({global:!0,wrap:!0,forced:!Zh,sham:!Zh},{Symbol:Ad}),Pd(ud(Zd),(function(t){Sd(t)})),qh({target:Bd,stat:!0,forced:!Zh},{for:function(t){var e=dd(t);if(Jh(Kd,e))return Kd[e];var i=Ad(e);return Kd[e]=i,$d[i]=e,i},keyFor:function(t){if(!nd(t))throw jd(t+" is not a symbol");if(Jh($d,t))return $d[t]},useSetter:function(){Qd=!0},useSimple:function(){Qd=!1}}),qh({target:"Object",stat:!0,forced:!Zh,sham:!$h},{create:function(t,e){return void 0===e?cd(t):il(cd(t),e)},defineProperty:el,defineProperties:il,getOwnPropertyDescriptor:nl}),qh({target:"Object",stat:!0,forced:!Zh},{getOwnPropertyNames:rl,getOwnPropertySymbols:sl}),qh({target:"Object",stat:!0,forced:Qh((function(){vd.f(1)}))},{getOwnPropertySymbols:function(t){return vd.f(sd(t))}}),Hd){var al=!Zh||Qh((function(){var t=Ad();return"[null]"!=Hd([t])||"{}"!=Hd({a:t})||"{}"!=Hd(Object(t))}));qh({target:"JSON",stat:!0,forced:al},{stringify:function(t,e,i){var o=wd(arguments),n=e;if((id(e)||void 0!==t)&&!nd(t))return td(e)||(e=function(t,e){if(ed(n)&&(e=Gh(n,this,t,e)),!nd(e))return e}),o[1]=e,Xh(Hd,null,o)}})}if(!Rd[Id]){var hl=Rd.valueOf;kd(Rd,Id,(function(t){return Gh(hl,this)}))}Td(Ad,Bd),xd[Dd]=!0;var dl=G.Object.getOwnPropertySymbols,ll={exports:{}},cl=xi,ul=r,fl=U,pl=b.f,vl=w,gl=ul((function(){pl(1)}));cl({target:"Object",stat:!0,forced:!vl||gl,sham:!vl},{getOwnPropertyDescriptor:function(t,e){return pl(fl(t),e)}});var yl=G.Object,ml=ll.exports=function(t,e){return yl.getOwnPropertyDescriptor(t,e)};yl.getOwnPropertyDescriptor.sham&&(ml.sham=!0);var bl=ll.exports,wl=bl,kl=J,_l=sh,xl=Zi,El=Ze,Ol=y([].concat),Cl=kl("Reflect","ownKeys")||function(t){var e=_l.f(El(t)),i=xl.f;return i?Ol(e,i(t)):e},Sl=Cl,Tl=U,Ml=b,Pl=ha;xi({target:"Object",stat:!0,sham:!w},{getOwnPropertyDescriptors:function(t){for(var e,i,o=Tl(t),n=Ml.f,r=Sl(o),s={},a=0;r.length>a;)void 0!==(i=n(o,e=r[a++]))&&Pl(s,e,i);return s}});var Dl=G.Object.getOwnPropertyDescriptors,Bl={exports:{}},Il=xi,zl=w,Fl=Qn.f;Il({target:"Object",stat:!0,forced:Object.defineProperties!==Fl,sham:!zl},{defineProperties:Fl});var Nl=G.Object,Al=Bl.exports=function(t,e){return Nl.defineProperties(t,e)};Nl.defineProperties.sham&&(Al.sham=!0);var Rl=Bl.exports,jl={exports:{}},Ll=xi,Hl=w,Wl=Ue.f;Ll({target:"Object",stat:!0,forced:Object.defineProperty!==Wl,sham:!Hl},{defineProperty:Wl});var Vl=G.Object,ql=jl.exports=function(t,e,i){return Vl.defineProperty(t,e,i)};Vl.defineProperty.sham&&(ql.sham=!0);var Ul=jl.exports,Yl=Ul;function Xl(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var Gl=Ul;function Kl(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Gl(t,o.key,o)}}function $l(t,e,i){return e&&Kl(t.prototype,e),i&&Kl(t,i),Gl(t,"prototype",{writable:!1}),t}function Zl(t,e,i){return e in t?Gl(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}xi({target:"Array",stat:!0},{isArray:rh});var Ql=G.Array.isArray,Jl=Ql;var tc=r,ec=ht,ic=re("species"),oc=function(t){return ec>=51||!tc((function(){var e=[];return(e.constructor={})[ic]=function(){return{foo:1}},1!==e[t](Boolean).foo}))},nc=xi,rc=n,sc=r,ac=rh,hc=X,dc=Lt,lc=zi,cc=ha,uc=Fh,fc=oc,pc=ht,vc=re("isConcatSpreadable"),gc=9007199254740991,yc="Maximum allowed index exceeded",mc=rc.TypeError,bc=pc>=51||!sc((function(){var t=[];return t[vc]=!1,t.concat()[0]!==t})),wc=fc("concat"),kc=function(t){if(!hc(t))return!1;var e=t[vc];return void 0!==e?!!e:ac(t)};nc({target:"Array",proto:!0,forced:!bc||!wc},{concat:function(t){var e,i,o,n,r,s=dc(this),a=uc(s,0),h=0;for(e=-1,o=arguments.length;e<o;e++)if(kc(r=-1===e?s:arguments[e])){if(h+(n=lc(r))>gc)throw mc(yc);for(i=0;i<n;i++,h++)i in r&&cc(a,h,r[i])}else{if(h>=gc)throw mc(yc);cc(a,h++,r)}return a.length=h,a}}),Sh("asyncIterator"),Sh("hasInstance"),Sh("isConcatSpreadable"),Sh("iterator"),Sh("match"),Sh("matchAll"),Sh("replace"),Sh("search"),Sh("species"),Sh("split"),Sh("toPrimitive"),Sh("toStringTag"),Sh("unscopables"),Zr(n.JSON,"JSON",!0);var _c=G.Symbol,xc=_c;Sh("asyncDispose"),Sh("dispose"),Sh("matcher"),Sh("metadata"),Sh("observable"),Sh("patternMatch"),Sh("replaceAll");var Ec=xc;var Oc=xi,Cc=n,Sc=rh,Tc=na,Mc=X,Pc=Pi,Dc=zi,Bc=U,Ic=ha,zc=re,Fc=po,Nc=oc("slice"),Ac=zc("species"),Rc=Cc.Array,jc=Math.max;Oc({target:"Array",proto:!0,forced:!Nc},{slice:function(t,e){var i,o,n,r=Bc(this),s=Dc(r),a=Pc(t,s),h=Pc(void 0===e?s:e,s);if(Sc(r)&&(i=r.constructor,(Tc(i)&&(i===Rc||Sc(i.prototype))||Mc(i)&&null===(i=i[Ac]))&&(i=void 0),i===Rc||void 0===i))return Fc(r,a,h);for(o=new(void 0===i?Rc:i)(jc(h-a,0)),n=0;a<h;a++,n++)a in r&&Ic(o,n,r[a]);return o.length=n,o}});var Lc=Mo("Array").slice,Hc=tt,Wc=Lc,Vc=Array.prototype,qc=function(t){var e=t.slice;return t===Vc||Hc(Vc,t)&&e===Vc.slice?Wc:e},Uc=qc,Yc=Uc,Xc=Ra;function Gc(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function Kc(t,e){var i;if(t){if("string"==typeof t)return Gc(t,e);var o=Yc(i=Object.prototype.toString.call(t)).call(i,8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Xc(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?Gc(t,e):void 0}}function $c(t,e){return function(t){if(Jl(t))return t}(t)||function(t,e){var i=null==t?null:void 0!==Ec&&oh(t)||t["@@iterator"];if(null!=i){var o,n,r=[],s=!0,a=!1;try{for(i=i.call(t);!(s=(o=i.next()).done)&&(r.push(o.value),!e||r.length!==e);s=!0);}catch(t){a=!0,n=t}finally{try{s||null==i.return||i.return()}finally{if(a)throw n}}return r}}(t,e)||Kc(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Zc=kh.f("iterator");function Qc(t){return Qc="function"==typeof Ec&&"symbol"==typeof Zc?function(t){return typeof t}:function(t){return t&&"function"==typeof Ec&&t.constructor===Ec&&t!==Ec.prototype?"symbol":typeof t},Qc(t)}function Jc(t){return function(t){if(Jl(t))return Gc(t)}(t)||function(t){if(void 0!==Ec&&null!=oh(t)||null!=t["@@iterator"])return Xc(t)}(t)||Kc(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var tu=_c,eu=Mo("Array").concat,iu=tt,ou=eu,nu=Array.prototype,ru=function(t){var e=t.concat;return t===nu||iu(nu,t)&&e===nu.concat?ou:e},su=ru,au=Uc;xi({target:"Reflect",stat:!0},{ownKeys:Cl}),G.Reflect.ownKeys;var hu=Ql,du=Vh.map;xi({target:"Array",proto:!0,forced:!oc("map")},{map:function(t){return du(this,t,arguments.length>1?arguments[1]:void 0)}});var lu=Mo("Array").map,cu=tt,uu=lu,fu=Array.prototype,pu=function(t){var e=t.map;return t===fu||cu(fu,t)&&e===fu.map?uu:e},vu=pu,gu=Lt,yu=$i;xi({target:"Object",stat:!0,forced:r((function(){yu(1)}))},{keys:function(t){return yu(gu(t))}});var mu=G.Object.keys,bu=xi,wu=y,ku=n.Date,_u=wu(ku.prototype.getTime);bu({target:"Date",stat:!0},{now:function(){return _u(new ku)}});var xu=G.Date.now,Eu=r,Ou=function(t,e){var i=[][t];return!!i&&Eu((function(){i.call(null,e||function(){return 1},1)}))},Cu=Vh.forEach,Su=Ou("forEach")?[].forEach:function(t){return Cu(this,t,arguments.length>1?arguments[1]:void 0)};xi({target:"Array",proto:!0,forced:[].forEach!=Su},{forEach:Su});var Tu=Mo("Array").forEach,Mu=Jo,Pu=Vt,Du=tt,Bu=Tu,Iu=Array.prototype,zu={DOMTokenList:!0,NodeList:!0},Fu=function(t){var e=t.forEach;return t===Iu||Du(Iu,t)&&e===Iu.forEach||Pu(zu,Mu(t))?Bu:e},Nu=xi,Au=rh,Ru=y([].reverse),ju=[1,2];Nu({target:"Array",proto:!0,forced:String(ju)===String(ju.reverse())},{reverse:function(){return Au(this)&&(this.length=this.length),Ru(this)}});var Lu=Mo("Array").reverse,Hu=tt,Wu=Lu,Vu=Array.prototype,qu=function(t){var e=t.reverse;return t===Vu||Hu(Vu,t)&&e===Vu.reverse?Wu:e},Uu=qu,Yu=xi,Xu=n,Gu=Pi,Ku=Ci,$u=zi,Zu=Lt,Qu=Fh,Ju=ha,tf=oc("splice"),ef=Xu.TypeError,of=Math.max,nf=Math.min,rf=9007199254740991,sf="Maximum allowed length exceeded";Yu({target:"Array",proto:!0,forced:!tf},{splice:function(t,e){var i,o,n,r,s,a,h=Zu(this),d=$u(h),l=Gu(t,d),c=arguments.length;if(0===c?i=o=0:1===c?(i=0,o=d-l):(i=c-2,o=nf(of(Ku(e),0),d-l)),d+i-o>rf)throw ef(sf);for(n=Qu(h,o),r=0;r<o;r++)(s=l+r)in h&&Ju(n,r,h[s]);if(n.length=o,i<o){for(r=l;r<d-o;r++)a=r+i,(s=r+o)in h?h[a]=h[s]:delete h[a];for(r=d;r>d-o+i;r--)delete h[r-1]}else if(i>o)for(r=d-o;r>l;r--)a=r+i-1,(s=r+o-1)in h?h[a]=h[s]:delete h[a];for(r=0;r<i;r++)h[r+l]=arguments[r+2];return h.length=d-o+i,n}});var af=Mo("Array").splice,hf=tt,df=af,lf=Array.prototype,cf=function(t){var e=t.splice;return t===lf||hf(lf,t)&&e===lf.splice?df:e},uf=cf,ff=ji.includes;xi({target:"Array",proto:!0},{includes:function(t){return ff(this,t,arguments.length>1?arguments[1]:void 0)}});var pf=Mo("Array").includes,vf=X,gf=z,yf=re("match"),mf=function(t){var e;return vf(t)&&(void 0!==(e=t[yf])?!!e:"RegExp"==gf(t))},bf=n.TypeError,wf=re("match"),kf=xi,_f=function(t){if(mf(t))throw bf("The method doesn't accept regular expressions");return t},xf=W,Ef=on,Of=function(t){var e=/./;try{"/./"[t](e)}catch(i){try{return e[wf]=!1,"/./"[t](e)}catch(t){}}return!1},Cf=y("".indexOf);kf({target:"String",proto:!0,forced:!Of("includes")},{includes:function(t){return!!~Cf(Ef(xf(this)),Ef(_f(t)),arguments.length>1?arguments[1]:void 0)}});var Sf=Mo("String").includes,Tf=tt,Mf=pf,Pf=Sf,Df=Array.prototype,Bf=String.prototype,If=function(t){var e=t.includes;return t===Df||Tf(Df,t)&&e===Df.includes?Mf:"string"==typeof t||t===Bf||Tf(Bf,t)&&e===Bf.includes?Pf:e},zf=If,Ff=Lt,Nf=Dr,Af=_r;xi({target:"Object",stat:!0,forced:r((function(){Nf(1)})),sham:!Af},{getPrototypeOf:function(t){return Nf(Ff(t))}});var Rf=G.Object.getPrototypeOf,jf=Rf,Lf=Vh.filter;xi({target:"Array",proto:!0,forced:!oc("filter")},{filter:function(t){return Lf(this,t,arguments.length>1?arguments[1]:void 0)}});var Hf=Mo("Array").filter,Wf=tt,Vf=Hf,qf=Array.prototype,Uf=function(t){var e=t.filter;return t===qf||Wf(qf,t)&&e===qf.filter?Vf:e},Yf=Uf,Xf=w,Gf=y,Kf=$i,$f=U,Zf=Gf(E.f),Qf=Gf([].push),Jf=function(t){return function(e){for(var i,o=$f(e),n=Kf(o),r=n.length,s=0,a=[];r>s;)i=n[s++],Xf&&!Zf(o,i)||Qf(a,t?[i,o[i]]:o[i]);return a}},tp={entries:Jf(!0),values:Jf(!1)}.values;xi({target:"Object",stat:!0},{values:function(t){return tp(t)}}),G.Object.values;var ep="\t\n\v\f\r                　\u2028\u2029\ufeff",ip=W,op=on,np=y("".replace),rp="[\t\n\v\f\r                　\u2028\u2029\ufeff]",sp=RegExp("^"+rp+rp+"*"),ap=RegExp(rp+rp+"*$"),hp=function(t){return function(e){var i=op(ip(e));return 1&t&&(i=np(i,sp,"")),2&t&&(i=np(i,ap,"")),i}},dp={start:hp(1),end:hp(2),trim:hp(3)},lp=n,cp=r,up=y,fp=on,pp=dp.trim,vp=ep,gp=lp.parseInt,yp=lp.Symbol,mp=yp&&yp.iterator,bp=/^[+-]?0x/i,wp=up(bp.exec),kp=8!==gp(vp+"08")||22!==gp(vp+"0x16")||mp&&!cp((function(){gp(Object(mp))}))?function(t,e){var i=pp(fp(t));return gp(i,e>>>0||(wp(bp,i)?16:10))}:gp;xi({global:!0,forced:parseInt!=kp},{parseInt:kp});var _p=G.parseInt,xp=xi,Ep=ji.indexOf,Op=Ou,Cp=y([].indexOf),Sp=!!Cp&&1/Cp([1],1,-0)<0,Tp=Op("indexOf");xp({target:"Array",proto:!0,forced:Sp||!Tp},{indexOf:function(t){var e=arguments.length>1?arguments[1]:void 0;return Sp?Cp(this,t,e)||0:Ep(this,t,e)}});var Mp=Mo("Array").indexOf,Pp=tt,Dp=Mp,Bp=Array.prototype,Ip=function(t){var e=t.indexOf;return t===Bp||Pp(Bp,t)&&e===Bp.indexOf?Dp:e},zp=Ip,Fp=Zn.PROPER,Np=r,Ap=ep,Rp=dp.trim;xi({target:"String",proto:!0,forced:function(t){return Np((function(){return!!Ap[t]()||"​᠎"!=="​᠎"[t]()||Fp&&Ap[t].name!==t}))}("trim")},{trim:function(){return Rp(this)}}),Mo("String").trim,xi({target:"Object",stat:!0,sham:!w},{create:kr});var jp=G.Object,Lp=function(t,e){return jp.create(t,e)},Hp=Lp,Wp=xi,Vp=J,qp=c,Up=y,Yp=r,Xp=n.Array,Gp=Vp("JSON","stringify"),Kp=Up(/./.exec),$p=Up("".charAt),Zp=Up("".charCodeAt),Qp=Up("".replace),Jp=Up(1..toString),tv=/[\uD800-\uDFFF]/g,ev=/^[\uD800-\uDBFF]$/,iv=/^[\uDC00-\uDFFF]$/,ov=function(t,e,i){var o=$p(i,e-1),n=$p(i,e+1);return Kp(ev,t)&&!Kp(iv,n)||Kp(iv,t)&&!Kp(ev,o)?"\\u"+Jp(Zp(t,0),16):t},nv=Yp((function(){return'"\\udf06\\ud834"'!==Gp("\udf06\ud834")||'"\\udead"'!==Gp("\udead")}));Gp&&Wp({target:"JSON",stat:!0,forced:nv},{stringify:function(t,e,i){for(var o=0,n=arguments.length,r=Xp(n);o<n;o++)r[o]=arguments[o];var s=qp(Gp,null,r);return"string"==typeof s?Qp(s,tv,ov):s}});var rv=G,sv=c;rv.JSON||(rv.JSON={stringify:JSON.stringify});var av=function(t,e,i){return sv(rv.JSON.stringify,null,arguments)},hv=av,dv=n.TypeError,lv=xi,cv=n,uv=c,fv=m,pv=po,vv=function(t,e){if(t<e)throw dv("Not enough arguments");return t},gv=/MSIE .\./.test(et),yv=cv.Function,mv=function(t){return function(e,i){var o=vv(arguments.length,1)>2,n=fv(e)?e:yv(e),r=o?pv(arguments,2):void 0;return t(o?function(){uv(n,this,r)}:n,i)}};lv({global:!0,bind:!0,forced:gv},{setTimeout:mv(cv.setTimeout),setInterval:mv(cv.setInterval)});var bv=G.setTimeout,wv=Lt,kv=Pi,_v=zi,xv=function(t){for(var e=wv(this),i=_v(e),o=arguments.length,n=kv(o>1?arguments[1]:void 0,i),r=o>2?arguments[2]:void 0,s=void 0===r?i:kv(r,i);s>n;)e[n++]=t;return e};xi({target:"Array",proto:!0},{fill:xv});var Ev,Ov=Mo("Array").fill,Cv=tt,Sv=Ov,Tv=Array.prototype,Mv=function(t){var e=t.fill;return t===Tv||Cv(Tv,t)&&e===Tv.fill?Sv:e},Pv=Mv;
/*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */
function Dv(){return Dv=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(t[o]=i[o])}return t},Dv.apply(this,arguments)}function Bv(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function Iv(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}Ev="function"!=typeof Object.assign?function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var o=arguments[i];if(null!=o)for(var n in o)o.hasOwnProperty(n)&&(e[n]=o[n])}return e}:Object.assign;var zv,Fv=Ev,Nv=["","webkit","Moz","MS","ms","o"],Av="undefined"==typeof document?{style:{}}:document.createElement("div"),Rv=Math.round,jv=Math.abs,Lv=Date.now;function Hv(t,e){for(var i,o,n=e[0].toUpperCase()+e.slice(1),r=0;r<Nv.length;){if((o=(i=Nv[r])?i+n:e)in t)return o;r++}}zv="undefined"==typeof window?{}:window;var Wv=Hv(Av.style,"touchAction"),Vv=void 0!==Wv;var qv="compute",Uv="auto",Yv="manipulation",Xv="none",Gv="pan-x",Kv="pan-y",$v=function(){if(!Vv)return!1;var t={},e=zv.CSS&&zv.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(i){return t[i]=!e||zv.CSS.supports("touch-action",i)})),t}(),Zv="ontouchstart"in zv,Qv=void 0!==Hv(zv,"PointerEvent"),Jv=Zv&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),tg="touch",eg="mouse",ig=16,og=24,ng=["x","y"],rg=["clientX","clientY"];function sg(t,e,i){var o;if(t)if(t.forEach)t.forEach(e,i);else if(void 0!==t.length)for(o=0;o<t.length;)e.call(i,t[o],o,t),o++;else for(o in t)t.hasOwnProperty(o)&&e.call(i,t[o],o,t)}function ag(t,e){return"function"==typeof t?t.apply(e&&e[0]||void 0,e):t}function hg(t,e){return t.indexOf(e)>-1}var dg=function(){function t(t,e){this.manager=t,this.set(e)}var e=t.prototype;return e.set=function(t){t===qv&&(t=this.compute()),Vv&&this.manager.element.style&&$v[t]&&(this.manager.element.style[Wv]=t),this.actions=t.toLowerCase().trim()},e.update=function(){this.set(this.manager.options.touchAction)},e.compute=function(){var t=[];return sg(this.manager.recognizers,(function(e){ag(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(hg(t,Xv))return Xv;var e=hg(t,Gv),i=hg(t,Kv);return e&&i?Xv:e||i?e?Gv:Kv:hg(t,Yv)?Yv:Uv}(t.join(" "))},e.preventDefaults=function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var o=this.actions,n=hg(o,Xv)&&!$v.none,r=hg(o,Kv)&&!$v["pan-y"],s=hg(o,Gv)&&!$v["pan-x"];if(n){var a=1===t.pointers.length,h=t.distance<2,d=t.deltaTime<250;if(a&&h&&d)return}if(!s||!r)return n||r&&6&i||s&&i&og?this.preventSrc(e):void 0}},e.preventSrc=function(t){this.manager.session.prevented=!0,t.preventDefault()},t}();function lg(t,e){for(;t;){if(t===e)return!0;t=t.parentNode}return!1}function cg(t){var e=t.length;if(1===e)return{x:Rv(t[0].clientX),y:Rv(t[0].clientY)};for(var i=0,o=0,n=0;n<e;)i+=t[n].clientX,o+=t[n].clientY,n++;return{x:Rv(i/e),y:Rv(o/e)}}function ug(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:Rv(t.pointers[i].clientX),clientY:Rv(t.pointers[i].clientY)},i++;return{timeStamp:Lv(),pointers:e,center:cg(e),deltaX:t.deltaX,deltaY:t.deltaY}}function fg(t,e,i){i||(i=ng);var o=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return Math.sqrt(o*o+n*n)}function pg(t,e,i){i||(i=ng);var o=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return 180*Math.atan2(n,o)/Math.PI}function vg(t,e){return t===e?1:jv(t)>=jv(e)?t<0?2:4:e<0?8:ig}function gg(t,e,i){return{x:e/t||0,y:i/t||0}}function yg(t,e){var i=t.session,o=e.pointers,n=o.length;i.firstInput||(i.firstInput=ug(e)),n>1&&!i.firstMultiple?i.firstMultiple=ug(e):1===n&&(i.firstMultiple=!1);var r=i.firstInput,s=i.firstMultiple,a=s?s.center:r.center,h=e.center=cg(o);e.timeStamp=Lv(),e.deltaTime=e.timeStamp-r.timeStamp,e.angle=pg(a,h),e.distance=fg(a,h),function(t,e){var i=e.center,o=t.offsetDelta||{},n=t.prevDelta||{},r=t.prevInput||{};1!==e.eventType&&4!==r.eventType||(n=t.prevDelta={x:r.deltaX||0,y:r.deltaY||0},o=t.offsetDelta={x:i.x,y:i.y}),e.deltaX=n.x+(i.x-o.x),e.deltaY=n.y+(i.y-o.y)}(i,e),e.offsetDirection=vg(e.deltaX,e.deltaY);var d,l,c=gg(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=jv(c.x)>jv(c.y)?c.x:c.y,e.scale=s?(d=s.pointers,fg((l=o)[0],l[1],rg)/fg(d[0],d[1],rg)):1,e.rotation=s?function(t,e){return pg(e[1],e[0],rg)+pg(t[1],t[0],rg)}(s.pointers,o):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,o,n,r,s=t.lastInterval||e,a=e.timeStamp-s.timeStamp;if(8!==e.eventType&&(a>25||void 0===s.velocity)){var h=e.deltaX-s.deltaX,d=e.deltaY-s.deltaY,l=gg(a,h,d);o=l.x,n=l.y,i=jv(l.x)>jv(l.y)?l.x:l.y,r=vg(h,d),t.lastInterval=e}else i=s.velocity,o=s.velocityX,n=s.velocityY,r=s.direction;e.velocity=i,e.velocityX=o,e.velocityY=n,e.direction=r}(i,e);var u,f=t.element,p=e.srcEvent;lg(u=p.composedPath?p.composedPath()[0]:p.path?p.path[0]:p.target,f)&&(f=u),e.target=f}function mg(t,e,i){var o=i.pointers.length,n=i.changedPointers.length,r=1&e&&o-n==0,s=12&e&&o-n==0;i.isFirst=!!r,i.isFinal=!!s,r&&(t.session={}),i.eventType=e,yg(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function bg(t){return t.trim().split(/\s+/g)}function wg(t,e,i){sg(bg(e),(function(e){t.addEventListener(e,i,!1)}))}function kg(t,e,i){sg(bg(e),(function(e){t.removeEventListener(e,i,!1)}))}function _g(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||window}var xg=function(){function t(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){ag(t.options.enable,[t])&&i.handler(e)},this.init()}var e=t.prototype;return e.handler=function(){},e.init=function(){this.evEl&&wg(this.element,this.evEl,this.domHandler),this.evTarget&&wg(this.target,this.evTarget,this.domHandler),this.evWin&&wg(_g(this.element),this.evWin,this.domHandler)},e.destroy=function(){this.evEl&&kg(this.element,this.evEl,this.domHandler),this.evTarget&&kg(this.target,this.evTarget,this.domHandler),this.evWin&&kg(_g(this.element),this.evWin,this.domHandler)},t}();function Eg(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var o=0;o<t.length;){if(i&&t[o][i]==e||!i&&t[o]===e)return o;o++}return-1}var Og={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},Cg={2:tg,3:"pen",4:eg,5:"kinect"},Sg="pointerdown",Tg="pointermove pointerup pointercancel";zv.MSPointerEvent&&!zv.PointerEvent&&(Sg="MSPointerDown",Tg="MSPointerMove MSPointerUp MSPointerCancel");var Mg=function(t){function e(){var i,o=e.prototype;return o.evEl=Sg,o.evWin=Tg,(i=t.apply(this,arguments)||this).store=i.manager.session.pointerEvents=[],i}return Bv(e,t),e.prototype.handler=function(t){var e=this.store,i=!1,o=t.type.toLowerCase().replace("ms",""),n=Og[o],r=Cg[t.pointerType]||t.pointerType,s=r===tg,a=Eg(e,t.pointerId,"pointerId");1&n&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):12&n&&(i=!0),a<0||(e[a]=t,this.callback(this.manager,n,{pointers:e,changedPointers:[t],pointerType:r,srcEvent:t}),i&&e.splice(a,1))},e}(xg);function Pg(t){return Array.prototype.slice.call(t,0)}function Dg(t,e,i){for(var o=[],n=[],r=0;r<t.length;){var s=e?t[r][e]:t[r];Eg(n,s)<0&&o.push(t[r]),n[r]=s,r++}return i&&(o=e?o.sort((function(t,i){return t[e]>i[e]})):o.sort()),o}var Bg={touchstart:1,touchmove:2,touchend:4,touchcancel:8},Ig="touchstart touchmove touchend touchcancel",zg=function(t){function e(){var i;return e.prototype.evTarget=Ig,(i=t.apply(this,arguments)||this).targetIds={},i}return Bv(e,t),e.prototype.handler=function(t){var e=Bg[t.type],i=Fg.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:tg,srcEvent:t})},e}(xg);function Fg(t,e){var i,o,n=Pg(t.touches),r=this.targetIds;if(3&e&&1===n.length)return r[n[0].identifier]=!0,[n,n];var s=Pg(t.changedTouches),a=[],h=this.target;if(o=n.filter((function(t){return lg(t.target,h)})),1===e)for(i=0;i<o.length;)r[o[i].identifier]=!0,i++;for(i=0;i<s.length;)r[s[i].identifier]&&a.push(s[i]),12&e&&delete r[s[i].identifier],i++;return a.length?[Dg(o.concat(a),"identifier",!0),a]:void 0}var Ng={mousedown:1,mousemove:2,mouseup:4},Ag="mousedown",Rg="mousemove mouseup",jg=function(t){function e(){var i,o=e.prototype;return o.evEl=Ag,o.evWin=Rg,(i=t.apply(this,arguments)||this).pressed=!1,i}return Bv(e,t),e.prototype.handler=function(t){var e=Ng[t.type];1&e&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=4),this.pressed&&(4&e&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:eg,srcEvent:t}))},e}(xg);function Lg(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY},o=this.lastTouches;this.lastTouches.push(i);setTimeout((function(){var t=o.indexOf(i);t>-1&&o.splice(t,1)}),2500)}}function Hg(t,e){1&t?(this.primaryTouch=e.changedPointers[0].identifier,Lg.call(this,e)):12&t&&Lg.call(this,e)}function Wg(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,o=0;o<this.lastTouches.length;o++){var n=this.lastTouches[o],r=Math.abs(e-n.x),s=Math.abs(i-n.y);if(r<=25&&s<=25)return!0}return!1}var Vg=function(){return function(t){function e(e,i){var o;return(o=t.call(this,e,i)||this).handler=function(t,e,i){var n=i.pointerType===tg,r=i.pointerType===eg;if(!(r&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(n)Hg.call(Iv(Iv(o)),e,i);else if(r&&Wg.call(Iv(Iv(o)),i))return;o.callback(t,e,i)}},o.touch=new zg(o.manager,o.handler),o.mouse=new jg(o.manager,o.handler),o.primaryTouch=null,o.lastTouches=[],o}return Bv(e,t),e.prototype.destroy=function(){this.touch.destroy(),this.mouse.destroy()},e}(xg)}();function qg(t,e,i){return!!Array.isArray(t)&&(sg(t,i[e],i),!0)}var Ug=32,Yg=1;function Xg(t,e){var i=e.manager;return i?i.get(t):t}function Gg(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}var Kg=function(){function t(t){void 0===t&&(t={}),this.options=Dv({enable:!0},t),this.id=Yg++,this.manager=null,this.state=1,this.simultaneous={},this.requireFail=[]}var e=t.prototype;return e.set=function(t){return Fv(this.options,t),this.manager&&this.manager.touchAction.update(),this},e.recognizeWith=function(t){if(qg(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Xg(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},e.dropRecognizeWith=function(t){return qg(t,"dropRecognizeWith",this)||(t=Xg(t,this),delete this.simultaneous[t.id]),this},e.requireFailure=function(t){if(qg(t,"requireFailure",this))return this;var e=this.requireFail;return-1===Eg(e,t=Xg(t,this))&&(e.push(t),t.requireFailure(this)),this},e.dropRequireFailure=function(t){if(qg(t,"dropRequireFailure",this))return this;t=Xg(t,this);var e=Eg(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},e.hasRequireFailures=function(){return this.requireFail.length>0},e.canRecognizeWith=function(t){return!!this.simultaneous[t.id]},e.emit=function(t){var e=this,i=this.state;function o(i){e.manager.emit(i,t)}i<8&&o(e.options.event+Gg(i)),o(e.options.event),t.additionalEvent&&o(t.additionalEvent),i>=8&&o(e.options.event+Gg(i))},e.tryEmit=function(t){if(this.canEmit())return this.emit(t);this.state=Ug},e.canEmit=function(){for(var t=0;t<this.requireFail.length;){if(!(33&this.requireFail[t].state))return!1;t++}return!0},e.recognize=function(t){var e=Fv({},t);if(!ag(this.options.enable,[this,e]))return this.reset(),void(this.state=Ug);56&this.state&&(this.state=1),this.state=this.process(e),30&this.state&&this.tryEmit(e)},e.process=function(t){},e.getTouchAction=function(){},e.reset=function(){},t}(),$g=function(t){function e(e){var i;return void 0===e&&(e={}),(i=t.call(this,Dv({event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},e))||this).pTime=!1,i.pCenter=!1,i._timer=null,i._input=null,i.count=0,i}Bv(e,t);var i=e.prototype;return i.getTouchAction=function(){return[Yv]},i.process=function(t){var e=this,i=this.options,o=t.pointers.length===i.pointers,n=t.distance<i.threshold,r=t.deltaTime<i.time;if(this.reset(),1&t.eventType&&0===this.count)return this.failTimeout();if(n&&r&&o){if(4!==t.eventType)return this.failTimeout();var s=!this.pTime||t.timeStamp-this.pTime<i.interval,a=!this.pCenter||fg(this.pCenter,t.center)<i.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,a&&s?this.count+=1:this.count=1,this._input=t,0===this.count%i.taps)return this.hasRequireFailures()?(this._timer=setTimeout((function(){e.state=8,e.tryEmit()}),i.interval),2):8}return Ug},i.failTimeout=function(){var t=this;return this._timer=setTimeout((function(){t.state=Ug}),this.options.interval),Ug},i.reset=function(){clearTimeout(this._timer)},i.emit=function(){8===this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))},e}(Kg),Zg=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Dv({pointers:1},e))||this}Bv(e,t);var i=e.prototype;return i.attrTest=function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},i.process=function(t){var e=this.state,i=t.eventType,o=6&e,n=this.attrTest(t);return o&&(8&i||!n)?16|e:o||n?4&i?8|e:2&e?4|e:2:Ug},e}(Kg);function Qg(t){return t===ig?"down":8===t?"up":2===t?"left":4===t?"right":""}var Jg=function(t){function e(e){var i;return void 0===e&&(e={}),(i=t.call(this,Dv({event:"pan",threshold:10,pointers:1,direction:30},e))||this).pX=null,i.pY=null,i}Bv(e,t);var i=e.prototype;return i.getTouchAction=function(){var t=this.options.direction,e=[];return 6&t&&e.push(Kv),t&og&&e.push(Gv),e},i.directionTest=function(t){var e=this.options,i=!0,o=t.distance,n=t.direction,r=t.deltaX,s=t.deltaY;return n&e.direction||(6&e.direction?(n=0===r?1:r<0?2:4,i=r!==this.pX,o=Math.abs(t.deltaX)):(n=0===s?1:s<0?8:ig,i=s!==this.pY,o=Math.abs(t.deltaY))),t.direction=n,i&&o>e.threshold&&n&e.direction},i.attrTest=function(t){return Zg.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},i.emit=function(e){this.pX=e.deltaX,this.pY=e.deltaY;var i=Qg(e.direction);i&&(e.additionalEvent=this.options.event+i),t.prototype.emit.call(this,e)},e}(Zg),ty=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Dv({event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},e))||this}Bv(e,t);var i=e.prototype;return i.getTouchAction=function(){return Jg.prototype.getTouchAction.call(this)},i.attrTest=function(e){var i,o=this.options.direction;return 30&o?i=e.overallVelocity:6&o?i=e.overallVelocityX:o&og&&(i=e.overallVelocityY),t.prototype.attrTest.call(this,e)&&o&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers===this.options.pointers&&jv(i)>this.options.velocity&&4&e.eventType},i.emit=function(t){var e=Qg(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)},e}(Zg),ey=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Dv({event:"pinch",threshold:0,pointers:2},e))||this}Bv(e,t);var i=e.prototype;return i.getTouchAction=function(){return[Xv]},i.attrTest=function(e){return t.prototype.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||2&this.state)},i.emit=function(e){if(1!==e.scale){var i=e.scale<1?"in":"out";e.additionalEvent=this.options.event+i}t.prototype.emit.call(this,e)},e}(Zg),iy=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Dv({event:"rotate",threshold:0,pointers:2},e))||this}Bv(e,t);var i=e.prototype;return i.getTouchAction=function(){return[Xv]},i.attrTest=function(e){return t.prototype.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||2&this.state)},e}(Zg),oy=function(t){function e(e){var i;return void 0===e&&(e={}),(i=t.call(this,Dv({event:"press",pointers:1,time:251,threshold:9},e))||this)._timer=null,i._input=null,i}Bv(e,t);var i=e.prototype;return i.getTouchAction=function(){return[Uv]},i.process=function(t){var e=this,i=this.options,o=t.pointers.length===i.pointers,n=t.distance<i.threshold,r=t.deltaTime>i.time;if(this._input=t,!n||!o||12&t.eventType&&!r)this.reset();else if(1&t.eventType)this.reset(),this._timer=setTimeout((function(){e.state=8,e.tryEmit()}),i.time);else if(4&t.eventType)return 8;return Ug},i.reset=function(){clearTimeout(this._timer)},i.emit=function(t){8===this.state&&(t&&4&t.eventType?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=Lv(),this.manager.emit(this.options.event,this._input)))},e}(Kg),ny={domEvents:!1,touchAction:qv,enable:!0,inputTarget:null,inputClass:null,cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},ry=[[iy,{enable:!1}],[ey,{enable:!1},["rotate"]],[ty,{direction:6}],[Jg,{direction:6},["swipe"]],[$g],[$g,{event:"doubletap",taps:2},["tap"]],[oy]];function sy(t,e){var i,o=t.element;o.style&&(sg(t.options.cssProps,(function(n,r){i=Hv(o.style,r),e?(t.oldCssProps[i]=o.style[i],o.style[i]=n):o.style[i]=t.oldCssProps[i]||""})),e||(t.oldCssProps={}))}var ay=function(){function t(t,e){var i,o=this;this.options=Fv({},ny,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(Qv?Mg:Jv?zg:Zv?Vg:jg))(i,mg),this.touchAction=new dg(this,this.options.touchAction),sy(this,!0),sg(this.options.recognizers,(function(t){var e=o.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}var e=t.prototype;return e.set=function(t){return Fv(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},e.stop=function(t){this.session.stopped=t?2:1},e.recognize=function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var o=this.recognizers,n=e.curRecognizer;(!n||n&&8&n.state)&&(e.curRecognizer=null,n=null);for(var r=0;r<o.length;)i=o[r],2===e.stopped||n&&i!==n&&!i.canRecognizeWith(n)?i.reset():i.recognize(t),!n&&14&i.state&&(e.curRecognizer=i,n=i),r++}},e.get=function(t){if(t instanceof Kg)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event===t)return e[i];return null},e.add=function(t){if(qg(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},e.remove=function(t){if(qg(t,"remove",this))return this;var e=this.get(t);if(t){var i=this.recognizers,o=Eg(i,e);-1!==o&&(i.splice(o,1),this.touchAction.update())}return this},e.on=function(t,e){if(void 0===t||void 0===e)return this;var i=this.handlers;return sg(bg(t),(function(t){i[t]=i[t]||[],i[t].push(e)})),this},e.off=function(t,e){if(void 0===t)return this;var i=this.handlers;return sg(bg(t),(function(t){e?i[t]&&i[t].splice(Eg(i[t],e),1):delete i[t]})),this},e.emit=function(t,e){this.options.domEvents&&function(t,e){var i=document.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}(t,e);var i=this.handlers[t]&&this.handlers[t].slice();if(i&&i.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var o=0;o<i.length;)i[o](e),o++}},e.destroy=function(){this.element&&sy(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null},t}(),hy={touchstart:1,touchmove:2,touchend:4,touchcancel:8},dy="touchstart",ly="touchstart touchmove touchend touchcancel",cy=function(t){function e(){var i,o=e.prototype;return o.evTarget=dy,o.evWin=ly,(i=t.apply(this,arguments)||this).started=!1,i}return Bv(e,t),e.prototype.handler=function(t){var e=hy[t.type];if(1===e&&(this.started=!0),this.started){var i=uy.call(this,t,e);12&e&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:tg,srcEvent:t})}},e}(xg);function uy(t,e){var i=Pg(t.touches),o=Pg(t.changedTouches);return 12&e&&(i=Dg(i.concat(o),"identifier",!0)),[i,o]}function fy(t,e,i){var o="DEPRECATED METHOD: "+e+"\n"+i+" AT \n";return function(){var e=new Error("get-stack-trace"),i=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",n=window.console&&(window.console.warn||window.console.log);return n&&n.call(window.console,o,i),t.apply(this,arguments)}}var py=fy((function(t,e,i){for(var o=Object.keys(e),n=0;n<o.length;)(!i||i&&void 0===t[o[n]])&&(t[o[n]]=e[o[n]]),n++;return t}),"extend","Use `assign`."),vy=fy((function(t,e){return py(t,e,!0)}),"merge","Use `assign`.");function gy(t,e,i){var o,n=e.prototype;(o=t.prototype=Object.create(n)).constructor=t,o._super=n,i&&Fv(o,i)}function yy(t,e){return function(){return t.apply(e,arguments)}}var my=function(){var t=function(t,e){return void 0===e&&(e={}),new ay(t,Dv({recognizers:ry.concat()},e))};return t.VERSION="2.0.17-rc",t.DIRECTION_ALL=30,t.DIRECTION_DOWN=ig,t.DIRECTION_LEFT=2,t.DIRECTION_RIGHT=4,t.DIRECTION_UP=8,t.DIRECTION_HORIZONTAL=6,t.DIRECTION_VERTICAL=og,t.DIRECTION_NONE=1,t.DIRECTION_DOWN=ig,t.INPUT_START=1,t.INPUT_MOVE=2,t.INPUT_END=4,t.INPUT_CANCEL=8,t.STATE_POSSIBLE=1,t.STATE_BEGAN=2,t.STATE_CHANGED=4,t.STATE_ENDED=8,t.STATE_RECOGNIZED=8,t.STATE_CANCELLED=16,t.STATE_FAILED=Ug,t.Manager=ay,t.Input=xg,t.TouchAction=dg,t.TouchInput=zg,t.MouseInput=jg,t.PointerEventInput=Mg,t.TouchMouseInput=Vg,t.SingleTouchInput=cy,t.Recognizer=Kg,t.AttrRecognizer=Zg,t.Tap=$g,t.Pan=Jg,t.Swipe=ty,t.Pinch=ey,t.Rotate=iy,t.Press=oy,t.on=wg,t.off=kg,t.each=sg,t.merge=vy,t.extend=py,t.bindFn=yy,t.assign=Fv,t.inherit=gy,t.bindFn=yy,t.prefixed=Hv,t.toArray=Pg,t.inArray=Eg,t.uniqueArray=Dg,t.splitStr=bg,t.boolOrFn=ag,t.hasParent=lg,t.addEventListeners=wg,t.removeEventListeners=kg,t.defaults=Fv({},ny,{preset:ry}),t}(),by=my;function wy(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return ky(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ky(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function ky(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function _y(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return xy(e.length?e:[xu()])}function xy(t){var e=function(){for(var t=Ey(),e=t(" "),i=t(" "),o=t(" "),n=0;n<arguments.length;n++)(e-=t(n<0||arguments.length<=n?void 0:arguments[n]))<0&&(e+=1),(i-=t(n<0||arguments.length<=n?void 0:arguments[n]))<0&&(i+=1),(o-=t(n<0||arguments.length<=n?void 0:arguments[n]))<0&&(o+=1);return[e,i,o]}(t),i=$c(e,3),o=i[0],n=i[1],r=i[2],s=1,a=function(){var t=2091639*o+2.3283064365386963e-10*s;return o=n,n=r,r=t-(s=0|t)};return a.uint32=function(){return 4294967296*a()},a.fract53=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.algorithm="Alea",a.seed=t,a.version="0.9",a}function Ey(){var t=4022871197;return function(e){for(var i=e.toString(),o=0;o<i.length;o++){var n=.02519603282416938*(t+=i.charCodeAt(o));n-=t=n>>>0,t=(n*=t)>>>0,t+=4294967296*(n-=t)}return 2.3283064365386963e-10*(t>>>0)}}tu("DELETE");var Oy="undefined"!=typeof window?window.Hammer||by:function(){return function(){var t=function(){};return{on:t,off:t,destroy:t,emit:t,get:function(){return{set:t}}}}()};function Cy(t){var e,i=this;this._cleanupQueue=[],this.active=!1,this._dom={container:t,overlay:document.createElement("div")},this._dom.overlay.classList.add("vis-overlay"),this._dom.container.appendChild(this._dom.overlay),this._cleanupQueue.push((function(){i._dom.overlay.parentNode.removeChild(i._dom.overlay)}));var o=Oy(this._dom.overlay);o.on("tap",Fo(e=this._onTapOverlay).call(e,this)),this._cleanupQueue.push((function(){o.destroy()}));var n=["tap","doubletap","press","pinch","pan","panstart","panmove","panend"];Fu(n).call(n,(function(t){o.on(t,(function(t){t.srcEvent.stopPropagation()}))})),document&&document.body&&(this._onClick=function(e){(function(t,e){for(;t;){if(t===e)return!0;t=t.parentNode}return!1})(e.target,t)||i.deactivate()},document.body.addEventListener("click",this._onClick),this._cleanupQueue.push((function(){document.body.removeEventListener("click",i._onClick)}))),this._escListener=function(t){("key"in t?"Escape"===t.key:27===t.keyCode)&&i.deactivate()}}Vo(Cy.prototype),Cy.current=null,Cy.prototype.destroy=function(){var t,e;this.deactivate();var i,o=wy(Uu(t=uf(e=this._cleanupQueue).call(e,0)).call(t));try{for(o.s();!(i=o.n()).done;){(0,i.value)()}}catch(t){o.e(t)}finally{o.f()}},Cy.prototype.activate=function(){Cy.current&&Cy.current.deactivate(),Cy.current=this,this.active=!0,this._dom.overlay.style.display="none",this._dom.container.classList.add("vis-active"),this.emit("change"),this.emit("activate"),document.body.addEventListener("keydown",this._escListener)},Cy.prototype.deactivate=function(){this.active=!1,this._dom.overlay.style.display="block",this._dom.container.classList.remove("vis-active"),document.body.removeEventListener("keydown",this._escListener),this.emit("change"),this.emit("deactivate")},Cy.prototype._onTapOverlay=function(t){this.activate(),t.srcEvent.stopPropagation()};var Sy=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,Ty=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,My=/^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i,Py=/^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;function Dy(t){if(t)for(;!0===t.hasChildNodes();){var e=t.firstChild;e&&(Dy(e),t.removeChild(e))}}function By(t){return t instanceof String||"string"==typeof t}function Iy(t){return"object"===Qc(t)&&null!==t}function zy(t,e,i,o){var n=!1;!0===o&&(n=null===e[i]&&void 0!==t[i]),n?delete t[i]:t[i]=e[i]}function Fy(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];for(var o in t)if(void 0!==e[o])if(null===e[o]||"object"!==Qc(e[o]))zy(t,e,o,i);else{var n=t[o],r=e[o];Iy(n)&&Iy(r)&&Fy(n,r,i)}}function Ny(t,e,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(hu(i))throw new TypeError("Arrays are not supported by deepExtend");for(var n=0;n<t.length;n++){var r=t[n];if(Object.prototype.hasOwnProperty.call(i,r))if(i[r]&&i[r].constructor===Object)void 0===e[r]&&(e[r]={}),e[r].constructor===Object?Ry(e[r],i[r],!1,o):zy(e,i,r,o);else{if(hu(i[r]))throw new TypeError("Arrays are not supported by deepExtend");zy(e,i,r,o)}}return e}function Ay(t,e,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(hu(i))throw new TypeError("Arrays are not supported by deepExtend");for(var n in i)if(Object.prototype.hasOwnProperty.call(i,n)&&!zf(t).call(t,n))if(i[n]&&i[n].constructor===Object)void 0===e[n]&&(e[n]={}),e[n].constructor===Object?Ry(e[n],i[n]):zy(e,i,n,o);else if(hu(i[n])){e[n]=[];for(var r=0;r<i[n].length;r++)e[n].push(i[n][r])}else zy(e,i,n,o);return e}function Ry(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)||!0===i)if("object"===Qc(e[n])&&null!==e[n]&&jf(e[n])===Object.prototype)void 0===t[n]?t[n]=Ry({},e[n],i):"object"===Qc(t[n])&&null!==t[n]&&jf(t[n])===Object.prototype?Ry(t[n],e[n],i):zy(t,e,n,o);else if(hu(e[n])){var r;t[n]=au(r=e[n]).call(r)}else zy(t,e,n,o);return t}function jy(t,e){var i;return su(i=[]).call(i,Jc(t),[e])}function Ly(t){return au(t).call(t)}function Hy(t){return t.getBoundingClientRect().top}function Wy(t,e){if(hu(t))for(var i=t.length,o=0;o<i;o++)e(t[o],o,t);else for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(t[n],n,t)}function Vy(t){var e;switch(t.length){case 3:case 4:return(e=Ty.exec(t))?{r:_p(e[1]+e[1],16),g:_p(e[2]+e[2],16),b:_p(e[3]+e[3],16)}:null;case 6:case 7:return(e=Sy.exec(t))?{r:_p(e[1],16),g:_p(e[2],16),b:_p(e[3],16)}:null;default:return null}}function qy(t,e){if(zf(t).call(t,"rgba"))return t;if(zf(t).call(t,"rgb")){var i=t.substr(zp(t).call(t,"(")+1).replace(")","").split(",");return"rgba("+i[0]+","+i[1]+","+i[2]+","+e+")"}var o=Vy(t);return null==o?t:"rgba("+o.r+","+o.g+","+o.b+","+e+")"}function Uy(t,e,i){var o;return"#"+au(o=((1<<24)+(t<<16)+(e<<8)+i).toString(16)).call(o,1)}function Yy(t,e){if(By(t)){var i=t;if(Zy(i)){var o,n=vu(o=i.substr(4).substr(0,i.length-5).split(",")).call(o,(function(t){return _p(t)}));i=Uy(n[0],n[1],n[2])}if(!0===$y(i)){var r=function(t){var e=Vy(t);if(!e)throw new TypeError("'".concat(t,"' is not a valid color."));return Xy(e.r,e.g,e.b)}(i),s={h:r.h,s:.8*r.s,v:Math.min(1,1.02*r.v)},a={h:r.h,s:Math.min(1,1.25*r.s),v:.8*r.v},h=Ky(a.h,a.s,a.v),d=Ky(s.h,s.s,s.v);return{background:i,border:h,highlight:{background:d,border:h},hover:{background:d,border:h}}}return{background:i,border:i,highlight:{background:i,border:i},hover:{background:i,border:i}}}return e?{background:t.background||e.background,border:t.border||e.border,highlight:By(t.highlight)?{border:t.highlight,background:t.highlight}:{background:t.highlight&&t.highlight.background||e.highlight.background,border:t.highlight&&t.highlight.border||e.highlight.border},hover:By(t.hover)?{border:t.hover,background:t.hover}:{border:t.hover&&t.hover.border||e.hover.border,background:t.hover&&t.hover.background||e.hover.background}}:{background:t.background||void 0,border:t.border||void 0,highlight:By(t.highlight)?{border:t.highlight,background:t.highlight}:{background:t.highlight&&t.highlight.background||void 0,border:t.highlight&&t.highlight.border||void 0},hover:By(t.hover)?{border:t.hover,background:t.hover}:{border:t.hover&&t.hover.border||void 0,background:t.hover&&t.hover.background||void 0}}}function Xy(t,e,i){t/=255,e/=255,i/=255;var o=Math.min(t,Math.min(e,i)),n=Math.max(t,Math.max(e,i));return o===n?{h:0,s:0,v:o}:{h:60*((t===o?3:i===o?1:5)-(t===o?e-i:i===o?t-e:i-t)/(n-o))/360,s:(n-o)/n,v:n}}function Gy(t,e,i){var o,n,r,s=Math.floor(6*t),a=6*t-s,h=i*(1-e),d=i*(1-a*e),l=i*(1-(1-a)*e);switch(s%6){case 0:o=i,n=l,r=h;break;case 1:o=d,n=i,r=h;break;case 2:o=h,n=i,r=l;break;case 3:o=h,n=d,r=i;break;case 4:o=l,n=h,r=i;break;case 5:o=i,n=h,r=d}return{r:Math.floor(255*o),g:Math.floor(255*n),b:Math.floor(255*r)}}function Ky(t,e,i){var o=Gy(t,e,i);return Uy(o.r,o.g,o.b)}function $y(t){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t)}function Zy(t){return My.test(t)}function Qy(t){return Py.test(t)}function Jy(t){if(null===t||"object"!==Qc(t))return null;if(t instanceof Element)return t;var e=Hp(t);for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&"object"==Qc(t[i])&&(e[i]=Jy(t[i]));return e}function tm(t,e,i){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},n=function(t){return null!=t},r=function(t){return null!==t&&"object"===Qc(t)},s=function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0};if(!r(t))throw new Error("Parameter mergeTarget must be an object");if(!r(e))throw new Error("Parameter options must be an object");if(!n(i))throw new Error("Parameter option must have a value");if(!r(o))throw new Error("Parameter globalOptions must be an object");var a=function(t,e,i){r(t[i])||(t[i]={});var o=e[i],n=t[i];for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(n[s]=o[s])},h=e[i],d=r(o)&&!s(o),l=d?o[i]:void 0,c=l?l.enabled:void 0;if(void 0!==h){if("boolean"==typeof h)return r(t[i])||(t[i]={}),void(t[i].enabled=h);if(null===h&&!r(t[i])){if(!n(l))return;t[i]=Hp(l)}if(r(h)){var u=!0;void 0!==h.enabled?u=h.enabled:void 0!==c&&(u=l.enabled),a(t,e,i),t[i].enabled=u}}}var em={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return t*(2-t)},easeInOutQuad:function(t){return t<.5?2*t*t:(4-2*t)*t-1},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return 1- --t*t*t*t},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return 1+--t*t*t*t*t},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}};function im(t,e){var i;hu(e)||(e=[e]);var o,n=wy(t);try{for(n.s();!(o=n.n()).done;){var r=o.value;if(r){i=r[e[0]];for(var s=1;s<e.length;s++)i&&(i=i[e[s]]);if(void 0!==i)break}}}catch(t){n.e(t)}finally{n.f()}return i}var om={black:"#000000",navy:"#000080",darkblue:"#00008B",mediumblue:"#0000CD",blue:"#0000FF",darkgreen:"#006400",green:"#008000",teal:"#008080",darkcyan:"#008B8B",deepskyblue:"#00BFFF",darkturquoise:"#00CED1",mediumspringgreen:"#00FA9A",lime:"#00FF00",springgreen:"#00FF7F",aqua:"#00FFFF",cyan:"#00FFFF",midnightblue:"#191970",dodgerblue:"#1E90FF",lightseagreen:"#20B2AA",forestgreen:"#228B22",seagreen:"#2E8B57",darkslategray:"#2F4F4F",limegreen:"#32CD32",mediumseagreen:"#3CB371",turquoise:"#40E0D0",royalblue:"#4169E1",steelblue:"#4682B4",darkslateblue:"#483D8B",mediumturquoise:"#48D1CC",indigo:"#4B0082",darkolivegreen:"#556B2F",cadetblue:"#5F9EA0",cornflowerblue:"#6495ED",mediumaquamarine:"#66CDAA",dimgray:"#696969",slateblue:"#6A5ACD",olivedrab:"#6B8E23",slategray:"#708090",lightslategray:"#778899",mediumslateblue:"#7B68EE",lawngreen:"#7CFC00",chartreuse:"#7FFF00",aquamarine:"#7FFFD4",maroon:"#800000",purple:"#800080",olive:"#808000",gray:"#808080",skyblue:"#87CEEB",lightskyblue:"#87CEFA",blueviolet:"#8A2BE2",darkred:"#8B0000",darkmagenta:"#8B008B",saddlebrown:"#8B4513",darkseagreen:"#8FBC8F",lightgreen:"#90EE90",mediumpurple:"#9370D8",darkviolet:"#9400D3",palegreen:"#98FB98",darkorchid:"#9932CC",yellowgreen:"#9ACD32",sienna:"#A0522D",brown:"#A52A2A",darkgray:"#A9A9A9",lightblue:"#ADD8E6",greenyellow:"#ADFF2F",paleturquoise:"#AFEEEE",lightsteelblue:"#B0C4DE",powderblue:"#B0E0E6",firebrick:"#B22222",darkgoldenrod:"#B8860B",mediumorchid:"#BA55D3",rosybrown:"#BC8F8F",darkkhaki:"#BDB76B",silver:"#C0C0C0",mediumvioletred:"#C71585",indianred:"#CD5C5C",peru:"#CD853F",chocolate:"#D2691E",tan:"#D2B48C",lightgrey:"#D3D3D3",palevioletred:"#D87093",thistle:"#D8BFD8",orchid:"#DA70D6",goldenrod:"#DAA520",crimson:"#DC143C",gainsboro:"#DCDCDC",plum:"#DDA0DD",burlywood:"#DEB887",lightcyan:"#E0FFFF",lavender:"#E6E6FA",darksalmon:"#E9967A",violet:"#EE82EE",palegoldenrod:"#EEE8AA",lightcoral:"#F08080",khaki:"#F0E68C",aliceblue:"#F0F8FF",honeydew:"#F0FFF0",azure:"#F0FFFF",sandybrown:"#F4A460",wheat:"#F5DEB3",beige:"#F5F5DC",whitesmoke:"#F5F5F5",mintcream:"#F5FFFA",ghostwhite:"#F8F8FF",salmon:"#FA8072",antiquewhite:"#FAEBD7",linen:"#FAF0E6",lightgoldenrodyellow:"#FAFAD2",oldlace:"#FDF5E6",red:"#FF0000",fuchsia:"#FF00FF",magenta:"#FF00FF",deeppink:"#FF1493",orangered:"#FF4500",tomato:"#FF6347",hotpink:"#FF69B4",coral:"#FF7F50",darkorange:"#FF8C00",lightsalmon:"#FFA07A",orange:"#FFA500",lightpink:"#FFB6C1",pink:"#FFC0CB",gold:"#FFD700",peachpuff:"#FFDAB9",navajowhite:"#FFDEAD",moccasin:"#FFE4B5",bisque:"#FFE4C4",mistyrose:"#FFE4E1",blanchedalmond:"#FFEBCD",papayawhip:"#FFEFD5",lavenderblush:"#FFF0F5",seashell:"#FFF5EE",cornsilk:"#FFF8DC",lemonchiffon:"#FFFACD",floralwhite:"#FFFAF0",snow:"#FFFAFA",yellow:"#FFFF00",lightyellow:"#FFFFE0",ivory:"#FFFFF0",white:"#FFFFFF"},nm=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;Xl(this,t),this.pixelRatio=e,this.generated=!1,this.centerCoordinates={x:144.5,y:144.5},this.r=289*.49,this.color={r:255,g:255,b:255,a:1},this.hueCircle=void 0,this.initialColor={r:255,g:255,b:255,a:1},this.previousColor=void 0,this.applied=!1,this.updateCallback=function(){},this.closeCallback=function(){},this._create()}return $l(t,[{key:"insertTo",value:function(t){void 0!==this.hammer&&(this.hammer.destroy(),this.hammer=void 0),this.container=t,this.container.appendChild(this.frame),this._bindHammer(),this._setSize()}},{key:"setUpdateCallback",value:function(t){if("function"!=typeof t)throw new Error("Function attempted to set as colorPicker update callback is not a function.");this.updateCallback=t}},{key:"setCloseCallback",value:function(t){if("function"!=typeof t)throw new Error("Function attempted to set as colorPicker closing callback is not a function.");this.closeCallback=t}},{key:"_isColorString",value:function(t){if("string"==typeof t)return om[t]}},{key:"setColor",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if("none"!==t){var i,o=this._isColorString(t);if(void 0!==o&&(t=o),!0===By(t)){if(!0===Zy(t)){var n=t.substr(4).substr(0,t.length-5).split(",");i={r:n[0],g:n[1],b:n[2],a:1}}else if(!0===Qy(t)){var r=t.substr(5).substr(0,t.length-6).split(",");i={r:r[0],g:r[1],b:r[2],a:r[3]}}else if(!0===$y(t)){var s=Vy(t);i={r:s.r,g:s.g,b:s.b,a:1}}}else if(t instanceof Object&&void 0!==t.r&&void 0!==t.g&&void 0!==t.b){var a=void 0!==t.a?t.a:"1.0";i={r:t.r,g:t.g,b:t.b,a:a}}if(void 0===i)throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: "+hv(t));this._setColor(i,e)}}},{key:"show",value:function(){void 0!==this.closeCallback&&(this.closeCallback(),this.closeCallback=void 0),this.applied=!1,this.frame.style.display="block",this._generateHueCircle()}},{key:"_hide",value:function(){var t=this,e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];!0===e&&(this.previousColor=fo({},this.color)),!0===this.applied&&this.updateCallback(this.initialColor),this.frame.style.display="none",bv((function(){void 0!==t.closeCallback&&(t.closeCallback(),t.closeCallback=void 0)}),0)}},{key:"_save",value:function(){this.updateCallback(this.color),this.applied=!1,this._hide()}},{key:"_apply",value:function(){this.applied=!0,this.updateCallback(this.color),this._updatePicker(this.color)}},{key:"_loadLast",value:function(){void 0!==this.previousColor?this.setColor(this.previousColor,!1):alert("There is no last color to load...")}},{key:"_setColor",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];!0===e&&(this.initialColor=fo({},t)),this.color=t;var i=Xy(t.r,t.g,t.b),o=2*Math.PI,n=this.r*i.s,r=this.centerCoordinates.x+n*Math.sin(o*i.h),s=this.centerCoordinates.y+n*Math.cos(o*i.h);this.colorPickerSelector.style.left=r-.5*this.colorPickerSelector.clientWidth+"px",this.colorPickerSelector.style.top=s-.5*this.colorPickerSelector.clientHeight+"px",this._updatePicker(t)}},{key:"_setOpacity",value:function(t){this.color.a=t/100,this._updatePicker(this.color)}},{key:"_setBrightness",value:function(t){var e=Xy(this.color.r,this.color.g,this.color.b);e.v=t/100;var i=Gy(e.h,e.s,e.v);i.a=this.color.a,this.color=i,this._updatePicker()}},{key:"_updatePicker",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.color,e=Xy(t.r,t.g,t.b),i=this.colorPickerCanvas.getContext("2d");void 0===this.pixelRation&&(this.pixelRatio=(window.devicePixelRatio||1)/(i.webkitBackingStorePixelRatio||i.mozBackingStorePixelRatio||i.msBackingStorePixelRatio||i.oBackingStorePixelRatio||i.backingStorePixelRatio||1)),i.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);var o=this.colorPickerCanvas.clientWidth,n=this.colorPickerCanvas.clientHeight;i.clearRect(0,0,o,n),i.putImageData(this.hueCircle,0,0),i.fillStyle="rgba(0,0,0,"+(1-e.v)+")",i.circle(this.centerCoordinates.x,this.centerCoordinates.y,this.r),Pv(i).call(i),this.brightnessRange.value=100*e.v,this.opacityRange.value=100*t.a,this.initialColorDiv.style.backgroundColor="rgba("+this.initialColor.r+","+this.initialColor.g+","+this.initialColor.b+","+this.initialColor.a+")",this.newColorDiv.style.backgroundColor="rgba("+this.color.r+","+this.color.g+","+this.color.b+","+this.color.a+")"}},{key:"_setSize",value:function(){this.colorPickerCanvas.style.width="100%",this.colorPickerCanvas.style.height="100%",this.colorPickerCanvas.width=289*this.pixelRatio,this.colorPickerCanvas.height=289*this.pixelRatio}},{key:"_create",value:function(){var t,e,i,o;if(this.frame=document.createElement("div"),this.frame.className="vis-color-picker",this.colorPickerDiv=document.createElement("div"),this.colorPickerSelector=document.createElement("div"),this.colorPickerSelector.className="vis-selector",this.colorPickerDiv.appendChild(this.colorPickerSelector),this.colorPickerCanvas=document.createElement("canvas"),this.colorPickerDiv.appendChild(this.colorPickerCanvas),this.colorPickerCanvas.getContext){var n=this.colorPickerCanvas.getContext("2d");this.pixelRatio=(window.devicePixelRatio||1)/(n.webkitBackingStorePixelRatio||n.mozBackingStorePixelRatio||n.msBackingStorePixelRatio||n.oBackingStorePixelRatio||n.backingStorePixelRatio||1),this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0)}else{var r=document.createElement("DIV");r.style.color="red",r.style.fontWeight="bold",r.style.padding="10px",r.innerText="Error: your browser does not support HTML canvas",this.colorPickerCanvas.appendChild(r)}this.colorPickerDiv.className="vis-color",this.opacityDiv=document.createElement("div"),this.opacityDiv.className="vis-opacity",this.brightnessDiv=document.createElement("div"),this.brightnessDiv.className="vis-brightness",this.arrowDiv=document.createElement("div"),this.arrowDiv.className="vis-arrow",this.opacityRange=document.createElement("input");try{this.opacityRange.type="range",this.opacityRange.min="0",this.opacityRange.max="100"}catch(t){}this.opacityRange.value="100",this.opacityRange.className="vis-range",this.brightnessRange=document.createElement("input");try{this.brightnessRange.type="range",this.brightnessRange.min="0",this.brightnessRange.max="100"}catch(t){}this.brightnessRange.value="100",this.brightnessRange.className="vis-range",this.opacityDiv.appendChild(this.opacityRange),this.brightnessDiv.appendChild(this.brightnessRange);var s=this;this.opacityRange.onchange=function(){s._setOpacity(this.value)},this.opacityRange.oninput=function(){s._setOpacity(this.value)},this.brightnessRange.onchange=function(){s._setBrightness(this.value)},this.brightnessRange.oninput=function(){s._setBrightness(this.value)},this.brightnessLabel=document.createElement("div"),this.brightnessLabel.className="vis-label vis-brightness",this.brightnessLabel.innerText="brightness:",this.opacityLabel=document.createElement("div"),this.opacityLabel.className="vis-label vis-opacity",this.opacityLabel.innerText="opacity:",this.newColorDiv=document.createElement("div"),this.newColorDiv.className="vis-new-color",this.newColorDiv.innerText="new",this.initialColorDiv=document.createElement("div"),this.initialColorDiv.className="vis-initial-color",this.initialColorDiv.innerText="initial",this.cancelButton=document.createElement("div"),this.cancelButton.className="vis-button vis-cancel",this.cancelButton.innerText="cancel",this.cancelButton.onclick=Fo(t=this._hide).call(t,this,!1),this.applyButton=document.createElement("div"),this.applyButton.className="vis-button vis-apply",this.applyButton.innerText="apply",this.applyButton.onclick=Fo(e=this._apply).call(e,this),this.saveButton=document.createElement("div"),this.saveButton.className="vis-button vis-save",this.saveButton.innerText="save",this.saveButton.onclick=Fo(i=this._save).call(i,this),this.loadButton=document.createElement("div"),this.loadButton.className="vis-button vis-load",this.loadButton.innerText="load last",this.loadButton.onclick=Fo(o=this._loadLast).call(o,this),this.frame.appendChild(this.colorPickerDiv),this.frame.appendChild(this.arrowDiv),this.frame.appendChild(this.brightnessLabel),this.frame.appendChild(this.brightnessDiv),this.frame.appendChild(this.opacityLabel),this.frame.appendChild(this.opacityDiv),this.frame.appendChild(this.newColorDiv),this.frame.appendChild(this.initialColorDiv),this.frame.appendChild(this.cancelButton),this.frame.appendChild(this.applyButton),this.frame.appendChild(this.saveButton),this.frame.appendChild(this.loadButton)}},{key:"_bindHammer",value:function(){var t=this;this.drag={},this.pinch={},this.hammer=new Oy(this.colorPickerCanvas),this.hammer.get("pinch").set({enable:!0}),this.hammer.on("hammer.input",(function(e){e.isFirst&&t._moveSelector(e)})),this.hammer.on("tap",(function(e){t._moveSelector(e)})),this.hammer.on("panstart",(function(e){t._moveSelector(e)})),this.hammer.on("panmove",(function(e){t._moveSelector(e)})),this.hammer.on("panend",(function(e){t._moveSelector(e)}))}},{key:"_generateHueCircle",value:function(){if(!1===this.generated){var t=this.colorPickerCanvas.getContext("2d");void 0===this.pixelRation&&(this.pixelRatio=(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)),t.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);var e,i,o,n,r=this.colorPickerCanvas.clientWidth,s=this.colorPickerCanvas.clientHeight;t.clearRect(0,0,r,s),this.centerCoordinates={x:.5*r,y:.5*s},this.r=.49*r;var a,h=2*Math.PI/360,d=1/this.r;for(o=0;o<360;o++)for(n=0;n<this.r;n++)e=this.centerCoordinates.x+n*Math.sin(h*o),i=this.centerCoordinates.y+n*Math.cos(h*o),a=Gy(.002777777777777778*o,n*d,1),t.fillStyle="rgb("+a.r+","+a.g+","+a.b+")",t.fillRect(e-.5,i-.5,2,2);t.strokeStyle="rgba(0,0,0,1)",t.circle(this.centerCoordinates.x,this.centerCoordinates.y,this.r),t.stroke(),this.hueCircle=t.getImageData(0,0,r,s)}this.generated=!0}},{key:"_moveSelector",value:function(t){var e=this.colorPickerDiv.getBoundingClientRect(),i=t.center.x-e.left,o=t.center.y-e.top,n=.5*this.colorPickerDiv.clientHeight,r=.5*this.colorPickerDiv.clientWidth,s=i-r,a=o-n,h=Math.atan2(s,a),d=.98*Math.min(Math.sqrt(s*s+a*a),r),l=Math.cos(h)*d+n,c=Math.sin(h)*d+r;this.colorPickerSelector.style.top=l-.5*this.colorPickerSelector.clientHeight+"px",this.colorPickerSelector.style.left=c-.5*this.colorPickerSelector.clientWidth+"px";var u=h/(2*Math.PI);u=u<0?u+1:u;var f=d/this.r,p=Xy(this.color.r,this.color.g,this.color.b);p.h=u,p.s=f;var v=Gy(p.h,p.s,p.v);v.a=this.color.a,this.color=v,this.initialColorDiv.style.backgroundColor="rgba("+this.initialColor.r+","+this.initialColor.g+","+this.initialColor.b+","+this.initialColor.a+")",this.newColorDiv.style.backgroundColor="rgba("+this.color.r+","+this.color.g+","+this.color.b+","+this.color.a+")"}}]),t}();function rm(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];if(e.length<1)throw new TypeError("Invalid arguments.");if(1===e.length)return document.createTextNode(e[0]);var o=document.createElement(e[0]);return o.appendChild(rm.apply(void 0,Jc(au(e).call(e,1)))),o}var sm,am=function(){function t(e,i,o){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){return!1};Xl(this,t),this.parent=e,this.changedOptions=[],this.container=i,this.allowCreation=!1,this.hideOption=r,this.options={},this.initialized=!1,this.popupCounter=0,this.defaultOptions={enabled:!1,filter:!0,container:void 0,showButton:!0},fo(this.options,this.defaultOptions),this.configureOptions=o,this.moduleOptions={},this.domElements=[],this.popupDiv={},this.popupLimit=5,this.popupHistory={},this.colorPicker=new nm(n),this.wrapper=void 0}return $l(t,[{key:"setOptions",value:function(t){if(void 0!==t){this.popupHistory={},this._removePopup();var e=!0;if("string"==typeof t)this.options.filter=t;else if(hu(t))this.options.filter=t.join();else if("object"===Qc(t)){if(null==t)throw new TypeError("options cannot be null");void 0!==t.container&&(this.options.container=t.container),void 0!==Yf(t)&&(this.options.filter=Yf(t)),void 0!==t.showButton&&(this.options.showButton=t.showButton),void 0!==t.enabled&&(e=t.enabled)}else"boolean"==typeof t?(this.options.filter=!0,e=t):"function"==typeof t&&(this.options.filter=t,e=!0);!1===Yf(this.options)&&(e=!1),this.options.enabled=e}this._clean()}},{key:"setModuleOptions",value:function(t){this.moduleOptions=t,!0===this.options.enabled&&(this._clean(),void 0!==this.options.container&&(this.container=this.options.container),this._create())}},{key:"_create",value:function(){this._clean(),this.changedOptions=[];var t=Yf(this.options),e=0,i=!1;for(var o in this.configureOptions)Object.prototype.hasOwnProperty.call(this.configureOptions,o)&&(this.allowCreation=!1,i=!1,"function"==typeof t?i=(i=t(o,[]))||this._handleObject(this.configureOptions[o],[o],!0):!0!==t&&-1===zp(t).call(t,o)||(i=!0),!1!==i&&(this.allowCreation=!0,e>0&&this._makeItem([]),this._makeHeader(o),this._handleObject(this.configureOptions[o],[o])),e++);this._makeButton(),this._push()}},{key:"_push",value:function(){this.wrapper=document.createElement("div"),this.wrapper.className="vis-configuration-wrapper",this.container.appendChild(this.wrapper);for(var t=0;t<this.domElements.length;t++)this.wrapper.appendChild(this.domElements[t]);this._showPopupIfNeeded()}},{key:"_clean",value:function(){for(var t=0;t<this.domElements.length;t++)this.wrapper.removeChild(this.domElements[t]);void 0!==this.wrapper&&(this.container.removeChild(this.wrapper),this.wrapper=void 0),this.domElements=[],this._removePopup()}},{key:"_getValue",value:function(t){for(var e=this.moduleOptions,i=0;i<t.length;i++){if(void 0===e[t[i]]){e=void 0;break}e=e[t[i]]}return e}},{key:"_makeItem",value:function(t){if(!0===this.allowCreation){var e=document.createElement("div");e.className="vis-configuration vis-config-item vis-config-s"+t.length;for(var i=arguments.length,o=new Array(i>1?i-1:0),n=1;n<i;n++)o[n-1]=arguments[n];return Fu(o).call(o,(function(t){e.appendChild(t)})),this.domElements.push(e),this.domElements.length}return 0}},{key:"_makeHeader",value:function(t){var e=document.createElement("div");e.className="vis-configuration vis-config-header",e.innerText=t,this._makeItem([],e)}},{key:"_makeLabel",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=document.createElement("div");if(o.className="vis-configuration vis-config-label vis-config-s"+e.length,!0===i){for(;o.firstChild;)o.removeChild(o.firstChild);o.appendChild(rm("i","b",t))}else o.innerText=t+":";return o}},{key:"_makeDropdown",value:function(t,e,i){var o=document.createElement("select");o.className="vis-configuration vis-config-select";var n=0;void 0!==e&&-1!==zp(t).call(t,e)&&(n=zp(t).call(t,e));for(var r=0;r<t.length;r++){var s=document.createElement("option");s.value=t[r],r===n&&(s.selected="selected"),s.innerText=t[r],o.appendChild(s)}var a=this;o.onchange=function(){a._update(this.value,i)};var h=this._makeLabel(i[i.length-1],i);this._makeItem(i,h,o)}},{key:"_makeRange",value:function(t,e,i){var o=t[0],n=t[1],r=t[2],s=t[3],a=document.createElement("input");a.className="vis-configuration vis-config-range";try{a.type="range",a.min=n,a.max=r}catch(t){}a.step=s;var h="",d=0;if(void 0!==e){var l=1.2;e<0&&e*l<n?(a.min=Math.ceil(e*l),d=a.min,h="range increased"):e/l<n&&(a.min=Math.ceil(e/l),d=a.min,h="range increased"),e*l>r&&1!==r&&(a.max=Math.ceil(e*l),d=a.max,h="range increased"),a.value=e}else a.value=o;var c=document.createElement("input");c.className="vis-configuration vis-config-rangeinput",c.value=a.value;var u=this;a.onchange=function(){c.value=this.value,u._update(Number(this.value),i)},a.oninput=function(){c.value=this.value};var f=this._makeLabel(i[i.length-1],i),p=this._makeItem(i,f,a,c);""!==h&&this.popupHistory[p]!==d&&(this.popupHistory[p]=d,this._setupPopup(h,p))}},{key:"_makeButton",value:function(){var t=this;if(!0===this.options.showButton){var e=document.createElement("div");e.className="vis-configuration vis-config-button",e.innerText="generate options",e.onclick=function(){t._printOptions()},e.onmouseover=function(){e.className="vis-configuration vis-config-button hover"},e.onmouseout=function(){e.className="vis-configuration vis-config-button"},this.optionsContainer=document.createElement("div"),this.optionsContainer.className="vis-configuration vis-config-option-container",this.domElements.push(this.optionsContainer),this.domElements.push(e)}}},{key:"_setupPopup",value:function(t,e){var i=this;if(!0===this.initialized&&!0===this.allowCreation&&this.popupCounter<this.popupLimit){var o=document.createElement("div");o.id="vis-configuration-popup",o.className="vis-configuration-popup",o.innerText=t,o.onclick=function(){i._removePopup()},this.popupCounter+=1,this.popupDiv={html:o,index:e}}}},{key:"_removePopup",value:function(){void 0!==this.popupDiv.html&&(this.popupDiv.html.parentNode.removeChild(this.popupDiv.html),clearTimeout(this.popupDiv.hideTimeout),clearTimeout(this.popupDiv.deleteTimeout),this.popupDiv={})}},{key:"_showPopupIfNeeded",value:function(){var t=this;if(void 0!==this.popupDiv.html){var e=this.domElements[this.popupDiv.index].getBoundingClientRect();this.popupDiv.html.style.left=e.left+"px",this.popupDiv.html.style.top=e.top-30+"px",document.body.appendChild(this.popupDiv.html),this.popupDiv.hideTimeout=bv((function(){t.popupDiv.html.style.opacity=0}),1500),this.popupDiv.deleteTimeout=bv((function(){t._removePopup()}),1800)}}},{key:"_makeCheckbox",value:function(t,e,i){var o=document.createElement("input");o.type="checkbox",o.className="vis-configuration vis-config-checkbox",o.checked=t,void 0!==e&&(o.checked=e,e!==t&&("object"===Qc(t)?e!==t.enabled&&this.changedOptions.push({path:i,value:e}):this.changedOptions.push({path:i,value:e})));var n=this;o.onchange=function(){n._update(this.checked,i)};var r=this._makeLabel(i[i.length-1],i);this._makeItem(i,r,o)}},{key:"_makeTextInput",value:function(t,e,i){var o=document.createElement("input");o.type="text",o.className="vis-configuration vis-config-text",o.value=e,e!==t&&this.changedOptions.push({path:i,value:e});var n=this;o.onchange=function(){n._update(this.value,i)};var r=this._makeLabel(i[i.length-1],i);this._makeItem(i,r,o)}},{key:"_makeColorField",value:function(t,e,i){var o=this,n=t[1],r=document.createElement("div");"none"!==(e=void 0===e?n:e)?(r.className="vis-configuration vis-config-colorBlock",r.style.backgroundColor=e):r.className="vis-configuration vis-config-colorBlock none",e=void 0===e?n:e,r.onclick=function(){o._showColorPicker(e,r,i)};var s=this._makeLabel(i[i.length-1],i);this._makeItem(i,s,r)}},{key:"_showColorPicker",value:function(t,e,i){var o=this;e.onclick=function(){},this.colorPicker.insertTo(e),this.colorPicker.show(),this.colorPicker.setColor(t),this.colorPicker.setUpdateCallback((function(t){var n="rgba("+t.r+","+t.g+","+t.b+","+t.a+")";e.style.backgroundColor=n,o._update(n,i)})),this.colorPicker.setCloseCallback((function(){e.onclick=function(){o._showColorPicker(t,e,i)}}))}},{key:"_handleObject",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!1,n=Yf(this.options),r=!1;for(var s in t)if(Object.prototype.hasOwnProperty.call(t,s)){o=!0;var a=t[s],h=jy(e,s);if("function"==typeof n&&!1===(o=n(s,e))&&!hu(a)&&"string"!=typeof a&&"boolean"!=typeof a&&a instanceof Object&&(this.allowCreation=!1,o=this._handleObject(a,h,!0),this.allowCreation=!1===i),!1!==o){r=!0;var d=this._getValue(h);if(hu(a))this._handleArray(a,d,h);else if("string"==typeof a)this._makeTextInput(a,d,h);else if("boolean"==typeof a)this._makeCheckbox(a,d,h);else if(a instanceof Object){if(!this.hideOption(e,s,this.moduleOptions))if(void 0!==a.enabled){var l=jy(h,"enabled"),c=this._getValue(l);if(!0===c){var u=this._makeLabel(s,h,!0);this._makeItem(h,u),r=this._handleObject(a,h)||r}else this._makeCheckbox(a,c,h)}else{var f=this._makeLabel(s,h,!0);this._makeItem(h,f),r=this._handleObject(a,h)||r}}else console.error("dont know how to handle",a,s,h)}}return r}},{key:"_handleArray",value:function(t,e,i){"string"==typeof t[0]&&"color"===t[0]?(this._makeColorField(t,e,i),t[1]!==e&&this.changedOptions.push({path:i,value:e})):"string"==typeof t[0]?(this._makeDropdown(t,e,i),t[0]!==e&&this.changedOptions.push({path:i,value:e})):"number"==typeof t[0]&&(this._makeRange(t,e,i),t[0]!==e&&this.changedOptions.push({path:i,value:Number(e)}))}},{key:"_update",value:function(t,e){var i=this._constructOptions(t,e);this.parent.body&&this.parent.body.emitter&&this.parent.body.emitter.emit&&this.parent.body.emitter.emit("configChange",i),this.initialized=!0,this.parent.setOptions(i)}},{key:"_constructOptions",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=i;t="false"!==(t="true"===t||t)&&t;for(var n=0;n<e.length;n++)"global"!==e[n]&&(void 0===o[e[n]]&&(o[e[n]]={}),n!==e.length-1?o=o[e[n]]:o[e[n]]=t);return i}},{key:"_printOptions",value:function(){for(var t=this.getOptions();this.optionsContainer.firstChild;)this.optionsContainer.removeChild(this.optionsContainer.firstChild);this.optionsContainer.appendChild(rm("pre","const options = "+hv(t,null,2)))}},{key:"getOptions",value:function(){for(var t={},e=0;e<this.changedOptions.length;e++)this._constructOptions(this.changedOptions[e].value,this.changedOptions[e].path,t);return t}}]),t}(),hm=function(){function t(e,i){Xl(this,t),this.container=e,this.overflowMethod=i||"cap",this.x=0,this.y=0,this.padding=5,this.hidden=!1,this.frame=document.createElement("div"),this.frame.className="vis-tooltip",this.container.appendChild(this.frame)}return $l(t,[{key:"setPosition",value:function(t,e){this.x=_p(t),this.y=_p(e)}},{key:"setText",value:function(t){if(t instanceof Element){for(;this.frame.firstChild;)this.frame.removeChild(this.frame.firstChild);this.frame.appendChild(t)}else this.frame.innerText=t}},{key:"show",value:function(t){if(void 0===t&&(t=!0),!0===t){var e=this.frame.clientHeight,i=this.frame.clientWidth,o=this.frame.parentNode.clientHeight,n=this.frame.parentNode.clientWidth,r=0,s=0;if("flip"==this.overflowMethod){var a=!1,h=!0;this.y-e<this.padding&&(h=!1),this.x+i>n-this.padding&&(a=!0),r=a?this.x-i:this.x,s=h?this.y-e:this.y}else(s=this.y-e)+e+this.padding>o&&(s=o-e-this.padding),s<this.padding&&(s=this.padding),(r=this.x)+i+this.padding>n&&(r=n-i-this.padding),r<this.padding&&(r=this.padding);this.frame.style.left=r+"px",this.frame.style.top=s+"px",this.frame.style.visibility="visible",this.hidden=!1}else this.hide()}},{key:"hide",value:function(){this.hidden=!0,this.frame.style.left="0",this.frame.style.top="0",this.frame.style.visibility="hidden"}},{key:"destroy",value:function(){this.frame.parentNode.removeChild(this.frame)}}]),t}(),dm=!1,lm="background: #FFeeee; color: #dd0000",cm=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"validate",value:function(e,i,o){dm=!1,sm=i;var n=i;return void 0!==o&&(n=i[o]),t.parse(e,n,[]),dm}},{key:"parse",value:function(e,i,o){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.check(n,e,i,o)}},{key:"check",value:function(e,i,o,n){if(void 0!==o[e]||void 0!==o.__any__){var r=e,s=!0;void 0===o[e]&&void 0!==o.__any__&&(r="__any__",s="object"===t.getType(i[e]));var a=o[r];s&&void 0!==a.__type__&&(a=a.__type__),t.checkFields(e,i,o,r,a,n)}else t.getSuggestion(e,o,n)}},{key:"checkFields",value:function(e,i,o,n,r,s){var a=function(i){console.error("%c"+i+t.printLocation(s,e),lm)},h=t.getType(i[e]),d=r[h];void 0!==d?"array"===t.getType(d)&&-1===zp(d).call(d,i[e])?(a('Invalid option detected in "'+e+'". Allowed values are:'+t.print(d)+' not "'+i[e]+'". '),dm=!0):"object"===h&&"__any__"!==n&&(s=jy(s,e),t.parse(i[e],o[n],s)):void 0===r.any&&(a('Invalid type received for "'+e+'". Expected: '+t.print(mu(r))+". Received ["+h+'] "'+i[e]+'"'),dm=!0)}},{key:"getType",value:function(t){var e=Qc(t);return"object"===e?null===t?"null":t instanceof Boolean?"boolean":t instanceof Number?"number":t instanceof String?"string":hu(t)?"array":t instanceof Date?"date":void 0!==t.nodeType?"dom":!0===t._isAMomentObject?"moment":"object":"number"===e?"number":"boolean"===e?"boolean":"string"===e?"string":void 0===e?"undefined":e}},{key:"getSuggestion",value:function(e,i,o){var n,r=t.findInOptions(e,i,o,!1),s=t.findInOptions(e,sm,[],!0);n=void 0!==r.indexMatch?" in "+t.printLocation(r.path,e,"")+'Perhaps it was incomplete? Did you mean: "'+r.indexMatch+'"?\n\n':s.distance<=4&&r.distance>s.distance?" in "+t.printLocation(r.path,e,"")+"Perhaps it was misplaced? Matching option found at: "+t.printLocation(s.path,s.closestMatch,""):r.distance<=8?'. Did you mean "'+r.closestMatch+'"?'+t.printLocation(r.path,e):". Did you mean one of these: "+t.print(mu(i))+t.printLocation(o,e),console.error('%cUnknown option detected: "'+e+'"'+n,lm),dm=!0}},{key:"findInOptions",value:function(e,i,o){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=1e9,s="",a=[],h=e.toLowerCase(),d=void 0;for(var l in i){var c=void 0;if(void 0!==i[l].__type__&&!0===n){var u=t.findInOptions(e,i[l],jy(o,l));r>u.distance&&(s=u.closestMatch,a=u.path,r=u.distance,d=u.indexMatch)}else{var f;-1!==zp(f=l.toLowerCase()).call(f,h)&&(d=l),r>(c=t.levenshteinDistance(e,l))&&(s=l,a=Ly(o),r=c)}}return{closestMatch:s,path:a,distance:r,indexMatch:d}}},{key:"printLocation",value:function(t,e){for(var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Problem value found at: \n",o="\n\n"+i+"options = {\n",n=0;n<t.length;n++){for(var r=0;r<n+1;r++)o+="  ";o+=t[n]+": {\n"}for(var s=0;s<t.length+1;s++)o+="  ";o+=e+"\n";for(var a=0;a<t.length+1;a++){for(var h=0;h<t.length-a;h++)o+="  ";o+="}\n"}return o+"\n\n"}},{key:"print",value:function(t){return hv(t).replace(/(")|(\[)|(\])|(,"__type__")/g,"").replace(/(,)/g,", ")}},{key:"levenshteinDistance",value:function(t,e){if(0===t.length)return e.length;if(0===e.length)return t.length;var i,o,n=[];for(i=0;i<=e.length;i++)n[i]=[i];for(o=0;o<=t.length;o++)n[0][o]=o;for(i=1;i<=e.length;i++)for(o=1;o<=t.length;o++)e.charAt(i-1)==t.charAt(o-1)?n[i][o]=n[i-1][o-1]:n[i][o]=Math.min(n[i-1][o-1]+1,Math.min(n[i][o-1]+1,n[i-1][o]+1));return n[e.length][t.length]}}]),t}(),um=Cy,fm=am,pm=Oy,vm=hm,gm=lm,ym=cm;function mm(t){return Cm=t,function(){var t={};Sm=0,void(Tm=Cm.charAt(0)),jm(),"strict"===Mm&&(t.strict=!0,jm());"graph"!==Mm&&"digraph"!==Mm||(t.type=Mm,jm());Pm===xm&&(t.id=Mm,jm());if("{"!=Mm)throw Um("Angle bracket { expected");if(jm(),Lm(t),"}"!=Mm)throw Um("Angle bracket } expected");if(jm(),""!==Mm)throw Um("End of file expected");return jm(),delete t.node,delete t.edge,delete t.graph,t}()}var bm={fontsize:"font.size",fontcolor:"font.color",labelfontcolor:"font.color",fontname:"font.face",color:["color.border","color.background"],fillcolor:"color.background",tooltip:"title",labeltooltip:"title"},wm=Hp(bm);wm.color="color.color",wm.style="dashes";var km=0,_m=1,xm=2,Em=3,Om={"{":!0,"}":!0,"[":!0,"]":!0,";":!0,"=":!0,",":!0,"->":!0,"--":!0},Cm="",Sm=0,Tm="",Mm="",Pm=km;function Dm(){Sm++,Tm=Cm.charAt(Sm)}function Bm(){return Cm.charAt(Sm+1)}function Im(t){var e=t.charCodeAt(0);return e<47?35===e||46===e:e<59?e>47:e<91?e>64:e<96?95===e:e<123&&e>96}function zm(t,e){if(t||(t={}),e)for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);return t}function Fm(t,e,i){for(var o=e.split("."),n=t;o.length;){var r=o.shift();o.length?(n[r]||(n[r]={}),n=n[r]):n[r]=i}}function Nm(t,e){for(var i,o,n=null,r=[t],s=t;s.parent;)r.push(s.parent),s=s.parent;if(s.nodes)for(i=0,o=s.nodes.length;i<o;i++)if(e.id===s.nodes[i].id){n=s.nodes[i];break}for(n||(n={id:e.id},t.node&&(n.attr=zm(n.attr,t.node))),i=r.length-1;i>=0;i--){var a,h=r[i];h.nodes||(h.nodes=[]),-1===zp(a=h.nodes).call(a,n)&&h.nodes.push(n)}e.attr&&(n.attr=zm(n.attr,e.attr))}function Am(t,e){if(t.edges||(t.edges=[]),t.edges.push(e),t.edge){var i=zm({},t.edge);e.attr=zm(i,e.attr)}}function Rm(t,e,i,o,n){var r={from:e,to:i,type:o};return t.edge&&(r.attr=zm({},t.edge)),r.attr=zm(r.attr||{},n),null!=n&&n.hasOwnProperty("arrows")&&null!=n.arrows&&(r.arrows={to:{enabled:!0,type:n.arrows.type}},n.arrows=null),r}function jm(){for(Pm=km,Mm="";" "===Tm||"\t"===Tm||"\n"===Tm||"\r"===Tm;)Dm();do{var t=!1;if("#"===Tm){for(var e=Sm-1;" "===Cm.charAt(e)||"\t"===Cm.charAt(e);)e--;if("\n"===Cm.charAt(e)||""===Cm.charAt(e)){for(;""!=Tm&&"\n"!=Tm;)Dm();t=!0}}if("/"===Tm&&"/"===Bm()){for(;""!=Tm&&"\n"!=Tm;)Dm();t=!0}if("/"===Tm&&"*"===Bm()){for(;""!=Tm;){if("*"===Tm&&"/"===Bm()){Dm(),Dm();break}Dm()}t=!0}for(;" "===Tm||"\t"===Tm||"\n"===Tm||"\r"===Tm;)Dm()}while(t);if(""!==Tm){var i=Tm+Bm();if(Om[i])return Pm=_m,Mm=i,Dm(),void Dm();if(Om[Tm])return Pm=_m,Mm=Tm,void Dm();if(Im(Tm)||"-"===Tm){for(Mm+=Tm,Dm();Im(Tm);)Mm+=Tm,Dm();return"false"===Mm?Mm=!1:"true"===Mm?Mm=!0:isNaN(Number(Mm))||(Mm=Number(Mm)),void(Pm=xm)}if('"'===Tm){for(Dm();""!=Tm&&('"'!=Tm||'"'===Tm&&'"'===Bm());)'"'===Tm?(Mm+=Tm,Dm()):"\\"===Tm&&"n"===Bm()?(Mm+="\n",Dm()):Mm+=Tm,Dm();if('"'!=Tm)throw Um('End of string " expected');return Dm(),void(Pm=xm)}for(Pm=Em;""!=Tm;)Mm+=Tm,Dm();throw new SyntaxError('Syntax error in part "'+Ym(Mm,30)+'"')}Pm=_m}function Lm(t){for(;""!==Mm&&"}"!=Mm;)Hm(t),";"===Mm&&jm()}function Hm(t){var e=Wm(t);if(e)Vm(t,e);else{var i=function(t){if("node"===Mm)return jm(),t.node=qm(),"node";if("edge"===Mm)return jm(),t.edge=qm(),"edge";if("graph"===Mm)return jm(),t.graph=qm(),"graph";return null}(t);if(!i){if(Pm!=xm)throw Um("Identifier expected");var o=Mm;if(jm(),"="===Mm){if(jm(),Pm!=xm)throw Um("Identifier expected");t[o]=Mm,jm()}else!function(t,e){var i={id:e},o=qm();o&&(i.attr=o);Nm(t,i),Vm(t,e)}(t,o)}}}function Wm(t){var e=null;if("subgraph"===Mm&&((e={}).type="subgraph",jm(),Pm===xm&&(e.id=Mm,jm())),"{"===Mm){if(jm(),e||(e={}),e.parent=t,e.node=t.node,e.edge=t.edge,e.graph=t.graph,Lm(e),"}"!=Mm)throw Um("Angle bracket } expected");jm(),delete e.node,delete e.edge,delete e.graph,delete e.parent,t.subgraphs||(t.subgraphs=[]),t.subgraphs.push(e)}return e}function Vm(t,e){for(;"->"===Mm||"--"===Mm;){var i,o=Mm;jm();var n=Wm(t);if(n)i=n;else{if(Pm!=xm)throw Um("Identifier or subgraph expected");Nm(t,{id:i=Mm}),jm()}Am(t,Rm(t,e,i,o,qm())),e=i}}function qm(){for(var t,e,i=null,o={dashed:!0,solid:!1,dotted:[1,5]},n={dot:"circle",box:"box",crow:"crow",curve:"curve",icurve:"inv_curve",normal:"triangle",inv:"inv_triangle",diamond:"diamond",tee:"bar",vee:"vee"},r=new Array,s=new Array;"["===Mm;){for(jm(),i={};""!==Mm&&"]"!=Mm;){if(Pm!=xm)throw Um("Attribute name expected");var a=Mm;if(jm(),"="!=Mm)throw Um("Equal sign = expected");if(jm(),Pm!=xm)throw Um("Attribute value expected");var h=Mm;"style"===a&&(h=o[h]),"arrowhead"===a&&(a="arrows",h={to:{enabled:!0,type:n[h]}}),"arrowtail"===a&&(a="arrows",h={from:{enabled:!0,type:n[h]}}),r.push({attr:i,name:a,value:h}),s.push(a),jm(),","==Mm&&jm()}if("]"!=Mm)throw Um("Bracket ] expected");jm()}if(zf(s).call(s,"dir")){var d={arrows:{}};for(t=0;t<r.length;t++)if("arrows"===r[t].name)if(null!=r[t].value.to)d.arrows.to=t;else{if(null==r[t].value.from)throw Um("Invalid value of arrows");d.arrows.from=t}else"dir"===r[t].name&&(d.dir=t);var l,c,u=r[d.dir].value;if(!zf(s).call(s,"arrows"))if("both"===u)r.push({attr:r[d.dir].attr,name:"arrows",value:{to:{enabled:!0}}}),d.arrows.to=r.length-1,r.push({attr:r[d.dir].attr,name:"arrows",value:{from:{enabled:!0}}}),d.arrows.from=r.length-1;else if("forward"===u)r.push({attr:r[d.dir].attr,name:"arrows",value:{to:{enabled:!0}}}),d.arrows.to=r.length-1;else if("back"===u)r.push({attr:r[d.dir].attr,name:"arrows",value:{from:{enabled:!0}}}),d.arrows.from=r.length-1;else{if("none"!==u)throw Um('Invalid dir type "'+u+'"');r.push({attr:r[d.dir].attr,name:"arrows",value:""}),d.arrows.to=r.length-1}if("both"===u)d.arrows.to&&d.arrows.from?(c=r[d.arrows.to].value.to.type,l=r[d.arrows.from].value.from.type,r[d.arrows.to]={attr:r[d.arrows.to].attr,name:r[d.arrows.to].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}},uf(r).call(r,d.arrows.from,1)):d.arrows.to?(c=r[d.arrows.to].value.to.type,l="arrow",r[d.arrows.to]={attr:r[d.arrows.to].attr,name:r[d.arrows.to].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}}):d.arrows.from&&(c="arrow",l=r[d.arrows.from].value.from.type,r[d.arrows.from]={attr:r[d.arrows.from].attr,name:r[d.arrows.from].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}});else if("back"===u)d.arrows.to&&d.arrows.from?(c="",l=r[d.arrows.from].value.from.type,r[d.arrows.from]={attr:r[d.arrows.from].attr,name:r[d.arrows.from].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}}):d.arrows.to?(c="",l="arrow",d.arrows.from=d.arrows.to,r[d.arrows.from]={attr:r[d.arrows.from].attr,name:r[d.arrows.from].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}}):d.arrows.from&&(c="",l=r[d.arrows.from].value.from.type,r[d.arrows.to]={attr:r[d.arrows.from].attr,name:r[d.arrows.from].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}}),r[d.arrows.from]={attr:r[d.arrows.from].attr,name:r[d.arrows.from].name,value:{from:{enabled:!0,type:r[d.arrows.from].value.from.type}}};else if("none"===u){var f;r[f=d.arrows.to?d.arrows.to:d.arrows.from]={attr:r[f].attr,name:r[f].name,value:""}}else{if("forward"!==u)throw Um('Invalid dir type "'+u+'"');d.arrows.to&&d.arrows.from||d.arrows.to?(c=r[d.arrows.to].value.to.type,l="",r[d.arrows.to]={attr:r[d.arrows.to].attr,name:r[d.arrows.to].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}}):d.arrows.from&&(c="arrow",l="",d.arrows.to=d.arrows.from,r[d.arrows.to]={attr:r[d.arrows.to].attr,name:r[d.arrows.to].name,value:{to:{enabled:!0,type:c},from:{enabled:!0,type:l}}}),r[d.arrows.to]={attr:r[d.arrows.to].attr,name:r[d.arrows.to].name,value:{to:{enabled:!0,type:r[d.arrows.to].value.to.type}}}}uf(r).call(r,d.dir,1)}if(zf(s).call(s,"penwidth")){var p=[];for(e=r.length,t=0;t<e;t++)"width"!==r[t].name&&("penwidth"===r[t].name&&(r[t].name="width"),p.push(r[t]));r=p}for(e=r.length,t=0;t<e;t++)Fm(r[t].attr,r[t].name,r[t].value);return i}function Um(t){return new SyntaxError(t+', got "'+Ym(Mm,30)+'" (char '+Sm+")")}function Ym(t,e){return t.length<=e?t:t.substr(0,27)+"..."}function Xm(t,e,i){for(var o=e.split("."),n=o.pop(),r=t,s=0;s<o.length;s++){var a=o[s];a in r||(r[a]={}),r=r[a]}return r[n]=i,t}function Gm(t,e){var i={};for(var o in t)if(t.hasOwnProperty(o)){var n=e[o];hu(n)?Fu(n).call(n,(function(e){Xm(i,e,t[o])})):Xm(i,"string"==typeof n?n:o,t[o])}return i}function Km(t){var e,i=mm(t),o={nodes:[],edges:[],options:{}};i.nodes&&Fu(e=i.nodes).call(e,(function(t){var e={id:t.id,label:String(t.label||t.id)};zm(e,Gm(t.attr,bm)),e.image&&(e.shape="image"),o.nodes.push(e)}));if(i.edges){var n,r=function(t){var e={from:t.from,to:t.to};return zm(e,Gm(t.attr,wm)),null==e.arrows&&"->"===t.type&&(e.arrows="to"),e};Fu(n=i.edges).call(n,(function(t){var e,i,n,s,a,h,d;(e=t.from instanceof Object?t.from.nodes:{id:t.from},i=t.to instanceof Object?t.to.nodes:{id:t.to},t.from instanceof Object&&t.from.edges)&&Fu(n=t.from.edges).call(n,(function(t){var e=r(t);o.edges.push(e)}));(a=i,h=function(e,i){var n=Rm(o,e.id,i.id,t.type,t.attr),s=r(n);o.edges.push(s)},hu(s=e)?Fu(s).call(s,(function(t){hu(a)?Fu(a).call(a,(function(e){h(t,e)})):h(t,a)})):hu(a)?Fu(a).call(a,(function(t){h(s,t)})):h(s,a),t.to instanceof Object&&t.to.edges)&&Fu(d=t.to.edges).call(d,(function(t){var e=r(t);o.edges.push(e)}))}))}return i.attr&&(o.options=i.attr),o}var $m=Object.freeze({__proto__:null,parseDOT:mm,DOTToGraph:Km});function Zm(t,e){var i,o={edges:{inheritColor:!1},nodes:{fixed:!1,parseColor:!1}};null!=e&&(null!=e.fixed&&(o.nodes.fixed=e.fixed),null!=e.parseColor&&(o.nodes.parseColor=e.parseColor),null!=e.inheritColor&&(o.edges.inheritColor=e.inheritColor));var n=t.edges,r=vu(n).call(n,(function(t){var e={from:t.source,id:t.id,to:t.target};return null!=t.attributes&&(e.attributes=t.attributes),null!=t.label&&(e.label=t.label),null!=t.attributes&&null!=t.attributes.title&&(e.title=t.attributes.title),"Directed"===t.type&&(e.arrows="to"),t.color&&!1===o.edges.inheritColor&&(e.color=t.color),e}));return{nodes:vu(i=t.nodes).call(i,(function(t){var e={id:t.id,fixed:o.nodes.fixed&&null!=t.x&&null!=t.y};return null!=t.attributes&&(e.attributes=t.attributes),null!=t.label&&(e.label=t.label),null!=t.size&&(e.size=t.size),null!=t.attributes&&null!=t.attributes.title&&(e.title=t.attributes.title),null!=t.title&&(e.title=t.title),null!=t.x&&(e.x=t.x),null!=t.y&&(e.y=t.y),null!=t.color&&(!0===o.nodes.parseColor?e.color=t.color:e.color={background:t.color,border:t.color,highlight:{background:t.color,border:t.color},hover:{background:t.color,border:t.color}}),e})),edges:r}}var Qm=Object.freeze({__proto__:null,parseGephi:Zm}),Jm=Object.freeze({__proto__:null,en:{addDescription:"Click in an empty space to place a new node.",addEdge:"Add Edge",addNode:"Add Node",back:"Back",close:"Close",createEdgeError:"Cannot link edges to a cluster.",del:"Delete selected",deleteClusterError:"Clusters cannot be deleted.",edgeDescription:"Click on a node and drag the edge to another node to connect them.",edit:"Edit",editClusterError:"Clusters cannot be edited.",editEdge:"Edit Edge",editEdgeDescription:"Click on the control points and drag them to a node to connect to it.",editNode:"Edit Node"},de:{addDescription:"Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",addEdge:"Kante hinzufügen",addNode:"Knoten hinzufügen",back:"Zurück",close:"Schließen",createEdgeError:"Es ist nicht möglich, Kanten mit Clustern zu verbinden.",del:"Lösche Auswahl",deleteClusterError:"Cluster können nicht gelöscht werden.",edgeDescription:"Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",edit:"Editieren",editClusterError:"Cluster können nicht editiert werden.",editEdge:"Kante editieren",editEdgeDescription:"Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",editNode:"Knoten editieren"},es:{addDescription:"Haga clic en un lugar vacío para colocar un nuevo nodo.",addEdge:"Añadir arista",addNode:"Añadir nodo",back:"Atrás",close:"Cerrar",createEdgeError:"No se puede conectar una arista a un grupo.",del:"Eliminar selección",deleteClusterError:"No es posible eliminar grupos.",edgeDescription:"Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",edit:"Editar",editClusterError:"No es posible editar grupos.",editEdge:"Editar arista",editEdgeDescription:"Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",editNode:"Editar nodo"},it:{addDescription:"Clicca per aggiungere un nuovo nodo",addEdge:"Aggiungi un vertice",addNode:"Aggiungi un nodo",back:"Indietro",close:"Chiudere",createEdgeError:"Non si possono collegare vertici ad un cluster",del:"Cancella la selezione",deleteClusterError:"I cluster non possono essere cancellati",edgeDescription:"Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",edit:"Modifica",editClusterError:"I clusters non possono essere modificati.",editEdge:"Modifica il vertice",editEdgeDescription:"Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",editNode:"Modifica il nodo"},nl:{addDescription:"Klik op een leeg gebied om een nieuwe node te maken.",addEdge:"Link toevoegen",addNode:"Node toevoegen",back:"Terug",close:"Sluiten",createEdgeError:"Kan geen link maken naar een cluster.",del:"Selectie verwijderen",deleteClusterError:"Clusters kunnen niet worden verwijderd.",edgeDescription:"Klik op een node en sleep de link naar een andere node om ze te verbinden.",edit:"Wijzigen",editClusterError:"Clusters kunnen niet worden aangepast.",editEdge:"Link wijzigen",editEdgeDescription:"Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",editNode:"Node wijzigen"},pt:{addDescription:"Clique em um espaço em branco para adicionar um novo nó",addEdge:"Adicionar aresta",addNode:"Adicionar nó",back:"Voltar",close:"Fechar",createEdgeError:"Não foi possível linkar arestas a um cluster.",del:"Remover selecionado",deleteClusterError:"Clusters não puderam ser removidos.",edgeDescription:"Clique em um nó e arraste a aresta até outro nó para conectá-los",edit:"Editar",editClusterError:"Clusters não puderam ser editados.",editEdge:"Editar aresta",editEdgeDescription:"Clique nos pontos de controle e os arraste para um nó para conectá-los",editNode:"Editar nó"},ru:{addDescription:"Кликните в свободное место, чтобы добавить новый узел.",addEdge:"Добавить ребро",addNode:"Добавить узел",back:"Назад",close:"Закрывать",createEdgeError:"Невозможно соединить ребра в кластер.",del:"Удалить выбранное",deleteClusterError:"Кластеры не могут быть удалены",edgeDescription:"Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.",edit:"Редактировать",editClusterError:"Кластеры недоступны для редактирования.",editEdge:"Редактировать ребро",editEdgeDescription:"Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.",editNode:"Редактировать узел"},cn:{addDescription:"单击空白处放置新节点。",addEdge:"添加连接线",addNode:"添加节点",back:"返回",close:"關閉",createEdgeError:"无法将连接线连接到群集。",del:"删除选定",deleteClusterError:"无法删除群集。",edgeDescription:"单击某个节点并将该连接线拖动到另一个节点以连接它们。",edit:"编辑",editClusterError:"无法编辑群集。",editEdge:"编辑连接线",editEdgeDescription:"单击控制节点并将它们拖到节点上连接。",editNode:"编辑节点"},uk:{addDescription:"Kлікніть на вільне місце, щоб додати новий вузол.",addEdge:"Додати край",addNode:"Додати вузол",back:"Назад",close:"Закрити",createEdgeError:"Не можливо об'єднати краї в групу.",del:"Видалити обране",deleteClusterError:"Групи не можуть бути видалені.",edgeDescription:"Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.",edit:"Редагувати",editClusterError:"Групи недоступні для редагування.",editEdge:"Редагувати край",editEdgeDescription:"Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.",editNode:"Редагувати вузол"},fr:{addDescription:"Cliquez dans un endroit vide pour placer un nœud.",addEdge:"Ajouter un lien",addNode:"Ajouter un nœud",back:"Retour",close:"Fermer",createEdgeError:"Impossible de créer un lien vers un cluster.",del:"Effacer la sélection",deleteClusterError:"Les clusters ne peuvent pas être effacés.",edgeDescription:"Cliquez sur un nœud et glissez le lien vers un autre nœud pour les connecter.",edit:"Éditer",editClusterError:"Les clusters ne peuvent pas être édités.",editEdge:"Éditer le lien",editEdgeDescription:"Cliquez sur les points de contrôle et glissez-les pour connecter un nœud.",editNode:"Éditer le nœud"},cs:{addDescription:"Kluknutím do prázdného prostoru můžete přidat nový vrchol.",addEdge:"Přidat hranu",addNode:"Přidat vrchol",back:"Zpět",close:"Zavřít",createEdgeError:"Nelze připojit hranu ke shluku.",del:"Smazat výběr",deleteClusterError:"Nelze mazat shluky.",edgeDescription:"Přetažením z jednoho vrcholu do druhého můžete spojit tyto vrcholy novou hranou.",edit:"Upravit",editClusterError:"Nelze upravovat shluky.",editEdge:"Upravit hranu",editEdgeDescription:"Přetažením kontrolního vrcholu hrany ji můžete připojit k jinému vrcholu.",editNode:"Upravit vrchol"}});var tb=function(){function t(){Xl(this,t),this.NUM_ITERATIONS=4,this.image=new Image,this.canvas=document.createElement("canvas")}return $l(t,[{key:"init",value:function(){if(!this.initialized()){this.src=this.image.src;var t=this.image.width,e=this.image.height;this.width=t,this.height=e;var i=Math.floor(e/2),o=Math.floor(e/4),n=Math.floor(e/8),r=Math.floor(e/16),s=Math.floor(t/2),a=Math.floor(t/4),h=Math.floor(t/8),d=Math.floor(t/16);this.canvas.width=3*a,this.canvas.height=i,this.coordinates=[[0,0,s,i],[s,0,a,o],[s,o,h,n],[5*h,o,d,r]],this._fillMipMap()}}},{key:"initialized",value:function(){return void 0!==this.coordinates}},{key:"_fillMipMap",value:function(){var t=this.canvas.getContext("2d"),e=this.coordinates[0];t.drawImage(this.image,e[0],e[1],e[2],e[3]);for(var i=1;i<this.NUM_ITERATIONS;i++){var o=this.coordinates[i-1],n=this.coordinates[i];t.drawImage(this.canvas,o[0],o[1],o[2],o[3],n[0],n[1],n[2],n[3])}}},{key:"drawImageAtPosition",value:function(t,e,i,o,n,r){if(this.initialized())if(e>2){e*=.5;for(var s=0;e>2&&s<this.NUM_ITERATIONS;)e*=.5,s+=1;s>=this.NUM_ITERATIONS&&(s=this.NUM_ITERATIONS-1);var a=this.coordinates[s];t.drawImage(this.canvas,a[0],a[1],a[2],a[3],i,o,n,r)}else t.drawImage(this.image,i,o,n,r)}}]),t}(),eb=function(){function t(e){Xl(this,t),this.images={},this.imageBroken={},this.callback=e}return $l(t,[{key:"_tryloadBrokenUrl",value:function(t,e,i){void 0!==t&&void 0!==i&&(void 0!==e?(i.image.onerror=function(){console.error("Could not load brokenImage:",e)},i.image.src=e):console.warn("No broken url image defined"))}},{key:"_redrawWithImage",value:function(t){this.callback&&this.callback(t)}},{key:"load",value:function(t,e){var i=this,o=this.images[t];if(o)return o;var n=new tb;return this.images[t]=n,n.image.onload=function(){i._fixImageCoordinates(n.image),n.init(),i._redrawWithImage(n)},n.image.onerror=function(){console.error("Could not load image:",t),i._tryloadBrokenUrl(t,e,n)},n.image.src=t,n}},{key:"_fixImageCoordinates",value:function(t){0===t.width&&(document.body.appendChild(t),t.width=t.offsetWidth,t.height=t.offsetHeight,document.body.removeChild(t))}}]),t}(),ib={exports:{}},ob=r((function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}})),nb=r,rb=X,sb=z,ab=ob,hb=Object.isExtensible,db=nb((function(){hb(1)}))||ab?function(t){return!!rb(t)&&((!ab||"ArrayBuffer"!=sb(t))&&(!hb||hb(t)))}:hb,lb=!r((function(){return Object.isExtensible(Object.preventExtensions({}))})),cb=xi,ub=y,fb=Li,pb=X,vb=Vt,gb=Ue.f,yb=sh,mb=dh,bb=db,wb=lb,kb=!1,_b=Gt("meta"),xb=0,Eb=function(t){gb(t,_b,{value:{objectID:"O"+xb++,weakData:{}}})},Ob=ib.exports={enable:function(){Ob.enable=function(){},kb=!0;var t=yb.f,e=ub([].splice),i={};i[_b]=1,t(i).length&&(yb.f=function(i){for(var o=t(i),n=0,r=o.length;n<r;n++)if(o[n]===_b){e(o,n,1);break}return o},cb({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:mb.f}))},fastKey:function(t,e){if(!pb(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!vb(t,_b)){if(!bb(t))return"F";if(!e)return"E";Eb(t)}return t[_b].objectID},getWeakData:function(t,e){if(!vb(t,_b)){if(!bb(t))return!0;if(!e)return!1;Eb(t)}return t[_b].weakData},onFreeze:function(t){return wb&&kb&&bb(t)&&!vb(t,_b)&&Eb(t),t}};fb[_b]=!0;var Cb=qe,Sb=x,Tb=Ze,Mb=wt,Pb=qs,Db=zi,Bb=tt,Ib=wa,zb=fa,Fb=Rs,Nb=n.TypeError,Ab=function(t,e){this.stopped=t,this.result=e},Rb=Ab.prototype,jb=function(t,e,i){var o,n,r,s,a,h,d,l=i&&i.that,c=!(!i||!i.AS_ENTRIES),u=!(!i||!i.IS_ITERATOR),f=!(!i||!i.INTERRUPTED),p=Cb(e,l),v=function(t){return o&&Fb(o,"normal",t),new Ab(!0,t)},g=function(t){return c?(Tb(t),f?p(t[0],t[1],v):p(t[0],t[1])):f?p(t,v):p(t)};if(u)o=t;else{if(!(n=zb(t)))throw Nb(Mb(t)+" is not iterable");if(Pb(n)){for(r=0,s=Db(t);s>r;r++)if((a=g(t[r]))&&Bb(Rb,a))return a;return new Ab(!1)}o=Ib(t,n)}for(h=o.next;!(d=Sb(h,o)).done;){try{a=g(d.value)}catch(t){Fb(o,"throw",t)}if("object"==typeof a&&a&&Bb(Rb,a))return a}return new Ab(!1)},Lb=tt,Hb=n.TypeError,Wb=function(t,e){if(Lb(e,t))return t;throw Hb("Incorrect invocation")},Vb=xi,qb=n,Ub=ib.exports,Yb=r,Xb=ci,Gb=jb,Kb=Wb,$b=m,Zb=X,Qb=Zr,Jb=Ue.f,tw=Vh.forEach,ew=w,iw=Un.set,ow=Un.getterFor,nw=function(t,e,i){var o,n=-1!==t.indexOf("Map"),r=-1!==t.indexOf("Weak"),s=n?"set":"add",a=qb[t],h=a&&a.prototype,d={};if(ew&&$b(a)&&(r||h.forEach&&!Yb((function(){(new a).entries().next()})))){var l=(o=e((function(e,i){iw(Kb(e,l),{type:t,collection:new a}),null!=i&&Gb(i,e[s],{that:e,AS_ENTRIES:n})}))).prototype,c=ow(t);tw(["add","clear","delete","forEach","get","has","set","keys","values","entries"],(function(t){var e="add"==t||"set"==t;!(t in h)||r&&"clear"==t||Xb(l,t,(function(i,o){var n=c(this).collection;if(!e&&r&&!Zb(i))return"get"==t&&void 0;var s=n[t](0===i?0:i,o);return e?this:s}))})),r||Jb(l,"size",{configurable:!0,get:function(){return c(this).collection.size}})}else o=i.getConstructor(e,t,n,s),Ub.enable();return Qb(o,t,!1,!0),d[t]=o,Vb({global:!0,forced:!0},d),r||i.setStrong(o,t,n),o},rw=Ir,sw=function(t,e,i){for(var o in e)i&&i.unsafe&&t[o]?t[o]=e[o]:rw(t,o,e[o],i);return t},aw=J,hw=Ue,dw=w,lw=re("species"),cw=Ue.f,uw=kr,fw=sw,pw=qe,vw=Wb,gw=jb,yw=Ss,mw=function(t){var e=aw(t),i=hw.f;dw&&e&&!e[lw]&&i(e,lw,{configurable:!0,get:function(){return this}})},bw=w,ww=ib.exports.fastKey,kw=Un.set,_w=Un.getterFor,xw={getConstructor:function(t,e,i,o){var n=t((function(t,n){vw(t,r),kw(t,{type:e,index:uw(null),first:void 0,last:void 0,size:0}),bw||(t.size=0),null!=n&&gw(n,t[o],{that:t,AS_ENTRIES:i})})),r=n.prototype,s=_w(e),a=function(t,e,i){var o,n,r=s(t),a=h(t,e);return a?a.value=i:(r.last=a={index:n=ww(e,!0),key:e,value:i,previous:o=r.last,next:void 0,removed:!1},r.first||(r.first=a),o&&(o.next=a),bw?r.size++:t.size++,"F"!==n&&(r.index[n]=a)),t},h=function(t,e){var i,o=s(t),n=ww(e);if("F"!==n)return o.index[n];for(i=o.first;i;i=i.next)if(i.key==e)return i};return fw(r,{clear:function(){for(var t=s(this),e=t.index,i=t.first;i;)i.removed=!0,i.previous&&(i.previous=i.previous.next=void 0),delete e[i.index],i=i.next;t.first=t.last=void 0,bw?t.size=0:this.size=0},delete:function(t){var e=this,i=s(e),o=h(e,t);if(o){var n=o.next,r=o.previous;delete i.index[o.index],o.removed=!0,r&&(r.next=n),n&&(n.previous=r),i.first==o&&(i.first=n),i.last==o&&(i.last=r),bw?i.size--:e.size--}return!!o},forEach:function(t){for(var e,i=s(this),o=pw(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:i.first;)for(o(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!h(this,t)}}),fw(r,i?{get:function(t){var e=h(this,t);return e&&e.value},set:function(t,e){return a(this,0===t?0:t,e)}}:{add:function(t){return a(this,t=0===t?0:t,t)}}),bw&&cw(r,"size",{get:function(){return s(this).size}}),n},setStrong:function(t,e,i){var o=e+" Iterator",n=_w(e),r=_w(o);yw(t,e,(function(t,e){kw(this,{type:o,target:t,state:n(t),kind:e,last:void 0})}),(function(){for(var t=r(this),e=t.kind,i=t.last;i&&i.removed;)i=i.previous;return t.target&&(t.last=i=i?i.next:t.state.first)?"keys"==e?{value:i.key,done:!1}:"values"==e?{value:i.value,done:!1}:{value:[i.key,i.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),i?"entries":"values",!i,!0),mw(e)}};nw("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),xw);var Ew=G.Map,Ow=function(){function t(){Xl(this,t),this.clear(),this._defaultIndex=0,this._groupIndex=0,this._defaultGroups=[{border:"#2B7CE9",background:"#97C2FC",highlight:{border:"#2B7CE9",background:"#D2E5FF"},hover:{border:"#2B7CE9",background:"#D2E5FF"}},{border:"#FFA500",background:"#FFFF00",highlight:{border:"#FFA500",background:"#FFFFA3"},hover:{border:"#FFA500",background:"#FFFFA3"}},{border:"#FA0A10",background:"#FB7E81",highlight:{border:"#FA0A10",background:"#FFAFB1"},hover:{border:"#FA0A10",background:"#FFAFB1"}},{border:"#41A906",background:"#7BE141",highlight:{border:"#41A906",background:"#A1EC76"},hover:{border:"#41A906",background:"#A1EC76"}},{border:"#E129F0",background:"#EB7DF4",highlight:{border:"#E129F0",background:"#F0B3F5"},hover:{border:"#E129F0",background:"#F0B3F5"}},{border:"#7C29F0",background:"#AD85E4",highlight:{border:"#7C29F0",background:"#D3BDF0"},hover:{border:"#7C29F0",background:"#D3BDF0"}},{border:"#C37F00",background:"#FFA807",highlight:{border:"#C37F00",background:"#FFCA66"},hover:{border:"#C37F00",background:"#FFCA66"}},{border:"#4220FB",background:"#6E6EFD",highlight:{border:"#4220FB",background:"#9B9BFD"},hover:{border:"#4220FB",background:"#9B9BFD"}},{border:"#FD5A77",background:"#FFC0CB",highlight:{border:"#FD5A77",background:"#FFD1D9"},hover:{border:"#FD5A77",background:"#FFD1D9"}},{border:"#4AD63A",background:"#C2FABC",highlight:{border:"#4AD63A",background:"#E6FFE3"},hover:{border:"#4AD63A",background:"#E6FFE3"}},{border:"#990000",background:"#EE0000",highlight:{border:"#BB0000",background:"#FF3333"},hover:{border:"#BB0000",background:"#FF3333"}},{border:"#FF6000",background:"#FF6000",highlight:{border:"#FF6000",background:"#FF6000"},hover:{border:"#FF6000",background:"#FF6000"}},{border:"#97C2FC",background:"#2B7CE9",highlight:{border:"#D2E5FF",background:"#2B7CE9"},hover:{border:"#D2E5FF",background:"#2B7CE9"}},{border:"#399605",background:"#255C03",highlight:{border:"#399605",background:"#255C03"},hover:{border:"#399605",background:"#255C03"}},{border:"#B70054",background:"#FF007E",highlight:{border:"#B70054",background:"#FF007E"},hover:{border:"#B70054",background:"#FF007E"}},{border:"#AD85E4",background:"#7C29F0",highlight:{border:"#D3BDF0",background:"#7C29F0"},hover:{border:"#D3BDF0",background:"#7C29F0"}},{border:"#4557FA",background:"#000EA1",highlight:{border:"#6E6EFD",background:"#000EA1"},hover:{border:"#6E6EFD",background:"#000EA1"}},{border:"#FFC0CB",background:"#FD5A77",highlight:{border:"#FFD1D9",background:"#FD5A77"},hover:{border:"#FFD1D9",background:"#FD5A77"}},{border:"#C2FABC",background:"#74D66A",highlight:{border:"#E6FFE3",background:"#74D66A"},hover:{border:"#E6FFE3",background:"#74D66A"}},{border:"#EE0000",background:"#990000",highlight:{border:"#FF3333",background:"#BB0000"},hover:{border:"#FF3333",background:"#BB0000"}}],this.options={},this.defaultOptions={useDefaultGroups:!0},fo(this.options,this.defaultOptions)}return $l(t,[{key:"setOptions",value:function(t){var e=["useDefaultGroups"];if(void 0!==t)for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&-1===zp(e).call(e,i)){var o=t[i];this.add(i,o)}}},{key:"clear",value:function(){this._groups=new Ew,this._groupNames=[]}},{key:"get",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=this._groups.get(t);if(void 0===i&&e)if(!1===this.options.useDefaultGroups&&this._groupNames.length>0){var o=this._groupIndex%this._groupNames.length;++this._groupIndex,(i={}).color=this._groups.get(this._groupNames[o]),this._groups.set(t,i)}else{var n=this._defaultIndex%this._defaultGroups.length;this._defaultIndex++,(i={}).color=this._defaultGroups[n],this._groups.set(t,i)}return i}},{key:"add",value:function(t,e){return this._groups.has(t)||this._groupNames.push(t),this._groups.set(t,e),e}}]),t}();xi({target:"Number",stat:!0},{isNaN:function(t){return t!=t}});var Cw=G.Number.isNaN,Sw=n.isFinite,Tw=Number.isFinite||function(t){return"number"==typeof t&&Sw(t)};xi({target:"Number",stat:!0},{isFinite:Tw});var Mw=G.Number.isFinite,Pw=Vh.some;xi({target:"Array",proto:!0,forced:!Ou("some")},{some:function(t){return Pw(this,t,arguments.length>1?arguments[1]:void 0)}});var Dw=Mo("Array").some,Bw=tt,Iw=Dw,zw=Array.prototype,Fw=function(t){var e=t.some;return t===zw||Bw(zw,t)&&e===zw.some?Iw:e},Nw=Fw,Aw=n,Rw=r,jw=on,Lw=dp.trim,Hw=y("".charAt),Ww=Aw.parseFloat,Vw=Aw.Symbol,qw=Vw&&Vw.iterator,Uw=1/Ww("\t\n\v\f\r                　\u2028\u2029\ufeff-0")!=-1/0||qw&&!Rw((function(){Ww(Object(qw))}))?function(t){var e=Lw(jw(t)),i=Ww(e);return 0===i&&"-"==Hw(e,0)?-0:i}:Ww;xi({global:!0,forced:parseFloat!=Uw},{parseFloat:Uw});var Yw=G.parseFloat,Xw=xi,Gw=r,Kw=dh.f;Xw({target:"Object",stat:!0,forced:Gw((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:Kw});var $w=G.Object,Zw=function(t){return $w.getOwnPropertyNames(t)},Qw=Zw;function Jw(t,e){var i=["node","edge","label"],o=!0,n=im(e,"chosen");if("boolean"==typeof n)o=n;else if("object"===Qc(n)){if(-1===zp(i).call(i,t))throw new Error("choosify: subOption '"+t+"' should be one of '"+i.join("', '")+"'");var r=im(e,["chosen",t]);"boolean"!=typeof r&&"function"!=typeof r||(o=r)}return o}function tk(t,e,i){if(t.width<=0||t.height<=0)return!1;if(void 0!==i){var o={x:e.x-i.x,y:e.y-i.y};if(0!==i.angle){var n=-i.angle;e={x:Math.cos(n)*o.x-Math.sin(n)*o.y,y:Math.sin(n)*o.x+Math.cos(n)*o.y}}else e=o}var r=t.x+t.width,s=t.y+t.width;return t.left<e.x&&r>e.x&&t.top<e.y&&s>e.y}function ek(t){return"string"==typeof t&&""!==t}function ik(t,e,i,o){var n=o.x,r=o.y;if("function"==typeof o.distanceToBorder){var s=o.distanceToBorder(t,e),a=Math.sin(e)*s,h=Math.cos(e)*s;h===s?(n+=s,r=o.y):a===s?(n=o.x,r-=s):(n+=h,r-=a)}else o.shape.width>o.shape.height?(n=o.x+.5*o.shape.width,r=o.y-i):(n=o.x+i,r=o.y-.5*o.shape.height);return{x:n,y:r}}var ok=Mo("Array").values,nk=Jo,rk=Vt,sk=tt,ak=ok,hk=Array.prototype,dk={DOMTokenList:!0,NodeList:!0},lk=function(t){var e=t.values;return t===hk||sk(hk,t)&&e===hk.values||rk(dk,nk(t))?ak:e},ck=function(){function t(e){Xl(this,t),this.measureText=e,this.current=0,this.width=0,this.height=0,this.lines=[]}return $l(t,[{key:"_add",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"normal";void 0===this.lines[t]&&(this.lines[t]={width:0,height:0,blocks:[]});var o=e;void 0!==e&&""!==e||(o=" ");var n=this.measureText(o,i),r=fo({},lk(n));r.text=e,r.width=n.width,r.mod=i,void 0!==e&&""!==e||(r.width=0),this.lines[t].blocks.push(r),this.lines[t].width+=r.width}},{key:"curWidth",value:function(){var t=this.lines[this.current];return void 0===t?0:t.width}},{key:"append",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"normal";this._add(this.current,t,e)}},{key:"newLine",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"normal";this._add(this.current,t,e),this.current++}},{key:"determineLineHeights",value:function(){for(var t=0;t<this.lines.length;t++){var e=this.lines[t],i=0;if(void 0!==e.blocks)for(var o=0;o<e.blocks.length;o++){var n=e.blocks[o];i<n.height&&(i=n.height)}e.height=i}}},{key:"determineLabelSize",value:function(){for(var t=0,e=0,i=0;i<this.lines.length;i++){var o=this.lines[i];o.width>t&&(t=o.width),e+=o.height}this.width=t,this.height=e}},{key:"removeEmptyBlocks",value:function(){for(var t=[],e=0;e<this.lines.length;e++){var i=this.lines[e];if(0!==i.blocks.length&&(e!==this.lines.length-1||0!==i.width)){var o={};fo(o,i),o.blocks=[];for(var n=void 0,r=[],s=0;s<i.blocks.length;s++){var a=i.blocks[s];0!==a.width?r.push(a):void 0===n&&(n=a)}0===r.length&&void 0!==n&&r.push(n),o.blocks=r,t.push(o)}}return t}},{key:"finalize",value:function(){this.determineLineHeights(),this.determineLabelSize();var t=this.removeEmptyBlocks();return{width:this.width,height:this.height,lines:t}}}]),t}(),uk={"<b>":/<b>/,"<i>":/<i>/,"<code>":/<code>/,"</b>":/<\/b>/,"</i>":/<\/i>/,"</code>":/<\/code>/,"*":/\*/,_:/_/,"`":/`/,afterBold:/[^*]/,afterItal:/[^_]/,afterMono:/[^`]/},fk=function(){function t(e){Xl(this,t),this.text=e,this.bold=!1,this.ital=!1,this.mono=!1,this.spacing=!1,this.position=0,this.buffer="",this.modStack=[],this.blocks=[]}return $l(t,[{key:"mod",value:function(){return 0===this.modStack.length?"normal":this.modStack[0]}},{key:"modName",value:function(){return 0===this.modStack.length?"normal":"mono"===this.modStack[0]?"mono":this.bold&&this.ital?"boldital":this.bold?"bold":this.ital?"ital":void 0}},{key:"emitBlock",value:function(){this.spacing&&(this.add(" "),this.spacing=!1),this.buffer.length>0&&(this.blocks.push({text:this.buffer,mod:this.modName()}),this.buffer="")}},{key:"add",value:function(t){" "===t&&(this.spacing=!0),this.spacing&&(this.buffer+=" ",this.spacing=!1)," "!=t&&(this.buffer+=t)}},{key:"parseWS",value:function(t){return!!/[ \t]/.test(t)&&(this.mono?this.add(t):this.spacing=!0,!0)}},{key:"setTag",value:function(t){this.emitBlock(),this[t]=!0,this.modStack.unshift(t)}},{key:"unsetTag",value:function(t){this.emitBlock(),this[t]=!1,this.modStack.shift()}},{key:"parseStartTag",value:function(t,e){return!(this.mono||this[t]||!this.match(e))&&(this.setTag(t),!0)}},{key:"match",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=this.prepareRegExp(t),o=$c(i,2),n=o[0],r=o[1],s=n.test(this.text.substr(this.position,r));return s&&e&&(this.position+=r-1),s}},{key:"parseEndTag",value:function(t,e,i){var o=this.mod()===t;return!(!(o="mono"===t?o&&this.mono:o&&!this.mono)||!this.match(e))&&(void 0!==i?(this.position===this.text.length-1||this.match(i,!1))&&this.unsetTag(t):this.unsetTag(t),!0)}},{key:"replace",value:function(t,e){return!!this.match(t)&&(this.add(e),this.position+=length-1,!0)}},{key:"prepareRegExp",value:function(t){var e,i;if(t instanceof RegExp)i=t,e=1;else{var o=uk[t];i=void 0!==o?o:new RegExp(t),e=t.length}return[i,e]}}]),t}(),pk=function(){function t(e,i,o,n){var r=this;Xl(this,t),this.ctx=e,this.parent=i,this.selected=o,this.hover=n;this.lines=new ck((function(t,i){if(void 0===t)return 0;var s=r.parent.getFormattingValues(e,o,n,i),a=0;""!==t&&(a=r.ctx.measureText(t).width);return{width:a,values:s}}))}return $l(t,[{key:"process",value:function(t){if(!ek(t))return this.lines.finalize();var e=this.parent.fontOptions;t=(t=t.replace(/\r\n/g,"\n")).replace(/\r/g,"\n");var i=String(t).split("\n"),o=i.length;if(e.multi)for(var n=0;n<o;n++){var r=this.splitBlocks(i[n],e.multi);if(void 0!==r)if(0!==r.length){if(e.maxWdt>0)for(var s=0;s<r.length;s++){var a=r[s].mod,h=r[s].text;this.splitStringIntoLines(h,a,!0)}else for(var d=0;d<r.length;d++){var l=r[d].mod,c=r[d].text;this.lines.append(c,l)}this.lines.newLine()}else this.lines.newLine("")}else if(e.maxWdt>0)for(var u=0;u<o;u++)this.splitStringIntoLines(i[u]);else for(var f=0;f<o;f++)this.lines.newLine(i[f]);return this.lines.finalize()}},{key:"decodeMarkupSystem",value:function(t){var e="none";return"markdown"===t||"md"===t?e="markdown":!0!==t&&"html"!==t||(e="html"),e}},{key:"splitHtmlBlocks",value:function(t){for(var e=new fk(t),i=function(t){return!!/&/.test(t)&&(e.replace(e.text,"&lt;","<")||e.replace(e.text,"&amp;","&")||e.add("&"),!0)};e.position<e.text.length;){var o=e.text.charAt(e.position);e.parseWS(o)||/</.test(o)&&(e.parseStartTag("bold","<b>")||e.parseStartTag("ital","<i>")||e.parseStartTag("mono","<code>")||e.parseEndTag("bold","</b>")||e.parseEndTag("ital","</i>")||e.parseEndTag("mono","</code>"))||i(o)||e.add(o),e.position++}return e.emitBlock(),e.blocks}},{key:"splitMarkdownBlocks",value:function(t){for(var e=this,i=new fk(t),o=!0,n=function(t){return!!/\\/.test(t)&&(i.position<e.text.length+1&&(i.position++,t=e.text.charAt(i.position),/ \t/.test(t)?i.spacing=!0:(i.add(t),o=!1)),!0)};i.position<i.text.length;){var r=i.text.charAt(i.position);i.parseWS(r)||n(r)||(o||i.spacing)&&(i.parseStartTag("bold","*")||i.parseStartTag("ital","_")||i.parseStartTag("mono","`"))||i.parseEndTag("bold","*","afterBold")||i.parseEndTag("ital","_","afterItal")||i.parseEndTag("mono","`","afterMono")||(i.add(r),o=!1),i.position++}return i.emitBlock(),i.blocks}},{key:"splitBlocks",value:function(t,e){var i=this.decodeMarkupSystem(e);return"none"===i?[{text:t,mod:"normal"}]:"markdown"===i?this.splitMarkdownBlocks(t):"html"===i?this.splitHtmlBlocks(t):void 0}},{key:"overMaxWidth",value:function(t){var e=this.ctx.measureText(t).width;return this.lines.curWidth()+e>this.parent.fontOptions.maxWdt}},{key:"getLongestFit",value:function(t){for(var e="",i=0;i<t.length;){var o=e+(""===e?"":" ")+t[i];if(this.overMaxWidth(o))break;e=o,i++}return i}},{key:"getLongestFitWord",value:function(t){for(var e=0;e<t.length&&!this.overMaxWidth(au(t).call(t,0,e));)e++;return e}},{key:"splitStringIntoLines",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"normal",i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.parent.getFormattingValues(this.ctx,this.selected,this.hover,e);for(var o=(t=(t=t.replace(/^( +)/g,"$1\r")).replace(/([^\r][^ ]*)( +)/g,"$1\r$2\r")).split("\r");o.length>0;){var n=this.getLongestFit(o);if(0===n){var r=o[0],s=this.getLongestFitWord(r);this.lines.newLine(au(r).call(r,0,s),e),o[0]=au(r).call(r,s)}else{var a=n;" "===o[n-1]?n--:" "===o[a]&&a++;var h=au(o).call(o,0,n).join("");n==o.length&&i?this.lines.append(h,e):this.lines.newLine(h,e),o=au(o).call(o,a)}}}}]),t}(),vk=["bold","ital","boldital","mono"],gk=function(){function t(e,i){var o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];Xl(this,t),this.body=e,this.pointToSelf=!1,this.baseSize=void 0,this.fontOptions={},this.setOptions(i),this.size={top:0,left:0,width:0,height:0,yLine:0},this.isEdgeLabel=o}return $l(t,[{key:"setOptions",value:function(t){if(this.elementOptions=t,this.initFontOptions(t.font),ek(t.label)?this.labelDirty=!0:t.label=void 0,void 0!==t.font&&null!==t.font)if("string"==typeof t.font)this.baseSize=this.fontOptions.size;else if("object"===Qc(t.font)){var e=t.font.size;void 0!==e&&(this.baseSize=e)}}},{key:"initFontOptions",value:function(e){var i=this;Wy(vk,(function(t){i.fontOptions[t]={}})),t.parseFontString(this.fontOptions,e)?this.fontOptions.vadjust=0:Wy(e,(function(t,e){null!=t&&"object"!==Qc(t)&&(i.fontOptions[e]=t)}))}},{key:"constrain",value:function(t){var e={constrainWidth:!1,maxWdt:-1,minWdt:-1,constrainHeight:!1,minHgt:-1,valign:"middle"},i=im(t,"widthConstraint");if("number"==typeof i)e.maxWdt=Number(i),e.minWdt=Number(i);else if("object"===Qc(i)){var o=im(t,["widthConstraint","maximum"]);"number"==typeof o&&(e.maxWdt=Number(o));var n=im(t,["widthConstraint","minimum"]);"number"==typeof n&&(e.minWdt=Number(n))}var r=im(t,"heightConstraint");if("number"==typeof r)e.minHgt=Number(r);else if("object"===Qc(r)){var s=im(t,["heightConstraint","minimum"]);"number"==typeof s&&(e.minHgt=Number(s));var a=im(t,["heightConstraint","valign"]);"string"==typeof a&&("top"!==a&&"bottom"!==a||(e.valign=a))}return e}},{key:"update",value:function(t,e){this.setOptions(t,!0),this.propagateFonts(e),Ry(this.fontOptions,this.constrain(e)),this.fontOptions.chooser=Jw("label",e)}},{key:"adjustSizes",value:function(t){var e=t?t.right+t.left:0;this.fontOptions.constrainWidth&&(this.fontOptions.maxWdt-=e,this.fontOptions.minWdt-=e);var i=t?t.top+t.bottom:0;this.fontOptions.constrainHeight&&(this.fontOptions.minHgt-=i)}},{key:"addFontOptionsToPile",value:function(t,e){for(var i=0;i<e.length;++i)this.addFontToPile(t,e[i])}},{key:"addFontToPile",value:function(t,e){if(void 0!==e&&void 0!==e.font&&null!==e.font){var i=e.font;t.push(i)}}},{key:"getBasicOptions",value:function(e){for(var i={},o=0;o<e.length;++o){var n=e[o],r={};t.parseFontString(r,n)&&(n=r),Wy(n,(function(t,e){void 0!==t&&(Object.prototype.hasOwnProperty.call(i,e)||(-1!==zp(vk).call(vk,e)?i[e]={}:i[e]=t))}))}return i}},{key:"getFontOption",value:function(e,i,o){for(var n,r=0;r<e.length;++r){var s=e[r];if(Object.prototype.hasOwnProperty.call(s,i)){if(null==(n=s[i]))continue;var a={};if(t.parseFontString(a,n)&&(n=a),Object.prototype.hasOwnProperty.call(n,o))return n[o]}}if(Object.prototype.hasOwnProperty.call(this.fontOptions,o))return this.fontOptions[o];throw new Error("Did not find value for multi-font for property: '"+o+"'")}},{key:"getFontOptions",value:function(t,e){for(var i={},o=["color","size","face","mod","vadjust"],n=0;n<o.length;++n){var r=o[n];i[r]=this.getFontOption(t,e,r)}return i}},{key:"propagateFonts",value:function(t){var e=this,i=[];this.addFontOptionsToPile(i,t),this.fontOptions=this.getBasicOptions(i);for(var o=function(t){var o=vk[t],n=e.fontOptions[o];Wy(e.getFontOptions(i,o),(function(t,e){n[e]=t})),n.size=Number(n.size),n.vadjust=Number(n.vadjust)},n=0;n<vk.length;++n)o(n)}},{key:"draw",value:function(t,e,i,o,n){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"middle";if(void 0!==this.elementOptions.label){var s=this.fontOptions.size*this.body.view.scale;this.elementOptions.label&&s<this.elementOptions.scaling.label.drawThreshold-1||(s>=this.elementOptions.scaling.label.maxVisible&&(s=Number(this.elementOptions.scaling.label.maxVisible)/this.body.view.scale),this.calculateLabelSize(t,o,n,e,i,r),this._drawBackground(t),this._drawText(t,e,this.size.yLine,r,s))}}},{key:"_drawBackground",value:function(t){if(void 0!==this.fontOptions.background&&"none"!==this.fontOptions.background){t.fillStyle=this.fontOptions.background;var e=this.getSize();t.fillRect(e.left,e.top,e.width,e.height)}}},{key:"_drawText",value:function(t,e,i){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"middle",n=arguments.length>4?arguments[4]:void 0,r=this._setAlignment(t,e,i,o),s=$c(r,2);e=s[0],i=s[1],t.textAlign="left",e-=this.size.width/2,this.fontOptions.valign&&this.size.height>this.size.labelHeight&&("top"===this.fontOptions.valign&&(i-=(this.size.height-this.size.labelHeight)/2),"bottom"===this.fontOptions.valign&&(i+=(this.size.height-this.size.labelHeight)/2));for(var a=0;a<this.lineCount;a++){var h=this.lines[a];if(h&&h.blocks){var d=0;this.isEdgeLabel||"center"===this.fontOptions.align?d+=(this.size.width-h.width)/2:"right"===this.fontOptions.align&&(d+=this.size.width-h.width);for(var l=0;l<h.blocks.length;l++){var c=h.blocks[l];t.font=c.font;var u=this._getColor(c.color,n,c.strokeColor),f=$c(u,2),p=f[0],v=f[1];c.strokeWidth>0&&(t.lineWidth=c.strokeWidth,t.strokeStyle=v,t.lineJoin="round"),t.fillStyle=p,c.strokeWidth>0&&t.strokeText(c.text,e+d,i+c.vadjust),t.fillText(c.text,e+d,i+c.vadjust),d+=c.width}i+=h.height}}}},{key:"_setAlignment",value:function(t,e,i,o){if(this.isEdgeLabel&&"horizontal"!==this.fontOptions.align&&!1===this.pointToSelf){e=0,i=0;"top"===this.fontOptions.align?(t.textBaseline="alphabetic",i-=4):"bottom"===this.fontOptions.align?(t.textBaseline="hanging",i+=4):t.textBaseline="middle"}else t.textBaseline=o;return[e,i]}},{key:"_getColor",value:function(t,e,i){var o=t||"#000000",n=i||"#ffffff";if(e<=this.elementOptions.scaling.label.drawThreshold){var r=Math.max(0,Math.min(1,1-(this.elementOptions.scaling.label.drawThreshold-e)));o=qy(o,r),n=qy(n,r)}return[o,n]}},{key:"getTextSize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return this._processLabel(t,e,i),{width:this.size.width,height:this.size.height,lineCount:this.lineCount}}},{key:"getSize",value:function(){var t=this.size.left,e=this.size.top-1;if(this.isEdgeLabel){var i=.5*-this.size.width;switch(this.fontOptions.align){case"middle":t=i,e=.5*-this.size.height;break;case"top":t=i,e=-(this.size.height+2);break;case"bottom":t=i,e=2}}return{left:t,top:e,width:this.size.width,height:this.size.height}}},{key:"calculateLabelSize",value:function(t,e,i){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"middle";this._processLabel(t,e,i),this.size.left=o-.5*this.size.width,this.size.top=n-.5*this.size.height,this.size.yLine=n+.5*(1-this.lineCount)*this.fontOptions.size,"hanging"===r&&(this.size.top+=.5*this.fontOptions.size,this.size.top+=4,this.size.yLine+=4)}},{key:"getFormattingValues",value:function(t,e,i,o){var n=function(t,e,i){return"normal"===e?"mod"===i?"":t[i]:void 0!==t[e][i]?t[e][i]:t[i]},r={color:n(this.fontOptions,o,"color"),size:n(this.fontOptions,o,"size"),face:n(this.fontOptions,o,"face"),mod:n(this.fontOptions,o,"mod"),vadjust:n(this.fontOptions,o,"vadjust"),strokeWidth:this.fontOptions.strokeWidth,strokeColor:this.fontOptions.strokeColor};(e||i)&&("normal"===o&&!0===this.fontOptions.chooser&&this.elementOptions.labelHighlightBold?r.mod="bold":"function"==typeof this.fontOptions.chooser&&this.fontOptions.chooser(r,this.elementOptions.id,e,i));var s="";return void 0!==r.mod&&""!==r.mod&&(s+=r.mod+" "),s+=r.size+"px "+r.face,t.font=s.replace(/"/g,""),r.font=t.font,r.height=r.size,r}},{key:"differentState",value:function(t,e){return t!==this.selectedState||e!==this.hoverState}},{key:"_processLabelText",value:function(t,e,i,o){return new pk(t,this,e,i).process(o)}},{key:"_processLabel",value:function(t,e,i){if(!1!==this.labelDirty||this.differentState(e,i)){var o=this._processLabelText(t,e,i,this.elementOptions.label);this.fontOptions.minWdt>0&&o.width<this.fontOptions.minWdt&&(o.width=this.fontOptions.minWdt),this.size.labelHeight=o.height,this.fontOptions.minHgt>0&&o.height<this.fontOptions.minHgt&&(o.height=this.fontOptions.minHgt),this.lines=o.lines,this.lineCount=o.lines.length,this.size.width=o.width,this.size.height=o.height,this.selectedState=e,this.hoverState=i,this.labelDirty=!1}}},{key:"visible",value:function(){return 0!==this.size.width&&0!==this.size.height&&void 0!==this.elementOptions.label&&!(this.fontOptions.size*this.body.view.scale<this.elementOptions.scaling.label.drawThreshold-1)}}],[{key:"parseFontString",value:function(t,e){if(!e||"string"!=typeof e)return!1;var i=e.split(" ");return t.size=+i[0].replace("px",""),t.face=i[1],t.color=i[2],!0}}]),t}(),yk=na,mk=wt,bk=n.TypeError,wk=xi,kk=c,_k=Co,xk=function(t){if(yk(t))return t;throw bk(mk(t)+" is not a constructor")},Ek=Ze,Ok=X,Ck=kr,Sk=r,Tk=J("Reflect","construct"),Mk=Object.prototype,Pk=[].push,Dk=Sk((function(){function t(){}return!(Tk((function(){}),[],t)instanceof t)})),Bk=!Sk((function(){Tk((function(){}))})),Ik=Dk||Bk;wk({target:"Reflect",stat:!0,forced:Ik,sham:Ik},{construct:function(t,e){xk(t),Ek(e);var i=arguments.length<3?t:xk(arguments[2]);if(Bk&&!Dk)return Tk(t,e,i);if(t==i){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var o=[null];return kk(Pk,o,e),new(kk(_k,t,o))}var n=i.prototype,r=Ck(Ok(n)?n:Mk),s=kk(t,r,e);return Ok(s)?s:r}});var zk=G.Reflect.construct,Fk=Lp;xi({target:"Object",stat:!0},{setPrototypeOf:us});var Nk=G.Object.setPrototypeOf;function Ak(t,e){return Ak=Nk||function(t,e){return t.__proto__=e,t},Ak(t,e)}function Rk(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Fk(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Gl(t,"prototype",{writable:!1}),e&&Ak(t,e)}function jk(t,e){if(e&&("object"===Qc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}var Lk=Rf;function Hk(t){return Hk=Nk?Lk:function(t){return t.__proto__||Lk(t)},Hk(t)}var Wk=function(){function t(e,i,o){Xl(this,t),this.body=i,this.labelModule=o,this.setOptions(e),this.top=void 0,this.left=void 0,this.height=void 0,this.width=void 0,this.radius=void 0,this.margin=void 0,this.refreshNeeded=!0,this.boundingBox={top:0,left:0,right:0,bottom:0}}return $l(t,[{key:"setOptions",value:function(t){this.options=t}},{key:"_setMargins",value:function(t){this.margin={},this.options.margin&&("object"==Qc(this.options.margin)?(this.margin.top=this.options.margin.top,this.margin.right=this.options.margin.right,this.margin.bottom=this.options.margin.bottom,this.margin.left=this.options.margin.left):(this.margin.top=this.options.margin,this.margin.right=this.options.margin,this.margin.bottom=this.options.margin,this.margin.left=this.options.margin)),t.adjustSizes(this.margin)}},{key:"_distanceToBorder",value:function(t,e){var i=this.options.borderWidth;return t&&this.resize(t),Math.min(Math.abs(this.width/2/Math.cos(e)),Math.abs(this.height/2/Math.sin(e)))+i}},{key:"enableShadow",value:function(t,e){e.shadow&&(t.shadowColor=e.shadowColor,t.shadowBlur=e.shadowSize,t.shadowOffsetX=e.shadowX,t.shadowOffsetY=e.shadowY)}},{key:"disableShadow",value:function(t,e){e.shadow&&(t.shadowColor="rgba(0,0,0,0)",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0)}},{key:"enableBorderDashes",value:function(t,e){if(!1!==e.borderDashes)if(void 0!==t.setLineDash){var i=e.borderDashes;!0===i&&(i=[5,15]),t.setLineDash(i)}else console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."),this.options.shapeProperties.borderDashes=!1,e.borderDashes=!1}},{key:"disableBorderDashes",value:function(t,e){!1!==e.borderDashes&&(void 0!==t.setLineDash?t.setLineDash([0]):(console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."),this.options.shapeProperties.borderDashes=!1,e.borderDashes=!1))}},{key:"needsRefresh",value:function(t,e){return!0===this.refreshNeeded?(this.refreshNeeded=!1,!0):void 0===this.width||this.labelModule.differentState(t,e)}},{key:"initContextForDraw",value:function(t,e){var i=e.borderWidth/this.body.view.scale;t.lineWidth=Math.min(this.width,i),t.strokeStyle=e.borderColor,t.fillStyle=e.color}},{key:"performStroke",value:function(t,e){var i=e.borderWidth/this.body.view.scale;t.save(),i>0&&(this.enableBorderDashes(t,e),t.stroke(),this.disableBorderDashes(t,e)),t.restore()}},{key:"performFill",value:function(t,e){t.save(),t.fillStyle=e.color,this.enableShadow(t,e),Pv(t).call(t),this.disableShadow(t,e),t.restore(),this.performStroke(t,e)}},{key:"_addBoundingBoxMargin",value:function(t){this.boundingBox.left-=t,this.boundingBox.top-=t,this.boundingBox.bottom+=t,this.boundingBox.right+=t}},{key:"_updateBoundingBox",value:function(t,e,i,o,n){void 0!==i&&this.resize(i,o,n),this.left=t-this.width/2,this.top=e-this.height/2,this.boundingBox.left=this.left,this.boundingBox.top=this.top,this.boundingBox.bottom=this.top+this.height,this.boundingBox.right=this.left+this.width}},{key:"updateBoundingBox",value:function(t,e,i,o,n){this._updateBoundingBox(t,e,i,o,n)}},{key:"getDimensionsFromLabel",value:function(t,e,i){this.textSize=this.labelModule.getTextSize(t,e,i);var o=this.textSize.width,n=this.textSize.height;return 0===o&&(o=14,n=14),{width:o,height:n}}}]),t}();function Vk(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var qk=function(t){Rk(i,t);var e=Vk(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n))._setMargins(n),r}return $l(i,[{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.selected,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.hover;if(this.needsRefresh(e,i)){var o=this.getDimensionsFromLabel(t,e,i);this.width=o.width+this.margin.right+this.margin.left,this.height=o.height+this.margin.top+this.margin.bottom,this.radius=this.width/2}}},{key:"draw",value:function(t,e,i,o,n,r){this.resize(t,o,n),this.left=e-this.width/2,this.top=i-this.height/2,this.initContextForDraw(t,r),Ao(t,this.left,this.top,this.width,this.height,r.borderRadius),this.performFill(t,r),this.updateBoundingBox(e,i,t,o,n),this.labelModule.draw(t,this.left+this.textSize.width/2+this.margin.left,this.top+this.textSize.height/2+this.margin.top,o,n)}},{key:"updateBoundingBox",value:function(t,e,i,o,n){this._updateBoundingBox(t,e,i,o,n);var r=this.options.shapeProperties.borderRadius;this._addBoundingBoxMargin(r)}},{key:"distanceToBorder",value:function(t,e){t&&this.resize(t);var i=this.options.borderWidth;return Math.min(Math.abs(this.width/2/Math.cos(e)),Math.abs(this.height/2/Math.sin(e)))+i}}]),i}(Wk);function Uk(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Yk=function(t){Rk(i,t);var e=Uk(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n)).labelOffset=0,r.selected=!1,r}return $l(i,[{key:"setOptions",value:function(t,e,i){this.options=t,void 0===e&&void 0===i||this.setImages(e,i)}},{key:"setImages",value:function(t,e){e&&this.selected?(this.imageObj=e,this.imageObjAlt=t):(this.imageObj=t,this.imageObjAlt=e)}},{key:"switchImages",value:function(t){var e=t&&!this.selected||!t&&this.selected;if(this.selected=t,void 0!==this.imageObjAlt&&e){var i=this.imageObj;this.imageObj=this.imageObjAlt,this.imageObjAlt=i}}},{key:"_getImagePadding",value:function(){var t={top:0,right:0,bottom:0,left:0};if(this.options.imagePadding){var e=this.options.imagePadding;"object"==Qc(e)?(t.top=e.top,t.right=e.right,t.bottom=e.bottom,t.left=e.left):(t.top=e,t.right=e,t.bottom=e,t.left=e)}return t}},{key:"_resizeImage",value:function(){var t,e;if(!1===this.options.shapeProperties.useImageSize){var i=1,o=1;this.imageObj.width&&this.imageObj.height&&(this.imageObj.width>this.imageObj.height?i=this.imageObj.width/this.imageObj.height:o=this.imageObj.height/this.imageObj.width),t=2*this.options.size*i,e=2*this.options.size*o}else{var n=this._getImagePadding();t=this.imageObj.width+n.left+n.right,e=this.imageObj.height+n.top+n.bottom}this.width=t,this.height=e,this.radius=.5*this.width}},{key:"_drawRawCircle",value:function(t,e,i,o){this.initContextForDraw(t,o),No(t,e,i,o.size),this.performFill(t,o)}},{key:"_drawImageAtPosition",value:function(t,e){if(0!=this.imageObj.width){t.globalAlpha=void 0!==e.opacity?e.opacity:1,this.enableShadow(t,e);var i=1;!0===this.options.shapeProperties.interpolation&&(i=this.imageObj.width/this.width/this.body.view.scale);var o=this._getImagePadding(),n=this.left+o.left,r=this.top+o.top,s=this.width-o.left-o.right,a=this.height-o.top-o.bottom;this.imageObj.drawImageAtPosition(t,i,n,r,s,a),this.disableShadow(t,e)}}},{key:"_drawImageLabel",value:function(t,e,i,o,n){var r=0;if(void 0!==this.height){r=.5*this.height;var s=this.labelModule.getTextSize(t,o,n);s.lineCount>=1&&(r+=s.height/2)}var a=i+r;this.options.label&&(this.labelOffset=r),this.labelModule.draw(t,e,a,o,n,"hanging")}}]),i}(Wk);function Xk(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Gk=function(t){Rk(i,t);var e=Xk(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n))._setMargins(n),r}return $l(i,[{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.selected,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.hover;if(this.needsRefresh(e,i)){var o=this.getDimensionsFromLabel(t,e,i),n=Math.max(o.width+this.margin.right+this.margin.left,o.height+this.margin.top+this.margin.bottom);this.options.size=n/2,this.width=n,this.height=n,this.radius=this.width/2}}},{key:"draw",value:function(t,e,i,o,n,r){this.resize(t,o,n),this.left=e-this.width/2,this.top=i-this.height/2,this._drawRawCircle(t,e,i,r),this.updateBoundingBox(e,i),this.labelModule.draw(t,this.left+this.textSize.width/2+this.margin.left,i,o,n)}},{key:"updateBoundingBox",value:function(t,e){this.boundingBox.top=e-this.options.size,this.boundingBox.left=t-this.options.size,this.boundingBox.right=t+this.options.size,this.boundingBox.bottom=e+this.options.size}},{key:"distanceToBorder",value:function(t){return t&&this.resize(t),.5*this.width}}]),i}(Yk);function Kk(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var $k=function(t){Rk(i,t);var e=Kk(i);function i(t,o,n,r,s){var a;return Xl(this,i),(a=e.call(this,t,o,n)).setImages(r,s),a}return $l(i,[{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.selected,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.hover,o=void 0===this.imageObj.src||void 0===this.imageObj.width||void 0===this.imageObj.height;if(o){var n=2*this.options.size;return this.width=n,this.height=n,void(this.radius=.5*this.width)}this.needsRefresh(e,i)&&this._resizeImage()}},{key:"draw",value:function(t,e,i,o,n,r){this.switchImages(o),this.resize();var s=e,a=i;"top-left"===this.options.shapeProperties.coordinateOrigin?(this.left=e,this.top=i,s+=this.width/2,a+=this.height/2):(this.left=e-this.width/2,this.top=i-this.height/2),this._drawRawCircle(t,s,a,r),t.save(),t.clip(),this._drawImageAtPosition(t,r),t.restore(),this._drawImageLabel(t,s,a,o,n),this.updateBoundingBox(e,i)}},{key:"updateBoundingBox",value:function(t,e){"top-left"===this.options.shapeProperties.coordinateOrigin?(this.boundingBox.top=e,this.boundingBox.left=t,this.boundingBox.right=t+2*this.options.size,this.boundingBox.bottom=e+2*this.options.size):(this.boundingBox.top=e-this.options.size,this.boundingBox.left=t-this.options.size,this.boundingBox.right=t+this.options.size,this.boundingBox.bottom=e+this.options.size),this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left),this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width),this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelOffset)}},{key:"distanceToBorder",value:function(t){return t&&this.resize(t),.5*this.width}}]),i}(Yk);function Zk(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Qk=function(t){Rk(i,t);var e=Zk(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.selected,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.hover,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{size:this.options.size};if(this.needsRefresh(e,i)){var n,r;this.labelModule.getTextSize(t,e,i);var s=2*o.size;this.width=null!==(n=this.customSizeWidth)&&void 0!==n?n:s,this.height=null!==(r=this.customSizeHeight)&&void 0!==r?r:s,this.radius=.5*this.width}}},{key:"_drawShape",value:function(t,e,i,o,n,r,s,a){var h,d=this;return this.resize(t,r,s,a),this.left=o-this.width/2,this.top=n-this.height/2,this.initContextForDraw(t,a),(h=e,Object.prototype.hasOwnProperty.call(Ho,h)?Ho[h]:function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),o=1;o<e;o++)i[o-1]=arguments[o];CanvasRenderingContext2D.prototype[h].call(t,i)})(t,o,n,a.size),this.performFill(t,a),void 0!==this.options.icon&&void 0!==this.options.icon.code&&(t.font=(r?"bold ":"")+this.height/2+"px "+(this.options.icon.face||"FontAwesome"),t.fillStyle=this.options.icon.color||"black",t.textAlign="center",t.textBaseline="middle",t.fillText(this.options.icon.code,o,n)),{drawExternalLabel:function(){if(void 0!==d.options.label){d.labelModule.calculateLabelSize(t,r,s,o,n,"hanging");var e=n+.5*d.height+.5*d.labelModule.size.height;d.labelModule.draw(t,o,e,r,s,"hanging")}d.updateBoundingBox(o,n)}}}},{key:"updateBoundingBox",value:function(t,e){this.boundingBox.top=e-this.options.size,this.boundingBox.left=t-this.options.size,this.boundingBox.right=t+this.options.size,this.boundingBox.bottom=e+this.options.size,void 0!==this.options.label&&this.labelModule.size.width>0&&(this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left),this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width),this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelModule.size.height))}}]),i}(Wk);function Jk(t,e){var i=mu(t);if(dl){var o=dl(t);e&&(o=Yf(o).call(o,(function(e){return wl(t,e).enumerable}))),i.push.apply(i,o)}return i}function t_(t){for(var e=1;e<arguments.length;e++){var i,o,n=null!=arguments[e]?arguments[e]:{};e%2?Fu(i=Jk(Object(n),!0)).call(i,(function(e){Zl(t,e,n[e])})):Dl?Rl(t,Dl(n)):Fu(o=Jk(Object(n))).call(o,(function(e){Yl(t,e,wl(n,e))}))}return t}function e_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var i_=function(t){Rk(i,t);var e=e_(i);function i(t,o,n,r){var s;return Xl(this,i),(s=e.call(this,t,o,n,r)).ctxRenderer=r,s}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){this.resize(t,o,n,r),this.left=e-this.width/2,this.top=i-this.height/2,t.save();var s=this.ctxRenderer({ctx:t,id:this.options.id,x:e,y:i,state:{selected:o,hover:n},style:t_({},r),label:this.options.label});if(null!=s.drawNode&&s.drawNode(),t.restore(),s.drawExternalLabel){var a=s.drawExternalLabel;s.drawExternalLabel=function(){t.save(),a(),t.restore()}}return s.nodeDimensions&&(this.customSizeWidth=s.nodeDimensions.width,this.customSizeHeight=s.nodeDimensions.height),s}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function o_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var n_=function(t){Rk(i,t);var e=o_(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n))._setMargins(n),r}return $l(i,[{key:"resize",value:function(t,e,i){if(this.needsRefresh(e,i)){var o=this.getDimensionsFromLabel(t,e,i).width+this.margin.right+this.margin.left;this.width=o,this.height=o,this.radius=this.width/2}}},{key:"draw",value:function(t,e,i,o,n,r){this.resize(t,o,n),this.left=e-this.width/2,this.top=i-this.height/2,this.initContextForDraw(t,r),jo(t,e-this.width/2,i-this.height/2,this.width,this.height),this.performFill(t,r),this.updateBoundingBox(e,i,t,o,n),this.labelModule.draw(t,this.left+this.textSize.width/2+this.margin.left,this.top+this.textSize.height/2+this.margin.top,o,n)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Wk);function r_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var s_=function(t){Rk(i,t);var e=r_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"diamond",4,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function a_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var h_=function(t){Rk(i,t);var e=a_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"circle",2,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t){return t&&this.resize(t),this.options.size}}]),i}(Qk);function d_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var l_=function(t){Rk(i,t);var e=d_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.selected,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.hover;if(this.needsRefresh(e,i)){var o=this.getDimensionsFromLabel(t,e,i);this.height=2*o.height,this.width=o.width+o.height,this.radius=.5*this.width}}},{key:"draw",value:function(t,e,i,o,n,r){this.resize(t,o,n),this.left=e-.5*this.width,this.top=i-.5*this.height,this.initContextForDraw(t,r),Ro(t,this.left,this.top,this.width,this.height),this.performFill(t,r),this.updateBoundingBox(e,i,t,o,n),this.labelModule.draw(t,e,i,o,n)}},{key:"distanceToBorder",value:function(t,e){t&&this.resize(t);var i=.5*this.width,o=.5*this.height,n=Math.sin(e)*i,r=Math.cos(e)*o;return i*o/Math.sqrt(n*n+r*r)}}]),i}(Wk);function c_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var u_=function(t){Rk(i,t);var e=c_(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n))._setMargins(n),r}return $l(i,[{key:"resize",value:function(t,e,i){this.needsRefresh(e,i)&&(this.iconSize={width:Number(this.options.icon.size),height:Number(this.options.icon.size)},this.width=this.iconSize.width+this.margin.right+this.margin.left,this.height=this.iconSize.height+this.margin.top+this.margin.bottom,this.radius=.5*this.width)}},{key:"draw",value:function(t,e,i,o,n,r){var s=this;return this.resize(t,o,n),this.options.icon.size=this.options.icon.size||50,this.left=e-this.width/2,this.top=i-this.height/2,this._icon(t,e,i,o,n,r),{drawExternalLabel:function(){if(void 0!==s.options.label){s.labelModule.draw(t,s.left+s.iconSize.width/2+s.margin.left,i+s.height/2+5,o)}s.updateBoundingBox(e,i)}}}},{key:"updateBoundingBox",value:function(t,e){if(this.boundingBox.top=e-.5*this.options.icon.size,this.boundingBox.left=t-.5*this.options.icon.size,this.boundingBox.right=t+.5*this.options.icon.size,this.boundingBox.bottom=e+.5*this.options.icon.size,void 0!==this.options.label&&this.labelModule.size.width>0){this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left),this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width),this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelModule.size.height+5)}}},{key:"_icon",value:function(t,e,i,o,n,r){var s=Number(this.options.icon.size);void 0!==this.options.icon.code?(t.font=[null!=this.options.icon.weight?this.options.icon.weight:o?"bold":"",(null!=this.options.icon.weight&&o?5:0)+s+"px",this.options.icon.face].join(" "),t.fillStyle=this.options.icon.color||"black",t.textAlign="center",t.textBaseline="middle",this.enableShadow(t,r),t.fillText(this.options.icon.code,e,i),this.disableShadow(t,r)):console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.")}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Wk);function f_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var p_=function(t){Rk(i,t);var e=f_(i);function i(t,o,n,r,s){var a;return Xl(this,i),(a=e.call(this,t,o,n)).setImages(r,s),a}return $l(i,[{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.selected,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.hover,o=void 0===this.imageObj.src||void 0===this.imageObj.width||void 0===this.imageObj.height;if(o){var n=2*this.options.size;return this.width=n,void(this.height=n)}this.needsRefresh(e,i)&&this._resizeImage()}},{key:"draw",value:function(t,e,i,o,n,r){t.save(),this.switchImages(o),this.resize();var s=e,a=i;if("top-left"===this.options.shapeProperties.coordinateOrigin?(this.left=e,this.top=i,s+=this.width/2,a+=this.height/2):(this.left=e-this.width/2,this.top=i-this.height/2),!0===this.options.shapeProperties.useBorderWithImage){var h=this.options.borderWidth,d=this.options.borderWidthSelected||2*this.options.borderWidth,l=(o?d:h)/this.body.view.scale;t.lineWidth=Math.min(this.width,l),t.beginPath();var c=o?this.options.color.highlight.border:n?this.options.color.hover.border:this.options.color.border,u=o?this.options.color.highlight.background:n?this.options.color.hover.background:this.options.color.background;void 0!==r.opacity&&(c=qy(c,r.opacity),u=qy(u,r.opacity)),t.strokeStyle=c,t.fillStyle=u,t.rect(this.left-.5*t.lineWidth,this.top-.5*t.lineWidth,this.width+t.lineWidth,this.height+t.lineWidth),Pv(t).call(t),this.performStroke(t,r),t.closePath()}this._drawImageAtPosition(t,r),this._drawImageLabel(t,s,a,o,n),this.updateBoundingBox(e,i),t.restore()}},{key:"updateBoundingBox",value:function(t,e){this.resize(),"top-left"===this.options.shapeProperties.coordinateOrigin?(this.left=t,this.top=e):(this.left=t-this.width/2,this.top=e-this.height/2),this.boundingBox.left=this.left,this.boundingBox.top=this.top,this.boundingBox.bottom=this.top+this.height,this.boundingBox.right=this.left+this.width,void 0!==this.options.label&&this.labelModule.size.width>0&&(this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left),this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width),this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelOffset))}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Yk);function v_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var g_=function(t){Rk(i,t);var e=v_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"square",2,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function y_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var m_=function(t){Rk(i,t);var e=y_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"hexagon",4,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function b_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var w_=function(t){Rk(i,t);var e=b_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"star",4,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function k_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var __=function(t){Rk(i,t);var e=k_(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n))._setMargins(n),r}return $l(i,[{key:"resize",value:function(t,e,i){this.needsRefresh(e,i)&&(this.textSize=this.labelModule.getTextSize(t,e,i),this.width=this.textSize.width+this.margin.right+this.margin.left,this.height=this.textSize.height+this.margin.top+this.margin.bottom,this.radius=.5*this.width)}},{key:"draw",value:function(t,e,i,o,n,r){this.resize(t,o,n),this.left=e-this.width/2,this.top=i-this.height/2,this.enableShadow(t,r),this.labelModule.draw(t,this.left+this.textSize.width/2+this.margin.left,this.top+this.textSize.height/2+this.margin.top,o,n),this.disableShadow(t,r),this.updateBoundingBox(e,i,t,o,n)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Wk);function x_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var E_=function(t){Rk(i,t);var e=x_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"triangle",3,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function O_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var C_=function(t){Rk(i,t);var e=O_(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"draw",value:function(t,e,i,o,n,r){return this._drawShape(t,"triangleDown",3,e,i,o,n,r)}},{key:"distanceToBorder",value:function(t,e){return this._distanceToBorder(t,e)}}]),i}(Qk);function S_(t,e){var i=mu(t);if(dl){var o=dl(t);e&&(o=Yf(o).call(o,(function(e){return wl(t,e).enumerable}))),i.push.apply(i,o)}return i}function T_(t){for(var e=1;e<arguments.length;e++){var i,o,n=null!=arguments[e]?arguments[e]:{};e%2?Fu(i=S_(Object(n),!0)).call(i,(function(e){Zl(t,e,n[e])})):Dl?Rl(t,Dl(n)):Fu(o=S_(Object(n))).call(o,(function(e){Yl(t,e,wl(n,e))}))}return t}var M_=function(){function t(e,i,o,n,r,s){Xl(this,t),this.options=Jy(r),this.globalOptions=r,this.defaultOptions=s,this.body=i,this.edges=[],this.id=void 0,this.imagelist=o,this.grouplist=n,this.x=void 0,this.y=void 0,this.baseSize=this.options.size,this.baseFontSize=this.options.font.size,this.predefinedPosition=!1,this.selected=!1,this.hover=!1,this.labelModule=new gk(this.body,this.options,!1),this.setOptions(e)}return $l(t,[{key:"attachEdge",value:function(t){var e;-1===zp(e=this.edges).call(e,t)&&this.edges.push(t)}},{key:"detachEdge",value:function(t){var e,i,o=zp(e=this.edges).call(e,t);-1!=o&&uf(i=this.edges).call(i,o,1)}},{key:"setOptions",value:function(e){var i=this.options.shape;if(e){if(void 0!==e.color&&(this._localColor=e.color),void 0!==e.id&&(this.id=e.id),void 0===this.id)throw new Error("Node must have an id");t.checkMass(e,this.id),void 0!==e.x&&(null===e.x?(this.x=void 0,this.predefinedPosition=!1):(this.x=_p(e.x),this.predefinedPosition=!0)),void 0!==e.y&&(null===e.y?(this.y=void 0,this.predefinedPosition=!1):(this.y=_p(e.y),this.predefinedPosition=!0)),void 0!==e.size&&(this.baseSize=e.size),void 0!==e.value&&(e.value=Yw(e.value)),t.parseOptions(this.options,e,!0,this.globalOptions,this.grouplist);var o=[e,this.options,this.defaultOptions];return this.chooser=Jw("node",o),this._load_images(),this.updateLabelModule(e),void 0!==e.opacity&&t.checkOpacity(e.opacity)&&(this.options.opacity=e.opacity),this.updateShape(i),void 0!==e.hidden||void 0!==e.physics}}},{key:"_load_images",value:function(){if(("circularImage"===this.options.shape||"image"===this.options.shape)&&void 0===this.options.image)throw new Error("Option image must be defined for node type '"+this.options.shape+"'");if(void 0!==this.options.image){if(void 0===this.imagelist)throw new Error("Internal Error: No images provided");if("string"==typeof this.options.image)this.imageObj=this.imagelist.load(this.options.image,this.options.brokenImage,this.id);else{if(void 0===this.options.image.unselected)throw new Error("No unselected image provided");this.imageObj=this.imagelist.load(this.options.image.unselected,this.options.brokenImage,this.id),void 0!==this.options.image.selected?this.imageObjAlt=this.imagelist.load(this.options.image.selected,this.options.brokenImage,this.id):this.imageObjAlt=void 0}}}},{key:"getFormattingValues",value:function(){var t={color:this.options.color.background,opacity:this.options.opacity,borderWidth:this.options.borderWidth,borderColor:this.options.color.border,size:this.options.size,borderDashes:this.options.shapeProperties.borderDashes,borderRadius:this.options.shapeProperties.borderRadius,shadow:this.options.shadow.enabled,shadowColor:this.options.shadow.color,shadowSize:this.options.shadow.size,shadowX:this.options.shadow.x,shadowY:this.options.shadow.y};if(this.selected||this.hover?!0===this.chooser?this.selected?(null!=this.options.borderWidthSelected?t.borderWidth=this.options.borderWidthSelected:t.borderWidth*=2,t.color=this.options.color.highlight.background,t.borderColor=this.options.color.highlight.border,t.shadow=this.options.shadow.enabled):this.hover&&(t.color=this.options.color.hover.background,t.borderColor=this.options.color.hover.border,t.shadow=this.options.shadow.enabled):"function"==typeof this.chooser&&(this.chooser(t,this.options.id,this.selected,this.hover),!1===t.shadow&&(t.shadowColor===this.options.shadow.color&&t.shadowSize===this.options.shadow.size&&t.shadowX===this.options.shadow.x&&t.shadowY===this.options.shadow.y||(t.shadow=!0))):t.shadow=this.options.shadow.enabled,void 0!==this.options.opacity){var e=this.options.opacity;t.borderColor=qy(t.borderColor,e),t.color=qy(t.color,e),t.shadowColor=qy(t.shadowColor,e)}return t}},{key:"updateLabelModule",value:function(e){void 0!==this.options.label&&null!==this.options.label||(this.options.label=""),t.updateGroupOptions(this.options,T_(T_({},e),{},{color:e&&e.color||this._localColor||void 0}),this.grouplist);var i=this.grouplist.get(this.options.group,!1),o=[e,this.options,i,this.globalOptions,this.defaultOptions];this.labelModule.update(this.options,o),void 0!==this.labelModule.baseSize&&(this.baseFontSize=this.labelModule.baseSize)}},{key:"updateShape",value:function(t){if(t===this.options.shape&&this.shape)this.shape.setOptions(this.options,this.imageObj,this.imageObjAlt);else switch(this.options.shape){case"box":this.shape=new qk(this.options,this.body,this.labelModule);break;case"circle":this.shape=new Gk(this.options,this.body,this.labelModule);break;case"circularImage":this.shape=new $k(this.options,this.body,this.labelModule,this.imageObj,this.imageObjAlt);break;case"custom":this.shape=new i_(this.options,this.body,this.labelModule,this.options.ctxRenderer);break;case"database":this.shape=new n_(this.options,this.body,this.labelModule);break;case"diamond":this.shape=new s_(this.options,this.body,this.labelModule);break;case"dot":this.shape=new h_(this.options,this.body,this.labelModule);break;case"ellipse":default:this.shape=new l_(this.options,this.body,this.labelModule);break;case"icon":this.shape=new u_(this.options,this.body,this.labelModule);break;case"image":this.shape=new p_(this.options,this.body,this.labelModule,this.imageObj,this.imageObjAlt);break;case"square":this.shape=new g_(this.options,this.body,this.labelModule);break;case"hexagon":this.shape=new m_(this.options,this.body,this.labelModule);break;case"star":this.shape=new w_(this.options,this.body,this.labelModule);break;case"text":this.shape=new __(this.options,this.body,this.labelModule);break;case"triangle":this.shape=new E_(this.options,this.body,this.labelModule);break;case"triangleDown":this.shape=new C_(this.options,this.body,this.labelModule)}this.needsRefresh()}},{key:"select",value:function(){this.selected=!0,this.needsRefresh()}},{key:"unselect",value:function(){this.selected=!1,this.needsRefresh()}},{key:"needsRefresh",value:function(){this.shape.refreshNeeded=!0}},{key:"getTitle",value:function(){return this.options.title}},{key:"distanceToBorder",value:function(t,e){return this.shape.distanceToBorder(t,e)}},{key:"isFixed",value:function(){return this.options.fixed.x&&this.options.fixed.y}},{key:"isSelected",value:function(){return this.selected}},{key:"getValue",value:function(){return this.options.value}},{key:"getLabelSize",value:function(){return this.labelModule.size()}},{key:"setValueRange",value:function(t,e,i){if(void 0!==this.options.value){var o=this.options.scaling.customScalingFunction(t,e,i,this.options.value),n=this.options.scaling.max-this.options.scaling.min;if(!0===this.options.scaling.label.enabled){var r=this.options.scaling.label.max-this.options.scaling.label.min;this.options.font.size=this.options.scaling.label.min+o*r}this.options.size=this.options.scaling.min+o*n}else this.options.size=this.baseSize,this.options.font.size=this.baseFontSize;this.updateLabelModule()}},{key:"draw",value:function(t){var e=this.getFormattingValues();return this.shape.draw(t,this.x,this.y,this.selected,this.hover,e)||{}}},{key:"updateBoundingBox",value:function(t){this.shape.updateBoundingBox(this.x,this.y,t)}},{key:"resize",value:function(t){var e=this.getFormattingValues();this.shape.resize(t,this.selected,this.hover,e)}},{key:"getItemsOnPoint",value:function(t){var e=[];return this.labelModule.visible()&&tk(this.labelModule.getSize(),t)&&e.push({nodeId:this.id,labelId:0}),tk(this.shape.boundingBox,t)&&e.push({nodeId:this.id}),e}},{key:"isOverlappingWith",value:function(t){return this.shape.left<t.right&&this.shape.left+this.shape.width>t.left&&this.shape.top<t.bottom&&this.shape.top+this.shape.height>t.top}},{key:"isBoundingBoxOverlappingWith",value:function(t){return this.shape.boundingBox.left<t.right&&this.shape.boundingBox.right>t.left&&this.shape.boundingBox.top<t.bottom&&this.shape.boundingBox.bottom>t.top}}],[{key:"checkOpacity",value:function(t){return 0<=t&&t<=1}},{key:"checkCoordinateOrigin",value:function(t){return void 0===t||"center"===t||"top-left"===t}},{key:"updateGroupOptions",value:function(e,i,o){var n;if(void 0!==o){var r=e.group;if(void 0!==i&&void 0!==i.group&&r!==i.group)throw new Error("updateGroupOptions: group values in options don't match.");if("number"==typeof r||"string"==typeof r&&""!=r){var s=o.get(r);void 0!==s.opacity&&void 0===i.opacity&&(t.checkOpacity(s.opacity)||(console.error("Invalid option for node opacity. Value must be between 0 and 1, found: "+s.opacity),s.opacity=void 0));var a=Yf(n=Qw(i)).call(n,(function(t){return null!=i[t]}));a.push("font"),Ay(a,e,s),e.color=Yy(e.color)}}}},{key:"parseOptions",value:function(e,i){var o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=arguments.length>4?arguments[4]:void 0,s=["color","fixed","shadow"];if(Ay(s,e,i,o),t.checkMass(i),void 0!==e.opacity&&(t.checkOpacity(e.opacity)||(console.error("Invalid option for node opacity. Value must be between 0 and 1, found: "+e.opacity),e.opacity=void 0)),void 0!==i.opacity&&(t.checkOpacity(i.opacity)||(console.error("Invalid option for node opacity. Value must be between 0 and 1, found: "+i.opacity),i.opacity=void 0)),i.shapeProperties&&!t.checkCoordinateOrigin(i.shapeProperties.coordinateOrigin)&&console.error("Invalid option for node coordinateOrigin, found: "+i.shapeProperties.coordinateOrigin),tm(e,i,"shadow",n),void 0!==i.color&&null!==i.color){var a=Yy(i.color);Fy(e.color,a)}else!0===o&&null===i.color&&(e.color=Jy(n.color));void 0!==i.fixed&&null!==i.fixed&&("boolean"==typeof i.fixed?(e.fixed.x=i.fixed,e.fixed.y=i.fixed):(void 0!==i.fixed.x&&"boolean"==typeof i.fixed.x&&(e.fixed.x=i.fixed.x),void 0!==i.fixed.y&&"boolean"==typeof i.fixed.y&&(e.fixed.y=i.fixed.y))),!0===o&&null===i.font&&(e.font=Jy(n.font)),t.updateGroupOptions(e,i,r),void 0!==i.scaling&&tm(e.scaling,i.scaling,"label",n.scaling)}},{key:"checkMass",value:function(t,e){if(void 0!==t.mass&&t.mass<=0){var i="";void 0!==e&&(i=" in node id: "+e),console.error("%cNegative or zero mass disallowed"+i+", setting mass to 1.",gm),t.mass=1}}}]),t}();function P_(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return D_(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return D_(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function D_(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}var B_=function(){function t(e,i,o,n){var r,s=this;if(Xl(this,t),this.body=e,this.images=i,this.groups=o,this.layoutEngine=n,this.body.functions.createNode=Fo(r=this.create).call(r,this),this.nodesListeners={add:function(t,e){s.add(e.items)},update:function(t,e){s.update(e.items,e.data,e.oldData)},remove:function(t,e){s.remove(e.items)}},this.defaultOptions={borderWidth:1,borderWidthSelected:void 0,brokenImage:void 0,color:{border:"#2B7CE9",background:"#97C2FC",highlight:{border:"#2B7CE9",background:"#D2E5FF"},hover:{border:"#2B7CE9",background:"#D2E5FF"}},opacity:void 0,fixed:{x:!1,y:!1},font:{color:"#343434",size:14,face:"arial",background:"none",strokeWidth:0,strokeColor:"#ffffff",align:"center",vadjust:0,multi:!1,bold:{mod:"bold"},boldital:{mod:"bold italic"},ital:{mod:"italic"},mono:{mod:"",size:15,face:"monospace",vadjust:2}},group:void 0,hidden:!1,icon:{face:"FontAwesome",code:void 0,size:50,color:"#2B7CE9"},image:void 0,imagePadding:{top:0,right:0,bottom:0,left:0},label:void 0,labelHighlightBold:!0,level:void 0,margin:{top:5,right:5,bottom:5,left:5},mass:1,physics:!0,scaling:{min:10,max:30,label:{enabled:!1,min:14,max:30,maxVisible:30,drawThreshold:5},customScalingFunction:function(t,e,i,o){if(e===t)return.5;var n=1/(e-t);return Math.max(0,(o-t)*n)}},shadow:{enabled:!1,color:"rgba(0,0,0,0.5)",size:10,x:5,y:5},shape:"ellipse",shapeProperties:{borderDashes:!1,borderRadius:6,interpolation:!0,useImageSize:!1,useBorderWithImage:!1,coordinateOrigin:"center"},size:25,title:void 0,value:void 0,x:void 0,y:void 0},this.defaultOptions.mass<=0)throw"Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";this.options=Jy(this.defaultOptions),this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t,e,i=this;this.body.emitter.on("refreshNodes",Fo(t=this.refresh).call(t,this)),this.body.emitter.on("refresh",Fo(e=this.refresh).call(e,this)),this.body.emitter.on("destroy",(function(){Wy(i.nodesListeners,(function(t,e){i.body.data.nodes&&i.body.data.nodes.off(e,t)})),delete i.body.functions.createNode,delete i.nodesListeners.add,delete i.nodesListeners.update,delete i.nodesListeners.remove,delete i.nodesListeners}))}},{key:"setOptions",value:function(t){if(void 0!==t){if(M_.parseOptions(this.options,t),void 0!==t.opacity&&(Cw(t.opacity)||!Mw(t.opacity)||t.opacity<0||t.opacity>1?console.error("Invalid option for node opacity. Value must be between 0 and 1, found: "+t.opacity):this.options.opacity=t.opacity),void 0!==t.shape)for(var e in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes,e)&&this.body.nodes[e].updateShape();if(void 0!==t.font||void 0!==t.widthConstraint||void 0!==t.heightConstraint)for(var i=0,o=mu(this.body.nodes);i<o.length;i++){var n=o[i];this.body.nodes[n].updateLabelModule(),this.body.nodes[n].needsRefresh()}if(void 0!==t.size)for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes,r)&&this.body.nodes[r].needsRefresh();void 0===t.hidden&&void 0===t.physics||this.body.emitter.emit("_dataChanged")}}},{key:"setData",value:function(t){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=this.body.data.nodes;if(e.isDataViewLike("id",t))this.body.data.nodes=t;else if(hu(t))this.body.data.nodes=new e.DataSet,this.body.data.nodes.add(t);else{if(t)throw new TypeError("Array or DataSet expected");this.body.data.nodes=new e.DataSet}if(o&&Wy(this.nodesListeners,(function(t,e){o.off(e,t)})),this.body.nodes={},this.body.data.nodes){var n=this;Wy(this.nodesListeners,(function(t,e){n.body.data.nodes.on(e,t)}));var r=this.body.data.nodes.getIds();this.add(r,!0)}!1===i&&this.body.emitter.emit("_dataChanged")}},{key:"add",value:function(t){for(var e,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=[],n=0;n<t.length;n++){e=t[n];var r=this.body.data.nodes.get(e),s=this.create(r);o.push(s),this.body.nodes[e]=s}this.layoutEngine.positionInitially(o),!1===i&&this.body.emitter.emit("_dataChanged")}},{key:"update",value:function(t,e,i){for(var o=this.body.nodes,n=!1,r=0;r<t.length;r++){var s=t[r],a=o[s],h=e[r];void 0!==a?a.setOptions(h)&&(n=!0):(n=!0,a=this.create(h),o[s]=a)}n||void 0===i||(n=Nw(e).call(e,(function(t,e){var o=i[e];return o&&o.level!==t.level}))),!0===n?this.body.emitter.emit("_dataChanged"):this.body.emitter.emit("_dataUpdated")}},{key:"remove",value:function(t){for(var e=this.body.nodes,i=0;i<t.length;i++){delete e[t[i]]}this.body.emitter.emit("_dataChanged")}},{key:"create",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:M_;return new e(t,this.body,this.images,this.groups,this.options,this.defaultOptions)}},{key:"refresh",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];Wy(this.body.nodes,(function(i,o){var n=t.body.data.nodes.get(o);void 0!==n&&(!0===e&&i.setOptions({x:null,y:null}),i.setOptions({fixed:!1}),i.setOptions(n))}))}},{key:"getPositions",value:function(t){var e={};if(void 0!==t){if(!0===hu(t)){for(var i=0;i<t.length;i++)if(void 0!==this.body.nodes[t[i]]){var o=this.body.nodes[t[i]];e[t[i]]={x:Math.round(o.x),y:Math.round(o.y)}}}else if(void 0!==this.body.nodes[t]){var n=this.body.nodes[t];e[t]={x:Math.round(n.x),y:Math.round(n.y)}}}else for(var r=0;r<this.body.nodeIndices.length;r++){var s=this.body.nodes[this.body.nodeIndices[r]];e[this.body.nodeIndices[r]]={x:Math.round(s.x),y:Math.round(s.y)}}return e}},{key:"getPosition",value:function(t){if(null==t)throw new TypeError("No id was specified for getPosition method.");if(null==this.body.nodes[t])throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(t));return{x:Math.round(this.body.nodes[t].x),y:Math.round(this.body.nodes[t].y)}}},{key:"storePositions",value:function(){var t,e=[],i=this.body.data.nodes.getDataSet(),o=P_(i.get());try{for(o.s();!(t=o.n()).done;){var n=t.value,r=n.id,s=this.body.nodes[r],a=Math.round(s.x),h=Math.round(s.y);n.x===a&&n.y===h||e.push({id:r,x:a,y:h})}}catch(t){o.e(t)}finally{o.f()}i.update(e)}},{key:"getBoundingBox",value:function(t){if(void 0!==this.body.nodes[t])return this.body.nodes[t].shape.boundingBox}},{key:"getConnectedNodes",value:function(t,e){var i=[];if(void 0!==this.body.nodes[t])for(var o=this.body.nodes[t],n={},r=0;r<o.edges.length;r++){var s=o.edges[r];"to"!==e&&s.toId==o.id?void 0===n[s.fromId]&&(i.push(s.fromId),n[s.fromId]=!0):"from"!==e&&s.fromId==o.id&&void 0===n[s.toId]&&(i.push(s.toId),n[s.toId]=!0)}return i}},{key:"getConnectedEdges",value:function(t){var e=[];if(void 0!==this.body.nodes[t])for(var i=this.body.nodes[t],o=0;o<i.edges.length;o++)e.push(i.edges[o].id);else console.error("NodeId provided for getConnectedEdges does not exist. Provided: ",t);return e}},{key:"moveNode",value:function(t,e,i){var o=this;void 0!==this.body.nodes[t]?(this.body.nodes[t].x=Number(e),this.body.nodes[t].y=Number(i),bv((function(){o.body.emitter.emit("startSimulation")}),0)):console.error("Node id supplied to moveNode does not exist. Provided: ",t)}}]),t}(),I_=Vt,z_=x,F_=X,N_=Ze,A_=function(t){return void 0!==t&&(I_(t,"value")||I_(t,"writable"))},R_=b,j_=Dr;xi({target:"Reflect",stat:!0},{get:function t(e,i){var o,n,r=arguments.length<3?e:arguments[2];return N_(e)===r?e[i]:(o=R_.f(e,i))?A_(o)?o.value:void 0===o.get?void 0:z_(o.get,r):F_(n=j_(e))?t(n,i,r):void 0}});var L_=G.Reflect.get,H_=bl;function W_(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Hk(t)););return t}function V_(){return V_="undefined"!=typeof Reflect&&L_?L_:function(t,e,i){var o=W_(t,e);if(o){var n=H_(o,e);return n.get?n.get.call(arguments.length<3?t:i):n.value}},V_.apply(this,arguments)}var q_=xi,U_=Math.hypot,Y_=Math.abs,X_=Math.sqrt;q_({target:"Math",stat:!0,forced:!!U_&&U_(1/0,NaN)!==1/0},{hypot:function(t,e){for(var i,o,n=0,r=0,s=arguments.length,a=0;r<s;)a<(i=Y_(arguments[r++]))?(n=n*(o=a/i)*o+1,a=i):n+=i>0?(o=i/a)*o:i;return a===1/0?1/0:a*X_(n)}});var G_=G.Math.hypot;function K_(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var $_=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"transform",value:function(t,e){hu(t)||(t=[t]);for(var i=e.point.x,o=e.point.y,n=e.angle,r=e.length,s=0;s<t.length;++s){var a=t[s],h=a.x*Math.cos(n)-a.y*Math.sin(n),d=a.x*Math.sin(n)+a.y*Math.cos(n);a.x=i+r*h,a.y=o+r*d}}},{key:"drawPath",value:function(t,e){t.beginPath(),t.moveTo(e[0].x,e[0].y);for(var i=1;i<e.length;++i)t.lineTo(e[i].x,e[i].y);t.closePath()}}]),t}(),Z_=function(t){Rk(i,t);var e=K_(i);function i(){return Xl(this,i),e.apply(this,arguments)}return $l(i,null,[{key:"draw",value:function(t,e){if(e.image){t.save(),t.translate(e.point.x,e.point.y),t.rotate(Math.PI/2+e.angle);var i=null!=e.imageWidth?e.imageWidth:e.image.width,o=null!=e.imageHeight?e.imageHeight:e.image.height;e.image.drawImageAtPosition(t,1,-i/2,0,i,o),t.restore()}return!1}}]),i}($_),Q_=function(t){Rk(i,t);var e=K_(i);function i(){return Xl(this,i),e.apply(this,arguments)}return $l(i,null,[{key:"draw",value:function(t,e){var i=[{x:0,y:0},{x:-1,y:.3},{x:-.9,y:0},{x:-1,y:-.3}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),i}($_),J_=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:-1,y:0},{x:0,y:.3},{x:-.4,y:0},{x:0,y:-.3}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),tx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i={x:-.4,y:0};$_.transform(i,e),t.strokeStyle=t.fillStyle,t.fillStyle="rgba(0, 0, 0, 0)";var o=Math.PI,n=e.angle-o/2,r=e.angle+o/2;return t.beginPath(),t.arc(i.x,i.y,.4*e.length,n,r,!1),t.stroke(),!0}}]),t}(),ex=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i={x:-.3,y:0};$_.transform(i,e),t.strokeStyle=t.fillStyle,t.fillStyle="rgba(0, 0, 0, 0)";var o=Math.PI,n=e.angle+o/2,r=e.angle+3*o/2;return t.beginPath(),t.arc(i.x,i.y,.4*e.length,n,r,!1),t.stroke(),!0}}]),t}(),ix=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:.02,y:0},{x:-1,y:.3},{x:-1,y:-.3}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),ox=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:0,y:.3},{x:0,y:-.3},{x:-1,y:0}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),nx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i={x:-.4,y:0};return $_.transform(i,e),No(t,i.x,i.y,.4*e.length),!0}}]),t}(),rx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:0,y:.5},{x:0,y:-.5},{x:-.15,y:-.5},{x:-.15,y:.5}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),sx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:0,y:.3},{x:0,y:-.3},{x:-.6,y:-.3},{x:-.6,y:.3}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),ax=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:0,y:0},{x:-.5,y:-.3},{x:-1,y:0},{x:-.5,y:.3}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),hx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i=[{x:-1,y:.3},{x:-.5,y:0},{x:-1,y:-.3},{x:0,y:0}];return $_.transform(i,e),$_.drawPath(t,i),!0}}]),t}(),dx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"draw",value:function(t,e){var i;switch(e.type&&(i=e.type.toLowerCase()),i){case"image":return Z_.draw(t,e);case"circle":return nx.draw(t,e);case"box":return sx.draw(t,e);case"crow":return J_.draw(t,e);case"curve":return tx.draw(t,e);case"diamond":return ax.draw(t,e);case"inv_curve":return ex.draw(t,e);case"triangle":return ix.draw(t,e);case"inv_triangle":return ox.draw(t,e);case"bar":return rx.draw(t,e);case"vee":return hx.draw(t,e);default:return Q_.draw(t,e)}}}]),t}();function lx(t,e){var i=mu(t);if(dl){var o=dl(t);e&&(o=Yf(o).call(o,(function(e){return wl(t,e).enumerable}))),i.push.apply(i,o)}return i}function cx(t){for(var e=1;e<arguments.length;e++){var i,o,n=null!=arguments[e]?arguments[e]:{};e%2?Fu(i=lx(Object(n),!0)).call(i,(function(e){Zl(t,e,n[e])})):Dl?Rl(t,Dl(n)):Fu(o=lx(Object(n))).call(o,(function(e){Yl(t,e,wl(n,e))}))}return t}var ux=function(){function t(e,i,o){Xl(this,t),this._body=i,this._labelModule=o,this.color={},this.colorDirty=!0,this.hoverWidth=1.5,this.selectionWidth=2,this.setOptions(e),this.fromPoint=this.from,this.toPoint=this.to}return $l(t,[{key:"connect",value:function(){this.from=this._body.nodes[this.options.from],this.to=this._body.nodes[this.options.to]}},{key:"cleanup",value:function(){return!1}},{key:"setOptions",value:function(t){this.options=t,this.from=this._body.nodes[this.options.from],this.to=this._body.nodes[this.options.to],this.id=this.options.id}},{key:"drawLine",value:function(t,e,i,o){var n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.getViaNode();t.strokeStyle=this.getColor(t,e),t.lineWidth=e.width,!1!==e.dashes?this._drawDashedLine(t,e,n):this._drawLine(t,e,n)}},{key:"_drawLine",value:function(t,e,i,o,n){if(this.from!=this.to)this._line(t,e,i,o,n);else{var r=$c(this._getCircleData(t),3),s=r[0],a=r[1],h=r[2];this._circle(t,e,s,a,h)}}},{key:"_drawDashedLine",value:function(t,e,i,o,n){t.lineCap="round";var r=hu(e.dashes)?e.dashes:[5,5];if(void 0!==t.setLineDash){if(t.save(),t.setLineDash(r),t.lineDashOffset=0,this.from!=this.to)this._line(t,e,i);else{var s=$c(this._getCircleData(t),3),a=s[0],h=s[1],d=s[2];this._circle(t,e,a,h,d)}t.setLineDash([0]),t.lineDashOffset=0,t.restore()}else{if(this.from!=this.to)Lo(t,this.from.x,this.from.y,this.to.x,this.to.y,r);else{var l=$c(this._getCircleData(t),3),c=l[0],u=l[1],f=l[2];this._circle(t,e,c,u,f)}this.enableShadow(t,e),t.stroke(),this.disableShadow(t,e)}}},{key:"findBorderPosition",value:function(t,e,i){return this.from!=this.to?this._findBorderPosition(t,e,i):this._findBorderPositionCircle(t,e,i)}},{key:"findBorderPositions",value:function(t){if(this.from!=this.to)return{from:this._findBorderPosition(this.from,t),to:this._findBorderPosition(this.to,t)};var e,i=$c(au(e=this._getCircleData(t)).call(e,0,2),2),o=i[0],n=i[1];return{from:this._findBorderPositionCircle(this.from,t,{x:o,y:n,low:.25,high:.6,direction:-1}),to:this._findBorderPositionCircle(this.from,t,{x:o,y:n,low:.6,high:.8,direction:1})}}},{key:"_getCircleData",value:function(t){var e=this.options.selfReference.size;void 0!==t&&void 0===this.from.shape.width&&this.from.shape.resize(t);var i=ik(t,this.options.selfReference.angle,e,this.from);return[i.x,i.y,e]}},{key:"_pointOnCircle",value:function(t,e,i,o){var n=2*o*Math.PI;return{x:t+i*Math.cos(n),y:e-i*Math.sin(n)}}},{key:"_findBorderPositionCircle",value:function(t,e,i){var o,n=i.x,r=i.y,s=i.low,a=i.high,h=i.direction,d=this.options.selfReference.size,l=.5*(s+a),c=0;!0===this.options.arrowStrikethrough&&(-1===h?c=this.options.endPointOffset.from:1===h&&(c=this.options.endPointOffset.to));var u=0;do{l=.5*(s+a),o=this._pointOnCircle(n,r,d,l);var f=Math.atan2(t.y-o.y,t.x-o.x),p=t.distanceToBorder(e,f)+c-Math.sqrt(Math.pow(o.x-t.x,2)+Math.pow(o.y-t.y,2));if(Math.abs(p)<.05)break;p>0?h>0?s=l:a=l:h>0?a=l:s=l,++u}while(s<=a&&u<10);return cx(cx({},o),{},{t:l})}},{key:"getLineWidth",value:function(t,e){return!0===t?Math.max(this.selectionWidth,.3/this._body.view.scale):!0===e?Math.max(this.hoverWidth,.3/this._body.view.scale):Math.max(this.options.width,.3/this._body.view.scale)}},{key:"getColor",value:function(t,e){if(!1!==e.inheritsColor){if("both"===e.inheritsColor&&this.from.id!==this.to.id){var i=t.createLinearGradient(this.from.x,this.from.y,this.to.x,this.to.y),o=this.from.options.color.highlight.border,n=this.to.options.color.highlight.border;return!1===this.from.selected&&!1===this.to.selected?(o=qy(this.from.options.color.border,e.opacity),n=qy(this.to.options.color.border,e.opacity)):!0===this.from.selected&&!1===this.to.selected?n=this.to.options.color.border:!1===this.from.selected&&!0===this.to.selected&&(o=this.from.options.color.border),i.addColorStop(0,o),i.addColorStop(1,n),i}return"to"===e.inheritsColor?qy(this.to.options.color.border,e.opacity):qy(this.from.options.color.border,e.opacity)}return qy(e.color,e.opacity)}},{key:"_circle",value:function(t,e,i,o,n){this.enableShadow(t,e);var r=0,s=2*Math.PI;if(!this.options.selfReference.renderBehindTheNode){var a=this.options.selfReference.angle,h=this.options.selfReference.angle+Math.PI,d=this._findBorderPositionCircle(this.from,t,{x:i,y:o,low:a,high:h,direction:-1}),l=this._findBorderPositionCircle(this.from,t,{x:i,y:o,low:a,high:h,direction:1});r=Math.atan2(d.y-o,d.x-i),s=Math.atan2(l.y-o,l.x-i)}t.beginPath(),t.arc(i,o,n,r,s,!1),t.stroke(),this.disableShadow(t,e)}},{key:"getDistanceToEdge",value:function(t,e,i,o,n,r){if(this.from!=this.to)return this._getDistanceToEdge(t,e,i,o,n,r);var s=$c(this._getCircleData(void 0),3),a=s[0],h=s[1],d=s[2],l=a-n,c=h-r;return Math.abs(Math.sqrt(l*l+c*c)-d)}},{key:"_getDistanceToLine",value:function(t,e,i,o,n,r){var s=i-t,a=o-e,h=((n-t)*s+(r-e)*a)/(s*s+a*a);h>1?h=1:h<0&&(h=0);var d=t+h*s-n,l=e+h*a-r;return Math.sqrt(d*d+l*l)}},{key:"getArrowData",value:function(t,e,i,o,n,r){var s,a,h,d,l,c,u,f=r.width;"from"===e?(h=this.from,d=this.to,l=r.fromArrowScale<0,c=Math.abs(r.fromArrowScale),u=r.fromArrowType):"to"===e?(h=this.to,d=this.from,l=r.toArrowScale<0,c=Math.abs(r.toArrowScale),u=r.toArrowType):(h=this.to,d=this.from,l=r.middleArrowScale<0,c=Math.abs(r.middleArrowScale),u=r.middleArrowType);var p=15*c+3*f;if(h!=d){var v=p/G_(h.x-d.x,h.y-d.y);if("middle"!==e)if(!0===this.options.smooth.enabled){var g=this._findBorderPosition(h,t,{via:i}),y=this.getPoint(g.t+v*("from"===e?1:-1),i);s=Math.atan2(g.y-y.y,g.x-y.x),a=g}else s=Math.atan2(h.y-d.y,h.x-d.x),a=this._findBorderPosition(h,t);else{var m=(l?-v:v)/2,b=this.getPoint(.5+m,i),w=this.getPoint(.5-m,i);s=Math.atan2(b.y-w.y,b.x-w.x),a=this.getPoint(.5,i)}}else{var k=$c(this._getCircleData(t),3),_=k[0],x=k[1],E=k[2];if("from"===e){var O=this.options.selfReference.angle,C=this.options.selfReference.angle+Math.PI,S=this._findBorderPositionCircle(this.from,t,{x:_,y:x,low:O,high:C,direction:-1});s=-2*S.t*Math.PI+1.5*Math.PI+.1*Math.PI,a=S}else if("to"===e){var T=this.options.selfReference.angle,M=this.options.selfReference.angle+Math.PI,P=this._findBorderPositionCircle(this.from,t,{x:_,y:x,low:T,high:M,direction:1});s=-2*P.t*Math.PI+1.5*Math.PI-1.1*Math.PI,a=P}else{var D=this.options.selfReference.angle/(2*Math.PI);a=this._pointOnCircle(_,x,E,D),s=-2*D*Math.PI+1.5*Math.PI+.1*Math.PI}}return{point:a,core:{x:a.x-.9*p*Math.cos(s),y:a.y-.9*p*Math.sin(s)},angle:s,length:p,type:u}}},{key:"drawArrowHead",value:function(t,e,i,o,n){t.strokeStyle=this.getColor(t,e),t.fillStyle=t.strokeStyle,t.lineWidth=e.width,dx.draw(t,n)&&(this.enableShadow(t,e),Pv(t).call(t),this.disableShadow(t,e))}},{key:"enableShadow",value:function(t,e){!0===e.shadow&&(t.shadowColor=e.shadowColor,t.shadowBlur=e.shadowSize,t.shadowOffsetX=e.shadowX,t.shadowOffsetY=e.shadowY)}},{key:"disableShadow",value:function(t,e){!0===e.shadow&&(t.shadowColor="rgba(0,0,0,0)",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0)}},{key:"drawBackground",value:function(t,e){if(!1!==e.background){var i={strokeStyle:t.strokeStyle,lineWidth:t.lineWidth,dashes:t.dashes};t.strokeStyle=e.backgroundColor,t.lineWidth=e.backgroundSize,this.setStrokeDashed(t,e.backgroundDashes),t.stroke(),t.strokeStyle=i.strokeStyle,t.lineWidth=i.lineWidth,t.dashes=i.dashes,this.setStrokeDashed(t,e.dashes)}}},{key:"setStrokeDashed",value:function(t,e){if(!1!==e)if(void 0!==t.setLineDash){var i=hu(e)?e:[5,5];t.setLineDash(i)}else console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");else void 0!==t.setLineDash?t.setLineDash([]):console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.")}}]),t}();function fx(t,e){var i=mu(t);if(dl){var o=dl(t);e&&(o=Yf(o).call(o,(function(e){return wl(t,e).enumerable}))),i.push.apply(i,o)}return i}function px(t){for(var e=1;e<arguments.length;e++){var i,o,n=null!=arguments[e]?arguments[e]:{};e%2?Fu(i=fx(Object(n),!0)).call(i,(function(e){Zl(t,e,n[e])})):Dl?Rl(t,Dl(n)):Fu(o=fx(Object(n))).call(o,(function(e){Yl(t,e,wl(n,e))}))}return t}function vx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var gx=function(t){Rk(i,t);var e=vx(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"_findBorderPositionBezier",value:function(t,e){var i,o,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this._getViaCoordinates(),r=10,s=.2,a=!1,h=1,d=0,l=this.to,c=this.options.endPointOffset?this.options.endPointOffset.to:0;t.id===this.from.id&&(l=this.from,a=!0,c=this.options.endPointOffset?this.options.endPointOffset.from:0),!1===this.options.arrowStrikethrough&&(c=0);var u=0;do{o=.5*(d+h),i=this.getPoint(o,n);var f=Math.atan2(l.y-i.y,l.x-i.x),p=l.distanceToBorder(e,f)+c,v=Math.sqrt(Math.pow(i.x-l.x,2)+Math.pow(i.y-l.y,2)),g=p-v;if(Math.abs(g)<s)break;g<0?!1===a?d=o:h=o:!1===a?h=o:d=o,++u}while(d<=h&&u<r);return px(px({},i),{},{t:o})}},{key:"_getDistanceToBezierEdge",value:function(t,e,i,o,n,r,s){var a,h,d,l,c,u=1e9,f=t,p=e;for(h=1;h<10;h++)d=.1*h,l=Math.pow(1-d,2)*t+2*d*(1-d)*s.x+Math.pow(d,2)*i,c=Math.pow(1-d,2)*e+2*d*(1-d)*s.y+Math.pow(d,2)*o,h>0&&(u=(a=this._getDistanceToLine(f,p,l,c,n,r))<u?a:u),f=l,p=c;return u}},{key:"_bezierCurve",value:function(t,e,i,o){t.beginPath(),t.moveTo(this.fromPoint.x,this.fromPoint.y),null!=i&&null!=i.x?null!=o&&null!=o.x?t.bezierCurveTo(i.x,i.y,o.x,o.y,this.toPoint.x,this.toPoint.y):t.quadraticCurveTo(i.x,i.y,this.toPoint.x,this.toPoint.y):t.lineTo(this.toPoint.x,this.toPoint.y),this.drawBackground(t,e),this.enableShadow(t,e),t.stroke(),this.disableShadow(t,e)}},{key:"getViaNode",value:function(){return this._getViaCoordinates()}}]),i}(ux);function yx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var mx=function(t){Rk(i,t);var e=yx(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n)).via=r.via,r._boundFunction=function(){r.positionBezierNode()},r._body.emitter.on("_repositionBezierNodes",r._boundFunction),r}return $l(i,[{key:"setOptions",value:function(t){V_(Hk(i.prototype),"setOptions",this).call(this,t);var e=!1;this.options.physics!==t.physics&&(e=!0),this.options=t,this.id=this.options.id,this.from=this._body.nodes[this.options.from],this.to=this._body.nodes[this.options.to],this.setupSupportNode(),this.connect(),!0===e&&(this.via.setOptions({physics:this.options.physics}),this.positionBezierNode())}},{key:"connect",value:function(){this.from=this._body.nodes[this.options.from],this.to=this._body.nodes[this.options.to],void 0===this.from||void 0===this.to||!1===this.options.physics||this.from.id===this.to.id?this.via.setOptions({physics:!1}):this.via.setOptions({physics:!0})}},{key:"cleanup",value:function(){return this._body.emitter.off("_repositionBezierNodes",this._boundFunction),void 0!==this.via&&(delete this._body.nodes[this.via.id],this.via=void 0,!0)}},{key:"setupSupportNode",value:function(){if(void 0===this.via){var t="edgeId:"+this.id,e=this._body.functions.createNode({id:t,shape:"circle",physics:!0,hidden:!0});this._body.nodes[t]=e,this.via=e,this.via.parentEdgeId=this.id,this.positionBezierNode()}}},{key:"positionBezierNode",value:function(){void 0!==this.via&&void 0!==this.from&&void 0!==this.to?(this.via.x=.5*(this.from.x+this.to.x),this.via.y=.5*(this.from.y+this.to.y)):void 0!==this.via&&(this.via.x=0,this.via.y=0)}},{key:"_line",value:function(t,e,i){this._bezierCurve(t,e,i)}},{key:"_getViaCoordinates",value:function(){return this.via}},{key:"getViaNode",value:function(){return this.via}},{key:"getPoint",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.via;if(this.from===this.to){var i=this._getCircleData(),o=$c(i,3),n=o[0],r=o[1],s=o[2],a=2*Math.PI*(1-t);return{x:n+s*Math.sin(a),y:r+s-s*(1-Math.cos(a))}}return{x:Math.pow(1-t,2)*this.fromPoint.x+2*t*(1-t)*e.x+Math.pow(t,2)*this.toPoint.x,y:Math.pow(1-t,2)*this.fromPoint.y+2*t*(1-t)*e.y+Math.pow(t,2)*this.toPoint.y}}},{key:"_findBorderPosition",value:function(t,e){return this._findBorderPositionBezier(t,e,this.via)}},{key:"_getDistanceToEdge",value:function(t,e,i,o,n,r){return this._getDistanceToBezierEdge(t,e,i,o,n,r,this.via)}}]),i}(gx);function bx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var wx=function(t){Rk(i,t);var e=bx(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"_line",value:function(t,e,i){this._bezierCurve(t,e,i)}},{key:"getViaNode",value:function(){return this._getViaCoordinates()}},{key:"_getViaCoordinates",value:function(){var t,e,i=this.options.smooth.roundness,o=this.options.smooth.type,n=Math.abs(this.from.x-this.to.x),r=Math.abs(this.from.y-this.to.y);if("discrete"===o||"diagonalCross"===o){var s,a;s=a=n<=r?i*r:i*n,this.from.x>this.to.x&&(s=-s),this.from.y>=this.to.y&&(a=-a);var h=this.from.x+s,d=this.from.y+a;return"discrete"===o&&(n<=r?h=n<i*r?this.from.x:h:d=r<i*n?this.from.y:d),{x:h,y:d}}if("straightCross"===o){var l=(1-i)*n,c=(1-i)*r;return n<=r?(l=0,this.from.y<this.to.y&&(c=-c)):(this.from.x<this.to.x&&(l=-l),c=0),{x:this.to.x+l,y:this.to.y+c}}if("horizontal"===o){var u=(1-i)*n;return this.from.x<this.to.x&&(u=-u),{x:this.to.x+u,y:this.from.y}}if("vertical"===o){var f=(1-i)*r;return this.from.y<this.to.y&&(f=-f),{x:this.from.x,y:this.to.y+f}}if("curvedCW"===o){n=this.to.x-this.from.x,r=this.from.y-this.to.y;var p=Math.sqrt(n*n+r*r),v=Math.PI,g=(Math.atan2(r,n)+(.5*i+.5)*v)%(2*v);return{x:this.from.x+(.5*i+.5)*p*Math.sin(g),y:this.from.y+(.5*i+.5)*p*Math.cos(g)}}if("curvedCCW"===o){n=this.to.x-this.from.x,r=this.from.y-this.to.y;var y=Math.sqrt(n*n+r*r),m=Math.PI,b=(Math.atan2(r,n)+(.5*-i+.5)*m)%(2*m);return{x:this.from.x+(.5*i+.5)*y*Math.sin(b),y:this.from.y+(.5*i+.5)*y*Math.cos(b)}}t=e=n<=r?i*r:i*n,this.from.x>this.to.x&&(t=-t),this.from.y>=this.to.y&&(e=-e);var w=this.from.x+t,k=this.from.y+e;return n<=r?w=this.from.x<=this.to.x?this.to.x<w?this.to.x:w:this.to.x>w?this.to.x:w:k=this.from.y>=this.to.y?this.to.y>k?this.to.y:k:this.to.y<k?this.to.y:k,{x:w,y:k}}},{key:"_findBorderPosition",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._findBorderPositionBezier(t,e,i.via)}},{key:"_getDistanceToEdge",value:function(t,e,i,o,n,r){var s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:this._getViaCoordinates();return this._getDistanceToBezierEdge(t,e,i,o,n,r,s)}},{key:"getPoint",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._getViaCoordinates(),i=t,o=Math.pow(1-i,2)*this.fromPoint.x+2*i*(1-i)*e.x+Math.pow(i,2)*this.toPoint.x,n=Math.pow(1-i,2)*this.fromPoint.y+2*i*(1-i)*e.y+Math.pow(i,2)*this.toPoint.y;return{x:o,y:n}}}]),i}(gx);function kx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var _x=function(t){Rk(i,t);var e=kx(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"_getDistanceToBezierEdge2",value:function(t,e,i,o,n,r,s,a){for(var h=1e9,d=t,l=e,c=[0,0,0,0],u=1;u<10;u++){var f=.1*u;c[0]=Math.pow(1-f,3),c[1]=3*f*Math.pow(1-f,2),c[2]=3*Math.pow(f,2)*(1-f),c[3]=Math.pow(f,3);var p=c[0]*t+c[1]*s.x+c[2]*a.x+c[3]*i,v=c[0]*e+c[1]*s.y+c[2]*a.y+c[3]*o;if(u>0){var g=this._getDistanceToLine(d,l,p,v,n,r);h=g<h?g:h}d=p,l=v}return h}}]),i}(gx);function xx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Ex=function(t){Rk(i,t);var e=xx(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"_line",value:function(t,e,i){var o=i[0],n=i[1];this._bezierCurve(t,e,o,n)}},{key:"_getViaCoordinates",value:function(){var t,e,i,o,n=this.from.x-this.to.x,r=this.from.y-this.to.y,s=this.options.smooth.roundness;return(Math.abs(n)>Math.abs(r)||!0===this.options.smooth.forceDirection||"horizontal"===this.options.smooth.forceDirection)&&"vertical"!==this.options.smooth.forceDirection?(e=this.from.y,o=this.to.y,t=this.from.x-s*n,i=this.to.x+s*n):(e=this.from.y-s*r,o=this.to.y+s*r,t=this.from.x,i=this.to.x),[{x:t,y:e},{x:i,y:o}]}},{key:"getViaNode",value:function(){return this._getViaCoordinates()}},{key:"_findBorderPosition",value:function(t,e){return this._findBorderPositionBezier(t,e)}},{key:"_getDistanceToEdge",value:function(t,e,i,o,n,r){var s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:this._getViaCoordinates(),a=$c(s,2),h=a[0],d=a[1];return this._getDistanceToBezierEdge2(t,e,i,o,n,r,h,d)}},{key:"getPoint",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._getViaCoordinates(),i=$c(e,2),o=i[0],n=i[1],r=t,s=[Math.pow(1-r,3),3*r*Math.pow(1-r,2),3*Math.pow(r,2)*(1-r),Math.pow(r,3)],a=s[0]*this.fromPoint.x+s[1]*o.x+s[2]*n.x+s[3]*this.toPoint.x,h=s[0]*this.fromPoint.y+s[1]*o.y+s[2]*n.y+s[3]*this.toPoint.y;return{x:a,y:h}}}]),i}(_x);function Ox(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Cx=function(t){Rk(i,t);var e=Ox(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"_line",value:function(t,e){t.beginPath(),t.moveTo(this.fromPoint.x,this.fromPoint.y),t.lineTo(this.toPoint.x,this.toPoint.y),this.enableShadow(t,e),t.stroke(),this.disableShadow(t,e)}},{key:"getViaNode",value:function(){}},{key:"getPoint",value:function(t){return{x:(1-t)*this.fromPoint.x+t*this.toPoint.x,y:(1-t)*this.fromPoint.y+t*this.toPoint.y}}},{key:"_findBorderPosition",value:function(t,e){var i=this.to,o=this.from;t.id===this.from.id&&(i=this.from,o=this.to);var n=Math.atan2(i.y-o.y,i.x-o.x),r=i.x-o.x,s=i.y-o.y,a=Math.sqrt(r*r+s*s),h=(a-t.distanceToBorder(e,n))/a;return{x:(1-h)*o.x+h*i.x,y:(1-h)*o.y+h*i.y,t:0}}},{key:"_getDistanceToEdge",value:function(t,e,i,o,n,r){return this._getDistanceToLine(t,e,i,o,n,r)}}]),i}(ux),Sx=function(){function t(e,i,o,n,r){if(Xl(this,t),void 0===i)throw new Error("No body provided");this.options=Jy(n),this.globalOptions=n,this.defaultOptions=r,this.body=i,this.imagelist=o,this.id=void 0,this.fromId=void 0,this.toId=void 0,this.selected=!1,this.hover=!1,this.labelDirty=!0,this.baseWidth=this.options.width,this.baseFontSize=this.options.font.size,this.from=void 0,this.to=void 0,this.edgeType=void 0,this.connected=!1,this.labelModule=new gk(this.body,this.options,!0),this.setOptions(e)}return $l(t,[{key:"setOptions",value:function(e){if(e){var i=void 0!==e.physics&&this.options.physics!==e.physics||void 0!==e.hidden&&(this.options.hidden||!1)!==(e.hidden||!1)||void 0!==e.from&&this.options.from!==e.from||void 0!==e.to&&this.options.to!==e.to;t.parseOptions(this.options,e,!0,this.globalOptions),void 0!==e.id&&(this.id=e.id),void 0!==e.from&&(this.fromId=e.from),void 0!==e.to&&(this.toId=e.to),void 0!==e.title&&(this.title=e.title),void 0!==e.value&&(e.value=Yw(e.value));var o=[e,this.options,this.defaultOptions];return this.chooser=Jw("edge",o),this.updateLabelModule(e),i=this.updateEdgeType()||i,this._setInteractionWidths(),this.connect(),i}}},{key:"getFormattingValues",value:function(){var t=!0===this.options.arrows.to||!0===this.options.arrows.to.enabled,e=!0===this.options.arrows.from||!0===this.options.arrows.from.enabled,i=!0===this.options.arrows.middle||!0===this.options.arrows.middle.enabled,o=this.options.color.inherit,n={toArrow:t,toArrowScale:this.options.arrows.to.scaleFactor,toArrowType:this.options.arrows.to.type,toArrowSrc:this.options.arrows.to.src,toArrowImageWidth:this.options.arrows.to.imageWidth,toArrowImageHeight:this.options.arrows.to.imageHeight,middleArrow:i,middleArrowScale:this.options.arrows.middle.scaleFactor,middleArrowType:this.options.arrows.middle.type,middleArrowSrc:this.options.arrows.middle.src,middleArrowImageWidth:this.options.arrows.middle.imageWidth,middleArrowImageHeight:this.options.arrows.middle.imageHeight,fromArrow:e,fromArrowScale:this.options.arrows.from.scaleFactor,fromArrowType:this.options.arrows.from.type,fromArrowSrc:this.options.arrows.from.src,fromArrowImageWidth:this.options.arrows.from.imageWidth,fromArrowImageHeight:this.options.arrows.from.imageHeight,arrowStrikethrough:this.options.arrowStrikethrough,color:o?void 0:this.options.color.color,inheritsColor:o,opacity:this.options.color.opacity,hidden:this.options.hidden,length:this.options.length,shadow:this.options.shadow.enabled,shadowColor:this.options.shadow.color,shadowSize:this.options.shadow.size,shadowX:this.options.shadow.x,shadowY:this.options.shadow.y,dashes:this.options.dashes,width:this.options.width,background:this.options.background.enabled,backgroundColor:this.options.background.color,backgroundSize:this.options.background.size,backgroundDashes:this.options.background.dashes};if(this.selected||this.hover)if(!0===this.chooser){if(this.selected){var r=this.options.selectionWidth;"function"==typeof r?n.width=r(n.width):"number"==typeof r&&(n.width+=r),n.width=Math.max(n.width,.3/this.body.view.scale),n.color=this.options.color.highlight,n.shadow=this.options.shadow.enabled}else if(this.hover){var s=this.options.hoverWidth;"function"==typeof s?n.width=s(n.width):"number"==typeof s&&(n.width+=s),n.width=Math.max(n.width,.3/this.body.view.scale),n.color=this.options.color.hover,n.shadow=this.options.shadow.enabled}}else"function"==typeof this.chooser&&(this.chooser(n,this.options.id,this.selected,this.hover),void 0!==n.color&&(n.inheritsColor=!1),!1===n.shadow&&(n.shadowColor===this.options.shadow.color&&n.shadowSize===this.options.shadow.size&&n.shadowX===this.options.shadow.x&&n.shadowY===this.options.shadow.y||(n.shadow=!0)));else n.shadow=this.options.shadow.enabled,n.width=Math.max(n.width,.3/this.body.view.scale);return n}},{key:"updateLabelModule",value:function(t){var e=[t,this.options,this.globalOptions,this.defaultOptions];this.labelModule.update(this.options,e),void 0!==this.labelModule.baseSize&&(this.baseFontSize=this.labelModule.baseSize)}},{key:"updateEdgeType",value:function(){var t=this.options.smooth,e=!1,i=!0;return void 0!==this.edgeType&&((this.edgeType instanceof mx&&!0===t.enabled&&"dynamic"===t.type||this.edgeType instanceof Ex&&!0===t.enabled&&"cubicBezier"===t.type||this.edgeType instanceof wx&&!0===t.enabled&&"dynamic"!==t.type&&"cubicBezier"!==t.type||this.edgeType instanceof Cx&&!1===t.type.enabled)&&(i=!1),!0===i&&(e=this.cleanup())),!0===i?!0===t.enabled?"dynamic"===t.type?(e=!0,this.edgeType=new mx(this.options,this.body,this.labelModule)):"cubicBezier"===t.type?this.edgeType=new Ex(this.options,this.body,this.labelModule):this.edgeType=new wx(this.options,this.body,this.labelModule):this.edgeType=new Cx(this.options,this.body,this.labelModule):this.edgeType.setOptions(this.options),e}},{key:"connect",value:function(){this.disconnect(),this.from=this.body.nodes[this.fromId]||void 0,this.to=this.body.nodes[this.toId]||void 0,this.connected=void 0!==this.from&&void 0!==this.to,!0===this.connected?(this.from.attachEdge(this),this.to.attachEdge(this)):(this.from&&this.from.detachEdge(this),this.to&&this.to.detachEdge(this)),this.edgeType.connect()}},{key:"disconnect",value:function(){this.from&&(this.from.detachEdge(this),this.from=void 0),this.to&&(this.to.detachEdge(this),this.to=void 0),this.connected=!1}},{key:"getTitle",value:function(){return this.title}},{key:"isSelected",value:function(){return this.selected}},{key:"getValue",value:function(){return this.options.value}},{key:"setValueRange",value:function(t,e,i){if(void 0!==this.options.value){var o=this.options.scaling.customScalingFunction(t,e,i,this.options.value),n=this.options.scaling.max-this.options.scaling.min;if(!0===this.options.scaling.label.enabled){var r=this.options.scaling.label.max-this.options.scaling.label.min;this.options.font.size=this.options.scaling.label.min+o*r}this.options.width=this.options.scaling.min+o*n}else this.options.width=this.baseWidth,this.options.font.size=this.baseFontSize;this._setInteractionWidths(),this.updateLabelModule()}},{key:"_setInteractionWidths",value:function(){"function"==typeof this.options.hoverWidth?this.edgeType.hoverWidth=this.options.hoverWidth(this.options.width):this.edgeType.hoverWidth=this.options.hoverWidth+this.options.width,"function"==typeof this.options.selectionWidth?this.edgeType.selectionWidth=this.options.selectionWidth(this.options.width):this.edgeType.selectionWidth=this.options.selectionWidth+this.options.width}},{key:"draw",value:function(t){var e=this.getFormattingValues();if(!e.hidden){var i=this.edgeType.getViaNode();this.edgeType.drawLine(t,e,this.selected,this.hover,i),this.drawLabel(t,i)}}},{key:"drawArrows",value:function(t){var e=this.getFormattingValues();if(!e.hidden){var i=this.edgeType.getViaNode(),o={};this.edgeType.fromPoint=this.edgeType.from,this.edgeType.toPoint=this.edgeType.to,e.fromArrow&&(o.from=this.edgeType.getArrowData(t,"from",i,this.selected,this.hover,e),!1===e.arrowStrikethrough&&(this.edgeType.fromPoint=o.from.core),e.fromArrowSrc&&(o.from.image=this.imagelist.load(e.fromArrowSrc)),e.fromArrowImageWidth&&(o.from.imageWidth=e.fromArrowImageWidth),e.fromArrowImageHeight&&(o.from.imageHeight=e.fromArrowImageHeight)),e.toArrow&&(o.to=this.edgeType.getArrowData(t,"to",i,this.selected,this.hover,e),!1===e.arrowStrikethrough&&(this.edgeType.toPoint=o.to.core),e.toArrowSrc&&(o.to.image=this.imagelist.load(e.toArrowSrc)),e.toArrowImageWidth&&(o.to.imageWidth=e.toArrowImageWidth),e.toArrowImageHeight&&(o.to.imageHeight=e.toArrowImageHeight)),e.middleArrow&&(o.middle=this.edgeType.getArrowData(t,"middle",i,this.selected,this.hover,e),e.middleArrowSrc&&(o.middle.image=this.imagelist.load(e.middleArrowSrc)),e.middleArrowImageWidth&&(o.middle.imageWidth=e.middleArrowImageWidth),e.middleArrowImageHeight&&(o.middle.imageHeight=e.middleArrowImageHeight)),e.fromArrow&&this.edgeType.drawArrowHead(t,e,this.selected,this.hover,o.from),e.middleArrow&&this.edgeType.drawArrowHead(t,e,this.selected,this.hover,o.middle),e.toArrow&&this.edgeType.drawArrowHead(t,e,this.selected,this.hover,o.to)}}},{key:"drawLabel",value:function(t,e){if(void 0!==this.options.label){var i,o=this.from,n=this.to;if(this.labelModule.differentState(this.selected,this.hover)&&this.labelModule.getTextSize(t,this.selected,this.hover),o.id!=n.id){this.labelModule.pointToSelf=!1,i=this.edgeType.getPoint(.5,e),t.save();var r=this._getRotation(t);0!=r.angle&&(t.translate(r.x,r.y),t.rotate(r.angle)),this.labelModule.draw(t,i.x,i.y,this.selected,this.hover),t.restore()}else{this.labelModule.pointToSelf=!0;var s=ik(t,this.options.selfReference.angle,this.options.selfReference.size,o);i=this._pointOnCircle(s.x,s.y,this.options.selfReference.size,this.options.selfReference.angle),this.labelModule.draw(t,i.x,i.y,this.selected,this.hover)}}}},{key:"getItemsOnPoint",value:function(t){var e=[];if(this.labelModule.visible()){var i=this._getRotation();tk(this.labelModule.getSize(),t,i)&&e.push({edgeId:this.id,labelId:0})}var o={left:t.x,top:t.y};return this.isOverlappingWith(o)&&e.push({edgeId:this.id}),e}},{key:"isOverlappingWith",value:function(t){if(this.connected){var e=this.from.x,i=this.from.y,o=this.to.x,n=this.to.y,r=t.left,s=t.top;return this.edgeType.getDistanceToEdge(e,i,o,n,r,s)<10}return!1}},{key:"_getRotation",value:function(t){var e=this.edgeType.getViaNode(),i=this.edgeType.getPoint(.5,e);void 0!==t&&this.labelModule.calculateLabelSize(t,this.selected,this.hover,i.x,i.y);var o={x:i.x,y:this.labelModule.size.yLine,angle:0};if(!this.labelModule.visible())return o;if("horizontal"===this.options.font.align)return o;var n=this.from.y-this.to.y,r=this.from.x-this.to.x,s=Math.atan2(n,r);return(s<-1&&r<0||s>0&&r<0)&&(s+=Math.PI),o.angle=s,o}},{key:"_pointOnCircle",value:function(t,e,i,o){return{x:t+i*Math.cos(o),y:e-i*Math.sin(o)}}},{key:"select",value:function(){this.selected=!0}},{key:"unselect",value:function(){this.selected=!1}},{key:"cleanup",value:function(){return this.edgeType.cleanup()}},{key:"remove",value:function(){this.cleanup(),this.disconnect(),delete this.body.edges[this.id]}},{key:"endPointsValid",value:function(){return void 0!==this.body.nodes[this.fromId]&&void 0!==this.body.nodes[this.toId]}}],[{key:"parseOptions",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=["endPointOffset","arrowStrikethrough","id","from","hidden","hoverWidth","labelHighlightBold","length","line","opacity","physics","scaling","selectionWidth","selfReferenceSize","selfReference","to","title","value","width","font","chosen","widthConstraint"];if(Ny(r,t,e,i),void 0!==e.endPointOffset&&void 0!==e.endPointOffset.from&&(Mw(e.endPointOffset.from)?t.endPointOffset.from=e.endPointOffset.from:(t.endPointOffset.from=void 0!==o.endPointOffset.from?o.endPointOffset.from:0,console.error("endPointOffset.from is not a valid number"))),void 0!==e.endPointOffset&&void 0!==e.endPointOffset.to&&(Mw(e.endPointOffset.to)?t.endPointOffset.to=e.endPointOffset.to:(t.endPointOffset.to=void 0!==o.endPointOffset.to?o.endPointOffset.to:0,console.error("endPointOffset.to is not a valid number"))),ek(e.label)?t.label=e.label:ek(t.label)||(t.label=void 0),tm(t,e,"smooth",o),tm(t,e,"shadow",o),tm(t,e,"background",o),void 0!==e.dashes&&null!==e.dashes?t.dashes=e.dashes:!0===i&&null===e.dashes&&(t.dashes=Hp(o.dashes)),void 0!==e.scaling&&null!==e.scaling?(void 0!==e.scaling.min&&(t.scaling.min=e.scaling.min),void 0!==e.scaling.max&&(t.scaling.max=e.scaling.max),tm(t.scaling,e.scaling,"label",o.scaling)):!0===i&&null===e.scaling&&(t.scaling=Hp(o.scaling)),void 0!==e.arrows&&null!==e.arrows)if("string"==typeof e.arrows){var s=e.arrows.toLowerCase();t.arrows.to.enabled=-1!=zp(s).call(s,"to"),t.arrows.middle.enabled=-1!=zp(s).call(s,"middle"),t.arrows.from.enabled=-1!=zp(s).call(s,"from")}else{if("object"!==Qc(e.arrows))throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:"+hv(e.arrows));tm(t.arrows,e.arrows,"to",o.arrows),tm(t.arrows,e.arrows,"middle",o.arrows),tm(t.arrows,e.arrows,"from",o.arrows)}else!0===i&&null===e.arrows&&(t.arrows=Hp(o.arrows));if(void 0!==e.color&&null!==e.color){var a=By(e.color)?{color:e.color,highlight:e.color,hover:e.color,inherit:!1,opacity:1}:e.color,h=t.color;if(n)Ry(h,o.color,!1,i);else for(var d in h)Object.prototype.hasOwnProperty.call(h,d)&&delete h[d];if(By(h))h.color=h,h.highlight=h,h.hover=h,h.inherit=!1,void 0===a.opacity&&(h.opacity=1);else{var l=!1;void 0!==a.color&&(h.color=a.color,l=!0),void 0!==a.highlight&&(h.highlight=a.highlight,l=!0),void 0!==a.hover&&(h.hover=a.hover,l=!0),void 0!==a.inherit&&(h.inherit=a.inherit),void 0!==a.opacity&&(h.opacity=Math.min(1,Math.max(0,a.opacity))),!0===l?h.inherit=!1:void 0===h.inherit&&(h.inherit="from")}}else!0===i&&null===e.color&&(t.color=Jy(o.color));!0===i&&null===e.font&&(t.font=Jy(o.font)),Object.prototype.hasOwnProperty.call(e,"selfReferenceSize")&&(console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}"),t.selfReference.size=e.selfReferenceSize)}}]),t}(),Tx=function(){function t(e,i,o){var n,r=this;Xl(this,t),this.body=e,this.images=i,this.groups=o,this.body.functions.createEdge=Fo(n=this.create).call(n,this),this.edgesListeners={add:function(t,e){r.add(e.items)},update:function(t,e){r.update(e.items)},remove:function(t,e){r.remove(e.items)}},this.options={},this.defaultOptions={arrows:{to:{enabled:!1,scaleFactor:1,type:"arrow"},middle:{enabled:!1,scaleFactor:1,type:"arrow"},from:{enabled:!1,scaleFactor:1,type:"arrow"}},endPointOffset:{from:0,to:0},arrowStrikethrough:!0,color:{color:"#848484",highlight:"#848484",hover:"#848484",inherit:"from",opacity:1},dashes:!1,font:{color:"#343434",size:14,face:"arial",background:"none",strokeWidth:2,strokeColor:"#ffffff",align:"horizontal",multi:!1,vadjust:0,bold:{mod:"bold"},boldital:{mod:"bold italic"},ital:{mod:"italic"},mono:{mod:"",size:15,face:"courier new",vadjust:2}},hidden:!1,hoverWidth:1.5,label:void 0,labelHighlightBold:!0,length:void 0,physics:!0,scaling:{min:1,max:15,label:{enabled:!0,min:14,max:30,maxVisible:30,drawThreshold:5},customScalingFunction:function(t,e,i,o){if(e===t)return.5;var n=1/(e-t);return Math.max(0,(o-t)*n)}},selectionWidth:1.5,selfReference:{size:20,angle:Math.PI/4,renderBehindTheNode:!0},shadow:{enabled:!1,color:"rgba(0,0,0,0.5)",size:10,x:5,y:5},background:{enabled:!1,color:"rgba(111,111,111,1)",size:10,dashes:!1},smooth:{enabled:!0,type:"dynamic",forceDirection:"none",roundness:.5},title:void 0,width:1,value:void 0},Ry(this.options,this.defaultOptions),this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t,e,i=this;this.body.emitter.on("_forceDisableDynamicCurves",(function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];"dynamic"===t&&(t="continuous");var o=!1;for(var n in i.body.edges)if(Object.prototype.hasOwnProperty.call(i.body.edges,n)){var r=i.body.edges[n],s=i.body.data.edges.get(n);if(null!=s){var a=s.smooth;void 0!==a&&!0===a.enabled&&"dynamic"===a.type&&(void 0===t?r.setOptions({smooth:!1}):r.setOptions({smooth:{type:t}}),o=!0)}}!0===e&&!0===o&&i.body.emitter.emit("_dataChanged")})),this.body.emitter.on("_dataUpdated",(function(){i.reconnectEdges()})),this.body.emitter.on("refreshEdges",Fo(t=this.refresh).call(t,this)),this.body.emitter.on("refresh",Fo(e=this.refresh).call(e,this)),this.body.emitter.on("destroy",(function(){Wy(i.edgesListeners,(function(t,e){i.body.data.edges&&i.body.data.edges.off(e,t)})),delete i.body.functions.createEdge,delete i.edgesListeners.add,delete i.edgesListeners.update,delete i.edgesListeners.remove,delete i.edgesListeners}))}},{key:"setOptions",value:function(t){if(void 0!==t){Sx.parseOptions(this.options,t,!0,this.defaultOptions,!0);var e=!1;if(void 0!==t.smooth)for(var i in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges,i)&&(e=this.body.edges[i].updateEdgeType()||e);if(void 0!==t.font)for(var o in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges,o)&&this.body.edges[o].updateLabelModule();void 0===t.hidden&&void 0===t.physics&&!0!==e||this.body.emitter.emit("_dataChanged")}}},{key:"setData",value:function(t){var i=this,o=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.body.data.edges;if(e.isDataViewLike("id",t))this.body.data.edges=t;else if(hu(t))this.body.data.edges=new e.DataSet,this.body.data.edges.add(t);else{if(t)throw new TypeError("Array or DataSet expected");this.body.data.edges=new e.DataSet}if(n&&Wy(this.edgesListeners,(function(t,e){n.off(e,t)})),this.body.edges={},this.body.data.edges){Wy(this.edgesListeners,(function(t,e){i.body.data.edges.on(e,t)}));var r=this.body.data.edges.getIds();this.add(r,!0)}this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"),!1===o&&this.body.emitter.emit("_dataChanged")}},{key:"add",value:function(t){for(var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=this.body.edges,o=this.body.data.edges,n=0;n<t.length;n++){var r=t[n],s=i[r];s&&s.disconnect();var a=o.get(r,{showInternalIds:!0});i[r]=this.create(a)}this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"),!1===e&&this.body.emitter.emit("_dataChanged")}},{key:"update",value:function(t){for(var e=this.body.edges,i=this.body.data.edges,o=!1,n=0;n<t.length;n++){var r=t[n],s=i.get(r),a=e[r];void 0!==a?(a.disconnect(),o=a.setOptions(s)||o,a.connect()):(this.body.edges[r]=this.create(s),o=!0)}!0===o?(this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"),this.body.emitter.emit("_dataChanged")):this.body.emitter.emit("_dataUpdated")}},{key:"remove",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(0!==t.length){var i=this.body.edges;Wy(t,(function(t){var e=i[t];void 0!==e&&e.remove()})),e&&this.body.emitter.emit("_dataChanged")}}},{key:"refresh",value:function(){var t=this;Wy(this.body.edges,(function(e,i){var o=t.body.data.edges.get(i);void 0!==o&&e.setOptions(o)}))}},{key:"create",value:function(t){return new Sx(t,this.body,this.images,this.options,this.defaultOptions)}},{key:"reconnectEdges",value:function(){var t,e=this.body.nodes,i=this.body.edges;for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&(e[t].edges=[]);for(t in i)if(Object.prototype.hasOwnProperty.call(i,t)){var o=i[t];o.from=null,o.to=null,o.connect()}}},{key:"getConnectedNodes",value:function(t){var e=[];if(void 0!==this.body.edges[t]){var i=this.body.edges[t];void 0!==i.fromId&&e.push(i.fromId),void 0!==i.toId&&e.push(i.toId)}return e}},{key:"_updateState",value:function(){this._addMissingEdges(),this._removeInvalidEdges()}},{key:"_removeInvalidEdges",value:function(){var t=this,e=[];Wy(this.body.edges,(function(i,o){var n=t.body.nodes[i.toId],r=t.body.nodes[i.fromId];void 0!==n&&!0===n.isCluster||void 0!==r&&!0===r.isCluster||void 0!==n&&void 0!==r||e.push(o)})),this.remove(e,!1)}},{key:"_addMissingEdges",value:function(){var t=this.body.data.edges;if(null!=t){var e=this.body.edges,i=[];Fu(t).call(t,(function(t,o){void 0===e[o]&&i.push(o)})),this.add(i,!0)}}}]),t}(),Mx=function(){function t(e,i,o){Xl(this,t),this.body=e,this.physicsBody=i,this.barnesHutTree,this.setOptions(o),this._rng=_y("BARNES HUT SOLVER")}return $l(t,[{key:"setOptions",value:function(t){this.options=t,this.thetaInversed=1/this.options.theta,this.overlapAvoidanceFactor=1-Math.max(0,Math.min(1,this.options.avoidOverlap))}},{key:"solve",value:function(){if(0!==this.options.gravitationalConstant&&this.physicsBody.physicsNodeIndices.length>0){var t,e=this.body.nodes,i=this.physicsBody.physicsNodeIndices,o=i.length,n=this._formBarnesHutTree(e,i);this.barnesHutTree=n;for(var r=0;r<o;r++)(t=e[i[r]]).options.mass>0&&this._getForceContributions(n.root,t)}}},{key:"_getForceContributions",value:function(t,e){this._getForceContribution(t.children.NW,e),this._getForceContribution(t.children.NE,e),this._getForceContribution(t.children.SW,e),this._getForceContribution(t.children.SE,e)}},{key:"_getForceContribution",value:function(t,e){if(t.childrenCount>0){var i=t.centerOfMass.x-e.x,o=t.centerOfMass.y-e.y,n=Math.sqrt(i*i+o*o);n*t.calcSize>this.thetaInversed?this._calculateForces(n,i,o,e,t):4===t.childrenCount?this._getForceContributions(t,e):t.children.data.id!=e.id&&this._calculateForces(n,i,o,e,t)}}},{key:"_calculateForces",value:function(t,e,i,o,n){0===t&&(e=t=.1),this.overlapAvoidanceFactor<1&&o.shape.radius&&(t=Math.max(.1+this.overlapAvoidanceFactor*o.shape.radius,t-o.shape.radius));var r=this.options.gravitationalConstant*n.mass*o.options.mass/Math.pow(t,3),s=e*r,a=i*r;this.physicsBody.forces[o.id].x+=s,this.physicsBody.forces[o.id].y+=a}},{key:"_formBarnesHutTree",value:function(t,e){for(var i,o=e.length,n=t[e[0]].x,r=t[e[0]].y,s=t[e[0]].x,a=t[e[0]].y,h=1;h<o;h++){var d=t[e[h]],l=d.x,c=d.y;d.options.mass>0&&(l<n&&(n=l),l>s&&(s=l),c<r&&(r=c),c>a&&(a=c))}var u=Math.abs(s-n)-Math.abs(a-r);u>0?(r-=.5*u,a+=.5*u):(n+=.5*u,s-=.5*u);var f=Math.max(1e-5,Math.abs(s-n)),p=.5*f,v=.5*(n+s),g=.5*(r+a),y={root:{centerOfMass:{x:0,y:0},mass:0,range:{minX:v-p,maxX:v+p,minY:g-p,maxY:g+p},size:f,calcSize:1/f,children:{data:null},maxWidth:0,level:0,childrenCount:4}};this._splitBranch(y.root);for(var m=0;m<o;m++)(i=t[e[m]]).options.mass>0&&this._placeInTree(y.root,i);return y}},{key:"_updateBranchMass",value:function(t,e){var i=t.centerOfMass,o=t.mass+e.options.mass,n=1/o;i.x=i.x*t.mass+e.x*e.options.mass,i.x*=n,i.y=i.y*t.mass+e.y*e.options.mass,i.y*=n,t.mass=o;var r=Math.max(Math.max(e.height,e.radius),e.width);t.maxWidth=t.maxWidth<r?r:t.maxWidth}},{key:"_placeInTree",value:function(t,e,i){1==i&&void 0!==i||this._updateBranchMass(t,e);var o,n=t.children.NW.range;o=n.maxX>e.x?n.maxY>e.y?"NW":"SW":n.maxY>e.y?"NE":"SE",this._placeInRegion(t,e,o)}},{key:"_placeInRegion",value:function(t,e,i){var o=t.children[i];switch(o.childrenCount){case 0:o.children.data=e,o.childrenCount=1,this._updateBranchMass(o,e);break;case 1:o.children.data.x===e.x&&o.children.data.y===e.y?(e.x+=this._rng(),e.y+=this._rng()):(this._splitBranch(o),this._placeInTree(o,e));break;case 4:this._placeInTree(o,e)}}},{key:"_splitBranch",value:function(t){var e=null;1===t.childrenCount&&(e=t.children.data,t.mass=0,t.centerOfMass.x=0,t.centerOfMass.y=0),t.childrenCount=4,t.children.data=null,this._insertRegion(t,"NW"),this._insertRegion(t,"NE"),this._insertRegion(t,"SW"),this._insertRegion(t,"SE"),null!=e&&this._placeInTree(t,e)}},{key:"_insertRegion",value:function(t,e){var i,o,n,r,s=.5*t.size;switch(e){case"NW":i=t.range.minX,o=t.range.minX+s,n=t.range.minY,r=t.range.minY+s;break;case"NE":i=t.range.minX+s,o=t.range.maxX,n=t.range.minY,r=t.range.minY+s;break;case"SW":i=t.range.minX,o=t.range.minX+s,n=t.range.minY+s,r=t.range.maxY;break;case"SE":i=t.range.minX+s,o=t.range.maxX,n=t.range.minY+s,r=t.range.maxY}t.children[e]={centerOfMass:{x:0,y:0},mass:0,range:{minX:i,maxX:o,minY:n,maxY:r},size:.5*t.size,calcSize:2*t.calcSize,children:{data:null},maxWidth:0,level:t.level+1,childrenCount:0}}},{key:"_debug",value:function(t,e){void 0!==this.barnesHutTree&&(t.lineWidth=1,this._drawBranch(this.barnesHutTree.root,t,e))}},{key:"_drawBranch",value:function(t,e,i){void 0===i&&(i="#FF0000"),4===t.childrenCount&&(this._drawBranch(t.children.NW,e),this._drawBranch(t.children.NE,e),this._drawBranch(t.children.SE,e),this._drawBranch(t.children.SW,e)),e.strokeStyle=i,e.beginPath(),e.moveTo(t.range.minX,t.range.minY),e.lineTo(t.range.maxX,t.range.minY),e.stroke(),e.beginPath(),e.moveTo(t.range.maxX,t.range.minY),e.lineTo(t.range.maxX,t.range.maxY),e.stroke(),e.beginPath(),e.moveTo(t.range.maxX,t.range.maxY),e.lineTo(t.range.minX,t.range.maxY),e.stroke(),e.beginPath(),e.moveTo(t.range.minX,t.range.maxY),e.lineTo(t.range.minX,t.range.minY),e.stroke()}}]),t}(),Px=function(){function t(e,i,o){Xl(this,t),this._rng=_y("REPULSION SOLVER"),this.body=e,this.physicsBody=i,this.setOptions(o)}return $l(t,[{key:"setOptions",value:function(t){this.options=t}},{key:"solve",value:function(){for(var t,e,i,o,n,r,s,a,h=this.body.nodes,d=this.physicsBody.physicsNodeIndices,l=this.physicsBody.forces,c=this.options.nodeDistance,u=-2/3/c,f=0;f<d.length-1;f++){s=h[d[f]];for(var p=f+1;p<d.length;p++)t=(a=h[d[p]]).x-s.x,e=a.y-s.y,0===(i=Math.sqrt(t*t+e*e))&&(t=i=.1*this._rng()),i<2*c&&(r=i<.5*c?1:u*i+1.3333333333333333,o=t*(r/=i),n=e*r,l[s.id].x-=o,l[s.id].y-=n,l[a.id].x+=o,l[a.id].y+=n)}}}]),t}(),Dx=function(){function t(e,i,o){Xl(this,t),this.body=e,this.physicsBody=i,this.setOptions(o)}return $l(t,[{key:"setOptions",value:function(t){this.options=t,this.overlapAvoidanceFactor=Math.max(0,Math.min(1,this.options.avoidOverlap||0))}},{key:"solve",value:function(){for(var t=this.body.nodes,e=this.physicsBody.physicsNodeIndices,i=this.physicsBody.forces,o=this.options.nodeDistance,n=0;n<e.length-1;n++)for(var r=t[e[n]],s=n+1;s<e.length;s++){var a=t[e[s]];if(r.level===a.level){var h=o+this.overlapAvoidanceFactor*((r.shape.radius||0)/2+(a.shape.radius||0)/2),d=a.x-r.x,l=a.y-r.y,c=Math.sqrt(d*d+l*l),u=void 0;u=c<h?-Math.pow(.05*c,2)+Math.pow(.05*h,2):0,0!==c&&(u/=c);var f=d*u,p=l*u;i[r.id].x-=f,i[r.id].y-=p,i[a.id].x+=f,i[a.id].y+=p}}}}]),t}(),Bx=function(){function t(e,i,o){Xl(this,t),this.body=e,this.physicsBody=i,this.setOptions(o)}return $l(t,[{key:"setOptions",value:function(t){this.options=t}},{key:"solve",value:function(){for(var t,e,i,o,n,r=this.physicsBody.physicsEdgeIndices,s=this.body.edges,a=0;a<r.length;a++)!0===(e=s[r[a]]).connected&&e.toId!==e.fromId&&void 0!==this.body.nodes[e.toId]&&void 0!==this.body.nodes[e.fromId]&&(void 0!==e.edgeType.via?(t=void 0===e.options.length?this.options.springLength:e.options.length,i=e.to,o=e.edgeType.via,n=e.from,this._calculateSpringForce(i,o,.5*t),this._calculateSpringForce(o,n,.5*t)):(t=void 0===e.options.length?1.5*this.options.springLength:e.options.length,this._calculateSpringForce(e.from,e.to,t)))}},{key:"_calculateSpringForce",value:function(t,e,i){var o=t.x-e.x,n=t.y-e.y,r=Math.max(Math.sqrt(o*o+n*n),.01),s=this.options.springConstant*(i-r)/r,a=o*s,h=n*s;void 0!==this.physicsBody.forces[t.id]&&(this.physicsBody.forces[t.id].x+=a,this.physicsBody.forces[t.id].y+=h),void 0!==this.physicsBody.forces[e.id]&&(this.physicsBody.forces[e.id].x-=a,this.physicsBody.forces[e.id].y-=h)}}]),t}(),Ix=function(){function t(e,i,o){Xl(this,t),this.body=e,this.physicsBody=i,this.setOptions(o)}return $l(t,[{key:"setOptions",value:function(t){this.options=t}},{key:"solve",value:function(){for(var t,e,i,o,n,r,s,a,h,d,l=this.body.edges,c=.5,u=this.physicsBody.physicsEdgeIndices,f=this.physicsBody.physicsNodeIndices,p=this.physicsBody.forces,v=0;v<f.length;v++){var g=f[v];p[g].springFx=0,p[g].springFy=0}for(var y=0;y<u.length;y++)!0===(e=l[u[y]]).connected&&(t=void 0===e.options.length?this.options.springLength:e.options.length,i=e.from.x-e.to.x,o=e.from.y-e.to.y,a=0===(a=Math.sqrt(i*i+o*o))?.01:a,n=i*(s=this.options.springConstant*(t-a)/a),r=o*s,e.to.level!=e.from.level?(void 0!==p[e.toId]&&(p[e.toId].springFx-=n,p[e.toId].springFy-=r),void 0!==p[e.fromId]&&(p[e.fromId].springFx+=n,p[e.fromId].springFy+=r)):(void 0!==p[e.toId]&&(p[e.toId].x-=c*n,p[e.toId].y-=c*r),void 0!==p[e.fromId]&&(p[e.fromId].x+=c*n,p[e.fromId].y+=c*r)));s=1;for(var m=0;m<f.length;m++){var b=f[m];h=Math.min(s,Math.max(-s,p[b].springFx)),d=Math.min(s,Math.max(-s,p[b].springFy)),p[b].x+=h,p[b].y+=d}for(var w=0,k=0,_=0;_<f.length;_++){var x=f[_];w+=p[x].x,k+=p[x].y}for(var E=w/f.length,O=k/f.length,C=0;C<f.length;C++){var S=f[C];p[S].x-=E,p[S].y-=O}}}]),t}(),zx=function(){function t(e,i,o){Xl(this,t),this.body=e,this.physicsBody=i,this.setOptions(o)}return $l(t,[{key:"setOptions",value:function(t){this.options=t}},{key:"solve",value:function(){for(var t,e,i,o,n=this.body.nodes,r=this.physicsBody.physicsNodeIndices,s=this.physicsBody.forces,a=0;a<r.length;a++){t=-(o=n[r[a]]).x,e=-o.y,i=Math.sqrt(t*t+e*e),this._calculateForces(i,t,e,s,o)}}},{key:"_calculateForces",value:function(t,e,i,o,n){var r=0===t?0:this.options.centralGravity/t;o[n.id].x=e*r,o[n.id].y=i*r}}]),t}();function Fx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Nx=function(t){Rk(i,t);var e=Fx(i);function i(t,o,n){var r;return Xl(this,i),(r=e.call(this,t,o,n))._rng=_y("FORCE ATLAS 2 BASED REPULSION SOLVER"),r}return $l(i,[{key:"_calculateForces",value:function(t,e,i,o,n){0===t&&(e=t=.1*this._rng()),this.overlapAvoidanceFactor<1&&o.shape.radius&&(t=Math.max(.1+this.overlapAvoidanceFactor*o.shape.radius,t-o.shape.radius));var r=o.edges.length+1,s=this.options.gravitationalConstant*n.mass*o.options.mass*r/Math.pow(t,2),a=e*s,h=i*s;this.physicsBody.forces[o.id].x+=a,this.physicsBody.forces[o.id].y+=h}}]),i}(Mx);function Ax(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var Rx,jx=function(t){Rk(i,t);var e=Ax(i);function i(t,o,n){return Xl(this,i),e.call(this,t,o,n)}return $l(i,[{key:"_calculateForces",value:function(t,e,i,o,n){if(t>0){var r=n.edges.length+1,s=this.options.centralGravity*r*n.options.mass;o[n.id].x=e*s,o[n.id].y=i*s}}}]),i}(zx),Lx=function(){function t(e){Xl(this,t),this.body=e,this.physicsBody={physicsNodeIndices:[],physicsEdgeIndices:[],forces:{},velocities:{}},this.physicsEnabled=!0,this.simulationInterval=1e3/60,this.requiresTimeout=!0,this.previousStates={},this.referenceState={},this.freezeCache={},this.renderTimer=void 0,this.adaptiveTimestep=!1,this.adaptiveTimestepEnabled=!1,this.adaptiveCounter=0,this.adaptiveInterval=3,this.stabilized=!1,this.startedStabilization=!1,this.stabilizationIterations=0,this.ready=!1,this.options={},this.defaultOptions={enabled:!0,barnesHut:{theta:.5,gravitationalConstant:-2e3,centralGravity:.3,springLength:95,springConstant:.04,damping:.09,avoidOverlap:0},forceAtlas2Based:{theta:.5,gravitationalConstant:-50,centralGravity:.01,springConstant:.08,springLength:100,damping:.4,avoidOverlap:0},repulsion:{centralGravity:.2,springLength:200,springConstant:.05,nodeDistance:100,damping:.09,avoidOverlap:0},hierarchicalRepulsion:{centralGravity:0,springLength:100,springConstant:.01,nodeDistance:120,damping:.09},maxVelocity:50,minVelocity:.75,solver:"barnesHut",stabilization:{enabled:!0,iterations:1e3,updateInterval:50,onlyDynamicEdges:!1,fit:!0},timestep:.5,adaptiveTimestep:!0,wind:{x:0,y:0}},fo(this.options,this.defaultOptions),this.timestep=.5,this.layoutFailed=!1,this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t=this;this.body.emitter.on("initPhysics",(function(){t.initPhysics()})),this.body.emitter.on("_layoutFailed",(function(){t.layoutFailed=!0})),this.body.emitter.on("resetPhysics",(function(){t.stopSimulation(),t.ready=!1})),this.body.emitter.on("disablePhysics",(function(){t.physicsEnabled=!1,t.stopSimulation()})),this.body.emitter.on("restorePhysics",(function(){t.setOptions(t.options),!0===t.ready&&t.startSimulation()})),this.body.emitter.on("startSimulation",(function(){!0===t.ready&&t.startSimulation()})),this.body.emitter.on("stopSimulation",(function(){t.stopSimulation()})),this.body.emitter.on("destroy",(function(){t.stopSimulation(!1),t.body.emitter.off()})),this.body.emitter.on("_dataChanged",(function(){t.updatePhysicsData()}))}},{key:"setOptions",value:function(t){if(void 0!==t)if(!1===t)this.options.enabled=!1,this.physicsEnabled=!1,this.stopSimulation();else if(!0===t)this.options.enabled=!0,this.physicsEnabled=!0,this.startSimulation();else{this.physicsEnabled=!0,Ay(["stabilization"],this.options,t),tm(this.options,t,"stabilization"),void 0===t.enabled&&(this.options.enabled=!0),!1===this.options.enabled&&(this.physicsEnabled=!1,this.stopSimulation());var e=this.options.wind;e&&(("number"!=typeof e.x||Cw(e.x))&&(e.x=0),("number"!=typeof e.y||Cw(e.y))&&(e.y=0)),this.timestep=this.options.timestep}this.init()}},{key:"init",value:function(){var t;"forceAtlas2Based"===this.options.solver?(t=this.options.forceAtlas2Based,this.nodesSolver=new Nx(this.body,this.physicsBody,t),this.edgesSolver=new Bx(this.body,this.physicsBody,t),this.gravitySolver=new jx(this.body,this.physicsBody,t)):"repulsion"===this.options.solver?(t=this.options.repulsion,this.nodesSolver=new Px(this.body,this.physicsBody,t),this.edgesSolver=new Bx(this.body,this.physicsBody,t),this.gravitySolver=new zx(this.body,this.physicsBody,t)):"hierarchicalRepulsion"===this.options.solver?(t=this.options.hierarchicalRepulsion,this.nodesSolver=new Dx(this.body,this.physicsBody,t),this.edgesSolver=new Ix(this.body,this.physicsBody,t),this.gravitySolver=new zx(this.body,this.physicsBody,t)):(t=this.options.barnesHut,this.nodesSolver=new Mx(this.body,this.physicsBody,t),this.edgesSolver=new Bx(this.body,this.physicsBody,t),this.gravitySolver=new zx(this.body,this.physicsBody,t)),this.modelOptions=t}},{key:"initPhysics",value:function(){!0===this.physicsEnabled&&!0===this.options.enabled?!0===this.options.stabilization.enabled?this.stabilize():(this.stabilized=!1,this.ready=!0,this.body.emitter.emit("fit",{},this.layoutFailed),this.startSimulation()):(this.ready=!0,this.body.emitter.emit("fit"))}},{key:"startSimulation",value:function(){var t;!0===this.physicsEnabled&&!0===this.options.enabled?(this.stabilized=!1,this.adaptiveTimestep=!1,this.body.emitter.emit("_resizeNodes"),void 0===this.viewFunction&&(this.viewFunction=Fo(t=this.simulationStep).call(t,this),this.body.emitter.on("initRedraw",this.viewFunction),this.body.emitter.emit("_startRendering"))):this.body.emitter.emit("_redraw")}},{key:"stopSimulation",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.stabilized=!0,!0===t&&this._emitStabilized(),void 0!==this.viewFunction&&(this.body.emitter.off("initRedraw",this.viewFunction),this.viewFunction=void 0,!0===t&&this.body.emitter.emit("_stopRendering"))}},{key:"simulationStep",value:function(){var t=xu();this.physicsTick(),(xu()-t<.4*this.simulationInterval||!0===this.runDoubleSpeed)&&!1===this.stabilized&&(this.physicsTick(),this.runDoubleSpeed=!0),!0===this.stabilized&&this.stopSimulation()}},{key:"_emitStabilized",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.stabilizationIterations;(this.stabilizationIterations>1||!0===this.startedStabilization)&&bv((function(){t.body.emitter.emit("stabilized",{iterations:e}),t.startedStabilization=!1,t.stabilizationIterations=0}),0)}},{key:"physicsStep",value:function(){this.gravitySolver.solve(),this.nodesSolver.solve(),this.edgesSolver.solve(),this.moveNodes()}},{key:"adjustTimeStep",value:function(){!0===this._evaluateStepQuality()?this.timestep=1.2*this.timestep:this.timestep/1.2<this.options.timestep?this.timestep=this.options.timestep:(this.adaptiveCounter=-1,this.timestep=Math.max(this.options.timestep,this.timestep/1.2))}},{key:"physicsTick",value:function(){if(this._startStabilizing(),!0!==this.stabilized){if(!0===this.adaptiveTimestep&&!0===this.adaptiveTimestepEnabled)this.adaptiveCounter%this.adaptiveInterval==0?(this.timestep=2*this.timestep,this.physicsStep(),this.revert(),this.timestep=.5*this.timestep,this.physicsStep(),this.physicsStep(),this.adjustTimeStep()):this.physicsStep(),this.adaptiveCounter+=1;else this.timestep=this.options.timestep,this.physicsStep();!0===this.stabilized&&this.revert(),this.stabilizationIterations++}}},{key:"updatePhysicsData",value:function(){this.physicsBody.forces={},this.physicsBody.physicsNodeIndices=[],this.physicsBody.physicsEdgeIndices=[];var t=this.body.nodes,e=this.body.edges;for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&!0===t[i].options.physics&&this.physicsBody.physicsNodeIndices.push(t[i].id);for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&!0===e[o].options.physics&&this.physicsBody.physicsEdgeIndices.push(e[o].id);for(var n=0;n<this.physicsBody.physicsNodeIndices.length;n++){var r=this.physicsBody.physicsNodeIndices[n];this.physicsBody.forces[r]={x:0,y:0},void 0===this.physicsBody.velocities[r]&&(this.physicsBody.velocities[r]={x:0,y:0})}for(var s in this.physicsBody.velocities)void 0===t[s]&&delete this.physicsBody.velocities[s]}},{key:"revert",value:function(){var t=mu(this.previousStates),e=this.body.nodes,i=this.physicsBody.velocities;this.referenceState={};for(var o=0;o<t.length;o++){var n=t[o];void 0!==e[n]?!0===e[n].options.physics&&(this.referenceState[n]={positions:{x:e[n].x,y:e[n].y}},i[n].x=this.previousStates[n].vx,i[n].y=this.previousStates[n].vy,e[n].x=this.previousStates[n].x,e[n].y=this.previousStates[n].y):delete this.previousStates[n]}}},{key:"_evaluateStepQuality",value:function(){var t,e,i=this.body.nodes,o=this.referenceState;for(var n in this.referenceState)if(Object.prototype.hasOwnProperty.call(this.referenceState,n)&&void 0!==i[n]&&(t=i[n].x-o[n].positions.x,e=i[n].y-o[n].positions.y,Math.sqrt(Math.pow(t,2)+Math.pow(e,2))>.3))return!1;return!0}},{key:"moveNodes",value:function(){for(var t=this.physicsBody.physicsNodeIndices,e=0,i=0,o=0;o<t.length;o++){var n=t[o],r=this._performStep(n);e=Math.max(e,r),i+=r}this.adaptiveTimestepEnabled=i/t.length<5,this.stabilized=e<this.options.minVelocity}},{key:"calculateComponentVelocity",value:function(t,e,i){t+=(e-this.modelOptions.damping*t)/i*this.timestep;var o=this.options.maxVelocity||1e9;return Math.abs(t)>o&&(t=t>0?o:-o),t}},{key:"_performStep",value:function(t){var e=this.body.nodes[t],i=this.physicsBody.forces[t];this.options.wind&&(i.x+=this.options.wind.x,i.y+=this.options.wind.y);var o=this.physicsBody.velocities[t];return this.previousStates[t]={x:e.x,y:e.y,vx:o.x,vy:o.y},!1===e.options.fixed.x?(o.x=this.calculateComponentVelocity(o.x,i.x,e.options.mass),e.x+=o.x*this.timestep):(i.x=0,o.x=0),!1===e.options.fixed.y?(o.y=this.calculateComponentVelocity(o.y,i.y,e.options.mass),e.y+=o.y*this.timestep):(i.y=0,o.y=0),Math.sqrt(Math.pow(o.x,2)+Math.pow(o.y,2))}},{key:"_freezeNodes",value:function(){var t=this.body.nodes;for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].x&&t[e].y){var i=t[e].options.fixed;this.freezeCache[e]={x:i.x,y:i.y},i.x=!0,i.y=!0}}},{key:"_restoreFrozenNodes",value:function(){var t=this.body.nodes;for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&void 0!==this.freezeCache[e]&&(t[e].options.fixed.x=this.freezeCache[e].x,t[e].options.fixed.y=this.freezeCache[e].y);this.freezeCache={}}},{key:"stabilize",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.stabilization.iterations;"number"!=typeof e&&(e=this.options.stabilization.iterations,console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ",e)),0!==this.physicsBody.physicsNodeIndices.length?(this.adaptiveTimestep=this.options.adaptiveTimestep,this.body.emitter.emit("_resizeNodes"),this.stopSimulation(),this.stabilized=!1,this.body.emitter.emit("_blockRedraw"),this.targetIterations=e,!0===this.options.stabilization.onlyDynamicEdges&&this._freezeNodes(),this.stabilizationIterations=0,bv((function(){return t._stabilizationBatch()}),0)):this.ready=!0}},{key:"_startStabilizing",value:function(){return!0!==this.startedStabilization&&(this.body.emitter.emit("startStabilizing"),this.startedStabilization=!0,!0)}},{key:"_stabilizationBatch",value:function(){var t=this,e=function(){return!1===t.stabilized&&t.stabilizationIterations<t.targetIterations},i=function(){t.body.emitter.emit("stabilizationProgress",{iterations:t.stabilizationIterations,total:t.targetIterations})};this._startStabilizing()&&i();for(var o,n=0;e()&&n<this.options.stabilization.updateInterval;)this.physicsTick(),n++;(i(),e())?bv(Fo(o=this._stabilizationBatch).call(o,this),0):this._finalizeStabilization()}},{key:"_finalizeStabilization",value:function(){this.body.emitter.emit("_allowRedraw"),!0===this.options.stabilization.fit&&this.body.emitter.emit("fit"),!0===this.options.stabilization.onlyDynamicEdges&&this._restoreFrozenNodes(),this.body.emitter.emit("stabilizationIterationsDone"),this.body.emitter.emit("_requestRedraw"),!0===this.stabilized?this._emitStabilized():this.startSimulation(),this.ready=!0}},{key:"_drawForces",value:function(t){for(var e=0;e<this.physicsBody.physicsNodeIndices.length;e++){var i=this.physicsBody.physicsNodeIndices[e],o=this.body.nodes[i],n=this.physicsBody.forces[i],r=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.x,2)),s=Math.min(Math.max(5,r),15),a=3*s,h=Ky((180-180*Math.min(1,Math.max(0,.03*r)))/360,1,1),d={x:o.x+20*n.x,y:o.y+20*n.y};t.lineWidth=s,t.strokeStyle=h,t.beginPath(),t.moveTo(o.x,o.y),t.lineTo(d.x,d.y),t.stroke();var l=Math.atan2(n.y,n.x);t.fillStyle=h,dx.draw(t,{type:"arrow",point:d,angle:l,length:a}),Pv(t).call(t)}}}]),t}(),Hx=new Uint8Array(16);function Wx(){if(!Rx&&!(Rx="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Rx(Hx)}var Vx=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function qx(t){return"string"==typeof t&&Vx.test(t)}for(var Ux=[],Yx=0;Yx<256;++Yx)Ux.push((Yx+256).toString(16).substr(1));function Xx(t,e,i){var o=(t=t||{}).random||(t.rng||Wx)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){i=i||0;for(var n=0;n<16;++n)e[i+n]=o[n];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=(Ux[t[e+0]]+Ux[t[e+1]]+Ux[t[e+2]]+Ux[t[e+3]]+"-"+Ux[t[e+4]]+Ux[t[e+5]]+"-"+Ux[t[e+6]]+Ux[t[e+7]]+"-"+Ux[t[e+8]]+Ux[t[e+9]]+"-"+Ux[t[e+10]]+Ux[t[e+11]]+Ux[t[e+12]]+Ux[t[e+13]]+Ux[t[e+14]]+Ux[t[e+15]]).toLowerCase();if(!qx(i))throw TypeError("Stringified UUID is invalid");return i}(o)}var Gx=function(){function t(){Xl(this,t)}return $l(t,null,[{key:"getRange",value:function(t){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=1e9,n=-1e9,r=1e9,s=-1e9;if(i.length>0)for(var a=0;a<i.length;a++)r>(e=t[i[a]]).shape.boundingBox.left&&(r=e.shape.boundingBox.left),s<e.shape.boundingBox.right&&(s=e.shape.boundingBox.right),o>e.shape.boundingBox.top&&(o=e.shape.boundingBox.top),n<e.shape.boundingBox.bottom&&(n=e.shape.boundingBox.bottom);return 1e9===r&&-1e9===s&&1e9===o&&-1e9===n&&(o=0,n=0,r=0,s=0),{minX:r,maxX:s,minY:o,maxY:n}}},{key:"getRangeCore",value:function(t){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=1e9,n=-1e9,r=1e9,s=-1e9;if(i.length>0)for(var a=0;a<i.length;a++)r>(e=t[i[a]]).x&&(r=e.x),s<e.x&&(s=e.x),o>e.y&&(o=e.y),n<e.y&&(n=e.y);return 1e9===r&&-1e9===s&&1e9===o&&-1e9===n&&(o=0,n=0,r=0,s=0),{minX:r,maxX:s,minY:o,maxY:n}}},{key:"findCenter",value:function(t){return{x:.5*(t.maxX+t.minX),y:.5*(t.maxY+t.minY)}}},{key:"cloneOptions",value:function(t,e){var i={};return void 0===e||"node"===e?(Ry(i,t.options,!0),i.x=t.x,i.y=t.y,i.amountOfConnections=t.edges.length):Ry(i,t.options,!0),i}}]),t}();function Kx(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var $x=function(t){Rk(i,t);var e=Kx(i);function i(t,o,n,r,s,a){var h;return Xl(this,i),(h=e.call(this,t,o,n,r,s,a)).isCluster=!0,h.containedNodes={},h.containedEdges={},h}return $l(i,[{key:"_openChildCluster",value:function(t){var e=this,i=this.body.nodes[t];if(void 0===this.containedNodes[t])throw new Error("node with id: "+t+" not in current cluster");if(!i.isCluster)throw new Error("node with id: "+t+" is not a cluster");delete this.containedNodes[t],Wy(i.edges,(function(t){delete e.containedEdges[t.id]})),Wy(i.containedNodes,(function(t,i){e.containedNodes[i]=t})),i.containedNodes={},Wy(i.containedEdges,(function(t,i){e.containedEdges[i]=t})),i.containedEdges={},Wy(i.edges,(function(t){Wy(e.edges,(function(i){var o,n,r=zp(o=i.clusteringEdgeReplacingIds).call(o,t.id);-1!==r&&(Wy(t.clusteringEdgeReplacingIds,(function(t){i.clusteringEdgeReplacingIds.push(t),e.body.edges[t].edgeReplacedById=i.id})),uf(n=i.clusteringEdgeReplacingIds).call(n,r,1))}))})),i.edges=[]}}]),i}(M_),Zx=function(){function t(e){var i=this;Xl(this,t),this.body=e,this.clusteredNodes={},this.clusteredEdges={},this.options={},this.defaultOptions={},fo(this.options,this.defaultOptions),this.body.emitter.on("_resetData",(function(){i.clusteredNodes={},i.clusteredEdges={}}))}return $l(t,[{key:"clusterByHubsize",value:function(t,e){void 0===t?t=this._getHubSize():"object"===Qc(t)&&(e=this._checkOptions(t),t=this._getHubSize());for(var i=[],o=0;o<this.body.nodeIndices.length;o++){var n=this.body.nodes[this.body.nodeIndices[o]];n.edges.length>=t&&i.push(n.id)}for(var r=0;r<i.length;r++)this.clusterByConnection(i[r],e,!0);this.body.emitter.emit("_dataChanged")}},{key:"cluster",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(void 0===e.joinCondition)throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");e=this._checkOptions(e);var o={},n={};Wy(this.body.nodes,(function(i,r){i.options&&!0===e.joinCondition(i.options)&&(o[r]=i,Wy(i.edges,(function(e){void 0===t.clusteredEdges[e.id]&&(n[e.id]=e)})))})),this._cluster(o,n,e,i)}},{key:"clusterByEdgeCount",value:function(t,e){var i=this,o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];e=this._checkOptions(e);for(var n,r,s,a=[],h={},d=function(o){var d={},l={},c=i.body.nodeIndices[o],u=i.body.nodes[c];if(void 0===h[c]){s=0,r=[];for(var f=0;f<u.edges.length;f++)n=u.edges[f],void 0===i.clusteredEdges[n.id]&&(n.toId!==n.fromId&&s++,r.push(n));if(s===t){for(var p=function(t){if(void 0===e.joinCondition||null===e.joinCondition)return!0;var i=Gx.cloneOptions(t);return e.joinCondition(i)},v=!0,g=0;g<r.length;g++){n=r[g];var y=i._getConnectedId(n,c);if(!p(u)){v=!1;break}l[n.id]=n,d[c]=u,d[y]=i.body.nodes[y],h[c]=!0}if(mu(d).length>0&&mu(l).length>0&&!0===v){var m=function(){for(var t=0;t<a.length;++t)for(var e in d)if(void 0!==a[t].nodes[e])return a[t]}();if(void 0!==m){for(var b in d)void 0===m.nodes[b]&&(m.nodes[b]=d[b]);for(var w in l)void 0===m.edges[w]&&(m.edges[w]=l[w])}else a.push({nodes:d,edges:l})}}}},l=0;l<this.body.nodeIndices.length;l++)d(l);for(var c=0;c<a.length;c++)this._cluster(a[c].nodes,a[c].edges,e,!1);!0===o&&this.body.emitter.emit("_dataChanged")}},{key:"clusterOutliers",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.clusterByEdgeCount(1,t,e)}},{key:"clusterBridges",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.clusterByEdgeCount(2,t,e)}},{key:"clusterByConnection",value:function(t,e){var i,o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(void 0===t)throw new Error("No nodeId supplied to clusterByConnection!");if(void 0===this.body.nodes[t])throw new Error("The nodeId given to clusterByConnection does not exist!");var n=this.body.nodes[t];void 0===(e=this._checkOptions(e,n)).clusterNodeProperties.x&&(e.clusterNodeProperties.x=n.x),void 0===e.clusterNodeProperties.y&&(e.clusterNodeProperties.y=n.y),void 0===e.clusterNodeProperties.fixed&&(e.clusterNodeProperties.fixed={},e.clusterNodeProperties.fixed.x=n.options.fixed.x,e.clusterNodeProperties.fixed.y=n.options.fixed.y);var r={},s={},a=n.id,h=Gx.cloneOptions(n);r[a]=n;for(var d=0;d<n.edges.length;d++){var l=n.edges[d];if(void 0===this.clusteredEdges[l.id]){var c=this._getConnectedId(l,a);if(void 0===this.clusteredNodes[c])if(c!==a)if(void 0===e.joinCondition)s[l.id]=l,r[c]=this.body.nodes[c];else{var u=Gx.cloneOptions(this.body.nodes[c]);!0===e.joinCondition(h,u)&&(s[l.id]=l,r[c]=this.body.nodes[c])}else s[l.id]=l}}var f=vu(i=mu(r)).call(i,(function(t){return r[t].id}));for(var p in r)if(Object.prototype.hasOwnProperty.call(r,p))for(var v=r[p],g=0;g<v.edges.length;g++){var y=v.edges[g];zp(f).call(f,this._getConnectedId(y,v.id))>-1&&(s[y.id]=y)}this._cluster(r,s,e,o)}},{key:"_createClusterEdges",value:function(t,e,i,o){for(var n,r,s,a,h,d,l=mu(t),c=[],u=0;u<l.length;u++){s=t[r=l[u]];for(var f=0;f<s.edges.length;f++)n=s.edges[f],void 0===this.clusteredEdges[n.id]&&(n.toId==n.fromId?e[n.id]=n:n.toId==r?(a=i.id,d=h=n.fromId):(a=n.toId,h=i.id,d=a),void 0===t[d]&&c.push({edge:n,fromId:h,toId:a}))}for(var p=[],v=function(t){for(var e=0;e<p.length;e++){var i=p[e],o=t.fromId===i.fromId&&t.toId===i.toId,n=t.fromId===i.toId&&t.toId===i.fromId;if(o||n)return i}return null},g=0;g<c.length;g++){var y=c[g],m=y.edge,b=v(y);null===b?(b=this._createClusteredEdge(y.fromId,y.toId,m,o),p.push(b)):b.clusteringEdgeReplacingIds.push(m.id),this.body.edges[m.id].edgeReplacedById=b.id,this._backupEdgeOptions(m),m.setOptions({physics:!1})}}},{key:"_checkOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return void 0===t.clusterEdgeProperties&&(t.clusterEdgeProperties={}),void 0===t.clusterNodeProperties&&(t.clusterNodeProperties={}),t}},{key:"_cluster",value:function(t,e,i){var o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],n=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&void 0!==this.clusteredNodes[r]&&n.push(r);for(var s=0;s<n.length;++s)delete t[n[s]];if(0!=mu(t).length&&(1!=mu(t).length||1==i.clusterNodeProperties.allowSingleNodeCluster)){var a=Ry({},i.clusterNodeProperties);if(void 0!==i.processProperties){var h=[];for(var d in t)if(Object.prototype.hasOwnProperty.call(t,d)){var l=Gx.cloneOptions(t[d]);h.push(l)}var c=[];for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)&&"clusterEdge:"!==u.substr(0,12)){var f=Gx.cloneOptions(e[u],"edge");c.push(f)}if(!(a=i.processProperties(a,h,c)))throw new Error("The processProperties function does not return properties!")}void 0===a.id&&(a.id="cluster:"+Xx());var p=a.id;void 0===a.label&&(a.label="cluster");var v=void 0;void 0===a.x&&(v=this._getClusterPosition(t),a.x=v.x),void 0===a.y&&(void 0===v&&(v=this._getClusterPosition(t)),a.y=v.y),a.id=p;var g=this.body.functions.createNode(a,$x);g.containedNodes=t,g.containedEdges=e,g.clusterEdgeProperties=i.clusterEdgeProperties,this.body.nodes[a.id]=g,this._clusterEdges(t,e,a,i.clusterEdgeProperties),a.id=void 0,!0===o&&this.body.emitter.emit("_dataChanged")}}},{key:"_backupEdgeOptions",value:function(t){void 0===this.clusteredEdges[t.id]&&(this.clusteredEdges[t.id]={physics:t.options.physics})}},{key:"_restoreEdge",value:function(t){var e=this.clusteredEdges[t.id];void 0!==e&&(t.setOptions({physics:e.physics}),delete this.clusteredEdges[t.id])}},{key:"isCluster",value:function(t){return void 0!==this.body.nodes[t]?!0===this.body.nodes[t].isCluster:(console.error("Node does not exist."),!1)}},{key:"_getClusterPosition",value:function(t){for(var e,i=mu(t),o=t[i[0]].x,n=t[i[0]].x,r=t[i[0]].y,s=t[i[0]].y,a=1;a<i.length;a++)o=(e=t[i[a]]).x<o?e.x:o,n=e.x>n?e.x:n,r=e.y<r?e.y:r,s=e.y>s?e.y:s;return{x:.5*(o+n),y:.5*(r+s)}}},{key:"openCluster",value:function(t,e){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(void 0===t)throw new Error("No clusterNodeId supplied to openCluster.");var o=this.body.nodes[t];if(void 0===o)throw new Error("The clusterNodeId supplied to openCluster does not exist.");if(!0!==o.isCluster||void 0===o.containedNodes||void 0===o.containedEdges)throw new Error("The node:"+t+" is not a valid cluster.");var n=this.findNode(t),r=zp(n).call(n,t)-1;if(r>=0){var s=n[r],a=this.body.nodes[s];return a._openChildCluster(t),delete this.body.nodes[t],void(!0===i&&this.body.emitter.emit("_dataChanged"))}var h=o.containedNodes,d=o.containedEdges;if(void 0!==e&&void 0!==e.releaseFunction&&"function"==typeof e.releaseFunction){var l={},c={x:o.x,y:o.y};for(var u in h)if(Object.prototype.hasOwnProperty.call(h,u)){var f=this.body.nodes[u];l[u]={x:f.x,y:f.y}}var p=e.releaseFunction(c,l);for(var v in h)if(Object.prototype.hasOwnProperty.call(h,v)){var g=this.body.nodes[v];void 0!==p[v]&&(g.x=void 0===p[v].x?o.x:p[v].x,g.y=void 0===p[v].y?o.y:p[v].y)}}else Wy(h,(function(t){!1===t.options.fixed.x&&(t.x=o.x),!1===t.options.fixed.y&&(t.y=o.y)}));for(var y in h)if(Object.prototype.hasOwnProperty.call(h,y)){var m=this.body.nodes[y];m.vx=o.vx,m.vy=o.vy,m.setOptions({physics:!0}),delete this.clusteredNodes[y]}for(var b=[],w=0;w<o.edges.length;w++)b.push(o.edges[w]);for(var k=0;k<b.length;k++){for(var _=b[k],x=this._getConnectedId(_,t),E=this.clusteredNodes[x],O=0;O<_.clusteringEdgeReplacingIds.length;O++){var C=_.clusteringEdgeReplacingIds[O],S=this.body.edges[C];if(void 0!==S)if(void 0!==E){var T=this.body.nodes[E.clusterId];T.containedEdges[S.id]=S,delete d[S.id];var M=S.fromId,P=S.toId;S.toId==x?P=E.clusterId:M=E.clusterId,this._createClusteredEdge(M,P,S,T.clusterEdgeProperties,{hidden:!1,physics:!0})}else this._restoreEdge(S)}_.remove()}for(var D in d)Object.prototype.hasOwnProperty.call(d,D)&&this._restoreEdge(d[D]);delete this.body.nodes[t],!0===i&&this.body.emitter.emit("_dataChanged")}},{key:"getNodesInCluster",value:function(t){var e=[];if(!0===this.isCluster(t)){var i=this.body.nodes[t].containedNodes;for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&e.push(this.body.nodes[o].id)}return e}},{key:"findNode",value:function(t){for(var e,i=[],o=0;void 0!==this.clusteredNodes[t]&&o<100;){if(void 0===(e=this.body.nodes[t]))return[];i.push(e.id),t=this.clusteredNodes[t].clusterId,o++}return void 0===(e=this.body.nodes[t])?[]:(i.push(e.id),Uu(i).call(i),i)}},{key:"updateClusteredNode",value:function(t,e){if(void 0===t)throw new Error("No clusteredNodeId supplied to updateClusteredNode.");if(void 0===e)throw new Error("No newOptions supplied to updateClusteredNode.");if(void 0===this.body.nodes[t])throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");this.body.nodes[t].setOptions(e),this.body.emitter.emit("_dataChanged")}},{key:"updateEdge",value:function(t,e){if(void 0===t)throw new Error("No startEdgeId supplied to updateEdge.");if(void 0===e)throw new Error("No newOptions supplied to updateEdge.");if(void 0===this.body.edges[t])throw new Error("The startEdgeId supplied to updateEdge does not exist.");for(var i=this.getClusteredEdges(t),o=0;o<i.length;o++){this.body.edges[i[o]].setOptions(e)}this.body.emitter.emit("_dataChanged")}},{key:"getClusteredEdges",value:function(t){for(var e=[],i=0;void 0!==t&&void 0!==this.body.edges[t]&&i<100;)e.push(this.body.edges[t].id),t=this.body.edges[t].edgeReplacedById,i++;return Uu(e).call(e),e}},{key:"getBaseEdge",value:function(t){return this.getBaseEdges(t)[0]}},{key:"getBaseEdges",value:function(t){for(var e=[t],i=[],o=[],n=0;e.length>0&&n<100;){var r=e.pop();if(void 0!==r){var s=this.body.edges[r];if(void 0!==s){n++;var a=s.clusteringEdgeReplacingIds;if(void 0===a)o.push(r);else for(var h=0;h<a.length;++h){var d=a[h];-1===zp(e).call(e,a)&&-1===zp(i).call(i,a)&&e.push(d)}i.push(r)}}}return o}},{key:"_getConnectedId",value:function(t,e){return t.toId!=e?t.toId:(t.fromId,t.fromId)}},{key:"_getHubSize",value:function(){for(var t=0,e=0,i=0,o=0,n=0;n<this.body.nodeIndices.length;n++){var r=this.body.nodes[this.body.nodeIndices[n]];r.edges.length>o&&(o=r.edges.length),t+=r.edges.length,e+=Math.pow(r.edges.length,2),i+=1}t/=i;var s=(e/=i)-Math.pow(t,2),a=Math.sqrt(s),h=Math.floor(t+2*a);return h>o&&(h=o),h}},{key:"_createClusteredEdge",value:function(t,e,i,o,n){var r=Gx.cloneOptions(i,"edge");Ry(r,o),r.from=t,r.to=e,r.id="clusterEdge:"+Xx(),void 0!==n&&Ry(r,n);var s=this.body.functions.createEdge(r);return s.clusteringEdgeReplacingIds=[i.id],s.connect(),this.body.edges[s.id]=s,s}},{key:"_clusterEdges",value:function(t,e,i,o){if(e instanceof Sx){var n=e,r={};r[n.id]=n,e=r}if(t instanceof M_){var s=t,a={};a[s.id]=s,t=a}if(null==i)throw new Error("_clusterEdges: parameter clusterNode required");for(var h in void 0===o&&(o=i.clusterEdgeProperties),this._createClusterEdges(t,e,i,o),e)if(Object.prototype.hasOwnProperty.call(e,h)&&void 0!==this.body.edges[h]){var d=this.body.edges[h];this._backupEdgeOptions(d),d.setOptions({physics:!1})}for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(this.clusteredNodes[l]={clusterId:i.id,node:this.body.nodes[l]},this.body.nodes[l].setOptions({physics:!1}))}},{key:"_getClusterNodeForNode",value:function(t){if(void 0!==t){var e=this.clusteredNodes[t];if(void 0!==e){var i=e.clusterId;if(void 0!==i)return this.body.nodes[i]}}}},{key:"_filter",value:function(t,e){var i=[];return Wy(t,(function(t){e(t)&&i.push(t)})),i}},{key:"_updateState",value:function(){var t,e=this,i=[],o={},n=function(t){Wy(e.body.nodes,(function(e){!0===e.isCluster&&t(e)}))};for(t in this.clusteredNodes){if(Object.prototype.hasOwnProperty.call(this.clusteredNodes,t))void 0===this.body.nodes[t]&&i.push(t)}n((function(t){for(var e=0;e<i.length;e++)delete t.containedNodes[i[e]]}));for(var r=0;r<i.length;r++)delete this.clusteredNodes[i[r]];Wy(this.clusteredEdges,(function(t){var i=e.body.edges[t];void 0!==i&&i.endPointsValid()||(o[t]=t)})),n((function(t){Wy(t.containedEdges,(function(t,e){t.endPointsValid()||o[e]||(o[e]=e)}))})),Wy(this.body.edges,(function(t,i){var n=!0,r=t.clusteringEdgeReplacingIds;if(void 0!==r){var s=0;Wy(r,(function(t){var i=e.body.edges[t];void 0!==i&&i.endPointsValid()&&(s+=1)})),n=s>0}t.endPointsValid()&&n||(o[i]=i)})),n((function(t){Wy(o,(function(i){delete t.containedEdges[i],Wy(t.edges,(function(n,r){n.id!==i?n.clusteringEdgeReplacingIds=e._filter(n.clusteringEdgeReplacingIds,(function(t){return!o[t]})):t.edges[r]=null})),t.edges=e._filter(t.edges,(function(t){return null!==t}))}))})),Wy(o,(function(t){delete e.clusteredEdges[t]})),Wy(o,(function(t){delete e.body.edges[t]})),Wy(mu(this.body.edges),(function(t){var i=e.body.edges[t],o=e._isClusteredNode(i.fromId)||e._isClusteredNode(i.toId);if(o!==e._isClusteredEdge(i.id))if(o){var n=e._getClusterNodeForNode(i.fromId);void 0!==n&&e._clusterEdges(e.body.nodes[i.fromId],i,n);var r=e._getClusterNodeForNode(i.toId);void 0!==r&&e._clusterEdges(e.body.nodes[i.toId],i,r)}else delete e._clusterEdges[t],e._restoreEdge(i)}));for(var s=!1,a=!0,h=function(){var t=[];n((function(e){var i=mu(e.containedNodes).length,o=!0===e.options.allowSingleNodeCluster;(o&&i<1||!o&&i<2)&&t.push(e.id)}));for(var i=0;i<t.length;++i)e.openCluster(t[i],{},!1);a=t.length>0,s=s||a};a;)h();s&&this._updateState()}},{key:"_isClusteredNode",value:function(t){return void 0!==this.clusteredNodes[t]}},{key:"_isClusteredEdge",value:function(t){return void 0!==this.clusteredEdges[t]}}]),t}();function Qx(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return Jx(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return Jx(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function Jx(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}var tE=function(){function t(e,i){var o;Xl(this,t),void 0!==window&&(o=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame),window.requestAnimationFrame=void 0===o?function(t){t()}:o,this.body=e,this.canvas=i,this.redrawRequested=!1,this.renderTimer=void 0,this.requiresTimeout=!0,this.renderingActive=!1,this.renderRequests=0,this.allowRedraw=!0,this.dragging=!1,this.zooming=!1,this.options={},this.defaultOptions={hideEdgesOnDrag:!1,hideEdgesOnZoom:!1,hideNodesOnDrag:!1},fo(this.options,this.defaultOptions),this._determineBrowserMethod(),this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t,e=this;this.body.emitter.on("dragStart",(function(){e.dragging=!0})),this.body.emitter.on("dragEnd",(function(){e.dragging=!1})),this.body.emitter.on("zoom",(function(){e.zooming=!0,window.clearTimeout(e.zoomTimeoutId),e.zoomTimeoutId=bv((function(){var t;e.zooming=!1,Fo(t=e._requestRedraw).call(t,e)()}),250)})),this.body.emitter.on("_resizeNodes",(function(){e._resizeNodes()})),this.body.emitter.on("_redraw",(function(){!1===e.renderingActive&&e._redraw()})),this.body.emitter.on("_blockRedraw",(function(){e.allowRedraw=!1})),this.body.emitter.on("_allowRedraw",(function(){e.allowRedraw=!0,e.redrawRequested=!1})),this.body.emitter.on("_requestRedraw",Fo(t=this._requestRedraw).call(t,this)),this.body.emitter.on("_startRendering",(function(){e.renderRequests+=1,e.renderingActive=!0,e._startRendering()})),this.body.emitter.on("_stopRendering",(function(){e.renderRequests-=1,e.renderingActive=e.renderRequests>0,e.renderTimer=void 0})),this.body.emitter.on("destroy",(function(){e.renderRequests=0,e.allowRedraw=!1,e.renderingActive=!1,!0===e.requiresTimeout?clearTimeout(e.renderTimer):window.cancelAnimationFrame(e.renderTimer),e.body.emitter.off()}))}},{key:"setOptions",value:function(t){if(void 0!==t){Ny(["hideEdgesOnDrag","hideEdgesOnZoom","hideNodesOnDrag"],this.options,t)}}},{key:"_requestNextFrame",value:function(t,e){if("undefined"!=typeof window){var i,o=window;return!0===this.requiresTimeout?i=bv(t,e):o.requestAnimationFrame&&(i=o.requestAnimationFrame(t)),i}}},{key:"_startRendering",value:function(){var t;!0===this.renderingActive&&(void 0===this.renderTimer&&(this.renderTimer=this._requestNextFrame(Fo(t=this._renderStep).call(t,this),this.simulationInterval)))}},{key:"_renderStep",value:function(){!0===this.renderingActive&&(this.renderTimer=void 0,!0===this.requiresTimeout&&this._startRendering(),this._redraw(),!1===this.requiresTimeout&&this._startRendering())}},{key:"redraw",value:function(){this.body.emitter.emit("setSize"),this._redraw()}},{key:"_requestRedraw",value:function(){var t=this;!0!==this.redrawRequested&&!1===this.renderingActive&&!0===this.allowRedraw&&(this.redrawRequested=!0,this._requestNextFrame((function(){t._redraw(!1)}),0))}},{key:"_redraw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!0===this.allowRedraw){this.body.emitter.emit("initRedraw"),this.redrawRequested=!1;var e={drawExternalLabels:null};0!==this.canvas.frame.canvas.width&&0!==this.canvas.frame.canvas.height||this.canvas.setSize(),this.canvas.setTransform();var i=this.canvas.getContext(),o=this.canvas.frame.canvas.clientWidth,n=this.canvas.frame.canvas.clientHeight;if(i.clearRect(0,0,o,n),0===this.canvas.frame.clientWidth)return;if(i.save(),i.translate(this.body.view.translation.x,this.body.view.translation.y),i.scale(this.body.view.scale,this.body.view.scale),i.beginPath(),this.body.emitter.emit("beforeDrawing",i),i.closePath(),!1===t&&(!1===this.dragging||!0===this.dragging&&!1===this.options.hideEdgesOnDrag)&&(!1===this.zooming||!0===this.zooming&&!1===this.options.hideEdgesOnZoom)&&this._drawEdges(i),!1===this.dragging||!0===this.dragging&&!1===this.options.hideNodesOnDrag){var r=this._drawNodes(i,t),s=r.drawExternalLabels;e.drawExternalLabels=s}!1===t&&(!1===this.dragging||!0===this.dragging&&!1===this.options.hideEdgesOnDrag)&&(!1===this.zooming||!0===this.zooming&&!1===this.options.hideEdgesOnZoom)&&this._drawArrows(i),null!=e.drawExternalLabels&&e.drawExternalLabels(),!1===t&&this._drawSelectionBox(i),i.beginPath(),this.body.emitter.emit("afterDrawing",i),i.closePath(),i.restore(),!0===t&&i.clearRect(0,0,o,n)}}},{key:"_resizeNodes",value:function(){this.canvas.setTransform();var t=this.canvas.getContext();t.save(),t.translate(this.body.view.translation.x,this.body.view.translation.y),t.scale(this.body.view.scale,this.body.view.scale);var e,i=this.body.nodes;for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&((e=i[o]).resize(t),e.updateBoundingBox(t,e.selected));t.restore()}},{key:"_drawNodes",value:function(t){for(var e,i,o=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.body.nodes,r=this.body.nodeIndices,s=[],a=[],h=20,d=this.canvas.DOMtoCanvas({x:-h,y:-h}),l=this.canvas.DOMtoCanvas({x:this.canvas.frame.canvas.clientWidth+h,y:this.canvas.frame.canvas.clientHeight+h}),c={top:d.y,left:d.x,bottom:l.y,right:l.x},u=[],f=0;f<r.length;f++)if((e=n[r[f]]).hover)a.push(r[f]);else if(e.isSelected())s.push(r[f]);else if(!0===o){var p=e.draw(t);null!=p.drawExternalLabel&&u.push(p.drawExternalLabel)}else if(!0===e.isBoundingBoxOverlappingWith(c)){var v=e.draw(t);null!=v.drawExternalLabel&&u.push(v.drawExternalLabel)}else e.updateBoundingBox(t,e.selected);var g=s.length,y=a.length;for(i=0;i<g;i++){var m=(e=n[s[i]]).draw(t);null!=m.drawExternalLabel&&u.push(m.drawExternalLabel)}for(i=0;i<y;i++){var b=(e=n[a[i]]).draw(t);null!=b.drawExternalLabel&&u.push(b.drawExternalLabel)}return{drawExternalLabels:function(){var t,e=Qx(u);try{for(e.s();!(t=e.n()).done;){(0,t.value)()}}catch(t){e.e(t)}finally{e.f()}}}}},{key:"_drawEdges",value:function(t){for(var e=this.body.edges,i=this.body.edgeIndices,o=0;o<i.length;o++){var n=e[i[o]];!0===n.connected&&n.draw(t)}}},{key:"_drawArrows",value:function(t){for(var e=this.body.edges,i=this.body.edgeIndices,o=0;o<i.length;o++){var n=e[i[o]];!0===n.connected&&n.drawArrows(t)}}},{key:"_determineBrowserMethod",value:function(){if("undefined"!=typeof window){var t=navigator.userAgent.toLowerCase();this.requiresTimeout=!1,(-1!=zp(t).call(t,"msie 9.0")||-1!=zp(t).call(t,"safari")&&zp(t).call(t,"chrome")<=-1)&&(this.requiresTimeout=!0)}else this.requiresTimeout=!0}},{key:"_drawSelectionBox",value:function(t){if(this.body.selectionBox.show){t.beginPath();var e=this.body.selectionBox.position.end.x-this.body.selectionBox.position.start.x,i=this.body.selectionBox.position.end.y-this.body.selectionBox.position.start.y;t.rect(this.body.selectionBox.position.start.x,this.body.selectionBox.position.start.y,e,i),t.fillStyle="rgba(151, 194, 252, 0.2)",t.fillRect(this.body.selectionBox.position.start.x,this.body.selectionBox.position.start.y,e,i),t.strokeStyle="rgba(151, 194, 252, 1)",t.stroke()}else t.closePath()}}]),t}(),eE=G.setInterval;function iE(t,e){e.inputHandler=function(t){t.isFirst&&e(t)},t.on("hammer.input",e.inputHandler)}function oE(t,e){return e.inputHandler=function(t){t.isFinal&&e(t)},t.on("hammer.input",e.inputHandler)}var nE=function(){function t(e){Xl(this,t),this.body=e,this.pixelRatio=1,this.cameraState={},this.initialized=!1,this.canvasViewCenter={},this._cleanupCallbacks=[],this.options={},this.defaultOptions={autoResize:!0,height:"100%",width:"100%"},fo(this.options,this.defaultOptions),this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t,e=this;this.body.emitter.once("resize",(function(t){0!==t.width&&(e.body.view.translation.x=.5*t.width),0!==t.height&&(e.body.view.translation.y=.5*t.height)})),this.body.emitter.on("setSize",Fo(t=this.setSize).call(t,this)),this.body.emitter.on("destroy",(function(){e.hammerFrame.destroy(),e.hammer.destroy(),e._cleanUp()}))}},{key:"setOptions",value:function(t){var e,i,o,n,r,s=this;if(void 0!==t){Ny(["width","height","autoResize"],this.options,t)}if(this._cleanUp(),!0===this.options.autoResize){var a;if(window.ResizeObserver){var h=new ResizeObserver((function(){!0===s.setSize()&&s.body.emitter.emit("_requestRedraw")})),d=this.frame;h.observe(d),this._cleanupCallbacks.push((function(){h.unobserve(d)}))}else{var l=eE((function(){!0===s.setSize()&&s.body.emitter.emit("_requestRedraw")}),1e3);this._cleanupCallbacks.push((function(){clearInterval(l)}))}var c=Fo(a=this._onResize).call(a,this);e=window,i="resize",o=c,e.addEventListener?(void 0===n&&(n=!1),"mousewheel"===i&&zf(r=navigator.userAgent).call(r,"Firefox")&&(i="DOMMouseScroll"),e.addEventListener(i,o,n)):e.attachEvent("on"+i,o),this._cleanupCallbacks.push((function(){!function(t,e,i,o){var n;t.removeEventListener?(void 0===o&&(o=!1),"mousewheel"===e&&zf(n=navigator.userAgent).call(n,"Firefox")&&(e="DOMMouseScroll"),t.removeEventListener(e,i,o)):t.detachEvent("on"+e,i)}(window,"resize",c)}))}}},{key:"_cleanUp",value:function(){var t,e,i;Fu(t=Uu(e=uf(i=this._cleanupCallbacks).call(i,0)).call(e)).call(t,(function(t){try{t()}catch(t){console.error(t)}}))}},{key:"_onResize",value:function(){this.setSize(),this.body.emitter.emit("_redraw")}},{key:"_getCameraState",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.pixelRatio;!0===this.initialized&&(this.cameraState.previousWidth=this.frame.canvas.width/t,this.cameraState.previousHeight=this.frame.canvas.height/t,this.cameraState.scale=this.body.view.scale,this.cameraState.position=this.DOMtoCanvas({x:.5*this.frame.canvas.width/t,y:.5*this.frame.canvas.height/t}))}},{key:"_setCameraState",value:function(){if(void 0!==this.cameraState.scale&&0!==this.frame.canvas.clientWidth&&0!==this.frame.canvas.clientHeight&&0!==this.pixelRatio&&this.cameraState.previousWidth>0&&this.cameraState.previousHeight>0){var t=this.frame.canvas.width/this.pixelRatio/this.cameraState.previousWidth,e=this.frame.canvas.height/this.pixelRatio/this.cameraState.previousHeight,i=this.cameraState.scale;1!=t&&1!=e?i=.5*this.cameraState.scale*(t+e):1!=t?i=this.cameraState.scale*t:1!=e&&(i=this.cameraState.scale*e),this.body.view.scale=i;var o=this.DOMtoCanvas({x:.5*this.frame.canvas.clientWidth,y:.5*this.frame.canvas.clientHeight}),n={x:o.x-this.cameraState.position.x,y:o.y-this.cameraState.position.y};this.body.view.translation.x+=n.x*this.body.view.scale,this.body.view.translation.y+=n.y*this.body.view.scale}}},{key:"_prepareValue",value:function(t){if("number"==typeof t)return t+"px";if("string"==typeof t){if(-1!==zp(t).call(t,"%")||-1!==zp(t).call(t,"px"))return t;if(-1===zp(t).call(t,"%"))return t+"px"}throw new Error("Could not use the value supplied for width or height:"+t)}},{key:"_create",value:function(){for(;this.body.container.hasChildNodes();)this.body.container.removeChild(this.body.container.firstChild);if(this.frame=document.createElement("div"),this.frame.className="vis-network",this.frame.style.position="relative",this.frame.style.overflow="hidden",this.frame.tabIndex=0,this.frame.canvas=document.createElement("canvas"),this.frame.canvas.style.position="relative",this.frame.appendChild(this.frame.canvas),this.frame.canvas.getContext)this._setPixelRatio(),this.setTransform();else{var t=document.createElement("DIV");t.style.color="red",t.style.fontWeight="bold",t.style.padding="10px",t.innerText="Error: your browser does not support HTML canvas",this.frame.canvas.appendChild(t)}this.body.container.appendChild(this.frame),this.body.view.scale=1,this.body.view.translation={x:.5*this.frame.canvas.clientWidth,y:.5*this.frame.canvas.clientHeight},this._bindHammer()}},{key:"_bindHammer",value:function(){var t=this;void 0!==this.hammer&&this.hammer.destroy(),this.drag={},this.pinch={},this.hammer=new pm(this.frame.canvas),this.hammer.get("pinch").set({enable:!0}),this.hammer.get("pan").set({threshold:5,direction:pm.DIRECTION_ALL}),iE(this.hammer,(function(e){t.body.eventListeners.onTouch(e)})),this.hammer.on("tap",(function(e){t.body.eventListeners.onTap(e)})),this.hammer.on("doubletap",(function(e){t.body.eventListeners.onDoubleTap(e)})),this.hammer.on("press",(function(e){t.body.eventListeners.onHold(e)})),this.hammer.on("panstart",(function(e){t.body.eventListeners.onDragStart(e)})),this.hammer.on("panmove",(function(e){t.body.eventListeners.onDrag(e)})),this.hammer.on("panend",(function(e){t.body.eventListeners.onDragEnd(e)})),this.hammer.on("pinch",(function(e){t.body.eventListeners.onPinch(e)})),this.frame.canvas.addEventListener("wheel",(function(e){t.body.eventListeners.onMouseWheel(e)})),this.frame.canvas.addEventListener("mousemove",(function(e){t.body.eventListeners.onMouseMove(e)})),this.frame.canvas.addEventListener("contextmenu",(function(e){t.body.eventListeners.onContext(e)})),this.hammerFrame=new pm(this.frame),oE(this.hammerFrame,(function(e){t.body.eventListeners.onRelease(e)}))}},{key:"setSize",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.width,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.height;t=this._prepareValue(t),e=this._prepareValue(e);var i=!1,o=this.frame.canvas.width,n=this.frame.canvas.height,r=this.pixelRatio;if(this._setPixelRatio(),t!=this.options.width||e!=this.options.height||this.frame.style.width!=t||this.frame.style.height!=e)this._getCameraState(r),this.frame.style.width=t,this.frame.style.height=e,this.frame.canvas.style.width="100%",this.frame.canvas.style.height="100%",this.frame.canvas.width=Math.round(this.frame.canvas.clientWidth*this.pixelRatio),this.frame.canvas.height=Math.round(this.frame.canvas.clientHeight*this.pixelRatio),this.options.width=t,this.options.height=e,this.canvasViewCenter={x:.5*this.frame.clientWidth,y:.5*this.frame.clientHeight},i=!0;else{var s=Math.round(this.frame.canvas.clientWidth*this.pixelRatio),a=Math.round(this.frame.canvas.clientHeight*this.pixelRatio);this.frame.canvas.width===s&&this.frame.canvas.height===a||this._getCameraState(r),this.frame.canvas.width!==s&&(this.frame.canvas.width=s,i=!0),this.frame.canvas.height!==a&&(this.frame.canvas.height=a,i=!0)}return!0===i&&(this.body.emitter.emit("resize",{width:Math.round(this.frame.canvas.width/this.pixelRatio),height:Math.round(this.frame.canvas.height/this.pixelRatio),oldWidth:Math.round(o/this.pixelRatio),oldHeight:Math.round(n/this.pixelRatio)}),this._setCameraState()),this.initialized=!0,i}},{key:"getContext",value:function(){return this.frame.canvas.getContext("2d")}},{key:"_determinePixelRatio",value:function(){var t=this.getContext();if(void 0===t)throw new Error("Could not get canvax context");var e=1;return"undefined"!=typeof window&&(e=window.devicePixelRatio||1),e/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}},{key:"_setPixelRatio",value:function(){this.pixelRatio=this._determinePixelRatio()}},{key:"setTransform",value:function(){var t=this.getContext();if(void 0===t)throw new Error("Could not get canvax context");t.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0)}},{key:"_XconvertDOMtoCanvas",value:function(t){return(t-this.body.view.translation.x)/this.body.view.scale}},{key:"_XconvertCanvasToDOM",value:function(t){return t*this.body.view.scale+this.body.view.translation.x}},{key:"_YconvertDOMtoCanvas",value:function(t){return(t-this.body.view.translation.y)/this.body.view.scale}},{key:"_YconvertCanvasToDOM",value:function(t){return t*this.body.view.scale+this.body.view.translation.y}},{key:"canvasToDOM",value:function(t){return{x:this._XconvertCanvasToDOM(t.x),y:this._YconvertCanvasToDOM(t.y)}}},{key:"DOMtoCanvas",value:function(t){return{x:this._XconvertDOMtoCanvas(t.x),y:this._YconvertDOMtoCanvas(t.y)}}}]),t}();function rE(t,e){var i=fo({nodes:e,minZoomLevel:Number.MIN_VALUE,maxZoomLevel:1},null!=t?t:{});if(!hu(i.nodes))throw new TypeError("Nodes has to be an array of ids.");if(0===i.nodes.length&&(i.nodes=e),!("number"==typeof i.minZoomLevel&&i.minZoomLevel>0))throw new TypeError("Min zoom level has to be a number higher than zero.");if(!("number"==typeof i.maxZoomLevel&&i.minZoomLevel<=i.maxZoomLevel))throw new TypeError("Max zoom level has to be a number higher than min zoom level.");return i}var sE=function(){function t(e,i){var o,n,r=this;Xl(this,t),this.body=e,this.canvas=i,this.animationSpeed=1/this.renderRefreshRate,this.animationEasingFunction="easeInOutQuint",this.easingTime=0,this.sourceScale=0,this.targetScale=0,this.sourceTranslation=0,this.targetTranslation=0,this.lockedOnNodeId=void 0,this.lockedOnNodeOffset=void 0,this.touchTime=0,this.viewFunction=void 0,this.body.emitter.on("fit",Fo(o=this.fit).call(o,this)),this.body.emitter.on("animationFinished",(function(){r.body.emitter.emit("_stopRendering")})),this.body.emitter.on("unlockNode",Fo(n=this.releaseNode).call(n,this))}return $l(t,[{key:"setOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.options=t}},{key:"fit",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=rE(t,this.body.nodeIndices);var i,o,n=this.canvas.frame.canvas.clientWidth,r=this.canvas.frame.canvas.clientHeight;if(0===n||0===r)o=1,i=Gx.getRange(this.body.nodes,t.nodes);else if(!0===e){var s=0;for(var a in this.body.nodes)if(Object.prototype.hasOwnProperty.call(this.body.nodes,a)){var h=this.body.nodes[a];!0===h.predefinedPosition&&(s+=1)}if(s>.5*this.body.nodeIndices.length)return void this.fit(t,!1);i=Gx.getRange(this.body.nodes,t.nodes);var d=this.body.nodeIndices.length;o=12.662/(d+7.4147)+.0964822;var l=Math.min(n/600,r/600);o*=l}else{this.body.emitter.emit("_resizeNodes"),i=Gx.getRange(this.body.nodes,t.nodes);var c=1.1*Math.abs(i.maxX-i.minX),u=1.1*Math.abs(i.maxY-i.minY),f=n/c,p=r/u;o=f<=p?f:p}o>t.maxZoomLevel?o=t.maxZoomLevel:o<t.minZoomLevel&&(o=t.minZoomLevel);var v=Gx.findCenter(i),g={position:v,scale:o,animation:t.animation};this.moveTo(g)}},{key:"focus",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(void 0!==this.body.nodes[t]){var i={x:this.body.nodes[t].x,y:this.body.nodes[t].y};e.position=i,e.lockedOnNode=t,this.moveTo(e)}else console.error("Node: "+t+" cannot be found.")}},{key:"moveTo",value:function(t){if(void 0!==t){if(null!=t.offset){if(null!=t.offset.x){if(t.offset.x=+t.offset.x,!Mw(t.offset.x))throw new TypeError('The option "offset.x" has to be a finite number.')}else t.offset.x=0;if(null!=t.offset.y){if(t.offset.y=+t.offset.y,!Mw(t.offset.y))throw new TypeError('The option "offset.y" has to be a finite number.')}else t.offset.x=0}else t.offset={x:0,y:0};if(null!=t.position){if(null!=t.position.x){if(t.position.x=+t.position.x,!Mw(t.position.x))throw new TypeError('The option "position.x" has to be a finite number.')}else t.position.x=0;if(null!=t.position.y){if(t.position.y=+t.position.y,!Mw(t.position.y))throw new TypeError('The option "position.y" has to be a finite number.')}else t.position.x=0}else t.position=this.getViewPosition();if(null!=t.scale){if(t.scale=+t.scale,!(t.scale>0))throw new TypeError('The option "scale" has to be a number greater than zero.')}else t.scale=this.body.view.scale;void 0===t.animation&&(t.animation={duration:0}),!1===t.animation&&(t.animation={duration:0}),!0===t.animation&&(t.animation={}),void 0===t.animation.duration&&(t.animation.duration=1e3),void 0===t.animation.easingFunction&&(t.animation.easingFunction="easeInOutQuad"),this.animateView(t)}else t={}}},{key:"animateView",value:function(t){if(void 0!==t){this.animationEasingFunction=t.animation.easingFunction,this.releaseNode(),!0===t.locked&&(this.lockedOnNodeId=t.lockedOnNode,this.lockedOnNodeOffset=t.offset),0!=this.easingTime&&this._transitionRedraw(!0),this.sourceScale=this.body.view.scale,this.sourceTranslation=this.body.view.translation,this.targetScale=t.scale,this.body.view.scale=this.targetScale;var e,i,o=this.canvas.DOMtoCanvas({x:.5*this.canvas.frame.canvas.clientWidth,y:.5*this.canvas.frame.canvas.clientHeight}),n=o.x-t.position.x,r=o.y-t.position.y;if(this.targetTranslation={x:this.sourceTranslation.x+n*this.targetScale+t.offset.x,y:this.sourceTranslation.y+r*this.targetScale+t.offset.y},0===t.animation.duration)if(null!=this.lockedOnNodeId)this.viewFunction=Fo(e=this._lockedRedraw).call(e,this),this.body.emitter.on("initRedraw",this.viewFunction);else this.body.view.scale=this.targetScale,this.body.view.translation=this.targetTranslation,this.body.emitter.emit("_requestRedraw");else this.animationSpeed=1/(60*t.animation.duration*.001)||1/60,this.animationEasingFunction=t.animation.easingFunction,this.viewFunction=Fo(i=this._transitionRedraw).call(i,this),this.body.emitter.on("initRedraw",this.viewFunction),this.body.emitter.emit("_startRendering")}}},{key:"_lockedRedraw",value:function(){var t=this.body.nodes[this.lockedOnNodeId].x,e=this.body.nodes[this.lockedOnNodeId].y,i=this.canvas.DOMtoCanvas({x:.5*this.canvas.frame.canvas.clientWidth,y:.5*this.canvas.frame.canvas.clientHeight}),o=i.x-t,n=i.y-e,r=this.body.view.translation,s={x:r.x+o*this.body.view.scale+this.lockedOnNodeOffset.x,y:r.y+n*this.body.view.scale+this.lockedOnNodeOffset.y};this.body.view.translation=s}},{key:"releaseNode",value:function(){void 0!==this.lockedOnNodeId&&void 0!==this.viewFunction&&(this.body.emitter.off("initRedraw",this.viewFunction),this.lockedOnNodeId=void 0,this.lockedOnNodeOffset=void 0)}},{key:"_transitionRedraw",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.easingTime+=this.animationSpeed,this.easingTime=!0===t?1:this.easingTime;var e=em[this.animationEasingFunction](this.easingTime);if(this.body.view.scale=this.sourceScale+(this.targetScale-this.sourceScale)*e,this.body.view.translation={x:this.sourceTranslation.x+(this.targetTranslation.x-this.sourceTranslation.x)*e,y:this.sourceTranslation.y+(this.targetTranslation.y-this.sourceTranslation.y)*e},this.easingTime>=1){var i;if(this.body.emitter.off("initRedraw",this.viewFunction),this.easingTime=0,null!=this.lockedOnNodeId)this.viewFunction=Fo(i=this._lockedRedraw).call(i,this),this.body.emitter.on("initRedraw",this.viewFunction);this.body.emitter.emit("animationFinished")}}},{key:"getScale",value:function(){return this.body.view.scale}},{key:"getViewPosition",value:function(){return this.canvas.DOMtoCanvas({x:.5*this.canvas.frame.canvas.clientWidth,y:.5*this.canvas.frame.canvas.clientHeight})}}]),t}();function aE(t){var e,i=t&&t.preventDefault||!1,o=t&&t.container||window,n={},r={keydown:{},keyup:{}},s={};for(e=97;e<=122;e++)s[String.fromCharCode(e)]={code:e-97+65,shift:!1};for(e=65;e<=90;e++)s[String.fromCharCode(e)]={code:e,shift:!0};for(e=0;e<=9;e++)s[""+e]={code:48+e,shift:!1};for(e=1;e<=12;e++)s["F"+e]={code:111+e,shift:!1};for(e=0;e<=9;e++)s["num"+e]={code:96+e,shift:!1};s["num*"]={code:106,shift:!1},s["num+"]={code:107,shift:!1},s["num-"]={code:109,shift:!1},s["num/"]={code:111,shift:!1},s["num."]={code:110,shift:!1},s.left={code:37,shift:!1},s.up={code:38,shift:!1},s.right={code:39,shift:!1},s.down={code:40,shift:!1},s.space={code:32,shift:!1},s.enter={code:13,shift:!1},s.shift={code:16,shift:void 0},s.esc={code:27,shift:!1},s.backspace={code:8,shift:!1},s.tab={code:9,shift:!1},s.ctrl={code:17,shift:!1},s.alt={code:18,shift:!1},s.delete={code:46,shift:!1},s.pageup={code:33,shift:!1},s.pagedown={code:34,shift:!1},s["="]={code:187,shift:!1},s["-"]={code:189,shift:!1},s["]"]={code:221,shift:!1},s["["]={code:219,shift:!1};var a=function(t){d(t,"keydown")},h=function(t){d(t,"keyup")},d=function(t,e){if(void 0!==r[e][t.keyCode]){for(var o=r[e][t.keyCode],n=0;n<o.length;n++)(void 0===o[n].shift||1==o[n].shift&&1==t.shiftKey||0==o[n].shift&&0==t.shiftKey)&&o[n].fn(t);1==i&&t.preventDefault()}};return n.bind=function(t,e,i){if(void 0===i&&(i="keydown"),void 0===s[t])throw new Error("unsupported key: "+t);void 0===r[i][s[t].code]&&(r[i][s[t].code]=[]),r[i][s[t].code].push({fn:e,shift:s[t].shift})},n.bindAll=function(t,e){for(var i in void 0===e&&(e="keydown"),s)s.hasOwnProperty(i)&&n.bind(i,t,e)},n.getKey=function(t){for(var e in s)if(s.hasOwnProperty(e)){if(1==t.shiftKey&&1==s[e].shift&&t.keyCode==s[e].code)return e;if(0==t.shiftKey&&0==s[e].shift&&t.keyCode==s[e].code)return e;if(t.keyCode==s[e].code&&"shift"==e)return e}return"unknown key, currently not supported"},n.unbind=function(t,e,i){if(void 0===i&&(i="keydown"),void 0===s[t])throw new Error("unsupported key: "+t);if(void 0!==e){var o=[],n=r[i][s[t].code];if(void 0!==n)for(var a=0;a<n.length;a++)n[a].fn==e&&n[a].shift==s[t].shift||o.push(r[i][s[t].code][a]);r[i][s[t].code]=o}else r[i][s[t].code]=[]},n.reset=function(){r={keydown:{},keyup:{}}},n.destroy=function(){r={keydown:{},keyup:{}},o.removeEventListener("keydown",a,!0),o.removeEventListener("keyup",h,!0)},o.addEventListener("keydown",a,!0),o.addEventListener("keyup",h,!0),n}var hE=function(){function t(e,i){var o=this;Xl(this,t),this.body=e,this.canvas=i,this.iconsCreated=!1,this.navigationHammers=[],this.boundFunctions={},this.touchTime=0,this.activated=!1,this.body.emitter.on("activate",(function(){o.activated=!0,o.configureKeyboardBindings()})),this.body.emitter.on("deactivate",(function(){o.activated=!1,o.configureKeyboardBindings()})),this.body.emitter.on("destroy",(function(){void 0!==o.keycharm&&o.keycharm.destroy()})),this.options={}}return $l(t,[{key:"setOptions",value:function(t){void 0!==t&&(this.options=t,this.create())}},{key:"create",value:function(){!0===this.options.navigationButtons?!1===this.iconsCreated&&this.loadNavigationElements():!0===this.iconsCreated&&this.cleanNavigation(),this.configureKeyboardBindings()}},{key:"cleanNavigation",value:function(){if(0!=this.navigationHammers.length){for(var t=0;t<this.navigationHammers.length;t++)this.navigationHammers[t].destroy();this.navigationHammers=[]}this.navigationDOM&&this.navigationDOM.wrapper&&this.navigationDOM.wrapper.parentNode&&this.navigationDOM.wrapper.parentNode.removeChild(this.navigationDOM.wrapper),this.iconsCreated=!1}},{key:"loadNavigationElements",value:function(){var t=this;this.cleanNavigation(),this.navigationDOM={};var e=["up","down","left","right","zoomIn","zoomOut","zoomExtends"],i=["_moveUp","_moveDown","_moveLeft","_moveRight","_zoomIn","_zoomOut","_fit"];this.navigationDOM.wrapper=document.createElement("div"),this.navigationDOM.wrapper.className="vis-navigation",this.canvas.frame.appendChild(this.navigationDOM.wrapper);for(var o=0;o<e.length;o++){this.navigationDOM[e[o]]=document.createElement("div"),this.navigationDOM[e[o]].className="vis-button vis-"+e[o],this.navigationDOM.wrapper.appendChild(this.navigationDOM[e[o]]);var n,r,s=new pm(this.navigationDOM[e[o]]);if("_fit"===i[o])iE(s,Fo(n=this._fit).call(n,this));else iE(s,Fo(r=this.bindToRedraw).call(r,this,i[o]));this.navigationHammers.push(s)}var a=new pm(this.canvas.frame);oE(a,(function(){t._stopMovement()})),this.navigationHammers.push(a),this.iconsCreated=!0}},{key:"bindToRedraw",value:function(t){var e;void 0===this.boundFunctions[t]&&(this.boundFunctions[t]=Fo(e=this[t]).call(e,this),this.body.emitter.on("initRedraw",this.boundFunctions[t]),this.body.emitter.emit("_startRendering"))}},{key:"unbindFromRedraw",value:function(t){void 0!==this.boundFunctions[t]&&(this.body.emitter.off("initRedraw",this.boundFunctions[t]),this.body.emitter.emit("_stopRendering"),delete this.boundFunctions[t])}},{key:"_fit",value:function(){(new Date).valueOf()-this.touchTime>700&&(this.body.emitter.emit("fit",{duration:700}),this.touchTime=(new Date).valueOf())}},{key:"_stopMovement",value:function(){for(var t in this.boundFunctions)Object.prototype.hasOwnProperty.call(this.boundFunctions,t)&&(this.body.emitter.off("initRedraw",this.boundFunctions[t]),this.body.emitter.emit("_stopRendering"));this.boundFunctions={}}},{key:"_moveUp",value:function(){this.body.view.translation.y+=this.options.keyboard.speed.y}},{key:"_moveDown",value:function(){this.body.view.translation.y-=this.options.keyboard.speed.y}},{key:"_moveLeft",value:function(){this.body.view.translation.x+=this.options.keyboard.speed.x}},{key:"_moveRight",value:function(){this.body.view.translation.x-=this.options.keyboard.speed.x}},{key:"_zoomIn",value:function(){var t=this.body.view.scale,e=this.body.view.scale*(1+this.options.keyboard.speed.zoom),i=this.body.view.translation,o=e/t,n=(1-o)*this.canvas.canvasViewCenter.x+i.x*o,r=(1-o)*this.canvas.canvasViewCenter.y+i.y*o;this.body.view.scale=e,this.body.view.translation={x:n,y:r},this.body.emitter.emit("zoom",{direction:"+",scale:this.body.view.scale,pointer:null})}},{key:"_zoomOut",value:function(){var t=this.body.view.scale,e=this.body.view.scale/(1+this.options.keyboard.speed.zoom),i=this.body.view.translation,o=e/t,n=(1-o)*this.canvas.canvasViewCenter.x+i.x*o,r=(1-o)*this.canvas.canvasViewCenter.y+i.y*o;this.body.view.scale=e,this.body.view.translation={x:n,y:r},this.body.emitter.emit("zoom",{direction:"-",scale:this.body.view.scale,pointer:null})}},{key:"configureKeyboardBindings",value:function(){var t,e,i,o,n,r,s,a,h,d,l,c,u,f,p,v,g,y,m,b,w,k,_,x,E=this;(void 0!==this.keycharm&&this.keycharm.destroy(),!0===this.options.keyboard.enabled)&&(!0===this.options.keyboard.bindToWindow?this.keycharm=aE({container:window,preventDefault:!0}):this.keycharm=aE({container:this.canvas.frame,preventDefault:!0}),this.keycharm.reset(),!0===this.activated&&(Fo(t=this.keycharm).call(t,"up",(function(){E.bindToRedraw("_moveUp")}),"keydown"),Fo(e=this.keycharm).call(e,"down",(function(){E.bindToRedraw("_moveDown")}),"keydown"),Fo(i=this.keycharm).call(i,"left",(function(){E.bindToRedraw("_moveLeft")}),"keydown"),Fo(o=this.keycharm).call(o,"right",(function(){E.bindToRedraw("_moveRight")}),"keydown"),Fo(n=this.keycharm).call(n,"=",(function(){E.bindToRedraw("_zoomIn")}),"keydown"),Fo(r=this.keycharm).call(r,"num+",(function(){E.bindToRedraw("_zoomIn")}),"keydown"),Fo(s=this.keycharm).call(s,"num-",(function(){E.bindToRedraw("_zoomOut")}),"keydown"),Fo(a=this.keycharm).call(a,"-",(function(){E.bindToRedraw("_zoomOut")}),"keydown"),Fo(h=this.keycharm).call(h,"[",(function(){E.bindToRedraw("_zoomOut")}),"keydown"),Fo(d=this.keycharm).call(d,"]",(function(){E.bindToRedraw("_zoomIn")}),"keydown"),Fo(l=this.keycharm).call(l,"pageup",(function(){E.bindToRedraw("_zoomIn")}),"keydown"),Fo(c=this.keycharm).call(c,"pagedown",(function(){E.bindToRedraw("_zoomOut")}),"keydown"),Fo(u=this.keycharm).call(u,"up",(function(){E.unbindFromRedraw("_moveUp")}),"keyup"),Fo(f=this.keycharm).call(f,"down",(function(){E.unbindFromRedraw("_moveDown")}),"keyup"),Fo(p=this.keycharm).call(p,"left",(function(){E.unbindFromRedraw("_moveLeft")}),"keyup"),Fo(v=this.keycharm).call(v,"right",(function(){E.unbindFromRedraw("_moveRight")}),"keyup"),Fo(g=this.keycharm).call(g,"=",(function(){E.unbindFromRedraw("_zoomIn")}),"keyup"),Fo(y=this.keycharm).call(y,"num+",(function(){E.unbindFromRedraw("_zoomIn")}),"keyup"),Fo(m=this.keycharm).call(m,"num-",(function(){E.unbindFromRedraw("_zoomOut")}),"keyup"),Fo(b=this.keycharm).call(b,"-",(function(){E.unbindFromRedraw("_zoomOut")}),"keyup"),Fo(w=this.keycharm).call(w,"[",(function(){E.unbindFromRedraw("_zoomOut")}),"keyup"),Fo(k=this.keycharm).call(k,"]",(function(){E.unbindFromRedraw("_zoomIn")}),"keyup"),Fo(_=this.keycharm).call(_,"pageup",(function(){E.unbindFromRedraw("_zoomIn")}),"keyup"),Fo(x=this.keycharm).call(x,"pagedown",(function(){E.unbindFromRedraw("_zoomOut")}),"keyup")))}}]),t}();function dE(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return lE(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return lE(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function lE(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}var cE=function(){function t(e,i,o){var n,r,s,a,h,d,l,c,u,f,p,v,g;Xl(this,t),this.body=e,this.canvas=i,this.selectionHandler=o,this.navigationHandler=new hE(e,i),this.body.eventListeners.onTap=Fo(n=this.onTap).call(n,this),this.body.eventListeners.onTouch=Fo(r=this.onTouch).call(r,this),this.body.eventListeners.onDoubleTap=Fo(s=this.onDoubleTap).call(s,this),this.body.eventListeners.onHold=Fo(a=this.onHold).call(a,this),this.body.eventListeners.onDragStart=Fo(h=this.onDragStart).call(h,this),this.body.eventListeners.onDrag=Fo(d=this.onDrag).call(d,this),this.body.eventListeners.onDragEnd=Fo(l=this.onDragEnd).call(l,this),this.body.eventListeners.onMouseWheel=Fo(c=this.onMouseWheel).call(c,this),this.body.eventListeners.onPinch=Fo(u=this.onPinch).call(u,this),this.body.eventListeners.onMouseMove=Fo(f=this.onMouseMove).call(f,this),this.body.eventListeners.onRelease=Fo(p=this.onRelease).call(p,this),this.body.eventListeners.onContext=Fo(v=this.onContext).call(v,this),this.touchTime=0,this.drag={},this.pinch={},this.popup=void 0,this.popupObj=void 0,this.popupTimer=void 0,this.body.functions.getPointer=Fo(g=this.getPointer).call(g,this),this.options={},this.defaultOptions={dragNodes:!0,dragView:!0,hover:!1,keyboard:{enabled:!1,speed:{x:10,y:10,zoom:.02},bindToWindow:!0,autoFocus:!0},navigationButtons:!1,tooltipDelay:300,zoomView:!0,zoomSpeed:1},fo(this.options,this.defaultOptions),this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t=this;this.body.emitter.on("destroy",(function(){clearTimeout(t.popupTimer),delete t.body.functions.getPointer}))}},{key:"setOptions",value:function(t){if(void 0!==t){Ay(["hideEdgesOnDrag","hideEdgesOnZoom","hideNodesOnDrag","keyboard","multiselect","selectable","selectConnectedEdges"],this.options,t),tm(this.options,t,"keyboard"),t.tooltip&&(fo(this.options.tooltip,t.tooltip),t.tooltip.color&&(this.options.tooltip.color=Yy(t.tooltip.color)))}this.navigationHandler.setOptions(this.options)}},{key:"getPointer",value:function(t){return{x:t.x-(e=this.canvas.frame.canvas,e.getBoundingClientRect().left),y:t.y-Hy(this.canvas.frame.canvas)};var e}},{key:"onTouch",value:function(t){(new Date).valueOf()-this.touchTime>50&&(this.drag.pointer=this.getPointer(t.center),this.drag.pinched=!1,this.pinch.scale=this.body.view.scale,this.touchTime=(new Date).valueOf())}},{key:"onTap",value:function(t){var e=this.getPointer(t.center),i=this.selectionHandler.options.multiselect&&(t.changedPointers[0].ctrlKey||t.changedPointers[0].metaKey);this.checkSelectionChanges(e,i),this.selectionHandler.commitAndEmit(e,t),this.selectionHandler.generateClickEvent("click",t,e)}},{key:"onDoubleTap",value:function(t){var e=this.getPointer(t.center);this.selectionHandler.generateClickEvent("doubleClick",t,e)}},{key:"onHold",value:function(t){var e=this.getPointer(t.center),i=this.selectionHandler.options.multiselect;this.checkSelectionChanges(e,i),this.selectionHandler.commitAndEmit(e,t),this.selectionHandler.generateClickEvent("click",t,e),this.selectionHandler.generateClickEvent("hold",t,e)}},{key:"onRelease",value:function(t){if((new Date).valueOf()-this.touchTime>10){var e=this.getPointer(t.center);this.selectionHandler.generateClickEvent("release",t,e),this.touchTime=(new Date).valueOf()}}},{key:"onContext",value:function(t){var e=this.getPointer({x:t.clientX,y:t.clientY});this.selectionHandler.generateClickEvent("oncontext",t,e)}},{key:"checkSelectionChanges",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];!0===e?this.selectionHandler.selectAdditionalOnPoint(t):this.selectionHandler.selectOnPoint(t)}},{key:"_determineDifference",value:function(t,e){var i=function(t,e){for(var i=[],o=0;o<t.length;o++){var n=t[o];-1===zp(e).call(e,n)&&i.push(n)}return i};return{nodes:i(t.nodes,e.nodes),edges:i(t.edges,e.edges)}}},{key:"onDragStart",value:function(t){if(!this.drag.dragging){void 0===this.drag.pointer&&this.onTouch(t);var e=this.selectionHandler.getNodeAt(this.drag.pointer);if(this.drag.dragging=!0,this.drag.selection=[],this.drag.translation=fo({},this.body.view.translation),this.drag.nodeId=void 0,t.srcEvent.shiftKey){this.body.selectionBox.show=!0;var i=this.getPointer(t.center);this.body.selectionBox.position.start={x:this.canvas._XconvertDOMtoCanvas(i.x),y:this.canvas._YconvertDOMtoCanvas(i.y)},this.body.selectionBox.position.end={x:this.canvas._XconvertDOMtoCanvas(i.x),y:this.canvas._YconvertDOMtoCanvas(i.y)}}if(void 0!==e&&!0===this.options.dragNodes){this.drag.nodeId=e.id,!1===e.isSelected()&&this.selectionHandler.setSelection({nodes:[e.id]}),this.selectionHandler.generateClickEvent("dragStart",t,this.drag.pointer);var o,n=dE(this.selectionHandler.getSelectedNodes());try{for(n.s();!(o=n.n()).done;){var r=o.value,s={id:r.id,node:r,x:r.x,y:r.y,xFixed:r.options.fixed.x,yFixed:r.options.fixed.y};r.options.fixed.x=!0,r.options.fixed.y=!0,this.drag.selection.push(s)}}catch(t){n.e(t)}finally{n.f()}}else this.selectionHandler.generateClickEvent("dragStart",t,this.drag.pointer,void 0,!0)}}},{key:"onDrag",value:function(t){var e=this;if(!0!==this.drag.pinched){this.body.emitter.emit("unlockNode");var i=this.getPointer(t.center),o=this.drag.selection;if(o&&o.length&&!0===this.options.dragNodes){this.selectionHandler.generateClickEvent("dragging",t,i);var n=i.x-this.drag.pointer.x,r=i.y-this.drag.pointer.y;Fu(o).call(o,(function(t){var i=t.node;!1===t.xFixed&&(i.x=e.canvas._XconvertDOMtoCanvas(e.canvas._XconvertCanvasToDOM(t.x)+n)),!1===t.yFixed&&(i.y=e.canvas._YconvertDOMtoCanvas(e.canvas._YconvertCanvasToDOM(t.y)+r))})),this.body.emitter.emit("startSimulation")}else{if(t.srcEvent.shiftKey){if(this.selectionHandler.generateClickEvent("dragging",t,i,void 0,!0),void 0===this.drag.pointer)return void this.onDragStart(t);this.body.selectionBox.position.end={x:this.canvas._XconvertDOMtoCanvas(i.x),y:this.canvas._YconvertDOMtoCanvas(i.y)},this.body.emitter.emit("_requestRedraw")}if(!0===this.options.dragView&&!t.srcEvent.shiftKey){if(this.selectionHandler.generateClickEvent("dragging",t,i,void 0,!0),void 0===this.drag.pointer)return void this.onDragStart(t);var s=i.x-this.drag.pointer.x,a=i.y-this.drag.pointer.y;this.body.view.translation={x:this.drag.translation.x+s,y:this.drag.translation.y+a},this.body.emitter.emit("_requestRedraw")}}}}},{key:"onDragEnd",value:function(t){var e=this;if(this.drag.dragging=!1,this.body.selectionBox.show){var i;this.body.selectionBox.show=!1;var o=this.body.selectionBox.position,n={minX:Math.min(o.start.x,o.end.x),minY:Math.min(o.start.y,o.end.y),maxX:Math.max(o.start.x,o.end.x),maxY:Math.max(o.start.y,o.end.y)},r=Yf(i=this.body.nodeIndices).call(i,(function(t){var i=e.body.nodes[t];return i.x>=n.minX&&i.x<=n.maxX&&i.y>=n.minY&&i.y<=n.maxY}));Fu(r).call(r,(function(t){return e.selectionHandler.selectObject(e.body.nodes[t])}));var s=this.getPointer(t.center);this.selectionHandler.commitAndEmit(s,t),this.selectionHandler.generateClickEvent("dragEnd",t,this.getPointer(t.center),void 0,!0),this.body.emitter.emit("_requestRedraw")}else{var a=this.drag.selection;a&&a.length?(Fu(a).call(a,(function(t){t.node.options.fixed.x=t.xFixed,t.node.options.fixed.y=t.yFixed})),this.selectionHandler.generateClickEvent("dragEnd",t,this.getPointer(t.center)),this.body.emitter.emit("startSimulation")):(this.selectionHandler.generateClickEvent("dragEnd",t,this.getPointer(t.center),void 0,!0),this.body.emitter.emit("_requestRedraw"))}}},{key:"onPinch",value:function(t){var e=this.getPointer(t.center);this.drag.pinched=!0,void 0===this.pinch.scale&&(this.pinch.scale=1);var i=this.pinch.scale*t.scale;this.zoom(i,e)}},{key:"zoom",value:function(t,e){if(!0===this.options.zoomView){var i=this.body.view.scale;t<1e-5&&(t=1e-5),t>10&&(t=10);var o=void 0;void 0!==this.drag&&!0===this.drag.dragging&&(o=this.canvas.DOMtoCanvas(this.drag.pointer));var n=this.body.view.translation,r=t/i,s=(1-r)*e.x+n.x*r,a=(1-r)*e.y+n.y*r;if(this.body.view.scale=t,this.body.view.translation={x:s,y:a},null!=o){var h=this.canvas.canvasToDOM(o);this.drag.pointer.x=h.x,this.drag.pointer.y=h.y}this.body.emitter.emit("_requestRedraw"),i<t?this.body.emitter.emit("zoom",{direction:"+",scale:this.body.view.scale,pointer:e}):this.body.emitter.emit("zoom",{direction:"-",scale:this.body.view.scale,pointer:e})}}},{key:"onMouseWheel",value:function(t){if(!0===this.options.zoomView){if(0!==t.deltaY){var e=this.body.view.scale;e*=1+(t.deltaY<0?1:-1)*(.1*this.options.zoomSpeed);var i=this.getPointer({x:t.clientX,y:t.clientY});this.zoom(e,i)}t.preventDefault()}}},{key:"onMouseMove",value:function(t){var e=this,i=this.getPointer({x:t.clientX,y:t.clientY}),o=!1;void 0!==this.popup&&(!1===this.popup.hidden&&this._checkHidePopup(i),!1===this.popup.hidden&&(o=!0,this.popup.setPosition(i.x+3,i.y-5),this.popup.show())),this.options.keyboard.autoFocus&&!1===this.options.keyboard.bindToWindow&&!0===this.options.keyboard.enabled&&this.canvas.frame.focus(),!1===o&&(void 0!==this.popupTimer&&(clearInterval(this.popupTimer),this.popupTimer=void 0),this.drag.dragging||(this.popupTimer=bv((function(){return e._checkShowPopup(i)}),this.options.tooltipDelay))),!0===this.options.hover&&this.selectionHandler.hoverObject(t,i)}},{key:"_checkShowPopup",value:function(t){var e=this.canvas._XconvertDOMtoCanvas(t.x),i=this.canvas._YconvertDOMtoCanvas(t.y),o={left:e,top:i,right:e,bottom:i},n=void 0===this.popupObj?void 0:this.popupObj.id,r=!1,s="node";if(void 0===this.popupObj){for(var a,h=this.body.nodeIndices,d=this.body.nodes,l=[],c=0;c<h.length;c++)!0===(a=d[h[c]]).isOverlappingWith(o)&&(r=!0,void 0!==a.getTitle()&&l.push(h[c]));l.length>0&&(this.popupObj=d[l[l.length-1]],r=!0)}if(void 0===this.popupObj&&!1===r){for(var u,f=this.body.edgeIndices,p=this.body.edges,v=[],g=0;g<f.length;g++)!0===(u=p[f[g]]).isOverlappingWith(o)&&!0===u.connected&&void 0!==u.getTitle()&&v.push(f[g]);v.length>0&&(this.popupObj=p[v[v.length-1]],s="edge")}void 0!==this.popupObj?this.popupObj.id!==n&&(void 0===this.popup&&(this.popup=new vm(this.canvas.frame)),this.popup.popupTargetType=s,this.popup.popupTargetId=this.popupObj.id,this.popup.setPosition(t.x+3,t.y-5),this.popup.setText(this.popupObj.getTitle()),this.popup.show(),this.body.emitter.emit("showPopup",this.popupObj.id)):void 0!==this.popup&&(this.popup.hide(),this.body.emitter.emit("hidePopup"))}},{key:"_checkHidePopup",value:function(t){var e=this.selectionHandler._pointerToPositionObject(t),i=!1;if("node"===this.popup.popupTargetType){if(void 0!==this.body.nodes[this.popup.popupTargetId]&&!0===(i=this.body.nodes[this.popup.popupTargetId].isOverlappingWith(e))){var o=this.selectionHandler.getNodeAt(t);i=void 0!==o&&o.id===this.popup.popupTargetId}}else void 0===this.selectionHandler.getNodeAt(t)&&void 0!==this.body.edges[this.popup.popupTargetId]&&(i=this.body.edges[this.popup.popupTargetId].isOverlappingWith(e));!1===i&&(this.popupObj=void 0,this.popup.hide(),this.body.emitter.emit("hidePopup"))}}]),t}();nw("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),xw);var uE=G.Set,fE=y,pE=sw,vE=ib.exports.getWeakData,gE=Ze,yE=X,mE=Wb,bE=jb,wE=Vt,kE=Un.set,_E=Un.getterFor,xE=Vh.find,EE=Vh.findIndex,OE=fE([].splice),CE=0,SE=function(t){return t.frozen||(t.frozen=new TE)},TE=function(){this.entries=[]},ME=function(t,e){return xE(t.entries,(function(t){return t[0]===e}))};TE.prototype={get:function(t){var e=ME(this,t);if(e)return e[1]},has:function(t){return!!ME(this,t)},set:function(t,e){var i=ME(this,t);i?i[1]=e:this.entries.push([t,e])},delete:function(t){var e=EE(this.entries,(function(e){return e[0]===t}));return~e&&OE(this.entries,e,1),!!~e}};var PE,DE={getConstructor:function(t,e,i,o){var n=t((function(t,n){mE(t,r),kE(t,{type:e,id:CE++,frozen:void 0}),null!=n&&bE(n,t[o],{that:t,AS_ENTRIES:i})})),r=n.prototype,s=_E(e),a=function(t,e,i){var o=s(t),n=vE(gE(e),!0);return!0===n?SE(o).set(e,i):n[o.id]=i,t};return pE(r,{delete:function(t){var e=s(this);if(!yE(t))return!1;var i=vE(t);return!0===i?SE(e).delete(t):i&&wE(i,e.id)&&delete i[e.id]},has:function(t){var e=s(this);if(!yE(t))return!1;var i=vE(t);return!0===i?SE(e).has(t):i&&wE(i,e.id)}}),pE(r,i?{get:function(t){var e=s(this);if(yE(t)){var i=vE(t);return!0===i?SE(e).get(t):i?i[e.id]:void 0}},set:function(t,e){return a(this,t,e)}}:{add:function(t){return a(this,t,!0)}}),n}},BE=n,IE=y,zE=sw,FE=ib.exports,NE=nw,AE=DE,RE=X,jE=db,LE=Un.enforce,HE=xn,WE=!BE.ActiveXObject&&"ActiveXObject"in BE,VE=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},qE=NE("WeakMap",VE,AE);if(HE&&WE){PE=AE.getConstructor(VE,"WeakMap",!0),FE.enable();var UE=qE.prototype,YE=IE(UE.delete),XE=IE(UE.has),GE=IE(UE.get),KE=IE(UE.set);zE(UE,{delete:function(t){if(RE(t)&&!jE(t)){var e=LE(this);return e.frozen||(e.frozen=new PE),YE(this,t)||e.frozen.delete(t)}return YE(this,t)},has:function(t){if(RE(t)&&!jE(t)){var e=LE(this);return e.frozen||(e.frozen=new PE),XE(this,t)||e.frozen.has(t)}return XE(this,t)},get:function(t){if(RE(t)&&!jE(t)){var e=LE(this);return e.frozen||(e.frozen=new PE),XE(this,t)?GE(this,t):e.frozen.get(t)}return GE(this,t)},set:function(t,e){if(RE(t)&&!jE(t)){var i=LE(this);i.frozen||(i.frozen=new PE),XE(this,t)?KE(this,t,e):i.frozen.set(t,e)}else KE(this,t,e);return this}})}var $E,ZE,QE,JE,tO,eO=G.WeakMap;
/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
function iO(t,e,i,o){if("a"===i&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?o:"a"===i?o.call(t):o?o.value:e.get(t)}function oO(t,e,i,o,n){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?n.call(t,i):n?n.value=i:e.set(t,i),i}function nO(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return rO(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return rO(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function rO(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function sO(t,e){var i,o=new uE,n=nO(e);try{for(n.s();!(i=n.n()).done;){var r=i.value;t.has(r)||o.add(r)}}catch(t){n.e(t)}finally{n.f()}return o}var aO=function(){function t(){Xl(this,t),$E.set(this,new uE),ZE.set(this,new uE)}return $l(t,[{key:"size",get:function(){return iO(this,ZE,"f").size}},{key:"add",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];for(var o=0,n=e;o<n.length;o++){var r=n[o];iO(this,ZE,"f").add(r)}}},{key:"delete",value:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];for(var o=0,n=e;o<n.length;o++){var r=n[o];iO(this,ZE,"f").delete(r)}}},{key:"clear",value:function(){iO(this,ZE,"f").clear()}},{key:"getSelection",value:function(){return Jc(iO(this,ZE,"f"))}},{key:"getChanges",value:function(){return{added:Jc(sO(iO(this,$E,"f"),iO(this,ZE,"f"))),deleted:Jc(sO(iO(this,ZE,"f"),iO(this,$E,"f"))),previous:Jc(new uE(iO(this,$E,"f"))),current:Jc(new uE(iO(this,ZE,"f")))}}},{key:"commit",value:function(){var t=this.getChanges();oO(this,$E,iO(this,ZE,"f"),"f"),oO(this,ZE,new uE(iO(this,$E,"f")),"f");var e,i=nO(t.added);try{for(i.s();!(e=i.n()).done;){e.value.select()}}catch(t){i.e(t)}finally{i.f()}var o,n=nO(t.deleted);try{for(n.s();!(o=n.n()).done;){o.value.unselect()}}catch(t){n.e(t)}finally{n.f()}return t}}]),t}();$E=new eO,ZE=new eO;var hO=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};Xl(this,t),QE.set(this,new aO),JE.set(this,new aO),tO.set(this,void 0),oO(this,tO,e,"f")}return $l(t,[{key:"sizeNodes",get:function(){return iO(this,QE,"f").size}},{key:"sizeEdges",get:function(){return iO(this,JE,"f").size}},{key:"getNodes",value:function(){return iO(this,QE,"f").getSelection()}},{key:"getEdges",value:function(){return iO(this,JE,"f").getSelection()}},{key:"addNodes",value:function(){var t;(t=iO(this,QE,"f")).add.apply(t,arguments)}},{key:"addEdges",value:function(){var t;(t=iO(this,JE,"f")).add.apply(t,arguments)}},{key:"deleteNodes",value:function(t){iO(this,QE,"f").delete(t)}},{key:"deleteEdges",value:function(t){iO(this,JE,"f").delete(t)}},{key:"clear",value:function(){iO(this,QE,"f").clear(),iO(this,JE,"f").clear()}},{key:"commit",value:function(){for(var t,e,i={nodes:iO(this,QE,"f").commit(),edges:iO(this,JE,"f").commit()},o=arguments.length,n=new Array(o),r=0;r<o;r++)n[r]=arguments[r];return(t=iO(this,tO,"f")).call.apply(t,su(e=[this,i]).call(e,n)),i}}]),t}();function dO(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return lO(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return lO(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function lO(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}QE=new eO,JE=new eO,tO=new eO;var cO=function(){function t(e,i){var o=this;Xl(this,t),this.body=e,this.canvas=i,this._selectionAccumulator=new hO,this.hoverObj={nodes:{},edges:{}},this.options={},this.defaultOptions={multiselect:!1,selectable:!0,selectConnectedEdges:!0,hoverConnectedEdges:!0},fo(this.options,this.defaultOptions),this.body.emitter.on("_dataChanged",(function(){o.updateSelection()}))}return $l(t,[{key:"setOptions",value:function(t){if(void 0!==t){Ny(["multiselect","hoverConnectedEdges","selectable","selectConnectedEdges"],this.options,t)}}},{key:"selectOnPoint",value:function(t){var e=!1;if(!0===this.options.selectable){var i=this.getNodeAt(t)||this.getEdgeAt(t);this.unselectAll(),void 0!==i&&(e=this.selectObject(i)),this.body.emitter.emit("_requestRedraw")}return e}},{key:"selectAdditionalOnPoint",value:function(t){var e=!1;if(!0===this.options.selectable){var i=this.getNodeAt(t)||this.getEdgeAt(t);void 0!==i&&(e=!0,!0===i.isSelected()?this.deselectObject(i):this.selectObject(i),this.body.emitter.emit("_requestRedraw"))}return e}},{key:"_initBaseEvent",value:function(t,e){var i={};return i.pointer={DOM:{x:e.x,y:e.y},canvas:this.canvas.DOMtoCanvas(e)},i.event=t,i}},{key:"generateClickEvent",value:function(t,e,i,o){var n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=this._initBaseEvent(e,i);if(!0===n)r.nodes=[],r.edges=[];else{var s=this.getSelection();r.nodes=s.nodes,r.edges=s.edges}void 0!==o&&(r.previousSelection=o),"click"==t&&(r.items=this.getClickedItems(i)),void 0!==e.controlEdge&&(r.controlEdge=e.controlEdge),this.body.emitter.emit(t,r)}},{key:"selectObject",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.selectConnectedEdges;if(void 0!==t){if(t instanceof M_){var i;if(!0===e)(i=this._selectionAccumulator).addEdges.apply(i,Jc(t.edges));this._selectionAccumulator.addNodes(t)}else this._selectionAccumulator.addEdges(t);return!0}return!1}},{key:"deselectObject",value:function(t){!0===t.isSelected()&&(t.selected=!1,this._removeFromSelection(t))}},{key:"_getAllNodesOverlappingWith",value:function(t){for(var e=[],i=this.body.nodes,o=0;o<this.body.nodeIndices.length;o++){var n=this.body.nodeIndices[o];i[n].isOverlappingWith(t)&&e.push(n)}return e}},{key:"_pointerToPositionObject",value:function(t){var e=this.canvas.DOMtoCanvas(t);return{left:e.x-1,top:e.y+1,right:e.x+1,bottom:e.y-1}}},{key:"getNodeAt",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=this._pointerToPositionObject(t),o=this._getAllNodesOverlappingWith(i);return o.length>0?!0===e?this.body.nodes[o[o.length-1]]:o[o.length-1]:void 0}},{key:"_getEdgesOverlappingWith",value:function(t,e){for(var i=this.body.edges,o=0;o<this.body.edgeIndices.length;o++){var n=this.body.edgeIndices[o];i[n].isOverlappingWith(t)&&e.push(n)}}},{key:"_getAllEdgesOverlappingWith",value:function(t){var e=[];return this._getEdgesOverlappingWith(t,e),e}},{key:"getEdgeAt",value:function(t){for(var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=this.canvas.DOMtoCanvas(t),o=10,n=null,r=this.body.edges,s=0;s<this.body.edgeIndices.length;s++){var a=this.body.edgeIndices[s],h=r[a];if(h.connected){var d=h.from.x,l=h.from.y,c=h.to.x,u=h.to.y,f=h.edgeType.getDistanceToEdge(d,l,c,u,i.x,i.y);f<o&&(n=a,o=f)}}return null!==n?!0===e?this.body.edges[n]:n:void 0}},{key:"_addToHover",value:function(t){t instanceof M_?this.hoverObj.nodes[t.id]=t:this.hoverObj.edges[t.id]=t}},{key:"_removeFromSelection",value:function(t){var e;t instanceof M_?(this._selectionAccumulator.deleteNodes(t),(e=this._selectionAccumulator).deleteEdges.apply(e,Jc(t.edges))):this._selectionAccumulator.deleteEdges(t)}},{key:"unselectAll",value:function(){this._selectionAccumulator.clear()}},{key:"getSelectedNodeCount",value:function(){return this._selectionAccumulator.sizeNodes}},{key:"getSelectedEdgeCount",value:function(){return this._selectionAccumulator.sizeEdges}},{key:"_hoverConnectedEdges",value:function(t){for(var e=0;e<t.edges.length;e++){var i=t.edges[e];i.hover=!0,this._addToHover(i)}}},{key:"emitBlurEvent",value:function(t,e,i){var o=this._initBaseEvent(t,e);!0===i.hover&&(i.hover=!1,i instanceof M_?(o.node=i.id,this.body.emitter.emit("blurNode",o)):(o.edge=i.id,this.body.emitter.emit("blurEdge",o)))}},{key:"emitHoverEvent",value:function(t,e,i){var o=this._initBaseEvent(t,e),n=!1;return!1===i.hover&&(i.hover=!0,this._addToHover(i),n=!0,i instanceof M_?(o.node=i.id,this.body.emitter.emit("hoverNode",o)):(o.edge=i.id,this.body.emitter.emit("hoverEdge",o))),n}},{key:"hoverObject",value:function(t,e){var i=this.getNodeAt(e);void 0===i&&(i=this.getEdgeAt(e));var o=!1;for(var n in this.hoverObj.nodes)Object.prototype.hasOwnProperty.call(this.hoverObj.nodes,n)&&(void 0===i||i instanceof M_&&i.id!=n||i instanceof Sx)&&(this.emitBlurEvent(t,e,this.hoverObj.nodes[n]),delete this.hoverObj.nodes[n],o=!0);for(var r in this.hoverObj.edges)Object.prototype.hasOwnProperty.call(this.hoverObj.edges,r)&&(!0===o?(this.hoverObj.edges[r].hover=!1,delete this.hoverObj.edges[r]):(void 0===i||i instanceof Sx&&i.id!=r||i instanceof M_&&!i.hover)&&(this.emitBlurEvent(t,e,this.hoverObj.edges[r]),delete this.hoverObj.edges[r],o=!0));if(void 0!==i){var s=mu(this.hoverObj.edges).length,a=mu(this.hoverObj.nodes).length;(o||i instanceof Sx&&0===s&&0===a||i instanceof M_&&0===s&&0===a)&&(o=this.emitHoverEvent(t,e,i)),i instanceof M_&&!0===this.options.hoverConnectedEdges&&this._hoverConnectedEdges(i)}!0===o&&this.body.emitter.emit("_requestRedraw")}},{key:"commitWithoutEmitting",value:function(){this._selectionAccumulator.commit()}},{key:"commitAndEmit",value:function(t,e){var i=!1,o=this._selectionAccumulator.commit(),n={nodes:o.nodes.previous,edges:o.edges.previous};o.edges.deleted.length>0&&(this.generateClickEvent("deselectEdge",e,t,n),i=!0),o.nodes.deleted.length>0&&(this.generateClickEvent("deselectNode",e,t,n),i=!0),o.nodes.added.length>0&&(this.generateClickEvent("selectNode",e,t),i=!0),o.edges.added.length>0&&(this.generateClickEvent("selectEdge",e,t),i=!0),!0===i&&this.generateClickEvent("select",e,t)}},{key:"getSelection",value:function(){return{nodes:this.getSelectedNodeIds(),edges:this.getSelectedEdgeIds()}}},{key:"getSelectedNodes",value:function(){return this._selectionAccumulator.getNodes()}},{key:"getSelectedEdges",value:function(){return this._selectionAccumulator.getEdges()}},{key:"getSelectedNodeIds",value:function(){var t;return vu(t=this._selectionAccumulator.getNodes()).call(t,(function(t){return t.id}))}},{key:"getSelectedEdgeIds",value:function(){var t;return vu(t=this._selectionAccumulator.getEdges()).call(t,(function(t){return t.id}))}},{key:"setSelection",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t||!t.nodes&&!t.edges)throw new TypeError("Selection must be an object with nodes and/or edges properties");if((e.unselectAll||void 0===e.unselectAll)&&this.unselectAll(),t.nodes){var i,o=dO(t.nodes);try{for(o.s();!(i=o.n()).done;){var n=i.value,r=this.body.nodes[n];if(!r)throw new RangeError('Node with id "'+n+'" not found');this.selectObject(r,e.highlightEdges)}}catch(t){o.e(t)}finally{o.f()}}if(t.edges){var s,a=dO(t.edges);try{for(a.s();!(s=a.n()).done;){var h=s.value,d=this.body.edges[h];if(!d)throw new RangeError('Edge with id "'+h+'" not found');this.selectObject(d)}}catch(t){a.e(t)}finally{a.f()}}this.body.emitter.emit("_requestRedraw"),this._selectionAccumulator.commit()}},{key:"selectNodes",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(!t||void 0===t.length)throw"Selection must be an array with ids";this.setSelection({nodes:t},{highlightEdges:e})}},{key:"selectEdges",value:function(t){if(!t||void 0===t.length)throw"Selection must be an array with ids";this.setSelection({edges:t})}},{key:"updateSelection",value:function(){for(var t in this._selectionAccumulator.getNodes())Object.prototype.hasOwnProperty.call(this.body.nodes,t.id)||this._selectionAccumulator.deleteNodes(t);for(var e in this._selectionAccumulator.getEdges())Object.prototype.hasOwnProperty.call(this.body.edges,e.id)||this._selectionAccumulator.deleteEdges(e)}},{key:"getClickedItems",value:function(t){for(var e=this.canvas.DOMtoCanvas(t),i=[],o=this.body.nodeIndices,n=this.body.nodes,r=o.length-1;r>=0;r--){var s=n[o[r]].getItemsOnPoint(e);i.push.apply(i,s)}for(var a=this.body.edgeIndices,h=this.body.edges,d=a.length-1;d>=0;d--){var l=h[a[d]].getItemsOnPoint(e);i.push.apply(i,l)}return i}}]),t}(),uO=vh,fO=Math.floor,pO=function(t,e){var i=t.length,o=fO(i/2);return i<8?vO(t,e):gO(t,pO(uO(t,0,o),e),pO(uO(t,o),e),e)},vO=function(t,e){for(var i,o,n=t.length,r=1;r<n;){for(o=r,i=t[r];o&&e(t[o-1],i)>0;)t[o]=t[--o];o!==r++&&(t[o]=i)}return t},gO=function(t,e,i,o){for(var n=e.length,r=i.length,s=0,a=0;s<n||a<r;)t[s+a]=s<n&&a<r?o(e[s],i[a])<=0?e[s++]:i[a++]:s<n?e[s++]:i[a++];return t},yO=pO,mO=et.match(/firefox\/(\d+)/i),bO=!!mO&&+mO[1],wO=/MSIE|Trident/.test(et),kO=et.match(/AppleWebKit\/(\d+)\./),_O=!!kO&&+kO[1],xO=xi,EO=y,OO=Et,CO=Lt,SO=zi,TO=on,MO=r,PO=yO,DO=Ou,BO=bO,IO=wO,zO=ht,FO=_O,NO=[],AO=EO(NO.sort),RO=EO(NO.push),jO=MO((function(){NO.sort(void 0)})),LO=MO((function(){NO.sort(null)})),HO=DO("sort"),WO=!MO((function(){if(zO)return zO<70;if(!(BO&&BO>3)){if(IO)return!0;if(FO)return FO<603;var t,e,i,o,n="";for(t=65;t<76;t++){switch(e=String.fromCharCode(t),t){case 66:case 69:case 70:case 72:i=3;break;case 68:case 71:i=4;break;default:i=2}for(o=0;o<47;o++)NO.push({k:e+o,v:i})}for(NO.sort((function(t,e){return e.v-t.v})),o=0;o<NO.length;o++)e=NO[o].k.charAt(0),n.charAt(n.length-1)!==e&&(n+=e);return"DGBEFHACIJK"!==n}}));xO({target:"Array",proto:!0,forced:jO||!LO||!HO||!WO},{sort:function(t){void 0!==t&&OO(t);var e=CO(this);if(WO)return void 0===t?AO(e):AO(e,t);var i,o,n=[],r=SO(e);for(o=0;o<r;o++)o in e&&RO(n,e[o]);for(PO(n,function(t){return function(e,i){return void 0===i?-1:void 0===e?1:void 0!==t?+t(e,i)||0:TO(e)>TO(i)?1:-1}}(t)),i=n.length,o=0;o<i;)e[o]=n[o++];for(;o<r;)delete e[o++];return e}});var VO=Mo("Array").sort,qO=tt,UO=VO,YO=Array.prototype,XO=function(t){var e=t.sort;return t===YO||qO(YO,t)&&e===YO.sort?UO:e},GO=XO,KO=Et,$O=Lt,ZO=L,QO=zi,JO=n.TypeError,tC=function(t){return function(e,i,o,n){KO(i);var r=$O(e),s=ZO(r),a=QO(r),h=t?a-1:0,d=t?-1:1;if(o<2)for(;;){if(h in s){n=s[h],h+=d;break}if(h+=d,t?h<0:a<=h)throw JO("Reduce of empty array with no initial value")}for(;t?h>=0:a>h;h+=d)h in s&&(n=i(n,s[h],h,r));return n}},eC={left:tC(!1),right:tC(!0)},iC="process"==z(n.process),oC=eC.left,nC=ht,rC=iC;xi({target:"Array",proto:!0,forced:!Ou("reduce")||!rC&&nC>79&&nC<83},{reduce:function(t){var e=arguments.length;return oC(this,t,e,e>1?arguments[1]:void 0)}});var sC=Mo("Array").reduce,aC=tt,hC=sC,dC=Array.prototype,lC=function(t){var e=t.reduce;return t===dC||aC(dC,t)&&e===dC.reduce?hC:e},cC=lC,uC={};!function(t){!function(t){function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}t.__esModule=!0,t.sort=v;var i=32,o=7,n=256,r=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9];function s(t){return t<1e5?t<100?t<10?0:1:t<1e4?t<1e3?2:3:4:t<1e7?t<1e6?5:6:t<1e9?t<1e8?7:8:9}function a(t,e){if(t===e)return 0;if(~~t===t&&~~e===e){if(0===t||0===e)return t<e?-1:1;if(t<0||e<0){if(e>=0)return-1;if(t>=0)return 1;t=-t,e=-e}var i=s(t),o=s(e),n=0;return i<o?(t*=r[o-i-1],e/=10,n=-1):i>o&&(e*=r[i-o-1],t/=10,n=1),t===e?n:t<e?-1:1}var a=String(t),h=String(e);return a===h?0:a<h?-1:1}function h(t){for(var e=0;t>=i;)e|=1&t,t>>=1;return t+e}function d(t,e,i,o){var n=e+1;if(n===i)return 1;if(o(t[n++],t[e])<0){for(;n<i&&o(t[n],t[n-1])<0;)n++;l(t,e,n)}else for(;n<i&&o(t[n],t[n-1])>=0;)n++;return n-e}function l(t,e,i){for(i--;e<i;){var o=t[e];t[e++]=t[i],t[i--]=o}}function c(t,e,i,o,n){for(o===e&&o++;o<i;o++){for(var r=t[o],s=e,a=o;s<a;){var h=s+a>>>1;n(r,t[h])<0?a=h:s=h+1}var d=o-s;switch(d){case 3:t[s+3]=t[s+2];case 2:t[s+2]=t[s+1];case 1:t[s+1]=t[s];break;default:for(;d>0;)t[s+d]=t[s+d-1],d--}t[s]=r}}function u(t,e,i,o,n,r){var s=0,a=0,h=1;if(r(t,e[i+n])>0){for(a=o-n;h<a&&r(t,e[i+n+h])>0;)s=h,(h=1+(h<<1))<=0&&(h=a);h>a&&(h=a),s+=n,h+=n}else{for(a=n+1;h<a&&r(t,e[i+n-h])<=0;)s=h,(h=1+(h<<1))<=0&&(h=a);h>a&&(h=a);var d=s;s=n-h,h=n-d}for(s++;s<h;){var l=s+(h-s>>>1);r(t,e[i+l])>0?s=l+1:h=l}return h}function f(t,e,i,o,n,r){var s=0,a=0,h=1;if(r(t,e[i+n])<0){for(a=n+1;h<a&&r(t,e[i+n-h])<0;)s=h,(h=1+(h<<1))<=0&&(h=a);h>a&&(h=a);var d=s;s=n-h,h=n-d}else{for(a=o-n;h<a&&r(t,e[i+n+h])>=0;)s=h,(h=1+(h<<1))<=0&&(h=a);h>a&&(h=a),s+=n,h+=n}for(s++;s<h;){var l=s+(h-s>>>1);r(t,e[i+l])<0?h=l:s=l+1}return h}var p=function(){function t(i,r){e(this,t),this.array=null,this.compare=null,this.minGallop=o,this.length=0,this.tmpStorageLength=n,this.stackLength=0,this.runStart=null,this.runLength=null,this.stackSize=0,this.array=i,this.compare=r,this.length=i.length,this.length<2*n&&(this.tmpStorageLength=this.length>>>1),this.tmp=new Array(this.tmpStorageLength),this.stackLength=this.length<120?5:this.length<1542?10:this.length<119151?19:40,this.runStart=new Array(this.stackLength),this.runLength=new Array(this.stackLength)}return t.prototype.pushRun=function(t,e){this.runStart[this.stackSize]=t,this.runLength[this.stackSize]=e,this.stackSize+=1},t.prototype.mergeRuns=function(){for(;this.stackSize>1;){var t=this.stackSize-2;if(t>=1&&this.runLength[t-1]<=this.runLength[t]+this.runLength[t+1]||t>=2&&this.runLength[t-2]<=this.runLength[t]+this.runLength[t-1])this.runLength[t-1]<this.runLength[t+1]&&t--;else if(this.runLength[t]>this.runLength[t+1])break;this.mergeAt(t)}},t.prototype.forceMergeRuns=function(){for(;this.stackSize>1;){var t=this.stackSize-2;t>0&&this.runLength[t-1]<this.runLength[t+1]&&t--,this.mergeAt(t)}},t.prototype.mergeAt=function(t){var e=this.compare,i=this.array,o=this.runStart[t],n=this.runLength[t],r=this.runStart[t+1],s=this.runLength[t+1];this.runLength[t]=n+s,t===this.stackSize-3&&(this.runStart[t+1]=this.runStart[t+2],this.runLength[t+1]=this.runLength[t+2]),this.stackSize--;var a=f(i[r],i,o,n,0,e);o+=a,0!=(n-=a)&&0!==(s=u(i[o+n-1],i,r,s,s-1,e))&&(n<=s?this.mergeLow(o,n,r,s):this.mergeHigh(o,n,r,s))},t.prototype.mergeLow=function(t,e,i,n){var r=this.compare,s=this.array,a=this.tmp,h=0;for(h=0;h<e;h++)a[h]=s[t+h];var d=0,l=i,c=t;if(s[c++]=s[l++],0!=--n)if(1!==e){for(var p=this.minGallop;;){var v=0,g=0,y=!1;do{if(r(s[l],a[d])<0){if(s[c++]=s[l++],g++,v=0,0==--n){y=!0;break}}else if(s[c++]=a[d++],v++,g=0,1==--e){y=!0;break}}while((v|g)<p);if(y)break;do{if(0!==(v=f(s[l],a,d,e,0,r))){for(h=0;h<v;h++)s[c+h]=a[d+h];if(c+=v,d+=v,(e-=v)<=1){y=!0;break}}if(s[c++]=s[l++],0==--n){y=!0;break}if(0!==(g=u(a[d],s,l,n,0,r))){for(h=0;h<g;h++)s[c+h]=s[l+h];if(c+=g,l+=g,0==(n-=g)){y=!0;break}}if(s[c++]=a[d++],1==--e){y=!0;break}p--}while(v>=o||g>=o);if(y)break;p<0&&(p=0),p+=2}if(this.minGallop=p,p<1&&(this.minGallop=1),1===e){for(h=0;h<n;h++)s[c+h]=s[l+h];s[c+n]=a[d]}else{if(0===e)throw new Error("mergeLow preconditions were not respected");for(h=0;h<e;h++)s[c+h]=a[d+h]}}else{for(h=0;h<n;h++)s[c+h]=s[l+h];s[c+n]=a[d]}else for(h=0;h<e;h++)s[c+h]=a[d+h]},t.prototype.mergeHigh=function(t,e,i,n){var r=this.compare,s=this.array,a=this.tmp,h=0;for(h=0;h<n;h++)a[h]=s[i+h];var d=t+e-1,l=n-1,c=i+n-1,p=0,v=0;if(s[c--]=s[d--],0!=--e)if(1!==n){for(var g=this.minGallop;;){var y=0,m=0,b=!1;do{if(r(a[l],s[d])<0){if(s[c--]=s[d--],y++,m=0,0==--e){b=!0;break}}else if(s[c--]=a[l--],m++,y=0,1==--n){b=!0;break}}while((y|m)<g);if(b)break;do{if(0!=(y=e-f(a[l],s,t,e,e-1,r))){for(e-=y,v=1+(c-=y),p=1+(d-=y),h=y-1;h>=0;h--)s[v+h]=s[p+h];if(0===e){b=!0;break}}if(s[c--]=a[l--],1==--n){b=!0;break}if(0!=(m=n-u(s[d],a,0,n,n-1,r))){for(n-=m,v=1+(c-=m),p=1+(l-=m),h=0;h<m;h++)s[v+h]=a[p+h];if(n<=1){b=!0;break}}if(s[c--]=s[d--],0==--e){b=!0;break}g--}while(y>=o||m>=o);if(b)break;g<0&&(g=0),g+=2}if(this.minGallop=g,g<1&&(this.minGallop=1),1===n){for(v=1+(c-=e),p=1+(d-=e),h=e-1;h>=0;h--)s[v+h]=s[p+h];s[c]=a[l]}else{if(0===n)throw new Error("mergeHigh preconditions were not respected");for(p=c-(n-1),h=0;h<n;h++)s[p+h]=a[h]}}else{for(v=1+(c-=e),p=1+(d-=e),h=e-1;h>=0;h--)s[v+h]=s[p+h];s[c]=a[l]}else for(p=c-(n-1),h=0;h<n;h++)s[p+h]=a[h]},t}();function v(t,e,o,n){if(!Array.isArray(t))throw new TypeError("Can only sort arrays");e?"function"!=typeof e&&(n=o,o=e,e=a):e=a,o||(o=0),n||(n=t.length);var r=n-o;if(!(r<2)){var s=0;if(r<i)c(t,o,n,o+(s=d(t,o,n,e)),e);else{var l=new p(t,e),u=h(r);do{if((s=d(t,o,n,e))<u){var f=r;f>u&&(f=u),c(t,o,o+f,o+s,e),s=f}l.pushRun(o,s),l.mergeRuns(),r-=s,o+=s}while(0!==r);l.forceMergeRuns()}}}}(t)}(uC);var fC=uC;function pC(t){var e=function(){if("undefined"==typeof Reflect||!zk)return!1;if(zk.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(zk(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,o=Hk(t);if(e){var n=Hk(this).constructor;i=zk(o,arguments,n)}else i=o.apply(this,arguments);return jk(this,i)}}var vC=function(){function t(){Xl(this,t)}return $l(t,[{key:"abstract",value:function(){throw new Error("Can't instantiate abstract class!")}},{key:"fake_use",value:function(){}},{key:"curveType",value:function(){return this.abstract()}},{key:"getPosition",value:function(t){return this.fake_use(t),this.abstract()}},{key:"setPosition",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;this.fake_use(t,e,i),this.abstract()}},{key:"getTreeSize",value:function(t){return this.fake_use(t),this.abstract()}},{key:"sort",value:function(t){this.fake_use(t),this.abstract()}},{key:"fix",value:function(t,e){this.fake_use(t,e),this.abstract()}},{key:"shift",value:function(t,e){this.fake_use(t,e),this.abstract()}}]),t}(),gC=function(t){Rk(i,t);var e=pC(i);function i(t){var o;return Xl(this,i),(o=e.call(this)).layout=t,o}return $l(i,[{key:"curveType",value:function(){return"horizontal"}},{key:"getPosition",value:function(t){return t.x}},{key:"setPosition",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;void 0!==i&&this.layout.hierarchical.addToOrdering(t,i),t.x=e}},{key:"getTreeSize",value:function(t){var e=this.layout.hierarchical.getTreeSize(this.layout.body.nodes,t);return{min:e.min_x,max:e.max_x}}},{key:"sort",value:function(t){fC.sort(t,(function(t,e){return t.x-e.x}))}},{key:"fix",value:function(t,e){t.y=this.layout.options.hierarchical.levelSeparation*e,t.options.fixed.y=!0}},{key:"shift",value:function(t,e){this.layout.body.nodes[t].x+=e}}]),i}(vC),yC=function(t){Rk(i,t);var e=pC(i);function i(t){var o;return Xl(this,i),(o=e.call(this)).layout=t,o}return $l(i,[{key:"curveType",value:function(){return"vertical"}},{key:"getPosition",value:function(t){return t.y}},{key:"setPosition",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;void 0!==i&&this.layout.hierarchical.addToOrdering(t,i),t.y=e}},{key:"getTreeSize",value:function(t){var e=this.layout.hierarchical.getTreeSize(this.layout.body.nodes,t);return{min:e.min_y,max:e.max_y}}},{key:"sort",value:function(t){fC.sort(t,(function(t,e){return t.y-e.y}))}},{key:"fix",value:function(t,e){t.x=this.layout.options.hierarchical.levelSeparation*e,t.options.fixed.x=!0}},{key:"shift",value:function(t,e){this.layout.body.nodes[t].y+=e}}]),i}(vC),mC=Vh.every;xi({target:"Array",proto:!0,forced:!Ou("every")},{every:function(t){return mC(this,t,arguments.length>1?arguments[1]:void 0)}});var bC=Mo("Array").every,wC=tt,kC=bC,_C=Array.prototype,xC=function(t){var e=t.every;return t===_C||wC(_C,t)&&e===_C.every?kC:e},EC=xC;function OC(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return CC(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return CC(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function CC(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function SC(t,e){var i=new uE;return Fu(t).call(t,(function(t){var e;Fu(e=t.edges).call(e,(function(t){t.connected&&i.add(t)}))})),Fu(i).call(i,(function(t){var i=t.from.id,o=t.to.id;null==e[i]&&(e[i]=0),(null==e[o]||e[i]>=e[o])&&(e[o]=e[i]+1)})),e}function TC(t,e,i,o){var n,r,s=Hp(null),a=cC(n=Jc(lk(o).call(o))).call(n,(function(t,e){return t+1+e.edges.length}),0),h=i+"Id",d="to"===i?1:-1,l=OC(o);try{var c=function(){var n=$c(r.value,2),l=n[0],c=n[1];if(!o.has(l)||!t(c))return"continue";s[l]=0;for(var u=[c],f=0,p=void 0,v=function(){var t,n;if(!o.has(l))return"continue";var r=s[p.id]+d;if(Fu(t=Yf(n=p.edges).call(n,(function(t){return t.connected&&t.to!==t.from&&t[i]!==p&&o.has(t.toId)&&o.has(t.fromId)}))).call(t,(function(t){var o=t[h],n=s[o];(null==n||e(r,n))&&(s[o]=r,u.push(t[i]))})),f>a)return{v:{v:SC(o,s)}};++f};p=u.pop();){var g=v();if("continue"!==g&&"object"===Qc(g))return g.v}};for(l.s();!(r=l.n()).done;){var u=c();if("continue"!==u&&"object"===Qc(u))return u.v}}catch(t){l.e(t)}finally{l.f()}return s}var MC=function(){function t(){Xl(this,t),this.childrenReference={},this.parentReference={},this.trees={},this.distributionOrdering={},this.levels={},this.distributionIndex={},this.isTree=!1,this.treeIndex=-1}return $l(t,[{key:"addRelation",value:function(t,e){void 0===this.childrenReference[t]&&(this.childrenReference[t]=[]),this.childrenReference[t].push(e),void 0===this.parentReference[e]&&(this.parentReference[e]=[]),this.parentReference[e].push(t)}},{key:"checkIfTree",value:function(){for(var t in this.parentReference)if(this.parentReference[t].length>1)return void(this.isTree=!1);this.isTree=!0}},{key:"numTrees",value:function(){return this.treeIndex+1}},{key:"setTreeIndex",value:function(t,e){void 0!==e&&void 0===this.trees[t.id]&&(this.trees[t.id]=e,this.treeIndex=Math.max(e,this.treeIndex))}},{key:"ensureLevel",value:function(t){void 0===this.levels[t]&&(this.levels[t]=0)}},{key:"getMaxLevel",value:function(t){var e=this,i={};return function t(o){if(void 0!==i[o])return i[o];var n=e.levels[o];if(e.childrenReference[o]){var r=e.childrenReference[o];if(r.length>0)for(var s=0;s<r.length;s++)n=Math.max(n,t(r[s]))}return i[o]=n,n}(t)}},{key:"levelDownstream",value:function(t,e){void 0===this.levels[e.id]&&(void 0===this.levels[t.id]&&(this.levels[t.id]=0),this.levels[e.id]=this.levels[t.id]+1)}},{key:"setMinLevelToZero",value:function(t){var e=1e9;for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&void 0!==this.levels[i]&&(e=Math.min(this.levels[i],e));for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&void 0!==this.levels[o]&&(this.levels[o]-=e)}},{key:"getTreeSize",value:function(t,e){var i=1e9,o=-1e9,n=1e9,r=-1e9;for(var s in this.trees)if(Object.prototype.hasOwnProperty.call(this.trees,s)&&this.trees[s]===e){var a=t[s];i=Math.min(a.x,i),o=Math.max(a.x,o),n=Math.min(a.y,n),r=Math.max(a.y,r)}return{min_x:i,max_x:o,min_y:n,max_y:r}}},{key:"hasSameParent",value:function(t,e){var i=this.parentReference[t.id],o=this.parentReference[e.id];if(void 0===i||void 0===o)return!1;for(var n=0;n<i.length;n++)for(var r=0;r<o.length;r++)if(i[n]==o[r])return!0;return!1}},{key:"inSameSubNetwork",value:function(t,e){return this.trees[t.id]===this.trees[e.id]}},{key:"getLevels",value:function(){return mu(this.distributionOrdering)}},{key:"addToOrdering",value:function(t,e){void 0===this.distributionOrdering[e]&&(this.distributionOrdering[e]=[]);var i=!1,o=this.distributionOrdering[e];for(var n in o)if(o[n]===t){i=!0;break}i||(this.distributionOrdering[e].push(t),this.distributionIndex[t.id]=this.distributionOrdering[e].length-1)}}]),t}(),PC=function(){function t(e){Xl(this,t),this.body=e,this._resetRNG(Math.random()+":"+xu()),this.setPhysics=!1,this.options={},this.optionsBackup={physics:{}},this.defaultOptions={randomSeed:void 0,improvedLayout:!0,clusterThreshold:150,hierarchical:{enabled:!1,levelSeparation:150,nodeSpacing:100,treeSpacing:200,blockShifting:!0,edgeMinimization:!0,parentCentralization:!0,direction:"UD",sortMethod:"hubsize"}},fo(this.options,this.defaultOptions),this.bindEventListeners()}return $l(t,[{key:"bindEventListeners",value:function(){var t=this;this.body.emitter.on("_dataChanged",(function(){t.setupHierarchicalLayout()})),this.body.emitter.on("_dataLoaded",(function(){t.layoutNetwork()})),this.body.emitter.on("_resetHierarchicalLayout",(function(){t.setupHierarchicalLayout()})),this.body.emitter.on("_adjustEdgesForHierarchicalLayout",(function(){if(!0===t.options.hierarchical.enabled){var e=t.direction.curveType();t.body.emitter.emit("_forceDisableDynamicCurves",e,!1)}}))}},{key:"setOptions",value:function(t,e){if(void 0!==t){var i=this.options.hierarchical,o=i.enabled;if(Ny(["randomSeed","improvedLayout","clusterThreshold"],this.options,t),tm(this.options,t,"hierarchical"),void 0!==t.randomSeed&&this._resetRNG(t.randomSeed),!0===i.enabled)return!0===o&&this.body.emitter.emit("refresh",!0),"RL"===i.direction||"DU"===i.direction?i.levelSeparation>0&&(i.levelSeparation*=-1):i.levelSeparation<0&&(i.levelSeparation*=-1),this.setDirectionStrategy(),this.body.emitter.emit("_resetHierarchicalLayout"),this.adaptAllOptionsForHierarchicalLayout(e);if(!0===o)return this.body.emitter.emit("refresh"),Ry(e,this.optionsBackup)}return e}},{key:"_resetRNG",value:function(t){this.initialRandomSeed=t,this._rng=_y(this.initialRandomSeed)}},{key:"adaptAllOptionsForHierarchicalLayout",value:function(t){if(!0===this.options.hierarchical.enabled){var e=this.optionsBackup.physics;void 0===t.physics||!0===t.physics?(t.physics={enabled:void 0===e.enabled||e.enabled,solver:"hierarchicalRepulsion"},e.enabled=void 0===e.enabled||e.enabled,e.solver=e.solver||"barnesHut"):"object"===Qc(t.physics)?(e.enabled=void 0===t.physics.enabled||t.physics.enabled,e.solver=t.physics.solver||"barnesHut",t.physics.solver="hierarchicalRepulsion"):!1!==t.physics&&(e.solver="barnesHut",t.physics={solver:"hierarchicalRepulsion"});var i=this.direction.curveType();if(void 0===t.edges)this.optionsBackup.edges={smooth:{enabled:!0,type:"dynamic"}},t.edges={smooth:!1};else if(void 0===t.edges.smooth)this.optionsBackup.edges={smooth:{enabled:!0,type:"dynamic"}},t.edges.smooth=!1;else if("boolean"==typeof t.edges.smooth)this.optionsBackup.edges={smooth:t.edges.smooth},t.edges.smooth={enabled:t.edges.smooth,type:i};else{var o=t.edges.smooth;void 0!==o.type&&"dynamic"!==o.type&&(i=o.type),this.optionsBackup.edges={smooth:{enabled:void 0===o.enabled||o.enabled,type:void 0===o.type?"dynamic":o.type,roundness:void 0===o.roundness?.5:o.roundness,forceDirection:void 0!==o.forceDirection&&o.forceDirection}},t.edges.smooth={enabled:void 0===o.enabled||o.enabled,type:i,roundness:void 0===o.roundness?.5:o.roundness,forceDirection:void 0!==o.forceDirection&&o.forceDirection}}this.body.emitter.emit("_forceDisableDynamicCurves",i)}return t}},{key:"positionInitially",value:function(t){if(!0!==this.options.hierarchical.enabled){this._resetRNG(this.initialRandomSeed);for(var e=t.length+50,i=0;i<t.length;i++){var o=t[i],n=2*Math.PI*this._rng();void 0===o.x&&(o.x=e*Math.cos(n)),void 0===o.y&&(o.y=e*Math.sin(n))}}}},{key:"layoutNetwork",value:function(){if(!0!==this.options.hierarchical.enabled&&!0===this.options.improvedLayout){for(var t=this.body.nodeIndices,e=0,i=0;i<t.length;i++){!0===this.body.nodes[t[i]].predefinedPosition&&(e+=1)}if(e<.5*t.length){var o=0,n=this.options.clusterThreshold,r={clusterNodeProperties:{shape:"ellipse",label:"",group:"",font:{multi:!1}},clusterEdgeProperties:{label:"",font:{multi:!1},smooth:{enabled:!1}}};if(t.length>n){for(var s=t.length;t.length>n&&o<=10;){o+=1;var a=t.length;if(o%3==0?this.body.modules.clustering.clusterBridges(r):this.body.modules.clustering.clusterOutliers(r),a==t.length&&o%3!=0)return this._declusterAll(),this.body.emitter.emit("_layoutFailed"),void console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.")}this.body.modules.kamadaKawai.setOptions({springLength:Math.max(150,2*s)})}o>10&&console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result."),this.body.modules.kamadaKawai.solve(t,this.body.edgeIndices,!0),this._shiftToCenter();for(var h=0;h<t.length;h++){var d=this.body.nodes[t[h]];!1===d.predefinedPosition&&(d.x+=70*(.5-this._rng()),d.y+=70*(.5-this._rng()))}this._declusterAll(),this.body.emitter.emit("_repositionBezierNodes")}}}},{key:"_shiftToCenter",value:function(){for(var t=Gx.getRangeCore(this.body.nodes,this.body.nodeIndices),e=Gx.findCenter(t),i=0;i<this.body.nodeIndices.length;i++){var o=this.body.nodes[this.body.nodeIndices[i]];o.x-=e.x,o.y-=e.y}}},{key:"_declusterAll",value:function(){for(var t=!0;!0===t;){t=!1;for(var e=0;e<this.body.nodeIndices.length;e++)!0===this.body.nodes[this.body.nodeIndices[e]].isCluster&&(t=!0,this.body.modules.clustering.openCluster(this.body.nodeIndices[e],{},!1));!0===t&&this.body.emitter.emit("_dataChanged")}}},{key:"getSeed",value:function(){return this.initialRandomSeed}},{key:"setupHierarchicalLayout",value:function(){if(!0===this.options.hierarchical.enabled&&this.body.nodeIndices.length>0){var t,e,i=!1,o=!1;for(e in this.lastNodeOnLevel={},this.hierarchical=new MC,this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes,e)&&(void 0!==(t=this.body.nodes[e]).options.level?(i=!0,this.hierarchical.levels[e]=t.options.level):o=!0);if(!0===o&&!0===i)throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");if(!0===o){var n=this.options.hierarchical.sortMethod;"hubsize"===n?this._determineLevelsByHubsize():"directed"===n?this._determineLevelsDirected():"custom"===n&&this._determineLevelsCustomCallback()}for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes,r)&&this.hierarchical.ensureLevel(r);var s=this._getDistribution();this._generateMap(),this._placeNodesByHierarchy(s),this._condenseHierarchy(),this._shiftToCenter()}}},{key:"_condenseHierarchy",value:function(){var t=this,e=!1,i={},o=function(e,i){var o=t.hierarchical.trees;for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&o[n]===e&&t.direction.shift(n,i)},n=function(){for(var e=[],i=0;i<t.hierarchical.numTrees();i++)e.push(t.direction.getTreeSize(i));return e},r=function e(i,o){if(!o[i.id]&&(o[i.id]=!0,t.hierarchical.childrenReference[i.id])){var n=t.hierarchical.childrenReference[i.id];if(n.length>0)for(var r=0;r<n.length;r++)e(t.body.nodes[n[r]],o)}},s=function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e9,o=1e9,n=1e9,r=1e9,s=-1e9;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var h=t.body.nodes[a],d=t.hierarchical.levels[h.id],l=t.direction.getPosition(h),c=t._getSpaceAroundNode(h,e),u=$c(c,2),f=u[0],p=u[1];o=Math.min(f,o),n=Math.min(p,n),d<=i&&(r=Math.min(l,r),s=Math.max(l,s))}return[r,s,o,n]},a=function(e,i){var o=t.hierarchical.getMaxLevel(e.id),n=t.hierarchical.getMaxLevel(i.id);return Math.min(o,n)},h=function(e,i,o){for(var n=t.hierarchical,r=0;r<i.length;r++){var s=i[r],a=n.distributionOrdering[s];if(a.length>1)for(var h=0;h<a.length-1;h++){var d=a[h],l=a[h+1];n.hasSameParent(d,l)&&n.inSameSubNetwork(d,l)&&e(d,l,o)}}},d=function(i,o){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],h=t.direction.getPosition(i),d=t.direction.getPosition(o),l=Math.abs(d-h),c=t.options.hierarchical.nodeSpacing;if(l>c){var u={},f={};r(i,u),r(o,f);var p=a(i,o),v=s(u,p),g=s(f,p),y=v[1],m=g[0],b=g[2],w=Math.abs(y-m);if(w>c){var k=y-m+c;k<-b+c&&(k=-b+c),k<0&&(t._shiftBlock(o.id,k),e=!0,!0===n&&t._centerParent(o))}}},l=function(o,n){for(var a=n.id,h=n.edges,d=t.hierarchical.levels[n.id],l=t.options.hierarchical.levelSeparation*t.options.hierarchical.levelSeparation,c={},u=[],f=0;f<h.length;f++){var p=h[f];if(p.toId!=p.fromId){var v=p.toId==a?p.from:p.to;c[h[f].id]=v,t.hierarchical.levels[v.id]<d&&u.push(p)}}var g=function(e,i){for(var o=0,n=0;n<i.length;n++)if(void 0!==c[i[n].id]){var r=t.direction.getPosition(c[i[n].id])-e;o+=r/Math.sqrt(r*r+l)}return o},y=function(e,i){for(var o=0,n=0;n<i.length;n++)if(void 0!==c[i[n].id]){var r=t.direction.getPosition(c[i[n].id])-e;o-=l*Math.pow(r*r+l,-1.5)}return o},m=function(e,i){for(var o=t.direction.getPosition(n),r={},s=0;s<e;s++){var a=g(o,i),h=y(o,i);if(void 0!==r[o-=Math.max(-40,Math.min(40,Math.round(a/h)))])break;r[o]=s}return o},b=m(o,u);!function(o){var a=t.direction.getPosition(n);if(void 0===i[n.id]){var h={};r(n,h),i[n.id]=h}var d=s(i[n.id]),l=d[2],c=d[3],u=o-a,f=0;u>0?f=Math.min(u,c-t.options.hierarchical.nodeSpacing):u<0&&(f=-Math.min(-u,l-t.options.hierarchical.nodeSpacing)),0!=f&&(t._shiftBlock(n.id,f),e=!0)}(b),function(i){var o=t.direction.getPosition(n),r=$c(t._getSpaceAroundNode(n),2),s=r[0],a=r[1],h=i-o,d=o;h>0?d=Math.min(o+(a-t.options.hierarchical.nodeSpacing),i):h<0&&(d=Math.max(o-(s-t.options.hierarchical.nodeSpacing),i)),d!==o&&(t.direction.setPosition(n,d),e=!0)}(b=m(o,h))};!0===this.options.hierarchical.blockShifting&&(function(i){var o=t.hierarchical.getLevels();o=Uu(o).call(o);for(var n=0;n<i&&(e=!1,h(d,o,!0),!0===e);n++);}(5),function(){for(var e in t.body.nodes)Object.prototype.hasOwnProperty.call(t.body.nodes,e)&&t._centerParent(t.body.nodes[e])}()),!0===this.options.hierarchical.edgeMinimization&&function(i){var o=t.hierarchical.getLevels();o=Uu(o).call(o);for(var n=0;n<i;n++){e=!1;for(var r=0;r<o.length;r++)for(var s=o[r],a=t.hierarchical.distributionOrdering[s],h=0;h<a.length;h++)l(1e3,a[h]);if(!0!==e)break}}(20),!0===this.options.hierarchical.parentCentralization&&function(){var e=t.hierarchical.getLevels();e=Uu(e).call(e);for(var i=0;i<e.length;i++)for(var o=e[i],n=t.hierarchical.distributionOrdering[o],r=0;r<n.length;r++)t._centerParent(n[r])}(),function(){for(var e=n(),i=0,r=0;r<e.length-1;r++){i+=e[r].max-e[r+1].min+t.options.hierarchical.treeSpacing,o(r+1,i)}}()}},{key:"_getSpaceAroundNode",value:function(t,e){var i=!0;void 0===e&&(i=!1);var o=this.hierarchical.levels[t.id];if(void 0!==o){var n=this.hierarchical.distributionIndex[t.id],r=this.direction.getPosition(t),s=this.hierarchical.distributionOrdering[o],a=1e9,h=1e9;if(0!==n){var d=s[n-1];if(!0===i&&void 0===e[d.id]||!1===i)a=r-this.direction.getPosition(d)}if(n!=s.length-1){var l=s[n+1];if(!0===i&&void 0===e[l.id]||!1===i){var c=this.direction.getPosition(l);h=Math.min(h,c-r)}}return[a,h]}return[0,0]}},{key:"_centerParent",value:function(t){if(this.hierarchical.parentReference[t.id])for(var e=this.hierarchical.parentReference[t.id],i=0;i<e.length;i++){var o=e[i],n=this.body.nodes[o],r=this.hierarchical.childrenReference[o];if(void 0!==r){var s=this._getCenterPosition(r),a=this.direction.getPosition(n),h=$c(this._getSpaceAroundNode(n),2),d=h[0],l=h[1],c=a-s;(c<0&&Math.abs(c)<l-this.options.hierarchical.nodeSpacing||c>0&&Math.abs(c)<d-this.options.hierarchical.nodeSpacing)&&this.direction.setPosition(n,s)}}}},{key:"_placeNodesByHierarchy",value:function(t){for(var e in this.positionedNodes={},t)if(Object.prototype.hasOwnProperty.call(t,e)){var i,o=mu(t[e]);o=this._indexArrayToNodes(o),GO(i=this.direction).call(i,o);for(var n=0,r=0;r<o.length;r++){var s=o[r];if(void 0===this.positionedNodes[s.id]){var a=this.options.hierarchical.nodeSpacing,h=a*n;n>0&&(h=this.direction.getPosition(o[r-1])+a),this.direction.setPosition(s,h,e),this._validatePositionAndContinue(s,e,h),n++}}}}},{key:"_placeBranchNodes",value:function(t,e){var i,o=this.hierarchical.childrenReference[t];if(void 0!==o){for(var n=[],r=0;r<o.length;r++)n.push(this.body.nodes[o[r]]);GO(i=this.direction).call(i,n);for(var s=0;s<n.length;s++){var a=n[s],h=this.hierarchical.levels[a.id];if(!(h>e&&void 0===this.positionedNodes[a.id]))return;var d=this.options.hierarchical.nodeSpacing,l=void 0;l=0===s?this.direction.getPosition(this.body.nodes[t]):this.direction.getPosition(n[s-1])+d,this.direction.setPosition(a,l,h),this._validatePositionAndContinue(a,h,l)}var c=this._getCenterPosition(n);this.direction.setPosition(this.body.nodes[t],c,e)}}},{key:"_validatePositionAndContinue",value:function(t,e,i){if(this.hierarchical.isTree){if(void 0!==this.lastNodeOnLevel[e]){var o=this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[e]]);if(i-o<this.options.hierarchical.nodeSpacing){var n=o+this.options.hierarchical.nodeSpacing-i,r=this._findCommonParent(this.lastNodeOnLevel[e],t.id);this._shiftBlock(r.withChild,n)}}this.lastNodeOnLevel[e]=t.id,this.positionedNodes[t.id]=!0,this._placeBranchNodes(t.id,e)}}},{key:"_indexArrayToNodes",value:function(t){for(var e=[],i=0;i<t.length;i++)e.push(this.body.nodes[t[i]]);return e}},{key:"_getDistribution",value:function(){var t,e,i={};for(t in this.body.nodes)if(Object.prototype.hasOwnProperty.call(this.body.nodes,t)){e=this.body.nodes[t];var o=void 0===this.hierarchical.levels[t]?0:this.hierarchical.levels[t];this.direction.fix(e,o),void 0===i[o]&&(i[o]={}),i[o][t]=e}return i}},{key:"_getActiveEdges",value:function(t){var e=this,i=[];return Wy(t.edges,(function(t){var o;-1!==zp(o=e.body.edgeIndices).call(o,t.id)&&i.push(t)})),i}},{key:"_getHubSizes",value:function(){var t=this,e={};Wy(this.body.nodeIndices,(function(i){var o=t.body.nodes[i],n=t._getActiveEdges(o).length;e[n]=!0}));var i=[];return Wy(e,(function(t){i.push(Number(t))})),GO(fC).call(fC,i,(function(t,e){return e-t})),i}},{key:"_determineLevelsByHubsize",value:function(){for(var t=this,e=function(e,i){t.hierarchical.levelDownstream(e,i)},i=this._getHubSizes(),o=function(o){var n=i[o];if(0===n)return"break";Wy(t.body.nodeIndices,(function(i){var o=t.body.nodes[i];n===t._getActiveEdges(o).length&&t._crawlNetwork(e,i)}))},n=0;n<i.length;++n){if("break"===o(n))break}}},{key:"_determineLevelsCustomCallback",value:function(){var t=this;this._crawlNetwork((function(e,i,o){var n=t.hierarchical.levels[e.id];void 0===n&&(n=t.hierarchical.levels[e.id]=1e5);var r=(Gx.cloneOptions(e,"node"),Gx.cloneOptions(i,"node"),void Gx.cloneOptions(o,"edge"));t.hierarchical.levels[i.id]=n+r})),this.hierarchical.setMinLevelToZero(this.body.nodes)}},{key:"_determineLevelsDirected",value:function(){var t,e=this,i=cC(t=this.body.nodeIndices).call(t,(function(t,i){return t.set(i,e.body.nodes[i]),t}),new Ew);"roots"===this.options.hierarchical.shakeTowards?this.hierarchical.levels=function(t){return TC((function(e){var i,o;return EC(i=Yf(o=e.edges).call(o,(function(e){return t.has(e.toId)}))).call(i,(function(t){return t.from===e}))}),(function(t,e){return e<t}),"to",t)}(i):this.hierarchical.levels=function(t){return TC((function(e){var i,o;return EC(i=Yf(o=e.edges).call(o,(function(e){return t.has(e.toId)}))).call(i,(function(t){return t.to===e}))}),(function(t,e){return e>t}),"from",t)}(i),this.hierarchical.setMinLevelToZero(this.body.nodes)}},{key:"_generateMap",value:function(){var t=this;this._crawlNetwork((function(e,i){t.hierarchical.levels[i.id]>t.hierarchical.levels[e.id]&&t.hierarchical.addRelation(e.id,i.id)})),this.hierarchical.checkIfTree()}},{key:"_crawlNetwork",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},i=arguments.length>1?arguments[1]:void 0,o={},n=function i(n,r){if(void 0===o[n.id]){var s;t.hierarchical.setTreeIndex(n,r),o[n.id]=!0;for(var a=t._getActiveEdges(n),h=0;h<a.length;h++){var d=a[h];!0===d.connected&&(s=d.toId==n.id?d.from:d.to,n.id!=s.id&&(e(n,s,d),i(s,r)))}}};if(void 0===i)for(var r=0,s=0;s<this.body.nodeIndices.length;s++){var a=this.body.nodeIndices[s];if(void 0===o[a]){var h=this.body.nodes[a];n(h,r),r+=1}}else{var d=this.body.nodes[i];if(void 0===d)return void console.error("Node not found:",i);n(d)}}},{key:"_shiftBlock",value:function(t,e){var i=this,o={};!function t(n){if(!o[n]){o[n]=!0,i.direction.shift(n,e);var r=i.hierarchical.childrenReference[n];if(void 0!==r)for(var s=0;s<r.length;s++)t(r[s])}}(t)}},{key:"_findCommonParent",value:function(t,e){var i=this,o={};return function t(e,o){var n=i.hierarchical.parentReference[o];if(void 0!==n)for(var r=0;r<n.length;r++){var s=n[r];e[s]=!0,t(e,s)}}(o,t),function t(e,o){var n=i.hierarchical.parentReference[o];if(void 0!==n)for(var r=0;r<n.length;r++){var s=n[r];if(void 0!==e[s])return{foundParent:s,withChild:o};var a=t(e,s);if(null!==a.foundParent)return a}return{foundParent:null,withChild:o}}(o,e)}},{key:"setDirectionStrategy",value:function(){var t="UD"===this.options.hierarchical.direction||"DU"===this.options.hierarchical.direction;this.direction=t?new gC(this):new yC(this)}},{key:"_getCenterPosition",value:function(t){for(var e=1e9,i=-1e9,o=0;o<t.length;o++){var n=void 0;if(void 0!==t[o].id)n=t[o];else{var r=t[o];n=this.body.nodes[r]}var s=this.direction.getPosition(n);e=Math.min(e,s),i=Math.max(i,s)}return.5*(e+i)}}]),t}();function DC(t,e){var i=void 0!==tu&&oh(t)||t["@@iterator"];if(!i){if(hu(t)||(i=function(t,e){var i;if(!t)return;if("string"==typeof t)return BC(t,e);var o=au(i=Object.prototype.toString.call(t)).call(i,8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return ja(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return BC(t,e)}(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,a=!1;return{s:function(){i=i.call(t)},n:function(){var t=i.next();return s=t.done,t},e:function(t){a=!0,r=t},f:function(){try{s||null==i.return||i.return()}finally{if(a)throw r}}}}function BC(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}var IC=function(){function t(e,i,o,n){var r,s,a=this;Xl(this,t),this.body=e,this.canvas=i,this.selectionHandler=o,this.interactionHandler=n,this.editMode=!1,this.manipulationDiv=void 0,this.editModeDiv=void 0,this.closeDiv=void 0,this._domEventListenerCleanupQueue=[],this.temporaryUIFunctions={},this.temporaryEventFunctions=[],this.touchTime=0,this.temporaryIds={nodes:[],edges:[]},this.guiEnabled=!1,this.inMode=!1,this.selectedControlNode=void 0,this.options={},this.defaultOptions={enabled:!1,initiallyActive:!1,addNode:!0,addEdge:!0,editNode:void 0,editEdge:!0,deleteNode:!0,deleteEdge:!0,controlNodeStyle:{shape:"dot",size:6,color:{background:"#ff0000",border:"#3c3c3c",highlight:{background:"#07f968",border:"#3c3c3c"}},borderWidth:2,borderWidthSelected:2}},fo(this.options,this.defaultOptions),this.body.emitter.on("destroy",(function(){a._clean()})),this.body.emitter.on("_dataChanged",Fo(r=this._restore).call(r,this)),this.body.emitter.on("_resetData",Fo(s=this._restore).call(s,this))}return $l(t,[{key:"_restore",value:function(){!1!==this.inMode&&(!0===this.options.initiallyActive?this.enableEditMode():this.disableEditMode())}},{key:"setOptions",value:function(t,e,i){void 0!==e&&(void 0!==e.locale?this.options.locale=e.locale:this.options.locale=i.locale,void 0!==e.locales?this.options.locales=e.locales:this.options.locales=i.locales),void 0!==t&&("boolean"==typeof t?this.options.enabled=t:(this.options.enabled=!0,Ry(this.options,t)),!0===this.options.initiallyActive&&(this.editMode=!0),this._setup())}},{key:"toggleEditMode",value:function(){!0===this.editMode?this.disableEditMode():this.enableEditMode()}},{key:"enableEditMode",value:function(){this.editMode=!0,this._clean(),!0===this.guiEnabled&&(this.manipulationDiv.style.display="block",this.closeDiv.style.display="block",this.editModeDiv.style.display="none",this.showManipulatorToolbar())}},{key:"disableEditMode",value:function(){this.editMode=!1,this._clean(),!0===this.guiEnabled&&(this.manipulationDiv.style.display="none",this.closeDiv.style.display="none",this.editModeDiv.style.display="block",this._createEditButton())}},{key:"showManipulatorToolbar",value:function(){if(this._clean(),this.manipulationDOM={},!0===this.guiEnabled){var t,e;this.editMode=!0,this.manipulationDiv.style.display="block",this.closeDiv.style.display="block";var i=this.selectionHandler.getSelectedNodeCount(),o=this.selectionHandler.getSelectedEdgeCount(),n=i+o,r=this.options.locales[this.options.locale],s=!1;!1!==this.options.addNode&&(this._createAddNodeButton(r),s=!0),!1!==this.options.addEdge&&(!0===s?this._createSeperator(1):s=!0,this._createAddEdgeButton(r)),1===i&&"function"==typeof this.options.editNode?(!0===s?this._createSeperator(2):s=!0,this._createEditNodeButton(r)):1===o&&0===i&&!1!==this.options.editEdge&&(!0===s?this._createSeperator(3):s=!0,this._createEditEdgeButton(r)),0!==n&&(i>0&&!1!==this.options.deleteNode||0===i&&!1!==this.options.deleteEdge)&&(!0===s&&this._createSeperator(4),this._createDeleteButton(r)),this._bindElementEvents(this.closeDiv,Fo(t=this.toggleEditMode).call(t,this)),this._temporaryBindEvent("select",Fo(e=this.showManipulatorToolbar).call(e,this))}this.body.emitter.emit("_redraw")}},{key:"addNodeMode",value:function(){var t;if(!0!==this.editMode&&this.enableEditMode(),this._clean(),this.inMode="addNode",!0===this.guiEnabled){var e,i=this.options.locales[this.options.locale];this.manipulationDOM={},this._createBackButton(i),this._createSeperator(),this._createDescription(i.addDescription||this.options.locales.en.addDescription),this._bindElementEvents(this.closeDiv,Fo(e=this.toggleEditMode).call(e,this))}this._temporaryBindEvent("click",Fo(t=this._performAddNode).call(t,this))}},{key:"editNode",value:function(){var t=this;!0!==this.editMode&&this.enableEditMode(),this._clean();var e=this.selectionHandler.getSelectedNodes()[0];if(void 0!==e){if(this.inMode="editNode","function"!=typeof this.options.editNode)throw new Error("No function has been configured to handle the editing of nodes.");if(!0!==e.isCluster){var i=Ry({},e.options,!1);if(i.x=e.x,i.y=e.y,2!==this.options.editNode.length)throw new Error("The function for edit does not support two arguments (data, callback)");this.options.editNode(i,(function(e){null!=e&&"editNode"===t.inMode&&t.body.data.nodes.getDataSet().update(e),t.showManipulatorToolbar()}))}else alert(this.options.locales[this.options.locale].editClusterError||this.options.locales.en.editClusterError)}else this.showManipulatorToolbar()}},{key:"addEdgeMode",value:function(){var t,e,i,o,n;if(!0!==this.editMode&&this.enableEditMode(),this._clean(),this.inMode="addEdge",!0===this.guiEnabled){var r,s=this.options.locales[this.options.locale];this.manipulationDOM={},this._createBackButton(s),this._createSeperator(),this._createDescription(s.edgeDescription||this.options.locales.en.edgeDescription),this._bindElementEvents(this.closeDiv,Fo(r=this.toggleEditMode).call(r,this))}this._temporaryBindUI("onTouch",Fo(t=this._handleConnect).call(t,this)),this._temporaryBindUI("onDragEnd",Fo(e=this._finishConnect).call(e,this)),this._temporaryBindUI("onDrag",Fo(i=this._dragControlNode).call(i,this)),this._temporaryBindUI("onRelease",Fo(o=this._finishConnect).call(o,this)),this._temporaryBindUI("onDragStart",Fo(n=this._dragStartEdge).call(n,this)),this._temporaryBindUI("onHold",(function(){}))}},{key:"editEdgeMode",value:function(){if(!0!==this.editMode&&this.enableEditMode(),this._clean(),this.inMode="editEdge","object"!==Qc(this.options.editEdge)||"function"!=typeof this.options.editEdge.editWithoutDrag||(this.edgeBeingEditedId=this.selectionHandler.getSelectedEdgeIds()[0],void 0===this.edgeBeingEditedId)){if(!0===this.guiEnabled){var t,e=this.options.locales[this.options.locale];this.manipulationDOM={},this._createBackButton(e),this._createSeperator(),this._createDescription(e.editEdgeDescription||this.options.locales.en.editEdgeDescription),this._bindElementEvents(this.closeDiv,Fo(t=this.toggleEditMode).call(t,this))}if(this.edgeBeingEditedId=this.selectionHandler.getSelectedEdgeIds()[0],void 0!==this.edgeBeingEditedId){var i,o,n,r,s=this.body.edges[this.edgeBeingEditedId],a=this._getNewTargetNode(s.from.x,s.from.y),h=this._getNewTargetNode(s.to.x,s.to.y);this.temporaryIds.nodes.push(a.id),this.temporaryIds.nodes.push(h.id),this.body.nodes[a.id]=a,this.body.nodeIndices.push(a.id),this.body.nodes[h.id]=h,this.body.nodeIndices.push(h.id),this._temporaryBindUI("onTouch",Fo(i=this._controlNodeTouch).call(i,this)),this._temporaryBindUI("onTap",(function(){})),this._temporaryBindUI("onHold",(function(){})),this._temporaryBindUI("onDragStart",Fo(o=this._controlNodeDragStart).call(o,this)),this._temporaryBindUI("onDrag",Fo(n=this._controlNodeDrag).call(n,this)),this._temporaryBindUI("onDragEnd",Fo(r=this._controlNodeDragEnd).call(r,this)),this._temporaryBindUI("onMouseMove",(function(){})),this._temporaryBindEvent("beforeDrawing",(function(t){var e=s.edgeType.findBorderPositions(t);!1===a.selected&&(a.x=e.from.x,a.y=e.from.y),!1===h.selected&&(h.x=e.to.x,h.y=e.to.y)})),this.body.emitter.emit("_redraw")}else this.showManipulatorToolbar()}else{var d=this.body.edges[this.edgeBeingEditedId];this._performEditEdge(d.from.id,d.to.id)}}},{key:"deleteSelected",value:function(){var t=this;!0!==this.editMode&&this.enableEditMode(),this._clean(),this.inMode="delete";var e=this.selectionHandler.getSelectedNodeIds(),i=this.selectionHandler.getSelectedEdgeIds(),o=void 0;if(e.length>0){for(var n=0;n<e.length;n++)if(!0===this.body.nodes[e[n]].isCluster)return void alert(this.options.locales[this.options.locale].deleteClusterError||this.options.locales.en.deleteClusterError);"function"==typeof this.options.deleteNode&&(o=this.options.deleteNode)}else i.length>0&&"function"==typeof this.options.deleteEdge&&(o=this.options.deleteEdge);if("function"==typeof o){var r={nodes:e,edges:i};if(2!==o.length)throw new Error("The function for delete does not support two arguments (data, callback)");o(r,(function(e){null!=e&&"delete"===t.inMode?(t.body.data.edges.getDataSet().remove(e.edges),t.body.data.nodes.getDataSet().remove(e.nodes),t.body.emitter.emit("startSimulation"),t.showManipulatorToolbar()):(t.body.emitter.emit("startSimulation"),t.showManipulatorToolbar())}))}else this.body.data.edges.getDataSet().remove(i),this.body.data.nodes.getDataSet().remove(e),this.body.emitter.emit("startSimulation"),this.showManipulatorToolbar()}},{key:"_setup",value:function(){!0===this.options.enabled?(this.guiEnabled=!0,this._createWrappers(),!1===this.editMode?this._createEditButton():this.showManipulatorToolbar()):(this._removeManipulationDOM(),this.guiEnabled=!1)}},{key:"_createWrappers",value:function(){var t,e;(void 0===this.manipulationDiv&&(this.manipulationDiv=document.createElement("div"),this.manipulationDiv.className="vis-manipulation",!0===this.editMode?this.manipulationDiv.style.display="block":this.manipulationDiv.style.display="none",this.canvas.frame.appendChild(this.manipulationDiv)),void 0===this.editModeDiv&&(this.editModeDiv=document.createElement("div"),this.editModeDiv.className="vis-edit-mode",!0===this.editMode?this.editModeDiv.style.display="none":this.editModeDiv.style.display="block",this.canvas.frame.appendChild(this.editModeDiv)),void 0===this.closeDiv)&&(this.closeDiv=document.createElement("button"),this.closeDiv.className="vis-close",this.closeDiv.setAttribute("aria-label",null!==(t=null===(e=this.options.locales[this.options.locale])||void 0===e?void 0:e.close)&&void 0!==t?t:this.options.locales.en.close),this.closeDiv.style.display=this.manipulationDiv.style.display,this.canvas.frame.appendChild(this.closeDiv))}},{key:"_getNewTargetNode",value:function(t,e){var i=Ry({},this.options.controlNodeStyle);i.id="targetNode"+Xx(),i.hidden=!1,i.physics=!1,i.x=t,i.y=e;var o=this.body.functions.createNode(i);return o.shape.boundingBox={left:t,right:t,top:e,bottom:e},o}},{key:"_createEditButton",value:function(){var t;this._clean(),this.manipulationDOM={},Dy(this.editModeDiv);var e=this.options.locales[this.options.locale],i=this._createButton("editMode","vis-edit vis-edit-mode",e.edit||this.options.locales.en.edit);this.editModeDiv.appendChild(i),this._bindElementEvents(i,Fo(t=this.toggleEditMode).call(t,this))}},{key:"_clean",value:function(){this.inMode=!1,!0===this.guiEnabled&&(Dy(this.editModeDiv),Dy(this.manipulationDiv),this._cleanupDOMEventListeners()),this._cleanupTemporaryNodesAndEdges(),this._unbindTemporaryUIs(),this._unbindTemporaryEvents(),this.body.emitter.emit("restorePhysics")}},{key:"_cleanupDOMEventListeners",value:function(){var t,e,i=DC(uf(t=this._domEventListenerCleanupQueue).call(t,0));try{for(i.s();!(e=i.n()).done;){(0,e.value)()}}catch(t){i.e(t)}finally{i.f()}}},{key:"_removeManipulationDOM",value:function(){this._clean(),Dy(this.manipulationDiv),Dy(this.editModeDiv),Dy(this.closeDiv),this.manipulationDiv&&this.canvas.frame.removeChild(this.manipulationDiv),this.editModeDiv&&this.canvas.frame.removeChild(this.editModeDiv),this.closeDiv&&this.canvas.frame.removeChild(this.closeDiv),this.manipulationDiv=void 0,this.editModeDiv=void 0,this.closeDiv=void 0}},{key:"_createSeperator",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this.manipulationDOM["seperatorLineDiv"+t]=document.createElement("div"),this.manipulationDOM["seperatorLineDiv"+t].className="vis-separator-line",this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv"+t])}},{key:"_createAddNodeButton",value:function(t){var e,i=this._createButton("addNode","vis-add",t.addNode||this.options.locales.en.addNode);this.manipulationDiv.appendChild(i),this._bindElementEvents(i,Fo(e=this.addNodeMode).call(e,this))}},{key:"_createAddEdgeButton",value:function(t){var e,i=this._createButton("addEdge","vis-connect",t.addEdge||this.options.locales.en.addEdge);this.manipulationDiv.appendChild(i),this._bindElementEvents(i,Fo(e=this.addEdgeMode).call(e,this))}},{key:"_createEditNodeButton",value:function(t){var e,i=this._createButton("editNode","vis-edit",t.editNode||this.options.locales.en.editNode);this.manipulationDiv.appendChild(i),this._bindElementEvents(i,Fo(e=this.editNode).call(e,this))}},{key:"_createEditEdgeButton",value:function(t){var e,i=this._createButton("editEdge","vis-edit",t.editEdge||this.options.locales.en.editEdge);this.manipulationDiv.appendChild(i),this._bindElementEvents(i,Fo(e=this.editEdgeMode).call(e,this))}},{key:"_createDeleteButton",value:function(t){var e,i;i=this.options.rtl?"vis-delete-rtl":"vis-delete";var o=this._createButton("delete",i,t.del||this.options.locales.en.del);this.manipulationDiv.appendChild(o),this._bindElementEvents(o,Fo(e=this.deleteSelected).call(e,this))}},{key:"_createBackButton",value:function(t){var e,i=this._createButton("back","vis-back",t.back||this.options.locales.en.back);this.manipulationDiv.appendChild(i),this._bindElementEvents(i,Fo(e=this.showManipulatorToolbar).call(e,this))}},{key:"_createButton",value:function(t,e,i){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"vis-label";return this.manipulationDOM[t+"Div"]=document.createElement("button"),this.manipulationDOM[t+"Div"].className="vis-button "+e,this.manipulationDOM[t+"Label"]=document.createElement("div"),this.manipulationDOM[t+"Label"].className=o,this.manipulationDOM[t+"Label"].innerText=i,this.manipulationDOM[t+"Div"].appendChild(this.manipulationDOM[t+"Label"]),this.manipulationDOM[t+"Div"]}},{key:"_createDescription",value:function(t){this.manipulationDOM.descriptionLabel=document.createElement("div"),this.manipulationDOM.descriptionLabel.className="vis-none",this.manipulationDOM.descriptionLabel.innerText=t,this.manipulationDiv.appendChild(this.manipulationDOM.descriptionLabel)}},{key:"_temporaryBindEvent",value:function(t,e){this.temporaryEventFunctions.push({event:t,boundFunction:e}),this.body.emitter.on(t,e)}},{key:"_temporaryBindUI",value:function(t,e){if(void 0===this.body.eventListeners[t])throw new Error("This UI function does not exist. Typo? You tried: "+t+" possible are: "+hv(mu(this.body.eventListeners)));this.temporaryUIFunctions[t]=this.body.eventListeners[t],this.body.eventListeners[t]=e}},{key:"_unbindTemporaryUIs",value:function(){for(var t in this.temporaryUIFunctions)Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions,t)&&(this.body.eventListeners[t]=this.temporaryUIFunctions[t],delete this.temporaryUIFunctions[t]);this.temporaryUIFunctions={}}},{key:"_unbindTemporaryEvents",value:function(){for(var t=0;t<this.temporaryEventFunctions.length;t++){var e=this.temporaryEventFunctions[t].event,i=this.temporaryEventFunctions[t].boundFunction;this.body.emitter.off(e,i)}this.temporaryEventFunctions=[]}},{key:"_bindElementEvents",value:function(t,e){var i=new pm(t,{});iE(i,e),this._domEventListenerCleanupQueue.push((function(){i.destroy()}));var o=function(t){var i=t.keyCode,o=t.key;"Enter"!==o&&" "!==o&&13!==i&&32!==i||e()};t.addEventListener("keyup",o,!1),this._domEventListenerCleanupQueue.push((function(){t.removeEventListener("keyup",o,!1)}))}},{key:"_cleanupTemporaryNodesAndEdges",value:function(){for(var t=0;t<this.temporaryIds.edges.length;t++){var e;this.body.edges[this.temporaryIds.edges[t]].disconnect(),delete this.body.edges[this.temporaryIds.edges[t]];var i,o=zp(e=this.body.edgeIndices).call(e,this.temporaryIds.edges[t]);if(-1!==o)uf(i=this.body.edgeIndices).call(i,o,1)}for(var n=0;n<this.temporaryIds.nodes.length;n++){var r;delete this.body.nodes[this.temporaryIds.nodes[n]];var s,a=zp(r=this.body.nodeIndices).call(r,this.temporaryIds.nodes[n]);if(-1!==a)uf(s=this.body.nodeIndices).call(s,a,1)}this.temporaryIds={nodes:[],edges:[]}}},{key:"_controlNodeTouch",value:function(t){this.selectionHandler.unselectAll(),this.lastTouch=this.body.functions.getPointer(t.center),this.lastTouch.translation=fo({},this.body.view.translation)}},{key:"_controlNodeDragStart",value:function(){var t=this.lastTouch,e=this.selectionHandler._pointerToPositionObject(t),i=this.body.nodes[this.temporaryIds.nodes[0]],o=this.body.nodes[this.temporaryIds.nodes[1]],n=this.body.edges[this.edgeBeingEditedId];this.selectedControlNode=void 0;var r=i.isOverlappingWith(e),s=o.isOverlappingWith(e);!0===r?(this.selectedControlNode=i,n.edgeType.from=i):!0===s&&(this.selectedControlNode=o,n.edgeType.to=o),void 0!==this.selectedControlNode&&this.selectionHandler.selectObject(this.selectedControlNode),this.body.emitter.emit("_redraw")}},{key:"_controlNodeDrag",value:function(t){this.body.emitter.emit("disablePhysics");var e=this.body.functions.getPointer(t.center),i=this.canvas.DOMtoCanvas(e);void 0!==this.selectedControlNode?(this.selectedControlNode.x=i.x,this.selectedControlNode.y=i.y):this.interactionHandler.onDrag(t),this.body.emitter.emit("_redraw")}},{key:"_controlNodeDragEnd",value:function(t){var e=this.body.functions.getPointer(t.center),i=this.selectionHandler._pointerToPositionObject(e),o=this.body.edges[this.edgeBeingEditedId];if(void 0!==this.selectedControlNode){this.selectionHandler.unselectAll();for(var n=this.selectionHandler._getAllNodesOverlappingWith(i),r=void 0,s=n.length-1;s>=0;s--)if(n[s]!==this.selectedControlNode.id){r=this.body.nodes[n[s]];break}if(void 0!==r&&void 0!==this.selectedControlNode)if(!0===r.isCluster)alert(this.options.locales[this.options.locale].createEdgeError||this.options.locales.en.createEdgeError);else{var a=this.body.nodes[this.temporaryIds.nodes[0]];this.selectedControlNode.id===a.id?this._performEditEdge(r.id,o.to.id):this._performEditEdge(o.from.id,r.id)}else o.updateEdgeType(),this.body.emitter.emit("restorePhysics");this.body.emitter.emit("_redraw")}}},{key:"_handleConnect",value:function(t){if((new Date).valueOf()-this.touchTime>100){this.lastTouch=this.body.functions.getPointer(t.center),this.lastTouch.translation=fo({},this.body.view.translation),this.interactionHandler.drag.pointer=this.lastTouch,this.interactionHandler.drag.translation=this.lastTouch.translation;var e=this.lastTouch,i=this.selectionHandler.getNodeAt(e);if(void 0!==i)if(!0===i.isCluster)alert(this.options.locales[this.options.locale].createEdgeError||this.options.locales.en.createEdgeError);else{var o=this._getNewTargetNode(i.x,i.y);this.body.nodes[o.id]=o,this.body.nodeIndices.push(o.id);var n=this.body.functions.createEdge({id:"connectionEdge"+Xx(),from:i.id,to:o.id,physics:!1,smooth:{enabled:!0,type:"continuous",roundness:.5}});this.body.edges[n.id]=n,this.body.edgeIndices.push(n.id),this.temporaryIds.nodes.push(o.id),this.temporaryIds.edges.push(n.id)}this.touchTime=(new Date).valueOf()}}},{key:"_dragControlNode",value:function(t){var e=this.body.functions.getPointer(t.center),i=this.selectionHandler._pointerToPositionObject(e),o=void 0;void 0!==this.temporaryIds.edges[0]&&(o=this.body.edges[this.temporaryIds.edges[0]].fromId);for(var n=this.selectionHandler._getAllNodesOverlappingWith(i),r=void 0,s=n.length-1;s>=0;s--){var a;if(-1===zp(a=this.temporaryIds.nodes).call(a,n[s])){r=this.body.nodes[n[s]];break}}if(t.controlEdge={from:o,to:r?r.id:void 0},this.selectionHandler.generateClickEvent("controlNodeDragging",t,e),void 0!==this.temporaryIds.nodes[0]){var h=this.body.nodes[this.temporaryIds.nodes[0]];h.x=this.canvas._XconvertDOMtoCanvas(e.x),h.y=this.canvas._YconvertDOMtoCanvas(e.y),this.body.emitter.emit("_redraw")}else this.interactionHandler.onDrag(t)}},{key:"_finishConnect",value:function(t){var e=this.body.functions.getPointer(t.center),i=this.selectionHandler._pointerToPositionObject(e),o=void 0;void 0!==this.temporaryIds.edges[0]&&(o=this.body.edges[this.temporaryIds.edges[0]].fromId);for(var n=this.selectionHandler._getAllNodesOverlappingWith(i),r=void 0,s=n.length-1;s>=0;s--){var a;if(-1===zp(a=this.temporaryIds.nodes).call(a,n[s])){r=this.body.nodes[n[s]];break}}this._cleanupTemporaryNodesAndEdges(),void 0!==r&&(!0===r.isCluster?alert(this.options.locales[this.options.locale].createEdgeError||this.options.locales.en.createEdgeError):void 0!==this.body.nodes[o]&&void 0!==this.body.nodes[r.id]&&this._performAddEdge(o,r.id)),t.controlEdge={from:o,to:r?r.id:void 0},this.selectionHandler.generateClickEvent("controlNodeDragEnd",t,e),this.body.emitter.emit("_redraw")}},{key:"_dragStartEdge",value:function(t){var e=this.lastTouch;this.selectionHandler.generateClickEvent("dragStart",t,e,void 0,!0)}},{key:"_performAddNode",value:function(t){var e=this,i={id:Xx(),x:t.pointer.canvas.x,y:t.pointer.canvas.y,label:"new"};if("function"==typeof this.options.addNode){if(2!==this.options.addNode.length)throw this.showManipulatorToolbar(),new Error("The function for add does not support two arguments (data,callback)");this.options.addNode(i,(function(t){null!=t&&"addNode"===e.inMode&&e.body.data.nodes.getDataSet().add(t),e.showManipulatorToolbar()}))}else this.body.data.nodes.getDataSet().add(i),this.showManipulatorToolbar()}},{key:"_performAddEdge",value:function(t,e){var i=this,o={from:t,to:e};if("function"==typeof this.options.addEdge){if(2!==this.options.addEdge.length)throw new Error("The function for connect does not support two arguments (data,callback)");this.options.addEdge(o,(function(t){null!=t&&"addEdge"===i.inMode&&(i.body.data.edges.getDataSet().add(t),i.selectionHandler.unselectAll(),i.showManipulatorToolbar())}))}else this.body.data.edges.getDataSet().add(o),this.selectionHandler.unselectAll(),this.showManipulatorToolbar()}},{key:"_performEditEdge",value:function(t,e){var i=this,o={id:this.edgeBeingEditedId,from:t,to:e,label:this.body.data.edges.get(this.edgeBeingEditedId).label},n=this.options.editEdge;if("object"===Qc(n)&&(n=n.editWithoutDrag),"function"==typeof n){if(2!==n.length)throw new Error("The function for edit does not support two arguments (data, callback)");n(o,(function(t){null==t||"editEdge"!==i.inMode?(i.body.edges[o.id].updateEdgeType(),i.body.emitter.emit("_redraw"),i.showManipulatorToolbar()):(i.body.data.edges.getDataSet().update(t),i.selectionHandler.unselectAll(),i.showManipulatorToolbar())}))}else this.body.data.edges.getDataSet().update(o),this.selectionHandler.unselectAll(),this.showManipulatorToolbar()}}]),t}(),zC="string",FC="boolean",NC="number",AC="array",RC="object",jC=["arrow","bar","box","circle","crow","curve","diamond","image","inv_curve","inv_triangle","triangle","vee"],LC={borderWidth:{number:NC},borderWidthSelected:{number:NC,undefined:"undefined"},brokenImage:{string:zC,undefined:"undefined"},chosen:{label:{boolean:FC,function:"function"},node:{boolean:FC,function:"function"},__type__:{object:RC,boolean:FC}},color:{border:{string:zC},background:{string:zC},highlight:{border:{string:zC},background:{string:zC},__type__:{object:RC,string:zC}},hover:{border:{string:zC},background:{string:zC},__type__:{object:RC,string:zC}},__type__:{object:RC,string:zC}},opacity:{number:NC,undefined:"undefined"},fixed:{x:{boolean:FC},y:{boolean:FC},__type__:{object:RC,boolean:FC}},font:{align:{string:zC},color:{string:zC},size:{number:NC},face:{string:zC},background:{string:zC},strokeWidth:{number:NC},strokeColor:{string:zC},vadjust:{number:NC},multi:{boolean:FC,string:zC},bold:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},boldital:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},ital:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},mono:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},__type__:{object:RC,string:zC}},group:{string:zC,number:NC,undefined:"undefined"},heightConstraint:{minimum:{number:NC},valign:{string:zC},__type__:{object:RC,boolean:FC,number:NC}},hidden:{boolean:FC},icon:{face:{string:zC},code:{string:zC},size:{number:NC},color:{string:zC},weight:{string:zC,number:NC},__type__:{object:RC}},id:{string:zC,number:NC},image:{selected:{string:zC,undefined:"undefined"},unselected:{string:zC,undefined:"undefined"},__type__:{object:RC,string:zC}},imagePadding:{top:{number:NC},right:{number:NC},bottom:{number:NC},left:{number:NC},__type__:{object:RC,number:NC}},label:{string:zC,undefined:"undefined"},labelHighlightBold:{boolean:FC},level:{number:NC,undefined:"undefined"},margin:{top:{number:NC},right:{number:NC},bottom:{number:NC},left:{number:NC},__type__:{object:RC,number:NC}},mass:{number:NC},physics:{boolean:FC},scaling:{min:{number:NC},max:{number:NC},label:{enabled:{boolean:FC},min:{number:NC},max:{number:NC},maxVisible:{number:NC},drawThreshold:{number:NC},__type__:{object:RC,boolean:FC}},customScalingFunction:{function:"function"},__type__:{object:RC}},shadow:{enabled:{boolean:FC},color:{string:zC},size:{number:NC},x:{number:NC},y:{number:NC},__type__:{object:RC,boolean:FC}},shape:{string:["custom","ellipse","circle","database","box","text","image","circularImage","diamond","dot","star","triangle","triangleDown","square","icon","hexagon"]},ctxRenderer:{function:"function"},shapeProperties:{borderDashes:{boolean:FC,array:AC},borderRadius:{number:NC},interpolation:{boolean:FC},useImageSize:{boolean:FC},useBorderWithImage:{boolean:FC},coordinateOrigin:{string:["center","top-left"]},__type__:{object:RC}},size:{number:NC},title:{string:zC,dom:"dom",undefined:"undefined"},value:{number:NC,undefined:"undefined"},widthConstraint:{minimum:{number:NC},maximum:{number:NC},__type__:{object:RC,boolean:FC,number:NC}},x:{number:NC},y:{number:NC},__type__:{object:RC}},HC={configure:{enabled:{boolean:FC},filter:{boolean:FC,string:zC,array:AC,function:"function"},container:{dom:"dom"},showButton:{boolean:FC},__type__:{object:RC,boolean:FC,string:zC,array:AC,function:"function"}},edges:{arrows:{to:{enabled:{boolean:FC},scaleFactor:{number:NC},type:{string:jC},imageHeight:{number:NC},imageWidth:{number:NC},src:{string:zC},__type__:{object:RC,boolean:FC}},middle:{enabled:{boolean:FC},scaleFactor:{number:NC},type:{string:jC},imageWidth:{number:NC},imageHeight:{number:NC},src:{string:zC},__type__:{object:RC,boolean:FC}},from:{enabled:{boolean:FC},scaleFactor:{number:NC},type:{string:jC},imageWidth:{number:NC},imageHeight:{number:NC},src:{string:zC},__type__:{object:RC,boolean:FC}},__type__:{string:["from","to","middle"],object:RC}},endPointOffset:{from:{number:NC},to:{number:NC},__type__:{object:RC,number:NC}},arrowStrikethrough:{boolean:FC},background:{enabled:{boolean:FC},color:{string:zC},size:{number:NC},dashes:{boolean:FC,array:AC},__type__:{object:RC,boolean:FC}},chosen:{label:{boolean:FC,function:"function"},edge:{boolean:FC,function:"function"},__type__:{object:RC,boolean:FC}},color:{color:{string:zC},highlight:{string:zC},hover:{string:zC},inherit:{string:["from","to","both"],boolean:FC},opacity:{number:NC},__type__:{object:RC,string:zC}},dashes:{boolean:FC,array:AC},font:{color:{string:zC},size:{number:NC},face:{string:zC},background:{string:zC},strokeWidth:{number:NC},strokeColor:{string:zC},align:{string:["horizontal","top","middle","bottom"]},vadjust:{number:NC},multi:{boolean:FC,string:zC},bold:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},boldital:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},ital:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},mono:{color:{string:zC},size:{number:NC},face:{string:zC},mod:{string:zC},vadjust:{number:NC},__type__:{object:RC,string:zC}},__type__:{object:RC,string:zC}},hidden:{boolean:FC},hoverWidth:{function:"function",number:NC},label:{string:zC,undefined:"undefined"},labelHighlightBold:{boolean:FC},length:{number:NC,undefined:"undefined"},physics:{boolean:FC},scaling:{min:{number:NC},max:{number:NC},label:{enabled:{boolean:FC},min:{number:NC},max:{number:NC},maxVisible:{number:NC},drawThreshold:{number:NC},__type__:{object:RC,boolean:FC}},customScalingFunction:{function:"function"},__type__:{object:RC}},selectionWidth:{function:"function",number:NC},selfReferenceSize:{number:NC},selfReference:{size:{number:NC},angle:{number:NC},renderBehindTheNode:{boolean:FC},__type__:{object:RC}},shadow:{enabled:{boolean:FC},color:{string:zC},size:{number:NC},x:{number:NC},y:{number:NC},__type__:{object:RC,boolean:FC}},smooth:{enabled:{boolean:FC},type:{string:["dynamic","continuous","discrete","diagonalCross","straightCross","horizontal","vertical","curvedCW","curvedCCW","cubicBezier"]},roundness:{number:NC},forceDirection:{string:["horizontal","vertical","none"],boolean:FC},__type__:{object:RC,boolean:FC}},title:{string:zC,undefined:"undefined"},width:{number:NC},widthConstraint:{maximum:{number:NC},__type__:{object:RC,boolean:FC,number:NC}},value:{number:NC,undefined:"undefined"},__type__:{object:RC}},groups:{useDefaultGroups:{boolean:FC},__any__:LC,__type__:{object:RC}},interaction:{dragNodes:{boolean:FC},dragView:{boolean:FC},hideEdgesOnDrag:{boolean:FC},hideEdgesOnZoom:{boolean:FC},hideNodesOnDrag:{boolean:FC},hover:{boolean:FC},keyboard:{enabled:{boolean:FC},speed:{x:{number:NC},y:{number:NC},zoom:{number:NC},__type__:{object:RC}},bindToWindow:{boolean:FC},autoFocus:{boolean:FC},__type__:{object:RC,boolean:FC}},multiselect:{boolean:FC},navigationButtons:{boolean:FC},selectable:{boolean:FC},selectConnectedEdges:{boolean:FC},hoverConnectedEdges:{boolean:FC},tooltipDelay:{number:NC},zoomView:{boolean:FC},zoomSpeed:{number:NC},__type__:{object:RC}},layout:{randomSeed:{undefined:"undefined",number:NC,string:zC},improvedLayout:{boolean:FC},clusterThreshold:{number:NC},hierarchical:{enabled:{boolean:FC},levelSeparation:{number:NC},nodeSpacing:{number:NC},treeSpacing:{number:NC},blockShifting:{boolean:FC},edgeMinimization:{boolean:FC},parentCentralization:{boolean:FC},direction:{string:["UD","DU","LR","RL"]},sortMethod:{string:["hubsize","directed"]},shakeTowards:{string:["leaves","roots"]},__type__:{object:RC,boolean:FC}},__type__:{object:RC}},manipulation:{enabled:{boolean:FC},initiallyActive:{boolean:FC},addNode:{boolean:FC,function:"function"},addEdge:{boolean:FC,function:"function"},editNode:{function:"function"},editEdge:{editWithoutDrag:{function:"function"},__type__:{object:RC,boolean:FC,function:"function"}},deleteNode:{boolean:FC,function:"function"},deleteEdge:{boolean:FC,function:"function"},controlNodeStyle:LC,__type__:{object:RC,boolean:FC}},nodes:LC,physics:{enabled:{boolean:FC},barnesHut:{theta:{number:NC},gravitationalConstant:{number:NC},centralGravity:{number:NC},springLength:{number:NC},springConstant:{number:NC},damping:{number:NC},avoidOverlap:{number:NC},__type__:{object:RC}},forceAtlas2Based:{theta:{number:NC},gravitationalConstant:{number:NC},centralGravity:{number:NC},springLength:{number:NC},springConstant:{number:NC},damping:{number:NC},avoidOverlap:{number:NC},__type__:{object:RC}},repulsion:{centralGravity:{number:NC},springLength:{number:NC},springConstant:{number:NC},nodeDistance:{number:NC},damping:{number:NC},__type__:{object:RC}},hierarchicalRepulsion:{centralGravity:{number:NC},springLength:{number:NC},springConstant:{number:NC},nodeDistance:{number:NC},damping:{number:NC},avoidOverlap:{number:NC},__type__:{object:RC}},maxVelocity:{number:NC},minVelocity:{number:NC},solver:{string:["barnesHut","repulsion","hierarchicalRepulsion","forceAtlas2Based"]},stabilization:{enabled:{boolean:FC},iterations:{number:NC},updateInterval:{number:NC},onlyDynamicEdges:{boolean:FC},fit:{boolean:FC},__type__:{object:RC,boolean:FC}},timestep:{number:NC},adaptiveTimestep:{boolean:FC},wind:{x:{number:NC},y:{number:NC},__type__:{object:RC}},__type__:{object:RC,boolean:FC}},autoResize:{boolean:FC},clickToUse:{boolean:FC},locale:{string:zC},locales:{__any__:{any:"any"},__type__:{object:RC}},height:{string:zC},width:{string:zC},__type__:{object:RC}},WC={nodes:{borderWidth:[1,0,10,1],borderWidthSelected:[2,0,10,1],color:{border:["color","#2B7CE9"],background:["color","#97C2FC"],highlight:{border:["color","#2B7CE9"],background:["color","#D2E5FF"]},hover:{border:["color","#2B7CE9"],background:["color","#D2E5FF"]}},opacity:[0,0,1,.1],fixed:{x:!1,y:!1},font:{color:["color","#343434"],size:[14,0,100,1],face:["arial","verdana","tahoma"],background:["color","none"],strokeWidth:[0,0,50,1],strokeColor:["color","#ffffff"]},hidden:!1,labelHighlightBold:!0,physics:!0,scaling:{min:[10,0,200,1],max:[30,0,200,1],label:{enabled:!1,min:[14,0,200,1],max:[30,0,200,1],maxVisible:[30,0,200,1],drawThreshold:[5,0,20,1]}},shadow:{enabled:!1,color:"rgba(0,0,0,0.5)",size:[10,0,20,1],x:[5,-30,30,1],y:[5,-30,30,1]},shape:["ellipse","box","circle","database","diamond","dot","square","star","text","triangle","triangleDown","hexagon"],shapeProperties:{borderDashes:!1,borderRadius:[6,0,20,1],interpolation:!0,useImageSize:!1},size:[25,0,200,1]},edges:{arrows:{to:{enabled:!1,scaleFactor:[1,0,3,.05],type:"arrow"},middle:{enabled:!1,scaleFactor:[1,0,3,.05],type:"arrow"},from:{enabled:!1,scaleFactor:[1,0,3,.05],type:"arrow"}},endPointOffset:{from:[0,-10,10,1],to:[0,-10,10,1]},arrowStrikethrough:!0,color:{color:["color","#848484"],highlight:["color","#848484"],hover:["color","#848484"],inherit:["from","to","both",!0,!1],opacity:[1,0,1,.05]},dashes:!1,font:{color:["color","#343434"],size:[14,0,100,1],face:["arial","verdana","tahoma"],background:["color","none"],strokeWidth:[2,0,50,1],strokeColor:["color","#ffffff"],align:["horizontal","top","middle","bottom"]},hidden:!1,hoverWidth:[1.5,0,5,.1],labelHighlightBold:!0,physics:!0,scaling:{min:[1,0,100,1],max:[15,0,100,1],label:{enabled:!0,min:[14,0,200,1],max:[30,0,200,1],maxVisible:[30,0,200,1],drawThreshold:[5,0,20,1]}},selectionWidth:[1.5,0,5,.1],selfReferenceSize:[20,0,200,1],selfReference:{size:[20,0,200,1],angle:[Math.PI/2,-6*Math.PI,6*Math.PI,Math.PI/8],renderBehindTheNode:!0},shadow:{enabled:!1,color:"rgba(0,0,0,0.5)",size:[10,0,20,1],x:[5,-30,30,1],y:[5,-30,30,1]},smooth:{enabled:!0,type:["dynamic","continuous","discrete","diagonalCross","straightCross","horizontal","vertical","curvedCW","curvedCCW","cubicBezier"],forceDirection:["horizontal","vertical","none"],roundness:[.5,0,1,.05]},width:[1,0,30,1]},layout:{hierarchical:{enabled:!1,levelSeparation:[150,20,500,5],nodeSpacing:[100,20,500,5],treeSpacing:[200,20,500,5],blockShifting:!0,edgeMinimization:!0,parentCentralization:!0,direction:["UD","DU","LR","RL"],sortMethod:["hubsize","directed"],shakeTowards:["leaves","roots"]}},interaction:{dragNodes:!0,dragView:!0,hideEdgesOnDrag:!1,hideEdgesOnZoom:!1,hideNodesOnDrag:!1,hover:!1,keyboard:{enabled:!1,speed:{x:[10,0,40,1],y:[10,0,40,1],zoom:[.02,0,.1,.005]},bindToWindow:!0,autoFocus:!0},multiselect:!1,navigationButtons:!1,selectable:!0,selectConnectedEdges:!0,hoverConnectedEdges:!0,tooltipDelay:[300,0,1e3,25],zoomView:!0,zoomSpeed:[1,.1,2,.1]},manipulation:{enabled:!1,initiallyActive:!1},physics:{enabled:!0,barnesHut:{theta:[.5,.1,1,.05],gravitationalConstant:[-2e3,-3e4,0,50],centralGravity:[.3,0,10,.05],springLength:[95,0,500,5],springConstant:[.04,0,1.2,.005],damping:[.09,0,1,.01],avoidOverlap:[0,0,1,.01]},forceAtlas2Based:{theta:[.5,.1,1,.05],gravitationalConstant:[-50,-500,0,1],centralGravity:[.01,0,1,.005],springLength:[95,0,500,5],springConstant:[.08,0,1.2,.005],damping:[.4,0,1,.01],avoidOverlap:[0,0,1,.01]},repulsion:{centralGravity:[.2,0,10,.05],springLength:[200,0,500,5],springConstant:[.05,0,1.2,.005],nodeDistance:[100,0,500,5],damping:[.09,0,1,.01]},hierarchicalRepulsion:{centralGravity:[.2,0,10,.05],springLength:[100,0,500,5],springConstant:[.01,0,1.2,.005],nodeDistance:[120,0,500,5],damping:[.09,0,1,.01],avoidOverlap:[0,0,1,.01]},maxVelocity:[50,0,150,1],minVelocity:[.1,.01,.5,.01],solver:["barnesHut","forceAtlas2Based","repulsion","hierarchicalRepulsion"],timestep:[.5,.01,1,.01],wind:{x:[0,-10,10,.1],y:[0,-10,10,.1]}}},VC=function(t,e,i){var o;return!(!zf(t).call(t,"physics")||!zf(o=WC.physics.solver).call(o,e)||i.physics.solver===e||"wind"===e)},qC=Object.freeze({__proto__:null,configuratorHideOption:VC,allOptions:HC,configureOptions:WC}),UC=function(){function t(){Xl(this,t)}return $l(t,[{key:"getDistances",value:function(t,e,i){for(var o={},n=t.edges,r=0;r<e.length;r++){var s={};o[e[r]]=s;for(var a=0;a<e.length;a++)s[e[a]]=r==a?0:1e9}for(var h=0;h<i.length;h++){var d=n[i[h]];!0===d.connected&&void 0!==o[d.fromId]&&void 0!==o[d.toId]&&(o[d.fromId][d.toId]=1,o[d.toId][d.fromId]=1)}for(var l=e.length,c=0;c<l;c++)for(var u=e[c],f=o[u],p=0;p<l-1;p++)for(var v=e[p],g=o[v],y=p+1;y<l;y++){var m=e[y],b=o[m],w=Math.min(g[m],g[u]+f[m]);g[m]=w,b[v]=w}return o}}]),t}(),YC=function(){function t(e,i,o){Xl(this,t),this.body=e,this.springLength=i,this.springConstant=o,this.distanceSolver=new UC}return $l(t,[{key:"setOptions",value:function(t){t&&(t.springLength&&(this.springLength=t.springLength),t.springConstant&&(this.springConstant=t.springConstant))}},{key:"solve",value:function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=this.distanceSolver.getDistances(this.body,t,e);this._createL_matrix(o),this._createK_matrix(o),this._createE_matrix();for(var n=.01,r=1,s=0,a=Math.max(1e3,Math.min(10*this.body.nodeIndices.length,6e3)),h=5,d=1e9,l=0,c=0,u=0,f=0,p=0;d>n&&s<a;){s+=1;var v=this._getHighestEnergyNode(i),g=$c(v,4);for(l=g[0],d=g[1],c=g[2],u=g[3],f=d,p=0;f>r&&p<h;){p+=1,this._moveNode(l,c,u);var y=this._getEnergy(l),m=$c(y,3);f=m[0],c=m[1],u=m[2]}}}},{key:"_getHighestEnergyNode",value:function(t){for(var e=this.body.nodeIndices,i=this.body.nodes,o=0,n=e[0],r=0,s=0,a=0;a<e.length;a++){var h=e[a];if(!0!==i[h].predefinedPosition||!0===i[h].isCluster&&!0===t||!0!==i[h].options.fixed.x||!0!==i[h].options.fixed.y){var d=$c(this._getEnergy(h),3),l=d[0],c=d[1],u=d[2];o<l&&(o=l,n=h,r=c,s=u)}}return[n,o,r,s]}},{key:"_getEnergy",value:function(t){var e=$c(this.E_sums[t],2),i=e[0],o=e[1];return[Math.sqrt(Math.pow(i,2)+Math.pow(o,2)),i,o]}},{key:"_moveNode",value:function(t,e,i){for(var o=this.body.nodeIndices,n=this.body.nodes,r=0,s=0,a=0,h=n[t].x,d=n[t].y,l=this.K_matrix[t],c=this.L_matrix[t],u=0;u<o.length;u++){var f=o[u];if(f!==t){var p=n[f].x,v=n[f].y,g=l[f],y=c[f],m=1/Math.pow(Math.pow(h-p,2)+Math.pow(d-v,2),1.5);r+=g*(1-y*Math.pow(d-v,2)*m),s+=g*(y*(h-p)*(d-v)*m),a+=g*(1-y*Math.pow(h-p,2)*m)}}var b=(e/r+i/s)/(s/r-a/s),w=-(s*b+e)/r;n[t].x+=w,n[t].y+=b,this._updateE_matrix(t)}},{key:"_createL_matrix",value:function(t){var e=this.body.nodeIndices,i=this.springLength;this.L_matrix=[];for(var o=0;o<e.length;o++){this.L_matrix[e[o]]={};for(var n=0;n<e.length;n++)this.L_matrix[e[o]][e[n]]=i*t[e[o]][e[n]]}}},{key:"_createK_matrix",value:function(t){var e=this.body.nodeIndices,i=this.springConstant;this.K_matrix=[];for(var o=0;o<e.length;o++){this.K_matrix[e[o]]={};for(var n=0;n<e.length;n++)this.K_matrix[e[o]][e[n]]=i*Math.pow(t[e[o]][e[n]],-2)}}},{key:"_createE_matrix",value:function(){var t=this.body.nodeIndices,e=this.body.nodes;this.E_matrix={},this.E_sums={};for(var i=0;i<t.length;i++)this.E_matrix[t[i]]=[];for(var o=0;o<t.length;o++){for(var n=t[o],r=e[n].x,s=e[n].y,a=0,h=0,d=o;d<t.length;d++){var l=t[d];if(l!==n){var c=e[l].x,u=e[l].y,f=1/Math.sqrt(Math.pow(r-c,2)+Math.pow(s-u,2));this.E_matrix[n][d]=[this.K_matrix[n][l]*(r-c-this.L_matrix[n][l]*(r-c)*f),this.K_matrix[n][l]*(s-u-this.L_matrix[n][l]*(s-u)*f)],this.E_matrix[l][o]=this.E_matrix[n][d],a+=this.E_matrix[n][d][0],h+=this.E_matrix[n][d][1]}}this.E_sums[n]=[a,h]}}},{key:"_updateE_matrix",value:function(t){for(var e=this.body.nodeIndices,i=this.body.nodes,o=this.E_matrix[t],n=this.K_matrix[t],r=this.L_matrix[t],s=i[t].x,a=i[t].y,h=0,d=0,l=0;l<e.length;l++){var c=e[l];if(c!==t){var u=o[l],f=u[0],p=u[1],v=i[c].x,g=i[c].y,y=1/Math.sqrt(Math.pow(s-v,2)+Math.pow(a-g,2)),m=n[c]*(s-v-r[c]*(s-v)*y),b=n[c]*(a-g-r[c]*(a-g)*y);o[l]=[m,b],h+=m,d+=b;var w=this.E_sums[c];w[0]+=m-f,w[1]+=b-p}}this.E_sums[t]=[h,d]}}]),t}();function XC(t,e,i){var o,n,r,s,a=this;if(!(this instanceof XC))throw new SyntaxError("Constructor must be called with the new operator");this.options={},this.defaultOptions={locale:"en",locales:Jm,clickToUse:!1},fo(this.options,this.defaultOptions),this.body={container:t,nodes:{},nodeIndices:[],edges:{},edgeIndices:[],emitter:{on:Fo(o=this.on).call(o,this),off:Fo(n=this.off).call(n,this),emit:Fo(r=this.emit).call(r,this),once:Fo(s=this.once).call(s,this)},eventListeners:{onTap:function(){},onTouch:function(){},onDoubleTap:function(){},onHold:function(){},onDragStart:function(){},onDrag:function(){},onDragEnd:function(){},onMouseWheel:function(){},onPinch:function(){},onMouseMove:function(){},onRelease:function(){},onContext:function(){}},data:{nodes:null,edges:null},functions:{createNode:function(){},createEdge:function(){},getPointer:function(){}},modules:{},view:{scale:1,translation:{x:0,y:0}},selectionBox:{show:!1,position:{start:{x:0,y:0},end:{x:0,y:0}}}},this.bindEventListeners(),this.images=new eb((function(){return a.body.emitter.emit("_requestRedraw")})),this.groups=new Ow,this.canvas=new nE(this.body),this.selectionHandler=new cO(this.body,this.canvas),this.interactionHandler=new cE(this.body,this.canvas,this.selectionHandler),this.view=new sE(this.body,this.canvas),this.renderer=new tE(this.body,this.canvas),this.physics=new Lx(this.body),this.layoutEngine=new PC(this.body),this.clustering=new Zx(this.body),this.manipulation=new IC(this.body,this.canvas,this.selectionHandler,this.interactionHandler),this.nodesHandler=new B_(this.body,this.images,this.groups,this.layoutEngine),this.edgesHandler=new Tx(this.body,this.images,this.groups),this.body.modules.kamadaKawai=new YC(this.body,150,.05),this.body.modules.clustering=this.clustering,this.canvas._create(),this.setOptions(i),this.setData(e)}Vo(XC.prototype),XC.prototype.setOptions=function(t){var e=this;if(null===t&&(t=void 0),void 0!==t){!0===ym.validate(t,HC)&&console.error("%cErrors have been found in the supplied options object.",gm);if(Ny(["locale","locales","clickToUse"],this.options,t),void 0!==t.locale&&(t.locale=function(t,e){try{var i=$c(e.split(/[-_ /]/,2),2),o=i[0],n=i[1],r=null!=o?o.toLowerCase():null,s=null!=n?n.toUpperCase():null;if(r&&s){var a,h=r+"-"+s;if(Object.prototype.hasOwnProperty.call(t,h))return h;console.warn(su(a="Unknown variant ".concat(s," of language ")).call(a,r,"."))}if(r){var d=r;if(Object.prototype.hasOwnProperty.call(t,d))return d;console.warn("Unknown language ".concat(r))}return console.warn("Unknown locale ".concat(e,", falling back to English.")),"en"}catch(t){return console.error(t),console.warn("Unexpected error while normalizing locale ".concat(e,", falling back to English.")),"en"}}(t.locales||this.options.locales,t.locale)),t=this.layoutEngine.setOptions(t.layout,t),this.canvas.setOptions(t),this.groups.setOptions(t.groups),this.nodesHandler.setOptions(t.nodes),this.edgesHandler.setOptions(t.edges),this.physics.setOptions(t.physics),this.manipulation.setOptions(t.manipulation,t,this.options),this.interactionHandler.setOptions(t.interaction),this.renderer.setOptions(t.interaction),this.selectionHandler.setOptions(t.interaction),void 0!==t.groups&&this.body.emitter.emit("refreshNodes"),"configure"in t&&(this.configurator||(this.configurator=new fm(this,this.body.container,WC,this.canvas.pixelRatio,VC)),this.configurator.setOptions(t.configure)),this.configurator&&!0===this.configurator.options.enabled){var i={nodes:{},edges:{},layout:{},interaction:{},manipulation:{},physics:{},global:{}};Ry(i.nodes,this.nodesHandler.options),Ry(i.edges,this.edgesHandler.options),Ry(i.layout,this.layoutEngine.options),Ry(i.interaction,this.selectionHandler.options),Ry(i.interaction,this.renderer.options),Ry(i.interaction,this.interactionHandler.options),Ry(i.manipulation,this.manipulation.options),Ry(i.physics,this.physics.options),Ry(i.global,this.canvas.options),Ry(i.global,this.options),this.configurator.setModuleOptions(i)}void 0!==t.clickToUse?!0===t.clickToUse?void 0===this.activator&&(this.activator=new um(this.canvas.frame),this.activator.on("change",(function(){e.body.emitter.emit("activate")}))):(void 0!==this.activator&&(this.activator.destroy(),delete this.activator),this.body.emitter.emit("activate")):this.body.emitter.emit("activate"),this.canvas.setSize(),this.body.emitter.emit("startSimulation")}},XC.prototype._updateVisibleIndices=function(){var t=this.body.nodes,e=this.body.edges;for(var i in this.body.nodeIndices=[],this.body.edgeIndices=[],t)Object.prototype.hasOwnProperty.call(t,i)&&(this.clustering._isClusteredNode(i)||!1!==t[i].options.hidden||this.body.nodeIndices.push(t[i].id));for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=e[o],r=t[n.fromId],s=t[n.toId],a=void 0!==r&&void 0!==s;!this.clustering._isClusteredEdge(o)&&!1===n.options.hidden&&a&&!1===r.options.hidden&&!1===s.options.hidden&&this.body.edgeIndices.push(n.id)}},XC.prototype.bindEventListeners=function(){var t=this;this.body.emitter.on("_dataChanged",(function(){t.edgesHandler._updateState(),t.body.emitter.emit("_dataUpdated")})),this.body.emitter.on("_dataUpdated",(function(){t.clustering._updateState(),t._updateVisibleIndices(),t._updateValueRange(t.body.nodes),t._updateValueRange(t.body.edges),t.body.emitter.emit("startSimulation"),t.body.emitter.emit("_requestRedraw")}))},XC.prototype.setData=function(t){if(this.body.emitter.emit("resetPhysics"),this.body.emitter.emit("_resetData"),this.selectionHandler.unselectAll(),t&&t.dot&&(t.nodes||t.edges))throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');if(this.setOptions(t&&t.options),t&&t.dot){console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");var e=Km(t.dot);this.setData(e)}else if(t&&t.gephi){console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");var i=Zm(t.gephi);this.setData(i)}else this.nodesHandler.setData(t&&t.nodes,!0),this.edgesHandler.setData(t&&t.edges,!0),this.body.emitter.emit("_dataChanged"),this.body.emitter.emit("_dataLoaded"),this.body.emitter.emit("initPhysics")},XC.prototype.destroy=function(){for(var t in this.body.emitter.emit("destroy"),this.body.emitter.off(),this.off(),delete this.groups,delete this.canvas,delete this.selectionHandler,delete this.interactionHandler,delete this.view,delete this.renderer,delete this.physics,delete this.layoutEngine,delete this.clustering,delete this.manipulation,delete this.nodesHandler,delete this.edgesHandler,delete this.configurator,delete this.images,this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes,t)&&delete this.body.nodes[t];for(var e in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges,e)&&delete this.body.edges[e];Dy(this.body.container)},XC.prototype._updateValueRange=function(t){var e,i=void 0,o=void 0,n=0;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e)){var r=t[e].getValue();void 0!==r&&(i=void 0===i?r:Math.min(r,i),o=void 0===o?r:Math.max(r,o),n+=r)}if(void 0!==i&&void 0!==o)for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&t[e].setValueRange(i,o,n)},XC.prototype.isActive=function(){return!this.activator||this.activator.active},XC.prototype.setSize=function(){return this.canvas.setSize.apply(this.canvas,arguments)},XC.prototype.canvasToDOM=function(){return this.canvas.canvasToDOM.apply(this.canvas,arguments)},XC.prototype.DOMtoCanvas=function(){return this.canvas.DOMtoCanvas.apply(this.canvas,arguments)},XC.prototype.findNode=function(){return this.clustering.findNode.apply(this.clustering,arguments)},XC.prototype.isCluster=function(){return this.clustering.isCluster.apply(this.clustering,arguments)},XC.prototype.openCluster=function(){return this.clustering.openCluster.apply(this.clustering,arguments)},XC.prototype.cluster=function(){return this.clustering.cluster.apply(this.clustering,arguments)},XC.prototype.getNodesInCluster=function(){return this.clustering.getNodesInCluster.apply(this.clustering,arguments)},XC.prototype.clusterByConnection=function(){return this.clustering.clusterByConnection.apply(this.clustering,arguments)},XC.prototype.clusterByHubsize=function(){return this.clustering.clusterByHubsize.apply(this.clustering,arguments)},XC.prototype.updateClusteredNode=function(){return this.clustering.updateClusteredNode.apply(this.clustering,arguments)},XC.prototype.getClusteredEdges=function(){return this.clustering.getClusteredEdges.apply(this.clustering,arguments)},XC.prototype.getBaseEdge=function(){return this.clustering.getBaseEdge.apply(this.clustering,arguments)},XC.prototype.getBaseEdges=function(){return this.clustering.getBaseEdges.apply(this.clustering,arguments)},XC.prototype.updateEdge=function(){return this.clustering.updateEdge.apply(this.clustering,arguments)},XC.prototype.clusterOutliers=function(){return this.clustering.clusterOutliers.apply(this.clustering,arguments)},XC.prototype.getSeed=function(){return this.layoutEngine.getSeed.apply(this.layoutEngine,arguments)},XC.prototype.enableEditMode=function(){return this.manipulation.enableEditMode.apply(this.manipulation,arguments)},XC.prototype.disableEditMode=function(){return this.manipulation.disableEditMode.apply(this.manipulation,arguments)},XC.prototype.addNodeMode=function(){return this.manipulation.addNodeMode.apply(this.manipulation,arguments)},XC.prototype.editNode=function(){return this.manipulation.editNode.apply(this.manipulation,arguments)},XC.prototype.editNodeMode=function(){return console.warn("Deprecated: Please use editNode instead of editNodeMode."),this.manipulation.editNode.apply(this.manipulation,arguments)},XC.prototype.addEdgeMode=function(){return this.manipulation.addEdgeMode.apply(this.manipulation,arguments)},XC.prototype.editEdgeMode=function(){return this.manipulation.editEdgeMode.apply(this.manipulation,arguments)},XC.prototype.deleteSelected=function(){return this.manipulation.deleteSelected.apply(this.manipulation,arguments)},XC.prototype.getPositions=function(){return this.nodesHandler.getPositions.apply(this.nodesHandler,arguments)},XC.prototype.getPosition=function(){return this.nodesHandler.getPosition.apply(this.nodesHandler,arguments)},XC.prototype.storePositions=function(){return this.nodesHandler.storePositions.apply(this.nodesHandler,arguments)},XC.prototype.moveNode=function(){return this.nodesHandler.moveNode.apply(this.nodesHandler,arguments)},XC.prototype.getBoundingBox=function(){return this.nodesHandler.getBoundingBox.apply(this.nodesHandler,arguments)},XC.prototype.getConnectedNodes=function(t){return void 0!==this.body.nodes[t]?this.nodesHandler.getConnectedNodes.apply(this.nodesHandler,arguments):this.edgesHandler.getConnectedNodes.apply(this.edgesHandler,arguments)},XC.prototype.getConnectedEdges=function(){return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler,arguments)},XC.prototype.startSimulation=function(){return this.physics.startSimulation.apply(this.physics,arguments)},XC.prototype.stopSimulation=function(){return this.physics.stopSimulation.apply(this.physics,arguments)},XC.prototype.stabilize=function(){return this.physics.stabilize.apply(this.physics,arguments)},XC.prototype.getSelection=function(){return this.selectionHandler.getSelection.apply(this.selectionHandler,arguments)},XC.prototype.setSelection=function(){return this.selectionHandler.setSelection.apply(this.selectionHandler,arguments)},XC.prototype.getSelectedNodes=function(){return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler,arguments)},XC.prototype.getSelectedEdges=function(){return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler,arguments)},XC.prototype.getNodeAt=function(){var t=this.selectionHandler.getNodeAt.apply(this.selectionHandler,arguments);return void 0!==t&&void 0!==t.id?t.id:t},XC.prototype.getEdgeAt=function(){var t=this.selectionHandler.getEdgeAt.apply(this.selectionHandler,arguments);return void 0!==t&&void 0!==t.id?t.id:t},XC.prototype.selectNodes=function(){return this.selectionHandler.selectNodes.apply(this.selectionHandler,arguments)},XC.prototype.selectEdges=function(){return this.selectionHandler.selectEdges.apply(this.selectionHandler,arguments)},XC.prototype.unselectAll=function(){this.selectionHandler.unselectAll.apply(this.selectionHandler,arguments),this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler),this.redraw()},XC.prototype.redraw=function(){return this.renderer.redraw.apply(this.renderer,arguments)},XC.prototype.getScale=function(){return this.view.getScale.apply(this.view,arguments)},XC.prototype.getViewPosition=function(){return this.view.getViewPosition.apply(this.view,arguments)},XC.prototype.fit=function(){return this.view.fit.apply(this.view,arguments)},XC.prototype.moveTo=function(){return this.view.moveTo.apply(this.view,arguments)},XC.prototype.focus=function(){return this.view.focus.apply(this.view,arguments)},XC.prototype.releaseNode=function(){return this.view.releaseNode.apply(this.view,arguments)},XC.prototype.getOptionsFromConfigurator=function(){var t={};return this.configurator&&(t=this.configurator.getOptions.apply(this.configurator)),t};var GC=Km;t.Network=XC,t.NetworkImages=eb,t.networkDOTParser=$m,t.networkGephiParser=Qm,t.networkOptions=qC,t.parseDOTNetwork=GC,t.parseGephiNetwork=Zm,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=vis-network.min.js.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__(__webpack_require__.s = "./src/vis_cdawg.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsbUJBQW1CO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtB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O0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7O0FBRTdDLHFGQUFxRjs7QUFFckY7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdHQUFnRztBQUNoRztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxHQUFHO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFD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ZSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUs7QUFDcEM7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0Esb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBLEtBQUssR0FBRzs7QUFFUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7O0FBR1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7OztBQUdBOztBQUVBO0FBQ0EsZ0RBQWdEOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQixpQkFBaUIsWUFBWTtBQUM3Qjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCLGlCQUFpQixZQUFZO0FBQzdCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsaUJBQWlCO0FBQ2pCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2Qjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsY0FBYzs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0E7O0FBRUEsaURBQWlEO0FBQ2pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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LFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsYUFBYSxhQUFhO0FBQzFCLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDOztBQUV4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVOzs7QUFHVjtBQUNBO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFD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QTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBCQUEwQixvQkFBb0I7QUFDOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4RUFBOEUsYUFBYTtBQUMzRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7OztBQUdWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0EsMEJBQTBCLDRCQUE0QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHOztBQUVoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLDZDQUE2QztBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsNkRBQTZELHFGQUFxRixXQUFXLHNIQUFzSCxnQkFBZ0IsV0FBVyx5QkFBeUIsU0FBUyx3QkFBd0IsNEJBQTRCLGNBQWMsU0FBUywrQkFBK0Isc0JBQXNCLFdBQVcsWUFBWSxnS0FBZ0ssa0RBQWtELFNBQVMsa0JBQWtCLGtCQUFrQixvQkFBb0Isc0JBQXNCLDhCQUE4QixjQUFjLHVCQUF1QixlQUFlLFlBQVksb0JBQW9CLE1BQU0sMkRBQTJELFVBQVU7O0FBRTc4QixzREFBc0QsZ0JBQWdCLGdCQUFnQixrRUFBa0UsdUZBQXVGLDZEQUE2RCxrREFBa0Q7O0FBRTlWLDJDQUEyQyx1REFBdUQsdUNBQXVDLFNBQVMsT0FBTyxvQkFBb0I7O0FBRTdLOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixnQ0FBZ0M7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLGdDQUFnQztBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixnQ0FBZ0M7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7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c3JjL3Zpc19jZGF3Zy50cyIsIndlYnBhY2s6Ly92aXNkcy8uL3NyYy92aXNqc19kZWZhdWx0X29wdGlvbnMudHMiLCJ3ZWJwYWNrOi8vdmlzZHMvLi9ub2RlX21vZHVsZXMvdmlzLWRhdGEvcGVlci91bWQvdmlzLWRhdGEuanMiLCJ3ZWJwYWNrOi8vdmlzZHMvLi9ub2RlX21vZHVsZXMvdmlzLW5ldHdvcmsvcGVlci91bWQvdmlzLW5ldHdvcmsubWluLmpzIiwid2VicGFjazovL3Zpc2RzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Zpc2RzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdmlzZHMvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly92aXNkcy93ZWJwYWNrL2JlZm9yZS1zdGFydHVwIiwid2VicGFjazovL3Zpc2RzL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly92aXNkcy93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ05vZGUge1xuICBiaXJ0aF90aW1lOiBudW1iZXI7XG4gIGRlcHRoOiBudW1iZXI7XG4gIHNsaW5rOiBDTm9kZTtcbiAgb3V0X2VkZ2VzOiBNYXA8c3RyaW5nLCBFZGdlPjtcbiAgaW5fZWRnZXM6IEFycmF5PEVkZ2U+O1xuICBjb25zdHJ1Y3RvcihiaXJ0aF90aW1lOiBudW1iZXIsIGRlcHRoOiBudW1iZXIpIHtcbiAgICB0aGlzLmJpcnRoX3RpbWUgPSBiaXJ0aF90aW1lO1xuICAgIHRoaXMuZGVwdGggPSBkZXB0aDtcbiAgICB0aGlzLnNsaW5rID0gdGhpcztcbiAgICB0aGlzLm91dF9lZGdlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmluX2VkZ2VzID0gW107XG4gIH1cblxuICBnZXQgaXNfZXhwbGljaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMub3V0X2VkZ2VzLnNpemUgIT09IDE7XG4gIH1cbn1cblxuY2xhc3MgRWRnZSB7XG4gIGJpcnRoX3RpbWU6IG51bWJlcjtcbiAgdGV4dDogKCkgPT4gc3RyaW5nO1xuICBwYXJlbnQ6IENOb2RlO1xuICBlZGdlX2JlZzogbnVtYmVyO1xuICBlZGdlX2xlbjogbnVtYmVyO1xuICBjaGlsZDogQ05vZGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYmlydGhfdGltZTogbnVtYmVyLFxuICAgIHRleHQ6ICgpID0+IHN0cmluZyxcbiAgICBwYXJlbnQ6IENOb2RlLFxuICAgIGVkZ2VfYmVnOiBudW1iZXIsXG4gICAgZWRnZV9sZW46IG51bWJlcixcbiAgICBjaGlsZDogQ05vZGVcbiAgKSB7XG4gICAgdGhpcy5iaXJ0aF90aW1lID0gYmlydGhfdGltZTtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuZWRnZV9iZWcgPSBlZGdlX2JlZztcbiAgICB0aGlzLmVkZ2VfbGVuID0gZWRnZV9sZW47XG4gICAgdGhpcy5jaGlsZCA9IGNoaWxkO1xuICB9XG5cbiAgY2hhckF0KGk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpW3RoaXMuZWRnZV9iZWcgKyBpXTtcbiAgfVxuXG4gIGdldCBzdHIoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5lZGdlX2xlbiA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS5zdWJzdHIodGhpcy5lZGdlX2JlZywgdGhpcy5lZGdlX2xlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS5zdWJzdHIodGhpcy5lZGdlX2JlZyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxlbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVkZ2VfbGVuID09PSAtMVxuICAgICAgPyB0aGlzLnRleHQoKS5sZW5ndGggLSB0aGlzLmVkZ2VfYmVnXG4gICAgICA6IHRoaXMuZWRnZV9sZW47XG4gIH1cblxuICBzZXQgbGVuKHZhbCkge1xuICAgIHRoaXMuZWRnZV9sZW4gPSB2YWw7XG4gIH1cblxuICBnZXQgaXNfb3BlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5lZGdlX2xlbiA9PT0gLTE7XG4gIH1cbn1cblxuY29uc3QgZHVtbXlfbm9kZSA9IG5ldyBDTm9kZSgtMSwgLTEpO1xuY29uc3QgZHVtbXlfZWRnZSA9IG5ldyBFZGdlKC0xLCAoKSA9PiBcIlwiLCBkdW1teV9ub2RlLCAtMSwgLTEsIGR1bW15X25vZGUpO1xuXG4vLyBUb3BOb2RlIGlzIGFuIGltcGxpY2l0IG5vZGUuXG4vLyBUaGUgcm9vdCBub2RlJ3Mgc3VmZml4IGxpbmsgcG9pbnRzIHRvIHRoZSB0b3Agbm9kZS5cbi8vIFRoZXJlIGlzIGEgc3BlY2lhbCBlZGdlIGZyb20gdGhlIHRvcCBub2RlIHRvIHRoZSByb290IG5vZGUsIHdoaWNoIHdlIGNhbiBtb3ZlIGFueSBjaGFyYWN0ZXJzLlxuY2xhc3MgVG9wTm9kZSBleHRlbmRzIENOb2RlIHtcbiAgcm9vdDogQ05vZGU7XG4gIGVkZ2U6IEVkZ2U7XG4gIGNvbnN0cnVjdG9yKHJvb3Q6IENOb2RlKSB7XG4gICAgc3VwZXIoLTEsIC0xKTtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIHRoaXMuZWRnZSA9IG5ldyBFZGdlKC0xLCAoKSA9PiBcIlwiLCBkdW1teV9ub2RlLCAtMSwgLTEsIHRoaXMucm9vdCk7XG4gIH1cblxuICBnZXQgYXROb2RlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8vIEl0IHJlcHJlc2VudHMgYW4gaW1wbGljaXQgbm9kZSB3aGljaCBpcyBsb2NhdGVkIGF0IG1hdGNoX2xlbiBvbiBhbiBlZGdlLlxuLy8gSWYgaXQgaXMgYXQgbm9kZSwgZWRnZSBpcyBhbiBkdW1teV9lZGdlIGFuZCBtYXRjaF9sZW4gPSAwXG5jbGFzcyBTdGF0ZSB7XG4gIHN0YXRpYyBjcmVhdGVfYXRfbm9kZV9zdGF0ZShwYXJlbnQ6IENOb2RlKTogU3RhdGUge1xuICAgIHJldHVybiBuZXcgU3RhdGUocGFyZW50LCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gIH1cblxuICBwYXJlbnQ6IENOb2RlO1xuICBlZGdlOiBFZGdlO1xuICBtYXRjaF9sZW46IG51bWJlcjtcbiAgY29uc3RydWN0b3IocGFyZW50OiBDTm9kZSwgZWRnZTogRWRnZSA9IGR1bW15X2VkZ2UsIG1hdGNoX2xlbjogbnVtYmVyID0gMCkge1xuICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBUb3BOb2RlKSB7XG4gICAgICAvLyBUaGlzIGlzIFRvcE5vZGVcbiAgICAgIHRoaXMuZWRnZSA9IHBhcmVudC5lZGdlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVkZ2UgPSBlZGdlO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLm1hdGNoX2xlbiA9IG1hdGNoX2xlbjtcbiAgfVxuXG4gIGdldCBhdE5vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hfbGVuID09PSAwO1xuICB9XG5cbiAgLy8gcmV0dXJuIGEgc3RhdGUgdGhhdCBjYW4gYmUgbW92ZWQgZnJvbSB0aGUgY3VycmVudCBzdGF0ZSB3aXRoIGEgY2hhcmFjdGVyIGNoYXIuXG4gIC8vIGlmIGNhbm5vdCwgcmV0dXJuIHVuZGVmaW5lZC5cbiAgbW92ZShjaGFyOiBzdHJpbmcpOiBTdGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMucGFyZW50IGluc3RhbmNlb2YgVG9wTm9kZSkgcmV0dXJuIG5ldyBTdGF0ZSh0aGlzLmVkZ2UuY2hpbGQpO1xuICAgIGNvbnN0IGNhbl9tb3ZlID0gdGhpcy5hdE5vZGVcbiAgICAgID8gdGhpcy5wYXJlbnQub3V0X2VkZ2VzLmhhcyhjaGFyKVxuICAgICAgOiB0aGlzLmVkZ2UuY2hhckF0KHRoaXMubWF0Y2hfbGVuKSA9PT0gY2hhcjtcbiAgICAvLyBjb25zb2xlLmxvZygnY2FuX21vdmUnLCBjYW5fbW92ZSlcbiAgICBpZiAoIWNhbl9tb3ZlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlZGdlID0gdGhpcy5hdE5vZGVcbiAgICAgICAgPyAodGhpcy5wYXJlbnQub3V0X2VkZ2VzLmdldChjaGFyKSBhcyBFZGdlKVxuICAgICAgICA6IHRoaXMuZWRnZTtcbiAgICAgIGNvbnN0IG1hdGNoX2xlbiA9IHRoaXMuYXROb2RlID8gMCA6IHRoaXMubWF0Y2hfbGVuO1xuICAgICAgaWYgKG1hdGNoX2xlbiArIDEgPCBlZGdlLmxlbikge1xuICAgICAgICByZXR1cm4gbmV3IFN0YXRlKHRoaXMucGFyZW50LCBlZGdlLCBtYXRjaF9sZW4gKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBTdGF0ZS5jcmVhdGVfYXRfbm9kZV9zdGF0ZShlZGdlLmNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQ0RBV0cge1xuICB0ZXh0OiBzdHJpbmc7XG4gIG5vZGVzOiBBcnJheTxDTm9kZT47XG4gIGVkZ2VzOiBBcnJheTxFZGdlPjtcbiAgcm9vdDogQ05vZGU7XG4gIHRvcF9ub2RlOiBUb3BOb2RlO1xuICBzaW5rOiBDTm9kZTtcbiAgYXA6IFN0YXRlO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICB0aGlzLmVkZ2VzID0gW107XG4gICAgdGhpcy5yb290ID0gdGhpcy5jcmVhdGVfbm9kZSgwKTtcbiAgICB0aGlzLnRvcF9ub2RlID0gbmV3IFRvcE5vZGUodGhpcy5yb290KTtcbiAgICB0aGlzLnJvb3Quc2xpbmsgPSB0aGlzLnRvcF9ub2RlO1xuICAgIHRoaXMuc2luayA9IHRoaXMuY3JlYXRlX25vZGUoLTEpO1xuICAgIHRoaXMuYXAgPSBuZXcgU3RhdGUodGhpcy5yb290LCB1bmRlZmluZWQsIDApO1xuICB9XG5cbiAgY3JlYXRlX25vZGUoZGVwdGg6IG51bWJlcik6IENOb2RlIHtcbiAgICBjb25zdCBub2RlID0gbmV3IENOb2RlKHRoaXMubm9kZXMubGVuZ3RoLCBkZXB0aCk7XG4gICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgY3JlYXRlX2Nsb3NlZF9lZGdlKFxuICAgIHBhcmVudDogQ05vZGUsXG4gICAgZWRnZV9iZWc6IG51bWJlcixcbiAgICBlZGdlX2xlbjogbnVtYmVyLFxuICAgIGNoaWxkOiBDTm9kZVxuICApIHtcbiAgICBjb25zdCBlZGdlID0gbmV3IEVkZ2UoXG4gICAgICB0aGlzLmVkZ2VzLmxlbmd0aCxcbiAgICAgICgpID0+IHRoaXMudGV4dCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGVkZ2VfYmVnLFxuICAgICAgZWRnZV9sZW4sXG4gICAgICBjaGlsZFxuICAgICk7XG4gICAgdGhpcy5lZGdlcy5wdXNoKGVkZ2UpO1xuICAgIHBhcmVudC5vdXRfZWRnZXMuc2V0KHRoaXMudGV4dFtlZGdlX2JlZ10sIGVkZ2UpO1xuICAgIHJldHVybiBlZGdlO1xuICB9XG5cbiAgY3JlYXRlX29wZW5fZWRnZShwYXJlbnQ6IENOb2RlLCBlZGdlX2JlZzogbnVtYmVyKSB7XG4gICAgY29uc3QgZWRnZSA9IG5ldyBFZGdlKFxuICAgICAgdGhpcy5lZGdlcy5sZW5ndGgsXG4gICAgICAoKSA9PiB0aGlzLnRleHQsXG4gICAgICBwYXJlbnQsXG4gICAgICBlZGdlX2JlZyxcbiAgICAgIC0xLFxuICAgICAgdGhpcy5zaW5rXG4gICAgKTtcbiAgICB0aGlzLmVkZ2VzLnB1c2goZWRnZSk7XG4gICAgcGFyZW50Lm91dF9lZGdlcy5zZXQodGhpcy50ZXh0W2VkZ2VfYmVnXSwgZWRnZSk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cblxuICAvLyByZXR1cm4gYSBzdGF0ZSB0aGF0IG1vdmVkIGZyb20gbm9kZSB3aXRoIHRleHRbYmVnOmJlZytsZW5dLlxuICAvLyBJdCBpcyBndXJhbnRlZWQgdGhhdCB3ZSBjYW4gbW92ZSBub2RlIHdpdGggdGV4dFtiZWc6YmVnK2xlbl0uXG4gIG1vdmVfdHJ1c3Qobm9kZTogQ05vZGUsIHRleHQ6IHN0cmluZywgYmVnOiBudW1iZXIsIGxlbjogbnVtYmVyKTogU3RhdGUge1xuICAgIGNvbnN0IF9tb3ZlX3RydXN0ID0gKFxuICAgICAgbm9kZTogQ05vZGUsXG4gICAgICB0ZXh0OiBzdHJpbmcsXG4gICAgICBiZWc6IG51bWJlcixcbiAgICAgIGxlbjogbnVtYmVyXG4gICAgKSA9PiB7XG4gICAgICBjb25zdCBlZGdlID0gbm9kZS5vdXRfZWRnZXMuZ2V0KHRleHRbYmVnXSkgYXMgRWRnZTtcbiAgICAgIGlmIChsZW4gPCBlZGdlLmxlbikge1xuICAgICAgICByZXR1cm4gbmV3IFN0YXRlKG5vZGUsIGVkZ2UsIGxlbik7XG4gICAgICB9IGVsc2UgaWYgKGxlbiA9PT0gZWRnZS5sZW4pIHtcbiAgICAgICAgcmV0dXJuIFN0YXRlLmNyZWF0ZV9hdF9ub2RlX3N0YXRlKGVkZ2UuY2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW92ZV90cnVzdChcbiAgICAgICAgICBlZGdlLmNoaWxkLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgYmVnICsgZWRnZS5sZW4sXG4gICAgICAgICAgbGVuIC0gZWRnZS5sZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChsZW4gPT09IDApIHJldHVybiBuZXcgU3RhdGUobm9kZSk7XG4gICAgZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIFRvcE5vZGUpIHtcbiAgICAgIGlmIChsZW4gPT09IDEpIHJldHVybiBuZXcgU3RhdGUobm9kZS5yb290KTtcbiAgICAgIGVsc2UgcmV0dXJuIF9tb3ZlX3RydXN0KG5vZGUucm9vdCwgdGV4dCwgYmVnICsgMSwgbGVuIC0gMSk7XG4gICAgfSBlbHNlIHJldHVybiBfbW92ZV90cnVzdChub2RlLCB0ZXh0LCBiZWcsIGxlbik7XG4gIH1cblxuICAvLyBjcmVhdGUgbmV3IG5vZGUgdGhhdCBoYXMgb3V0X2VkZ2VzIG9mIHRoZSBnaXZlIG5vZGUuXG4gIGNvcHlfbm9kZShub2RlOiBDTm9kZSwgbnVtX2luX2VkZ2VfbGVmdDogbnVtYmVyKSB7XG4gICAgY29uc3QgbmV3X25vZGUgPSB0aGlzLmNyZWF0ZV9ub2RlKG5vZGUuZGVwdGggLSBudW1faW5fZWRnZV9sZWZ0KTtcbiAgICBjb25zdCBvdXRfZWRnZXMgPSBBcnJheS5mcm9tKG5vZGUub3V0X2VkZ2VzLmVudHJpZXMoKSk7XG4gICAgb3V0X2VkZ2VzLnNvcnQoKTsgLy8gZm9yIHRlc3RcbiAgICBmb3IgKGNvbnN0IFtrLCBlZGdlXSBvZiBvdXRfZWRnZXMpIHtcbiAgICAgIHRoaXMuY3JlYXRlX2Nsb3NlZF9lZGdlKFxuICAgICAgICBuZXdfbm9kZSxcbiAgICAgICAgZWRnZS5lZGdlX2JlZyxcbiAgICAgICAgZWRnZS5lZGdlX2xlbixcbiAgICAgICAgZWRnZS5jaGlsZFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gc3BsaXQgaW5fZWRnZXNcbiAgICBuZXdfbm9kZS5pbl9lZGdlcyA9IG5vZGUuaW5fZWRnZXMuc2xpY2UobnVtX2luX2VkZ2VfbGVmdCk7XG4gICAgbm9kZS5pbl9lZGdlcyA9IG5vZGUuaW5fZWRnZXMuc2xpY2UoMCwgbnVtX2luX2VkZ2VfbGVmdCk7XG5cbiAgICBuZXdfbm9kZS5pbl9lZGdlcy5mb3JFYWNoKChlZGdlKSA9PiB7XG4gICAgICBlZGdlLmNoaWxkID0gbmV3X25vZGU7XG4gICAgfSk7XG5cbiAgICBuZXdfbm9kZS5zbGluayA9IG5vZGUuc2xpbms7XG4gICAgbm9kZS5zbGluayA9IG5ld19ub2RlO1xuXG4gICAgcmV0dXJuIG5ld19ub2RlO1xuICB9XG5cbiAgc3BsaXQoc3RhdGU6IFN0YXRlKSB7XG4gICAgY29uc3QgYnJhbmNoX25vZGUgPSB0aGlzLmNyZWF0ZV9ub2RlKHN0YXRlLm1hdGNoX2xlbik7XG4gICAgY29uc3QgaW5fZWRnZSA9IHRoaXMuY3JlYXRlX2Nsb3NlZF9lZGdlKFxuICAgICAgc3RhdGUucGFyZW50LFxuICAgICAgc3RhdGUuZWRnZS5lZGdlX2JlZyxcbiAgICAgIHN0YXRlLm1hdGNoX2xlbixcbiAgICAgIGJyYW5jaF9ub2RlXG4gICAgKTtcblxuICAgIHN0YXRlLmVkZ2UucGFyZW50ID0gYnJhbmNoX25vZGU7XG4gICAgaWYgKCFzdGF0ZS5lZGdlLmlzX29wZW4pIHN0YXRlLmVkZ2UuZWRnZV9sZW4gLT0gc3RhdGUubWF0Y2hfbGVuO1xuICAgIHN0YXRlLmVkZ2UuZWRnZV9iZWcgKz0gc3RhdGUubWF0Y2hfbGVuO1xuICAgIGJyYW5jaF9ub2RlLm91dF9lZGdlcy5zZXQoc3RhdGUuZWRnZS5jaGFyQXQoMCksIHN0YXRlLmVkZ2UpO1xuXG4gICAgYnJhbmNoX25vZGUuaW5fZWRnZXMucHVzaChpbl9lZGdlKTtcblxuICAgIHJldHVybiBicmFuY2hfbm9kZTtcbiAgfVxuXG4gIGluc2VydChjaGFyOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmxvZygpO1xuICAgIGNvbnNvbGUubG9nKFwiaW5zZXJ0IGNoYXJbXCIsIGNoYXIsIFwiXVwiKTtcbiAgICB0aGlzLnRleHQgKz0gY2hhcjtcbiAgICBpZiAodGhpcy50ZXh0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5jcmVhdGVfb3Blbl9lZGdlKHRoaXMucm9vdCwgMCk7XG4gICAgICB0aGlzLmFwID0gbmV3IFN0YXRlKHRoaXMucm9vdCk7XG4gICAgICB0aGlzLnNpbmsuc2xpbmsgPSB0aGlzLnJvb3Q7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBuZXh0X3N0YXRlOiBTdGF0ZSB8IHVuZGVmaW5lZDtcbiAgICBsZXQgcHJldl9icmFuY2g6IENOb2RlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIGxldCBwcmV2X2Rlc3RpbmF0aW9uOiBDTm9kZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICB3aGlsZSAoKG5leHRfc3RhdGUgPSB0aGlzLmFwLm1vdmUoY2hhcikpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiYXBcIiwgdGhpcy5hcCwgdGhpcy5hcC5hdE5vZGUpO1xuICAgICAgaWYgKHRoaXMuYXAuYXROb2RlKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgcHJldmlvdXNsbHkgcHJvY2Vzc2VkIG5vZGUsIGNyZWF0ZSBzdWZmaXggbGluayBmcm9tIGl0IHRvIHRoZSBhY3RpdmUgcG9pbnRcbiAgICAgICAgaWYgKHByZXZfYnJhbmNoKSBwcmV2X2JyYW5jaC5zbGluayA9IHRoaXMuYXAucGFyZW50O1xuICAgICAgICBwcmV2X2JyYW5jaCA9IHRoaXMuYXAucGFyZW50O1xuICAgICAgICBwcmV2X2Rlc3RpbmF0aW9uID0gdGhpcy5zaW5rO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlX29wZW5fZWRnZSh0aGlzLmFwLnBhcmVudCwgdGhpcy50ZXh0Lmxlbmd0aCAtIDEpO1xuXG4gICAgICAgIHRoaXMuYXAgPSBuZXcgU3RhdGUodGhpcy5hcC5wYXJlbnQuc2xpbmspO1xuICAgICAgICBjb25zb2xlLmxvZyhcImZpcnN0IGFwXCIsIHRoaXMuYXApO1xuICAgICAgfSBlbHNlIGlmIChwcmV2X2JyYW5jaCAmJiB0aGlzLmFwLmVkZ2UuY2hpbGQgPT09IHByZXZfZGVzdGluYXRpb24pIHtcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBwcmV2aW91c2x5IHByb2Nlc3NlZCBub2RlIChwcmV2X2JyYW5jaCkgYW5kIGl0cyBkZXN0aW5hdGlvbiBpcyBlcXVhbCB0byB0aGUgZGVzdGluYXRpb24gb2YgdGhlIGFjdGl2ZSBwb2ludCwgbWVyZ2UgdGhlIGFjdGl2ZSBwb2ludCB0byB0aGUgcHJldl9icmFuY2hcbiAgICAgICAgdGhpcy5hcC5lZGdlLmNoaWxkID0gcHJldl9icmFuY2g7XG4gICAgICAgIHRoaXMuYXAuZWRnZS5sZW4gPSB0aGlzLmFwLm1hdGNoX2xlbjtcbiAgICAgICAgcHJldl9icmFuY2guaW5fZWRnZXMucHVzaCh0aGlzLmFwLmVkZ2UpO1xuXG4gICAgICAgIHRoaXMuYXAgPSB0aGlzLm1vdmVfdHJ1c3QoXG4gICAgICAgICAgdGhpcy5hcC5wYXJlbnQuc2xpbmssXG4gICAgICAgICAgdGhpcy50ZXh0LFxuICAgICAgICAgIHRoaXMuYXAuZWRnZS5lZGdlX2JlZyxcbiAgICAgICAgICB0aGlzLmFwLm1hdGNoX2xlblxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3BsaXQgYW5kIGNyZWF0ZSBhIG5ldyBvcGVuIGVkZ2VcbiAgICAgICAgY29uc3QgZWRnZV9iZWcgPSB0aGlzLmFwLmVkZ2UuZWRnZV9iZWc7XG4gICAgICAgIGNvbnN0IGVkZ2VfbGVuID0gdGhpcy5hcC5tYXRjaF9sZW47XG5cbiAgICAgICAgY29uc3QgYnJhbmNoX25vZGUgPSB0aGlzLnNwbGl0KHRoaXMuYXApO1xuICAgICAgICBpZiAocHJldl9icmFuY2gpIHByZXZfYnJhbmNoLnNsaW5rID0gYnJhbmNoX25vZGU7XG4gICAgICAgIHByZXZfYnJhbmNoID0gYnJhbmNoX25vZGU7XG4gICAgICAgIHByZXZfZGVzdGluYXRpb24gPSB0aGlzLmFwLmVkZ2UuY2hpbGQ7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVfb3Blbl9lZGdlKGJyYW5jaF9ub2RlLCB0aGlzLnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuYXAgPSB0aGlzLm1vdmVfdHJ1c3QoXG4gICAgICAgICAgdGhpcy5hcC5wYXJlbnQuc2xpbmssXG4gICAgICAgICAgdGhpcy50ZXh0LFxuICAgICAgICAgIGVkZ2VfYmVnLFxuICAgICAgICAgIGVkZ2VfbGVuXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV2X2JyYW5jaCAmJiB0aGlzLmFwLmF0Tm9kZSkgcHJldl9icmFuY2guc2xpbmsgPSB0aGlzLmFwLnBhcmVudDtcbiAgICBpZiAoXG4gICAgICBuZXh0X3N0YXRlLmF0Tm9kZSAmJlxuICAgICAgbmV4dF9zdGF0ZS5wYXJlbnQuZGVwdGggPlxuICAgICAgICB0aGlzLmFwLnBhcmVudC5kZXB0aCArICh0aGlzLmFwLmF0Tm9kZSA/IDEgOiB0aGlzLmFwLmVkZ2UubGVuKVxuICAgICkge1xuICAgICAgLy8gd2UgcmVhY2hlZCBuZXh0X3N0YXRlIHdpdGggbm9uLXByaW1hcnkgZWRnZVxuICAgICAgY29uc3QgYnJhbmNoX25vZGUgPSB0aGlzLmNvcHlfbm9kZShcbiAgICAgICAgbmV4dF9zdGF0ZS5wYXJlbnQsXG4gICAgICAgIG5leHRfc3RhdGUucGFyZW50LmRlcHRoIC1cbiAgICAgICAgICAodGhpcy5hcC5wYXJlbnQuZGVwdGggKyAodGhpcy5hcC5hdE5vZGUgPyAxIDogdGhpcy5hcC5lZGdlLmxlbikpXG4gICAgICApO1xuICAgICAgbmV4dF9zdGF0ZSA9IG5ldyBTdGF0ZShicmFuY2hfbm9kZSk7XG4gICAgfVxuICAgIHRoaXMuYXAgPSBuZXh0X3N0YXRlO1xuICAgIGlmICh0aGlzLmFwLmF0Tm9kZSkge1xuICAgICAgdGhpcy5zaW5rLnNsaW5rID0gdGhpcy5hcC5wYXJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2luay5zbGluayA9IHRoaXMuc2luaztcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJpbnNlcnQgZW5kLCBhcCBpc1wiLCB0aGlzLmFwKTtcbiAgfVxuXG4gIC8vLyB0cmFuc2Zvcm1zIENEQVdHIGltcGxpY2l0IHRvIGV4cGxpY2l0LlxuICAvLy8gY3JlYXRlcyBhIG5vZGUgY29ycmVzcG9uZGluZyB0byBhbiBhY3RpdmUgbm9kZS5cbiAgZXhwbGljaXQoKSB7XG4gICAgbGV0IHByZXZfbm9kZSA9IHRoaXMuc2luaztcbiAgICB3aGlsZSAoIXRoaXMuYXAuYXROb2RlKSB7XG4gICAgICBjb25zdCBlZGdlX2JlZyA9IHRoaXMuYXAuZWRnZS5lZGdlX2JlZztcbiAgICAgIGNvbnN0IG1hdGNoX2xlbiA9IHRoaXMuYXAubWF0Y2hfbGVuO1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuc3BsaXQodGhpcy5hcCk7XG4gICAgICBwcmV2X25vZGUuc2xpbmsgPSBub2RlO1xuICAgICAgcHJldl9ub2RlID0gbm9kZTtcbiAgICAgIHRoaXMuYXAgPSB0aGlzLm1vdmVfdHJ1c3QoXG4gICAgICAgIHRoaXMuYXAucGFyZW50LnNsaW5rLFxuICAgICAgICB0aGlzLnRleHQsXG4gICAgICAgIGVkZ2VfYmVnLFxuICAgICAgICBtYXRjaF9sZW5cbiAgICAgICk7XG4gICAgfVxuICAgIHByZXZfbm9kZS5zbGluayA9IHRoaXMuYXAucGFyZW50O1xuICB9XG5cbiAganNvbihzaG93X3N1ZmZpeF9saW5rczogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBjb25zdCBub2RlczogYW55ID0gW107XG4gICAgY29uc3QgZWRnZXM6IGFueSA9IFtdO1xuICAgIGNvbnN0IG5pZCA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0IG1heF9yb3VuZG5lc3MgPSAwLjU7XG4gICAgY29uc3QgbWluX3JvdW5kbmVzcyA9IC0wLjU7XG4gICAgY29uc3Qgcm91bmRuZXNzID0gKGVkZ2U6IEVkZ2UpID0+IHtcbiAgICAgIGNvbnN0IGViaXJ0aCA9IEFycmF5LmZyb20oZWRnZS5wYXJlbnQub3V0X2VkZ2VzLnZhbHVlcygpKS5tYXAoKGUpID0+IFtcbiAgICAgICAgZS5iaXJ0aF90aW1lLFxuICAgICAgICBlLFxuICAgICAgXSk7XG4gICAgICBlYmlydGguc29ydCgpO1xuICAgICAgbGV0IGJpcnRoX2lkeCA9IC0xO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYmlydGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGViaXJ0aFtpXVsxXSA9PT0gZWRnZSkge1xuICAgICAgICAgIGJpcnRoX2lkeCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlZGdlLnBhcmVudC5vdXRfZWRnZXMuc2l6ZSA9PT0gMSkgcmV0dXJuIDAuMDtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBtaW5fcm91bmRuZXNzICtcbiAgICAgICAgICAoKG1heF9yb3VuZG5lc3MgLSBtaW5fcm91bmRuZXNzKSAqIGJpcnRoX2lkeCkgL1xuICAgICAgICAgICAgKGVkZ2UucGFyZW50Lm91dF9lZGdlcy5zaXplIC0gMSlcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgdGhpcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICBjb25zdCBuID0ge1xuICAgICAgICBsYWJlbDogXCJcIiArIG5vZGUuYmlydGhfdGltZSxcbiAgICAgICAgaWQ6IG5vZGUuYmlydGhfdGltZSxcbiAgICAgICAgbGV2ZWw6IC0xLFxuICAgICAgfTtcbiAgICAgIG5pZC5zZXQobm9kZSwgbm9kZS5iaXJ0aF90aW1lKTtcbiAgICAgIG5vZGVzLnB1c2gobik7XG4gICAgfSk7XG4gICAgaWYgKHNob3dfc3VmZml4X2xpbmtzKSB7XG4gICAgICB0aGlzLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKG5vZGUuc2xpbmsgIT0gbm9kZSAmJiBub2RlICE9PSB0aGlzLnJvb3QpIHtcbiAgICAgICAgICAvLyBpZiAobm9kZS5zbGluayAmJiBub2RlICE9PSB0aGlzLnJvb3QpIHtcbiAgICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgICAgZnJvbTogbmlkLmdldChub2RlKSxcbiAgICAgICAgICAgIHRvOiBuaWQuZ2V0KG5vZGUuc2xpbmspLFxuICAgICAgICAgICAgaWQ6IFwiZVtcIiArIG5pZC5nZXQobm9kZSkgKyBcIl0tW1wiICsgbmlkLmdldChub2RlLnNsaW5rKSArIFwiXVwiLFxuICAgICAgICAgICAgZGFzaGVzOiB0cnVlLFxuICAgICAgICAgICAgLy8gY29sb3I6IHsgY29sb3I6IG5vZGUuaXNfZXhwbGljaXQgPyAnIzg0ODQ4NCcgOiAnI2ZmMDAwMCcgfSxcbiAgICAgICAgICAgIGNvbG9yOiB7IGNvbG9yOiBcIiM4NDg0ODRcIiB9LFxuICAgICAgICAgICAgLy8gLCBsYWJlbDogZWRnZS5zdHJcbiAgICAgICAgICAgIGZvbnQ6IHsgYWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgIHNtb290aDogeyB0eXBlOiBcImN1cnZlZENXXCIsIHJvdW5kbmVzczogMC40IH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICBlZGdlcy5wdXNoKGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc2V0X2xldmVsX3JlYyA9IChub2RlOiBDTm9kZSwgbGV2ZWw6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgbiA9IG5vZGVzW25pZC5nZXQobm9kZSldO1xuICAgICAgaWYgKG4ubGV2ZWwgPCBsZXZlbCkge1xuICAgICAgICBuLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIG5vZGUub3V0X2VkZ2VzLmZvckVhY2goKGVkZ2UpID0+IHtcbiAgICAgICAgICBzZXRfbGV2ZWxfcmVjKGVkZ2UuY2hpbGQsIG4ubGV2ZWwgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzZXRfbGV2ZWxfcmVjKHRoaXMucm9vdCwgMCk7XG5cbiAgICB0aGlzLmVkZ2VzLmZvckVhY2goKGVkZ2UpID0+IHtcbiAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgIGZyb206IG5pZC5nZXQoZWRnZS5wYXJlbnQpLFxuICAgICAgICB0bzogbmlkLmdldChlZGdlLmNoaWxkKSxcbiAgICAgICAgaWQ6XG4gICAgICAgICAgXCJbXCIgK1xuICAgICAgICAgIG5pZC5nZXQoZWRnZS5wYXJlbnQpICtcbiAgICAgICAgICBcIihcIiArXG4gICAgICAgICAgZWRnZS5sZW4gK1xuICAgICAgICAgIFwiKV0tW1wiICtcbiAgICAgICAgICBuaWQuZ2V0KGVkZ2UuY2hpbGQpICtcbiAgICAgICAgICBcIl1cIixcbiAgICAgICAgbGFiZWw6IGVkZ2Uuc3RyLFxuICAgICAgICBmb250OiB7IGFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgIHNtb290aDogeyB0eXBlOiBcImN1cnZlZENXXCIsIHJvdW5kbmVzczogcm91bmRuZXNzKGVkZ2UpIH0sXG4gICAgICB9O1xuICAgICAgZWRnZXMucHVzaChlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7IG5vZGVzLCBlZGdlcyB9O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBidWlsZF9jZGF3ZyA9ICh0ZXh0OiBzdHJpbmcsIGltcGxpY2l0X2NkYXdnOiBib29sZWFuID0gZmFsc2UpID0+IHtcbiAgY29uc3QgY2Rhd2cgPSBuZXcgQ0RBV0coKTtcbiAgZm9yIChjb25zdCBjIG9mIHRleHQpIHtcbiAgICBjZGF3Zy5pbnNlcnQoYyk7XG4gIH1cbiAgaWYgKCFpbXBsaWNpdF9jZGF3Zykge1xuICAgIGNkYXdnLmV4cGxpY2l0KCk7XG4gIH1cbiAgcmV0dXJuIGNkYXdnO1xufTtcblxuY29uc3QgbWFpbiA9ICh0ZXh0OiBzdHJpbmcpID0+IHtcbiAgY29uc29sZS5sb2coXCJ0ZXh0XCIsIHRleHQpO1xuICBjb25zdCBjZGF3ZyA9IGJ1aWxkX2NkYXdnKHRleHQpO1xuICBjb25zb2xlLmxvZyhjZGF3Zyk7XG4gIGNvbnNvbGUubG9nKGNkYXdnLmpzb24pO1xuICByZXR1cm4gY2Rhd2c7XG59O1xuXG5jb25zb2xlLmxvZyhyZXF1aXJlLm1haW4gPT09IG1vZHVsZSk7XG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgbWFpbihwcm9jZXNzLmFyZ3YubGVuZ3RoID09PSAzID8gcHJvY2Vzcy5hcmd2WzJdIDogXCJhYmNhYmNhYmFcIik7XG59XG4iLCJpbXBvcnQgKiBhcyB2aXMgZnJvbSBcInZpcy1uZXR3b3JrXCI7XG5cbmltcG9ydCB7IGJ1aWxkX2NkYXdnIH0gZnJvbSBcIi4vY2Rhd2dcIjtcbmltcG9ydCAqIGFzIHZpc2pzX2RlZmF1bHRfb3B0aW9ucyBmcm9tIFwiLi92aXNqc19kZWZhdWx0X29wdGlvbnNcIjtcblxuY29uc3Qgb3B0aW9ucyA9IHZpc2pzX2RlZmF1bHRfb3B0aW9ucy5vcHRpb25zO1xub3B0aW9ucy5sYXlvdXQuaGllcmFyY2hpY2FsLmRpcmVjdGlvbiA9IFwiTFJcIjtcbm9wdGlvbnMubGF5b3V0LmhpZXJhcmNoaWNhbC5sZXZlbFNlcGFyYXRpb24gPSAyNTU7XG5vcHRpb25zLmxheW91dC5oaWVyYXJjaGljYWwubm9kZVNwYWNpbmcgPSAyMDU7XG5vcHRpb25zLmxheW91dC5oaWVyYXJjaGljYWwudHJlZVNwYWNpbmcgPSAyMDU7XG5vcHRpb25zLmVkZ2VzLnNtb290aC50eXBlID0gXCJjdXJ2ZWRDQ1dcIjtcblxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXR3b3JrXCIpIGFzIEhUTUxFbGVtZW50O1xuY29uc3QgbmV0d29yayA9IG5ldyB2aXMuTmV0d29yayhjb250YWluZXIsIHt9LCBvcHRpb25zKTtcbmxldCBuZXR3b3JrRGF0YSA9IHtcbiAgbm9kZXM6IG5ldyB2aXMuRGF0YVNldCgpLFxuICBlZGdlczogbmV3IHZpcy5EYXRhU2V0KCksXG59O1xuXG5pbnRlcmZhY2UgUGFyYW1zIHtcbiAgaW5wdXRfdGV4dDogc3RyaW5nO1xuICBzaG93X3N1ZmZpeF9saW5rczogYm9vbGVhbjtcbiAgaW1wbGljaXRfY2Rhd2c6IGJvb2xlYW47XG59XG5cbmNvbnN0IGxvYWRfcGFyYW1zX2Zyb21fdXJsID0gKCkgPT4ge1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcpO1xuICBsZXQgcGFyYW1zOiBQYXJhbXMgPSB7XG4gICAgaW5wdXRfdGV4dDogXCJhYmNhYmNhYmFcIixcbiAgICBzaG93X3N1ZmZpeF9saW5rczogdHJ1ZSxcbiAgICBpbXBsaWNpdF9jZGF3ZzogdHJ1ZSxcbiAgfTtcblxuICBjb25zdCB1cmxrZXkgPSB1cmxQYXJhbXMuZ2V0KFwiaW5wdXRfdGV4dFwiKTtcbiAgaWYgKHVybGtleSAhPT0gbnVsbCkgcGFyYW1zLmlucHV0X3RleHQgPSB1cmxrZXk7XG4gIHBhcmFtcy5zaG93X3N1ZmZpeF9saW5rcyA9IHVybFBhcmFtcy5nZXQoXCJzaG93X3N1ZmZpeF9saW5rc1wiKSA9PT0gXCJ0cnVlXCI7XG4gIHBhcmFtcy5pbXBsaWNpdF9jZGF3ZyA9IHVybFBhcmFtcy5nZXQoXCJpbXBsaWNpdF9jZGF3Z1wiKSA9PT0gXCJ0cnVlXCI7XG4gIHJldHVybiBwYXJhbXM7XG59O1xuXG5jb25zdCBsb2FkX3BhcmFtc19mcm9tX2h0bWwgPSAoKSA9PiB7XG4gIGNvbnN0IGlucHV0X3RleHQgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dF90ZXh0XCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpXG4gICAgLnZhbHVlO1xuICBjb25zdCBzaG93X3N1ZmZpeF9saW5rcyA9IChcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNob3dfc3VmZml4X2xpbmtzXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnRcbiAgKS5jaGVja2VkO1xuICBjb25zdCBpbXBsaWNpdF9jZGF3ZyA9IChcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImltcGxpY2l0X2NkYXdnXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnRcbiAgKS5jaGVja2VkO1xuICBjb25zdCBwYXJhbXM6IFBhcmFtcyA9IHtcbiAgICBpbnB1dF90ZXh0OiBpbnB1dF90ZXh0LFxuICAgIHNob3dfc3VmZml4X2xpbmtzOiBzaG93X3N1ZmZpeF9saW5rcyxcbiAgICBpbXBsaWNpdF9jZGF3ZzogaW1wbGljaXRfY2Rhd2csXG4gIH07XG4gIHJldHVybiBwYXJhbXM7XG59O1xuXG5jb25zdCBzZXRfcGFyYW1zX3RvX3VybCA9IChwYXJhbXM6IFBhcmFtcykgPT4ge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpKTtcbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHBhcmFtcykpIHtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChrZXksIHBhcmFtc1trZXkgYXMga2V5b2YgUGFyYW1zXS50b1N0cmluZygpKTtcbiAgfVxuICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgXCJcIiwgdXJsLnRvU3RyaW5nKCkpO1xufTtcblxuY29uc3Qgc2V0X3BhcmFtc190b19odG1sID0gKHBhcmFtczogUGFyYW1zKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwic2V0cGFyYW1zXCIpO1xuICBjb25zdCBpbnB1dF90ZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dF90ZXh0XCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGNvbnN0IHNob3dfc3VmZml4X2xpbmtzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgXCJzaG93X3N1ZmZpeF9saW5rc1wiXG4gICkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgY29uc3QgaW1wbGljaXRfY2Rhd2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICBcImltcGxpY2l0X2NkYXdnXCJcbiAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBpbnB1dF90ZXh0LnZhbHVlID0gcGFyYW1zLmlucHV0X3RleHQ7XG4gIHNob3dfc3VmZml4X2xpbmtzLmNoZWNrZWQgPSBwYXJhbXMuc2hvd19zdWZmaXhfbGlua3M7XG4gIGltcGxpY2l0X2NkYXdnLmNoZWNrZWQgPSBwYXJhbXMuaW1wbGljaXRfY2Rhd2c7XG59O1xuXG5jb25zdCByZWRyYXcgPSAoKSA9PiB7XG4gIC8vIGxvYWQgYW5kIHNldCBwYXJhbWV0ZXJzXG4gIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkpO1xuICBjb25zdCBwYXJhbXMgPSBsb2FkX3BhcmFtc19mcm9tX2h0bWwoKTtcbiAgc2V0X3BhcmFtc190b191cmwocGFyYW1zKTtcblxuICBjb25zdCBjZGF3ZyA9IGJ1aWxkX2NkYXdnKHBhcmFtcy5pbnB1dF90ZXh0LCBwYXJhbXMuaW1wbGljaXRfY2Rhd2cpO1xuICBjb25zb2xlLmxvZyhjZGF3Zyk7XG4gIGNvbnN0IGpzb24gPSBjZGF3Zy5qc29uKHBhcmFtcy5zaG93X3N1ZmZpeF9saW5rcyk7XG4gIGNvbnNvbGUubG9nKGpzb24pO1xuICBuZXR3b3JrRGF0YSA9IHtcbiAgICBub2RlczogbmV3IHZpcy5EYXRhU2V0KGpzb24ubm9kZXMpLFxuICAgIGVkZ2VzOiBuZXcgdmlzLkRhdGFTZXQoanNvbi5lZGdlcyksXG4gIH07XG4gIG5ldHdvcmsuc2V0RGF0YShuZXR3b3JrRGF0YSBhcyB2aXMuRGF0YSk7XG59O1xuXG5jb25zdCBtYWluID0gKCkgPT4ge1xuICAvLyBzZXQgZXZlbnQgbGlzdGVuZXJcbiAgY29uc3QgaW5wdXRfdGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXRfdGV4dFwiKSBhcyBIVE1MRWxlbWVudDtcbiAgaW5wdXRfdGV4dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgcmVkcmF3KTtcbiAgaW5wdXRfdGV4dC5hZGRFdmVudExpc3RlbmVyKFwicHJvcGVydHljaGFuZ2VcIiwgcmVkcmF3KTtcbiAgY29uc3Qgc2hvd19zbF9idG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICBcInNob3dfc3VmZml4X2xpbmtzXCJcbiAgKSBhcyBIVE1MRWxlbWVudDtcbiAgc2hvd19zbF9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCByZWRyYXcpO1xuICBjb25zdCBpbXBsaWNpdF9jZGF3Z19idG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICBcImltcGxpY2l0X2NkYXdnXCJcbiAgKSBhcyBIVE1MRWxlbWVudDtcbiAgaW1wbGljaXRfY2Rhd2dfYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgcmVkcmF3KTtcblxuICBuZXR3b3JrLm9uKFwiaG92ZXJFZGdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgY29uc29sZS5sb2coXCJob3ZlckVkZ2VcIiwgZSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG5ldHdvcmtEYXRhLmVkZ2VzLnVwZGF0ZSh7IGlkOiBlLmVkZ2UsIGZvbnQ6IHsgc2l6ZTogMzQgfSB9KTtcbiAgfSk7XG4gIG5ldHdvcmsub24oXCJibHVyRWRnZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnNvbGUubG9nKFwiYmx1ckVkZ2VcIiwgZSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG5ldHdvcmtEYXRhLmVkZ2VzLnVwZGF0ZSh7IGlkOiBlLmVkZ2UsIGZvbnQ6IHsgc2l6ZTogMTQgfSB9KTtcbiAgfSk7XG5cbiAgLy8gbG9hZCBhbmQgc2V0IHBhcmFtZXRlcnNcbiAgY29uc3QgcGFyYW1zID0gbG9hZF9wYXJhbXNfZnJvbV91cmwoKTtcbiAgc2V0X3BhcmFtc190b19odG1sKHBhcmFtcyk7XG5cbiAgcmVkcmF3KCk7XG59O1xuXG5tYWluKCk7XG4iLCJleHBvcnQgY29uc3Qgb3B0aW9ucyA9IHtcbiAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgbGF5b3V0OiB7XG4gICAgaGllcmFyY2hpY2FsOiB7XG4gICAgICAvLyBlbmFibGVkOiB0cnVlXG4gICAgICAvLyBkaXJlY3Rpb246ICdVRCcsXG4gICAgICBkaXJlY3Rpb246IFwiTFJcIixcbiAgICAgIC8vIHNvcnRNZXRob2Q6ICdkaXJlY3RlZCcsXG4gICAgICB0cmVlU3BhY2luZzogMTg1LFxuICAgICAgbGV2ZWxTZXBhcmF0aW9uOiA5NSxcbiAgICAgIG5vZGVTcGFjaW5nOiA0MCxcbiAgICB9LFxuICB9LFxuICBub2Rlczoge1xuICAgIHNpemU6IDEwLFxuICB9LFxuICBlZGdlczoge1xuICAgIGFycm93czoge1xuICAgICAgdG86IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgc2NhbGVGYWN0b3I6IDAuNSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvLyBlZGdlIGxhYmVsIGlzIG5vdCBkaXNwbGF5ZWQgYXQgdGhlIGNlbnRlciBvZiB0aGUgZWRnZVxuICAgIC8vIGlmIGBzbW9vdGhgIGlzIHNwZWNpZmllZFxuICAgIHNtb290aDoge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIC8vIHR5cGU6ICdkeW5hbWljJyxcbiAgICAgIHR5cGU6IFwidmVydGljYWxcIiwgLy8gVGhpcyBpcyBiZXR0ZXIgZm9yIExSXG4gICAgICAvLyB0eXBlOiAnaG9yaXpvbnRhbCcsIC8vIFRoaXMgaXMgYmV0dGVyIGZvciBVRFxuICAgICAgLy8gdHlwZTogJ2NvbnRpbnVvdXMnLFxuICAgICAgLy8gdHlwZTogJ2N1cnZlZENDVycsXG4gICAgICAvLyB0eXBlOiAnc3RyYWlnaHRDcm9zcycsXG4gICAgICByb3VuZG5lc3M6IDEuMCxcbiAgICB9LFxuICB9LFxuICBpbnRlcmFjdGlvbjoge1xuICAgIGhvdmVyOiB0cnVlLFxuICAgIG5hdmlnYXRpb25CdXR0b25zOiB0cnVlLFxuICB9LFxuICBwaHlzaWNzOiBmYWxzZSxcbn07XG4iLCIvKipcbiAqIHZpcy1kYXRhXG4gKiBodHRwOi8vdmlzanMub3JnL1xuICpcbiAqIE1hbmFnZSB1bnN0cnVjdHVyZWQgZGF0YSB1c2luZyBEYXRhU2V0LiBBZGQsIHVwZGF0ZSwgYW5kIHJlbW92ZSBkYXRhLCBhbmQgbGlzdGVuIGZvciBjaGFuZ2VzIGluIHRoZSBkYXRhLlxuICpcbiAqIEB2ZXJzaW9uIDcuMS40XG4gKiBAZGF0ZSAgICAyMDIyLTAzLTE1VDE1OjIzOjU5LjI0NVpcbiAqXG4gKiBAY29weXJpZ2h0IChjKSAyMDExLTIwMTcgQWxtZW5kZSBCLlYsIGh0dHA6Ly9hbG1lbmRlLmNvbVxuICogQGNvcHlyaWdodCAoYykgMjAxNy0yMDE5IHZpc2pzIGNvbnRyaWJ1dG9ycywgaHR0cHM6Ly9naXRodWIuY29tL3Zpc2pzXG4gKlxuICogQGxpY2Vuc2VcbiAqIHZpcy5qcyBpcyBkdWFsIGxpY2Vuc2VkIHVuZGVyIGJvdGhcbiAqXG4gKiAgIDEuIFRoZSBBcGFjaGUgMi4wIExpY2Vuc2VcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogICBhbmRcbiAqXG4gKiAgIDIuIFRoZSBNSVQgTGljZW5zZVxuICogICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKlxuICogdmlzLmpzIG1heSBiZSBkaXN0cmlidXRlZCB1bmRlciBlaXRoZXIgbGljZW5zZS5cbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLnZpcyA9IGdsb2JhbC52aXMgfHwge30pKTtcbn0pKHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbiAgdmFyIGRlZmluZVByb3BlcnR5JGUgPSB7ZXhwb3J0czoge319O1xuXG4gIHZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG4gIH07IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cblxuICB2YXIgZ2xvYmFsJE0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fCBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8IGNoZWNrKHR5cGVvZiBjb21tb25qc0dsb2JhbCA9PSAnb2JqZWN0JyAmJiBjb21tb25qc0dsb2JhbCkgfHwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgdmFyIGZhaWxzJHIgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gISFleGVjKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZmFpbHMkcSA9IGZhaWxzJHI7XG4gIHZhciBmdW5jdGlvbkJpbmROYXRpdmUgPSAhZmFpbHMkcShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvKiBlbXB0eSAqL1xuICAgIH0uYmluZCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcblxuXG4gICAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG4gIH0pO1xuXG4gIHZhciBOQVRJVkVfQklORCQ0ID0gZnVuY3Rpb25CaW5kTmF0aXZlO1xuICB2YXIgRnVuY3Rpb25Qcm90b3R5cGUkMyA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGFwcGx5JDYgPSBGdW5jdGlvblByb3RvdHlwZSQzLmFwcGx5O1xuICB2YXIgY2FsbCRjID0gRnVuY3Rpb25Qcm90b3R5cGUkMy5jYWxsOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5cbiAgdmFyIGZ1bmN0aW9uQXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCQ0ID8gY2FsbCRjLmJpbmQoYXBwbHkkNikgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGwkYy5hcHBseShhcHBseSQ2LCBhcmd1bWVudHMpO1xuICB9KTtcblxuICB2YXIgTkFUSVZFX0JJTkQkMyA9IGZ1bmN0aW9uQmluZE5hdGl2ZTtcbiAgdmFyIEZ1bmN0aW9uUHJvdG90eXBlJDIgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gIHZhciBiaW5kJGQgPSBGdW5jdGlvblByb3RvdHlwZSQyLmJpbmQ7XG4gIHZhciBjYWxsJGIgPSBGdW5jdGlvblByb3RvdHlwZSQyLmNhbGw7XG4gIHZhciB1bmN1cnJ5VGhpcyR0ID0gTkFUSVZFX0JJTkQkMyAmJiBiaW5kJGQuYmluZChjYWxsJGIsIGNhbGwkYik7XG4gIHZhciBmdW5jdGlvblVuY3VycnlUaGlzID0gTkFUSVZFX0JJTkQkMyA/IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmbiAmJiB1bmN1cnJ5VGhpcyR0KGZuKTtcbiAgfSA6IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmbiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2FsbCRiLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG5cbiAgdmFyIGlzQ2FsbGFibGUkaCA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJztcbiAgfTtcblxuICB2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0ge307XG5cbiAgdmFyIGZhaWxzJHAgPSBmYWlscyRyOyAvLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxuXG4gIHZhciBkZXNjcmlwdG9ycyA9ICFmYWlscyRwKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiA3O1xuICAgICAgfVxuICAgIH0pWzFdICE9IDc7XG4gIH0pO1xuXG4gIHZhciBOQVRJVkVfQklORCQyID0gZnVuY3Rpb25CaW5kTmF0aXZlO1xuICB2YXIgY2FsbCRhID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG4gIHZhciBmdW5jdGlvbkNhbGwgPSBOQVRJVkVfQklORCQyID8gY2FsbCRhLmJpbmQoY2FsbCRhKSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbCRhLmFwcGx5KGNhbGwkYSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUgPSB7fTtcblxuICB2YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlJDIgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuXG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkNSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IC8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xuXG4gIHZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciQ1ICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUkMi5jYWxsKHtcbiAgICAxOiAyXG4gIH0sIDEpOyAvLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuXG4gIG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciQ1KHRoaXMsIFYpO1xuICAgIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xuICB9IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlJDI7XG5cbiAgdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQ1ID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfTtcblxuICB2YXIgdW5jdXJyeVRoaXMkcyA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciB0b1N0cmluZyQ5ID0gdW5jdXJyeVRoaXMkcyh7fS50b1N0cmluZyk7XG4gIHZhciBzdHJpbmdTbGljZSQxID0gdW5jdXJyeVRoaXMkcygnJy5zbGljZSk7XG5cbiAgdmFyIGNsYXNzb2ZSYXckMSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdHJpbmdTbGljZSQxKHRvU3RyaW5nJDkoaXQpLCA4LCAtMSk7XG4gIH07XG5cbiAgdmFyIGdsb2JhbCRMID0gZ2xvYmFsJE07XG4gIHZhciB1bmN1cnJ5VGhpcyRyID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGZhaWxzJG8gPSBmYWlscyRyO1xuICB2YXIgY2xhc3NvZiRmID0gY2xhc3NvZlJhdyQxO1xuICB2YXIgT2JqZWN0JDkgPSBnbG9iYWwkTC5PYmplY3Q7XG4gIHZhciBzcGxpdCA9IHVuY3VycnlUaGlzJHIoJycuc3BsaXQpOyAvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xuXG4gIHZhciBpbmRleGVkT2JqZWN0ID0gZmFpbHMkbyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICAgIHJldHVybiAhT2JqZWN0JDkoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbiAgfSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gY2xhc3NvZiRmKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QkOShpdCk7XG4gIH0gOiBPYmplY3QkOTtcblxuICB2YXIgZ2xvYmFsJEsgPSBnbG9iYWwkTTtcbiAgdmFyIFR5cGVFcnJvciRqID0gZ2xvYmFsJEsuVHlwZUVycm9yOyAvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxuXG4gIHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IkaihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICAgIHJldHVybiBpdDtcbiAgfTtcblxuICB2YXIgSW5kZXhlZE9iamVjdCQzID0gaW5kZXhlZE9iamVjdDtcbiAgdmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUkNCA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUkNTtcblxuICB2YXIgdG9JbmRleGVkT2JqZWN0JGIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gSW5kZXhlZE9iamVjdCQzKHJlcXVpcmVPYmplY3RDb2VyY2libGUkNChpdCkpO1xuICB9O1xuXG4gIHZhciBpc0NhbGxhYmxlJGcgPSBpc0NhbGxhYmxlJGg7XG5cbiAgdmFyIGlzT2JqZWN0JGYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlJGcoaXQpO1xuICB9O1xuXG4gIHZhciBwYXRoJHEgPSB7fTtcblxuICB2YXIgcGF0aCRwID0gcGF0aCRxO1xuICB2YXIgZ2xvYmFsJEogPSBnbG9iYWwkTTtcbiAgdmFyIGlzQ2FsbGFibGUkZiA9IGlzQ2FsbGFibGUkaDtcblxuICB2YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gICAgcmV0dXJuIGlzQ2FsbGFibGUkZih2YXJpYWJsZSkgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICB2YXIgZ2V0QnVpbHRJbiQ5ID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGgkcFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsJEpbbmFtZXNwYWNlXSkgOiBwYXRoJHBbbmFtZXNwYWNlXSAmJiBwYXRoJHBbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbCRKW25hbWVzcGFjZV0gJiYgZ2xvYmFsJEpbbmFtZXNwYWNlXVttZXRob2RdO1xuICB9O1xuXG4gIHZhciB1bmN1cnJ5VGhpcyRxID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIG9iamVjdElzUHJvdG90eXBlT2YgPSB1bmN1cnJ5VGhpcyRxKHt9LmlzUHJvdG90eXBlT2YpO1xuXG4gIHZhciBnZXRCdWlsdEluJDggPSBnZXRCdWlsdEluJDk7XG4gIHZhciBlbmdpbmVVc2VyQWdlbnQgPSBnZXRCdWlsdEluJDgoJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcblxuICB2YXIgZ2xvYmFsJEkgPSBnbG9iYWwkTTtcbiAgdmFyIHVzZXJBZ2VudCQzID0gZW5naW5lVXNlckFnZW50O1xuICB2YXIgcHJvY2VzcyA9IGdsb2JhbCRJLnByb2Nlc3M7XG4gIHZhciBEZW5vID0gZ2xvYmFsJEkuRGVubztcbiAgdmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xuICB2YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbiAgdmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG4gIGlmICh2OCkge1xuICAgIG1hdGNoID0gdjguc3BsaXQoJy4nKTsgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAgIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG5cbiAgICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xuICB9IC8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuICAvLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDBcblxuXG4gIGlmICghdmVyc2lvbiAmJiB1c2VyQWdlbnQkMykge1xuICAgIG1hdGNoID0gdXNlckFnZW50JDMubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcblxuICAgIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICAgIG1hdGNoID0gdXNlckFnZW50JDMubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBlbmdpbmVWOFZlcnNpb24gPSB2ZXJzaW9uO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICB2YXIgVjhfVkVSU0lPTiQyID0gZW5naW5lVjhWZXJzaW9uO1xuICB2YXIgZmFpbHMkbiA9IGZhaWxzJHI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5cbiAgdmFyIG5hdGl2ZVN5bWJvbCA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMkbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpOyAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAgIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcblxuICAgIHJldHVybiAhU3RyaW5nKHN5bWJvbCkgfHwgIShPYmplY3Qoc3ltYm9sKSBpbnN0YW5jZW9mIFN5bWJvbCkgfHwgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiQyICYmIFY4X1ZFUlNJT04kMiA8IDQxO1xuICB9KTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgdmFyIE5BVElWRV9TWU1CT0wkMiA9IG5hdGl2ZVN5bWJvbDtcbiAgdmFyIHVzZVN5bWJvbEFzVWlkID0gTkFUSVZFX1NZTUJPTCQyICYmICFTeW1ib2wuc2hhbSAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuXG4gIHZhciBnbG9iYWwkSCA9IGdsb2JhbCRNO1xuICB2YXIgZ2V0QnVpbHRJbiQ3ID0gZ2V0QnVpbHRJbiQ5O1xuICB2YXIgaXNDYWxsYWJsZSRlID0gaXNDYWxsYWJsZSRoO1xuICB2YXIgaXNQcm90b3R5cGVPZiRpID0gb2JqZWN0SXNQcm90b3R5cGVPZjtcbiAgdmFyIFVTRV9TWU1CT0xfQVNfVUlEJDEgPSB1c2VTeW1ib2xBc1VpZDtcbiAgdmFyIE9iamVjdCQ4ID0gZ2xvYmFsJEguT2JqZWN0O1xuICB2YXIgaXNTeW1ib2wkMyA9IFVTRV9TWU1CT0xfQVNfVUlEJDEgPyBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xuICB9IDogZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluJDcoJ1N5bWJvbCcpO1xuICAgIHJldHVybiBpc0NhbGxhYmxlJGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZiRpKCRTeW1ib2wucHJvdG90eXBlLCBPYmplY3QkOChpdCkpO1xuICB9O1xuXG4gIHZhciBnbG9iYWwkRyA9IGdsb2JhbCRNO1xuICB2YXIgU3RyaW5nJDQgPSBnbG9iYWwkRy5TdHJpbmc7XG5cbiAgdmFyIHRyeVRvU3RyaW5nJDQgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFN0cmluZyQ0KGFyZ3VtZW50KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuICdPYmplY3QnO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZ2xvYmFsJEYgPSBnbG9iYWwkTTtcbiAgdmFyIGlzQ2FsbGFibGUkZCA9IGlzQ2FsbGFibGUkaDtcbiAgdmFyIHRyeVRvU3RyaW5nJDMgPSB0cnlUb1N0cmluZyQ0O1xuICB2YXIgVHlwZUVycm9yJGkgPSBnbG9iYWwkRi5UeXBlRXJyb3I7IC8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5cbiAgdmFyIGFDYWxsYWJsZSQ3ID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgaWYgKGlzQ2FsbGFibGUkZChhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgICB0aHJvdyBUeXBlRXJyb3IkaSh0cnlUb1N0cmluZyQzKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfTtcblxuICB2YXIgYUNhbGxhYmxlJDYgPSBhQ2FsbGFibGUkNzsgLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5cbiAgdmFyIGdldE1ldGhvZCQzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgICB2YXIgZnVuYyA9IFZbUF07XG4gICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZSQ2KGZ1bmMpO1xuICB9O1xuXG4gIHZhciBnbG9iYWwkRSA9IGdsb2JhbCRNO1xuICB2YXIgY2FsbCQ5ID0gZnVuY3Rpb25DYWxsO1xuICB2YXIgaXNDYWxsYWJsZSRjID0gaXNDYWxsYWJsZSRoO1xuICB2YXIgaXNPYmplY3QkZSA9IGlzT2JqZWN0JGY7XG4gIHZhciBUeXBlRXJyb3IkaCA9IGdsb2JhbCRFLlR5cGVFcnJvcjsgLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcblxuICB2YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSQxID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gICAgdmFyIGZuLCB2YWw7XG4gICAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUkYyhmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QkZSh2YWwgPSBjYWxsJDkoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gICAgaWYgKGlzQ2FsbGFibGUkYyhmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCRlKHZhbCA9IGNhbGwkOShmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZSRjKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCRlKHZhbCA9IGNhbGwkOShmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgICB0aHJvdyBUeXBlRXJyb3IkaChcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfTtcblxuICB2YXIgc2hhcmVkJDQgPSB7ZXhwb3J0czoge319O1xuXG4gIHZhciBnbG9iYWwkRCA9IGdsb2JhbCRNOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcblxuICB2YXIgZGVmaW5lUHJvcGVydHkkZCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuICB2YXIgc2V0R2xvYmFsJDEgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSRkKGdsb2JhbCRELCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZ2xvYmFsJERba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2xvYmFsJEMgPSBnbG9iYWwkTTtcbiAgdmFyIHNldEdsb2JhbCA9IHNldEdsb2JhbCQxO1xuICB2YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG4gIHZhciBzdG9yZSQzID0gZ2xvYmFsJENbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG4gIHZhciBzaGFyZWRTdG9yZSA9IHN0b3JlJDM7XG5cbiAgdmFyIHN0b3JlJDIgPSBzaGFyZWRTdG9yZTtcbiAgKHNoYXJlZCQ0LmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdG9yZSQyW2tleV0gfHwgKHN0b3JlJDJba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbiAgfSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICAgIHZlcnNpb246ICczLjIxLjEnLFxuICAgIG1vZGU6ICdwdXJlJyAsXG4gICAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgICBsaWNlbnNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvYmxvYi92My4yMS4xL0xJQ0VOU0UnLFxuICAgIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xuICB9KTtcblxuICB2YXIgZ2xvYmFsJEIgPSBnbG9iYWwkTTtcbiAgdmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUkMyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUkNTtcbiAgdmFyIE9iamVjdCQ3ID0gZ2xvYmFsJEIuT2JqZWN0OyAvLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5cbiAgdmFyIHRvT2JqZWN0JGUgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICByZXR1cm4gT2JqZWN0JDcocmVxdWlyZU9iamVjdENvZXJjaWJsZSQzKGFyZ3VtZW50KSk7XG4gIH07XG5cbiAgdmFyIHVuY3VycnlUaGlzJHAgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xuICB2YXIgdG9PYmplY3QkZCA9IHRvT2JqZWN0JGU7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzJHAoe30uaGFzT3duUHJvcGVydHkpOyAvLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG5cbiAgdmFyIGhhc093blByb3BlcnR5XzEgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0JGQoaXQpLCBrZXkpO1xuICB9O1xuXG4gIHZhciB1bmN1cnJ5VGhpcyRvID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGlkJDEgPSAwO1xuICB2YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG4gIHZhciB0b1N0cmluZyQ4ID0gdW5jdXJyeVRoaXMkbygxLjAudG9TdHJpbmcpO1xuXG4gIHZhciB1aWQkNCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nJDgoKytpZCQxICsgcG9zdGZpeCwgMzYpO1xuICB9O1xuXG4gIHZhciBnbG9iYWwkQSA9IGdsb2JhbCRNO1xuICB2YXIgc2hhcmVkJDMgPSBzaGFyZWQkNC5leHBvcnRzO1xuICB2YXIgaGFzT3duJGYgPSBoYXNPd25Qcm9wZXJ0eV8xO1xuICB2YXIgdWlkJDMgPSB1aWQkNDtcbiAgdmFyIE5BVElWRV9TWU1CT0wkMSA9IG5hdGl2ZVN5bWJvbDtcbiAgdmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gdXNlU3ltYm9sQXNVaWQ7XG4gIHZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUkMSA9IHNoYXJlZCQzKCd3a3MnKTtcbiAgdmFyIFN5bWJvbCQyID0gZ2xvYmFsJEEuU3ltYm9sO1xuICB2YXIgc3ltYm9sRm9yID0gU3ltYm9sJDIgJiYgU3ltYm9sJDJbJ2ZvciddO1xuICB2YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wkMiA6IFN5bWJvbCQyICYmIFN5bWJvbCQyLndpdGhvdXRTZXR0ZXIgfHwgdWlkJDM7XG5cbiAgdmFyIHdlbGxLbm93blN5bWJvbCRqID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIWhhc093biRmKFdlbGxLbm93blN5bWJvbHNTdG9yZSQxLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wkMSB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlJDFbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgICB2YXIgZGVzY3JpcHRpb24gPSAnU3ltYm9sLicgKyBuYW1lO1xuXG4gICAgICBpZiAoTkFUSVZFX1NZTUJPTCQxICYmIGhhc093biRmKFN5bWJvbCQyLCBuYW1lKSkge1xuICAgICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmUkMVtuYW1lXSA9IFN5bWJvbCQyW25hbWVdO1xuICAgICAgfSBlbHNlIGlmIChVU0VfU1lNQk9MX0FTX1VJRCAmJiBzeW1ib2xGb3IpIHtcbiAgICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlJDFbbmFtZV0gPSBzeW1ib2xGb3IoZGVzY3JpcHRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlJDFbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woZGVzY3JpcHRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmUkMVtuYW1lXTtcbiAgfTtcblxuICB2YXIgZ2xvYmFsJHogPSBnbG9iYWwkTTtcbiAgdmFyIGNhbGwkOCA9IGZ1bmN0aW9uQ2FsbDtcbiAgdmFyIGlzT2JqZWN0JGQgPSBpc09iamVjdCRmO1xuICB2YXIgaXNTeW1ib2wkMiA9IGlzU3ltYm9sJDM7XG4gIHZhciBnZXRNZXRob2QkMiA9IGdldE1ldGhvZCQzO1xuICB2YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IG9yZGluYXJ5VG9QcmltaXRpdmUkMTtcbiAgdmFyIHdlbGxLbm93blN5bWJvbCRpID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciBUeXBlRXJyb3IkZyA9IGdsb2JhbCR6LlR5cGVFcnJvcjtcbiAgdmFyIFRPX1BSSU1JVElWRSQxID0gd2VsbEtub3duU3ltYm9sJGkoJ3RvUHJpbWl0aXZlJyk7IC8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcblxuICB2YXIgdG9QcmltaXRpdmUkMSA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICAgIGlmICghaXNPYmplY3QkZChpbnB1dCkgfHwgaXNTeW1ib2wkMihpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kJDIoaW5wdXQsIFRPX1BSSU1JVElWRSQxKTtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICAgIHJlc3VsdCA9IGNhbGwkOChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICAgIGlmICghaXNPYmplY3QkZChyZXN1bHQpIHx8IGlzU3ltYm9sJDIocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIHRocm93IFR5cGVFcnJvciRnKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICAgIH1cblxuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG4gIH07XG5cbiAgdmFyIHRvUHJpbWl0aXZlID0gdG9QcmltaXRpdmUkMTtcbiAgdmFyIGlzU3ltYm9sJDEgPSBpc1N5bWJvbCQzOyAvLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxuXG4gIHZhciB0b1Byb3BlcnR5S2V5JDQgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgICByZXR1cm4gaXNTeW1ib2wkMShrZXkpID8ga2V5IDoga2V5ICsgJyc7XG4gIH07XG5cbiAgdmFyIGdsb2JhbCR5ID0gZ2xvYmFsJE07XG4gIHZhciBpc09iamVjdCRjID0gaXNPYmplY3QkZjtcbiAgdmFyIGRvY3VtZW50JDEgPSBnbG9iYWwkeS5kb2N1bWVudDsgLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG5cbiAgdmFyIEVYSVNUUyQxID0gaXNPYmplY3QkYyhkb2N1bWVudCQxKSAmJiBpc09iamVjdCRjKGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCk7XG5cbiAgdmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCQxID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIEVYSVNUUyQxID8gZG9jdW1lbnQkMS5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuICB9O1xuXG4gIHZhciBERVNDUklQVE9SUyRoID0gZGVzY3JpcHRvcnM7XG4gIHZhciBmYWlscyRtID0gZmFpbHMkcjtcbiAgdmFyIGNyZWF0ZUVsZW1lbnQgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQkMTsgLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5cbiAgdmFyIGllOERvbURlZmluZSA9ICFERVNDUklQVE9SUyRoICYmICFmYWlscyRtKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIDc7XG4gICAgICB9XG4gICAgfSkuYSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVTQ1JJUFRPUlMkZyA9IGRlc2NyaXB0b3JzO1xuICB2YXIgY2FsbCQ3ID0gZnVuY3Rpb25DYWxsO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUkMiA9IG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICB2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDQgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNTtcbiAgdmFyIHRvSW5kZXhlZE9iamVjdCRhID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciB0b1Byb3BlcnR5S2V5JDMgPSB0b1Byb3BlcnR5S2V5JDQ7XG4gIHZhciBoYXNPd24kZSA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciBJRThfRE9NX0RFRklORSQxID0gaWU4RG9tRGVmaW5lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG5cbiAgdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5cbiAgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmYgPSBERVNDUklQVE9SUyRnID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciQyIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgICBPID0gdG9JbmRleGVkT2JqZWN0JGEoTyk7XG4gICAgUCA9IHRvUHJvcGVydHlLZXkkMyhQKTtcbiAgICBpZiAoSUU4X0RPTV9ERUZJTkUkMSkgdHJ5IHtcbiAgICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDIoTywgUCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8qIGVtcHR5ICovXG4gICAgfVxuICAgIGlmIChoYXNPd24kZShPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQ0KCFjYWxsJDcocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUkMi5mLCBPLCBQKSwgT1tQXSk7XG4gIH07XG5cbiAgdmFyIGZhaWxzJGwgPSBmYWlscyRyO1xuICB2YXIgaXNDYWxsYWJsZSRiID0gaXNDYWxsYWJsZSRoO1xuICB2YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG4gIHZhciBpc0ZvcmNlZCQxID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICAgIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2UgOiBpc0NhbGxhYmxlJGIoZGV0ZWN0aW9uKSA/IGZhaWxzJGwoZGV0ZWN0aW9uKSA6ICEhZGV0ZWN0aW9uO1xuICB9O1xuXG4gIHZhciBub3JtYWxpemUgPSBpc0ZvcmNlZCQxLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBkYXRhID0gaXNGb3JjZWQkMS5kYXRhID0ge307XG4gIHZhciBOQVRJVkUgPSBpc0ZvcmNlZCQxLk5BVElWRSA9ICdOJztcbiAgdmFyIFBPTFlGSUxMID0gaXNGb3JjZWQkMS5QT0xZRklMTCA9ICdQJztcbiAgdmFyIGlzRm9yY2VkXzEgPSBpc0ZvcmNlZCQxO1xuXG4gIHZhciB1bmN1cnJ5VGhpcyRuID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGFDYWxsYWJsZSQ1ID0gYUNhbGxhYmxlJDc7XG4gIHZhciBOQVRJVkVfQklORCQxID0gZnVuY3Rpb25CaW5kTmF0aXZlO1xuICB2YXIgYmluZCRjID0gdW5jdXJyeVRoaXMkbih1bmN1cnJ5VGhpcyRuLmJpbmQpOyAvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcblxuICB2YXIgZnVuY3Rpb25CaW5kQ29udGV4dCA9IGZ1bmN0aW9uIChmbiwgdGhhdCkge1xuICAgIGFDYWxsYWJsZSQ1KGZuKTtcbiAgICByZXR1cm4gdGhhdCA9PT0gdW5kZWZpbmVkID8gZm4gOiBOQVRJVkVfQklORCQxID8gYmluZCRjKGZuLCB0aGF0KSA6IGZ1bmN0aW9uXG4gICAgICAvKiAuLi5hcmdzICovXG4gICAgKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgb2JqZWN0RGVmaW5lUHJvcGVydHkgPSB7fTtcblxuICB2YXIgREVTQ1JJUFRPUlMkZiA9IGRlc2NyaXB0b3JzO1xuICB2YXIgZmFpbHMkayA9IGZhaWxzJHI7IC8vIFY4IH4gQ2hyb21lIDM2LVxuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5cbiAgdmFyIHY4UHJvdG90eXBlRGVmaW5lQnVnID0gREVTQ1JJUFRPUlMkZiAmJiBmYWlscyRrKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7XG4gICAgICAvKiBlbXB0eSAqL1xuICAgIH0sICdwcm90b3R5cGUnLCB7XG4gICAgICB2YWx1ZTogNDIsXG4gICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KS5wcm90b3R5cGUgIT0gNDI7XG4gIH0pO1xuXG4gIHZhciBnbG9iYWwkeCA9IGdsb2JhbCRNO1xuICB2YXIgaXNPYmplY3QkYiA9IGlzT2JqZWN0JGY7XG4gIHZhciBTdHJpbmckMyA9IGdsb2JhbCR4LlN0cmluZztcbiAgdmFyIFR5cGVFcnJvciRmID0gZ2xvYmFsJHguVHlwZUVycm9yOyAvLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5cbiAgdmFyIGFuT2JqZWN0JGIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICBpZiAoaXNPYmplY3QkYihhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgICB0aHJvdyBUeXBlRXJyb3IkZihTdHJpbmckMyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfTtcblxuICB2YXIgZ2xvYmFsJHcgPSBnbG9iYWwkTTtcbiAgdmFyIERFU0NSSVBUT1JTJGUgPSBkZXNjcmlwdG9ycztcbiAgdmFyIElFOF9ET01fREVGSU5FID0gaWU4RG9tRGVmaW5lO1xuICB2YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUckMSA9IHY4UHJvdG90eXBlRGVmaW5lQnVnO1xuICB2YXIgYW5PYmplY3QkYSA9IGFuT2JqZWN0JGI7XG4gIHZhciB0b1Byb3BlcnR5S2V5JDIgPSB0b1Byb3BlcnR5S2V5JDQ7XG4gIHZhciBUeXBlRXJyb3IkZSA9IGdsb2JhbCR3LlR5cGVFcnJvcjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG5cbiAgdmFyICRkZWZpbmVQcm9wZXJ0eSQxID0gT2JqZWN0LmRlZmluZVByb3BlcnR5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG5cbiAgdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIHZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xuICB2YXIgQ09ORklHVVJBQkxFJDEgPSAnY29uZmlndXJhYmxlJztcbiAgdmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJzsgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5cbiAgb2JqZWN0RGVmaW5lUHJvcGVydHkuZiA9IERFU0NSSVBUT1JTJGUgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyQxID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0JGEoTyk7XG4gICAgUCA9IHRvUHJvcGVydHlLZXkkMihQKTtcbiAgICBhbk9iamVjdCRhKEF0dHJpYnV0ZXMpO1xuXG4gICAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEoTywgUCk7XG5cbiAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFJDEgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFJDFdIDogY3VycmVudFtDT05GSUdVUkFCTEUkMV0sXG4gICAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eSQxKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IDogJGRlZmluZVByb3BlcnR5JDEgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QkYShPKTtcbiAgICBQID0gdG9Qcm9wZXJ0eUtleSQyKFApO1xuICAgIGFuT2JqZWN0JGEoQXR0cmlidXRlcyk7XG4gICAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eSQxKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvKiBlbXB0eSAqL1xuICAgIH1cbiAgICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IkZSgnQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICByZXR1cm4gTztcbiAgfTtcblxuICB2YXIgREVTQ1JJUFRPUlMkZCA9IGRlc2NyaXB0b3JzO1xuICB2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUkNCA9IG9iamVjdERlZmluZVByb3BlcnR5O1xuICB2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDMgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNTtcbiAgdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ2ID0gREVTQ1JJUFRPUlMkZCA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUkNC5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkMygxLCB2YWx1ZSkpO1xuICB9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcblxuICB2YXIgZ2xvYmFsJHYgPSBnbG9iYWwkTTtcbiAgdmFyIGFwcGx5JDUgPSBmdW5jdGlvbkFwcGx5O1xuICB2YXIgdW5jdXJyeVRoaXMkbSA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBpc0NhbGxhYmxlJGEgPSBpc0NhbGxhYmxlJGg7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkNCA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mO1xuICB2YXIgaXNGb3JjZWQgPSBpc0ZvcmNlZF8xO1xuICB2YXIgcGF0aCRvID0gcGF0aCRxO1xuICB2YXIgYmluZCRiID0gZnVuY3Rpb25CaW5kQ29udGV4dDtcbiAgdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ1ID0gY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDY7XG4gIHZhciBoYXNPd24kZCA9IGhhc093blByb3BlcnR5XzE7XG5cbiAgdmFyIHdyYXBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChOYXRpdmVDb25zdHJ1Y3Rvcikge1xuICAgIHZhciBXcmFwcGVyID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgV3JhcHBlcikge1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG5cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGEpO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhLCBiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlQ29uc3RydWN0b3IoYSwgYiwgYyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcHBseSQ1KE5hdGl2ZUNvbnN0cnVjdG9yLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICByZXR1cm4gV3JhcHBlcjtcbiAgfTtcbiAgLypcbiAgICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICAgIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICAgIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gICAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gICAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gICAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICAgIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gICAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiAgICBvcHRpb25zLm5hbWUgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4gICovXG5cblxuICB2YXIgX2V4cG9ydCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICAgIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gICAgdmFyIFBST1RPID0gb3B0aW9ucy5wcm90bztcbiAgICB2YXIgbmF0aXZlU291cmNlID0gR0xPQkFMID8gZ2xvYmFsJHYgOiBTVEFUSUMgPyBnbG9iYWwkdltUQVJHRVRdIDogKGdsb2JhbCR2W1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgICB2YXIgdGFyZ2V0ID0gR0xPQkFMID8gcGF0aCRvIDogcGF0aCRvW1RBUkdFVF0gfHwgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDUocGF0aCRvLCBUQVJHRVQsIHt9KVtUQVJHRVRdO1xuICAgIHZhciB0YXJnZXRQcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBGT1JDRUQsIFVTRV9OQVRJVkUsIFZJUlRVQUxfUFJPVE9UWVBFO1xuICAgIHZhciBrZXksIHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSwgbmF0aXZlUHJvcGVydHksIHJlc3VsdFByb3BlcnR5LCBkZXNjcmlwdG9yO1xuXG4gICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpOyAvLyBjb250YWlucyBpbiBuYXRpdmVcblxuICAgICAgVVNFX05BVElWRSA9ICFGT1JDRUQgJiYgbmF0aXZlU291cmNlICYmIGhhc093biRkKG5hdGl2ZVNvdXJjZSwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgICBpZiAoVVNFX05BVElWRSkgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciQ0KG5hdGl2ZVNvdXJjZSwga2V5KTtcbiAgICAgICAgbmF0aXZlUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICB9IGVsc2UgbmF0aXZlUHJvcGVydHkgPSBuYXRpdmVTb3VyY2Vba2V5XTsgLy8gZXhwb3J0IG5hdGl2ZSBvciBpbXBsZW1lbnRhdGlvblxuXG4gICAgICBzb3VyY2VQcm9wZXJ0eSA9IFVTRV9OQVRJVkUgJiYgbmF0aXZlUHJvcGVydHkgPyBuYXRpdmVQcm9wZXJ0eSA6IHNvdXJjZVtrZXldO1xuICAgICAgaWYgKFVTRV9OQVRJVkUgJiYgdHlwZW9mIHRhcmdldFByb3BlcnR5ID09IHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSkgY29udGludWU7IC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG5cbiAgICAgIGlmIChvcHRpb25zLmJpbmQgJiYgVVNFX05BVElWRSkgcmVzdWx0UHJvcGVydHkgPSBiaW5kJGIoc291cmNlUHJvcGVydHksIGdsb2JhbCR2KTsgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5ncyBpbiB0aGlzIHZlcnNpb25cbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMud3JhcCAmJiBVU0VfTkFUSVZFKSByZXN1bHRQcm9wZXJ0eSA9IHdyYXBDb25zdHJ1Y3Rvcihzb3VyY2VQcm9wZXJ0eSk7IC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgICAgZWxzZSBpZiAoUFJPVE8gJiYgaXNDYWxsYWJsZSRhKHNvdXJjZVByb3BlcnR5KSkgcmVzdWx0UHJvcGVydHkgPSB1bmN1cnJ5VGhpcyRtKHNvdXJjZVByb3BlcnR5KTsgLy8gZGVmYXVsdCBjYXNlXG4gICAgICBlbHNlIHJlc3VsdFByb3BlcnR5ID0gc291cmNlUHJvcGVydHk7IC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcblxuICAgICAgaWYgKG9wdGlvbnMuc2hhbSB8fCBzb3VyY2VQcm9wZXJ0eSAmJiBzb3VyY2VQcm9wZXJ0eS5zaGFtIHx8IHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDUocmVzdWx0UHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ1KHRhcmdldCwga2V5LCByZXN1bHRQcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChQUk9UTykge1xuICAgICAgICBWSVJUVUFMX1BST1RPVFlQRSA9IFRBUkdFVCArICdQcm90b3R5cGUnO1xuXG4gICAgICAgIGlmICghaGFzT3duJGQocGF0aCRvLCBWSVJUVUFMX1BST1RPVFlQRSkpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNShwYXRoJG8sIFZJUlRVQUxfUFJPVE9UWVBFLCB7fSk7XG4gICAgICAgIH0gLy8gZXhwb3J0IHZpcnR1YWwgcHJvdG90eXBlIG1ldGhvZHNcblxuXG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ1KHBhdGgkb1tWSVJUVUFMX1BST1RPVFlQRV0sIGtleSwgc291cmNlUHJvcGVydHkpOyAvLyBleHBvcnQgcmVhbCBwcm90b3R5cGUgbWV0aG9kc1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlYWwgJiYgdGFyZ2V0UHJvdG90eXBlICYmICF0YXJnZXRQcm90b3R5cGVba2V5XSkge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ1KHRhcmdldFByb3RvdHlwZSwga2V5LCBzb3VyY2VQcm9wZXJ0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyICQkQyA9IF9leHBvcnQ7XG4gIHZhciBERVNDUklQVE9SUyRjID0gZGVzY3JpcHRvcnM7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSRjID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZjsgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuXG4gICQkQyh7XG4gICAgdGFyZ2V0OiAnT2JqZWN0JyxcbiAgICBzdGF0OiB0cnVlLFxuICAgIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnR5ICE9PSBkZWZpbmVQcm9wZXJ0eSRjLFxuICAgIHNoYW06ICFERVNDUklQVE9SUyRjXG4gIH0sIHtcbiAgICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHkkY1xuICB9KTtcblxuICB2YXIgcGF0aCRuID0gcGF0aCRxO1xuICB2YXIgT2JqZWN0JDYgPSBwYXRoJG4uT2JqZWN0O1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0eSRiID0gZGVmaW5lUHJvcGVydHkkZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICAgIHJldHVybiBPYmplY3QkNi5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoT2JqZWN0JDYuZGVmaW5lUHJvcGVydHkuc2hhbSkgZGVmaW5lUHJvcGVydHkkYi5zaGFtID0gdHJ1ZTtcblxuICB2YXIgcGFyZW50JFYgPSBkZWZpbmVQcm9wZXJ0eSRlLmV4cG9ydHM7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSRhID0gcGFyZW50JFY7XG5cbiAgdmFyIHBhcmVudCRVID0gZGVmaW5lUHJvcGVydHkkYTtcbiAgdmFyIGRlZmluZVByb3BlcnR5JDkgPSBwYXJlbnQkVTtcblxuICB2YXIgcGFyZW50JFQgPSBkZWZpbmVQcm9wZXJ0eSQ5O1xuICB2YXIgZGVmaW5lUHJvcGVydHkkOCA9IHBhcmVudCRUO1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0eSQ3ID0gZGVmaW5lUHJvcGVydHkkODtcblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG5cbiAgICAgIGRlZmluZVByb3BlcnR5JDcodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcblxuICAgIGRlZmluZVByb3BlcnR5JDcoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSQ3KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciB1bmN1cnJ5VGhpcyRsID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGFycmF5U2xpY2UkNSA9IHVuY3VycnlUaGlzJGwoW10uc2xpY2UpO1xuXG4gIHZhciBnbG9iYWwkdSA9IGdsb2JhbCRNO1xuICB2YXIgdW5jdXJyeVRoaXMkayA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBhQ2FsbGFibGUkNCA9IGFDYWxsYWJsZSQ3O1xuICB2YXIgaXNPYmplY3QkYSA9IGlzT2JqZWN0JGY7XG4gIHZhciBoYXNPd24kYyA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciBhcnJheVNsaWNlJDQgPSBhcnJheVNsaWNlJDU7XG4gIHZhciBOQVRJVkVfQklORCA9IGZ1bmN0aW9uQmluZE5hdGl2ZTtcbiAgdmFyIEZ1bmN0aW9uJDIgPSBnbG9iYWwkdS5GdW5jdGlvbjtcbiAgdmFyIGNvbmNhdCQ2ID0gdW5jdXJyeVRoaXMkayhbXS5jb25jYXQpO1xuICB2YXIgam9pbiA9IHVuY3VycnlUaGlzJGsoW10uam9pbik7XG4gIHZhciBmYWN0b3JpZXMgPSB7fTtcblxuICB2YXIgY29uc3RydWN0JDQgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykge1xuICAgIGlmICghaGFzT3duJGMoZmFjdG9yaWVzLCBhcmdzTGVuZ3RoKSkge1xuICAgICAgZm9yICh2YXIgbGlzdCA9IFtdLCBpID0gMDsgaSA8IGFyZ3NMZW5ndGg7IGkrKykgbGlzdFtpXSA9ICdhWycgKyBpICsgJ10nO1xuXG4gICAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbiQyKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBqb2luKGxpc3QsICcsJykgKyAnKScpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG4gIH07IC8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcblxuXG4gIHZhciBmdW5jdGlvbkJpbmQgPSBOQVRJVkVfQklORCA/IEZ1bmN0aW9uJDIuYmluZCA6IGZ1bmN0aW9uIGJpbmQodGhhdFxuICAvKiAsIC4uLmFyZ3MgKi9cbiAgKSB7XG4gICAgdmFyIEYgPSBhQ2FsbGFibGUkNCh0aGlzKTtcbiAgICB2YXIgUHJvdG90eXBlID0gRi5wcm90b3R5cGU7XG4gICAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZSQ0KGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uXG4gICAgICAvKiBhcmdzLi4uICovXG4gICAgYm91bmQoKSB7XG4gICAgICB2YXIgYXJncyA9IGNvbmNhdCQ2KHBhcnRBcmdzLCBhcnJheVNsaWNlJDQoYXJndW1lbnRzKSk7XG4gICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QkNChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBpZiAoaXNPYmplY3QkYShQcm90b3R5cGUpKSBib3VuZEZ1bmN0aW9uLnByb3RvdHlwZSA9IFByb3RvdHlwZTtcbiAgICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbiAgfTtcblxuICB2YXIgJCRCID0gX2V4cG9ydDtcbiAgdmFyIGJpbmQkYSA9IGZ1bmN0aW9uQmluZDsgLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuXG4gICQkQih7XG4gICAgdGFyZ2V0OiAnRnVuY3Rpb24nLFxuICAgIHByb3RvOiB0cnVlLFxuICAgIGZvcmNlZDogRnVuY3Rpb24uYmluZCAhPT0gYmluZCRhXG4gIH0sIHtcbiAgICBiaW5kOiBiaW5kJGFcbiAgfSk7XG5cbiAgdmFyIHBhdGgkbSA9IHBhdGgkcTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJGsgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1IpIHtcbiAgICByZXR1cm4gcGF0aCRtW0NPTlNUUlVDVE9SICsgJ1Byb3RvdHlwZSddO1xuICB9O1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkaiA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgYmluZCQ5ID0gZW50cnlWaXJ0dWFsJGooJ0Z1bmN0aW9uJykuYmluZDtcblxuICB2YXIgaXNQcm90b3R5cGVPZiRoID0gb2JqZWN0SXNQcm90b3R5cGVPZjtcbiAgdmFyIG1ldGhvZCRlID0gYmluZCQ5O1xuICB2YXIgRnVuY3Rpb25Qcm90b3R5cGUkMSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICB2YXIgYmluZCQ4ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0LmJpbmQ7XG4gICAgcmV0dXJuIGl0ID09PSBGdW5jdGlvblByb3RvdHlwZSQxIHx8IGlzUHJvdG90eXBlT2YkaChGdW5jdGlvblByb3RvdHlwZSQxLCBpdCkgJiYgb3duID09PSBGdW5jdGlvblByb3RvdHlwZSQxLmJpbmQgPyBtZXRob2QkZSA6IG93bjtcbiAgfTtcblxuICB2YXIgcGFyZW50JFMgPSBiaW5kJDg7XG4gIHZhciBiaW5kJDcgPSBwYXJlbnQkUztcblxuICB2YXIgYmluZCQ2ID0gYmluZCQ3O1xuXG4gIHZhciBjZWlsID0gTWF0aC5jZWlsO1xuICB2YXIgZmxvb3IkMSA9IE1hdGguZmxvb3I7IC8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5cbiAgdmFyIHRvSW50ZWdlck9ySW5maW5pdHkkNCA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgIHZhciBudW1iZXIgPSArYXJndW1lbnQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gc2FmZVxuXG4gICAgcmV0dXJuIG51bWJlciAhPT0gbnVtYmVyIHx8IG51bWJlciA9PT0gMCA/IDAgOiAobnVtYmVyID4gMCA/IGZsb29yJDEgOiBjZWlsKShudW1iZXIpO1xuICB9O1xuXG4gIHZhciB0b0ludGVnZXJPckluZmluaXR5JDMgPSB0b0ludGVnZXJPckluZmluaXR5JDQ7XG4gIHZhciBtaW4kMiA9IE1hdGgubWluOyAvLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5cbiAgdmFyIHRvTGVuZ3RoJDEgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluJDIodG9JbnRlZ2VyT3JJbmZpbml0eSQzKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG4gIH07XG5cbiAgdmFyIHRvTGVuZ3RoID0gdG9MZW5ndGgkMTsgLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxuXG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSRkID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgZ2xvYmFsJHQgPSBnbG9iYWwkTTtcbiAgdmFyIGFDYWxsYWJsZSQzID0gYUNhbGxhYmxlJDc7XG4gIHZhciB0b09iamVjdCRjID0gdG9PYmplY3QkZTtcbiAgdmFyIEluZGV4ZWRPYmplY3QkMiA9IGluZGV4ZWRPYmplY3Q7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSRjID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIFR5cGVFcnJvciRkID0gZ2xvYmFsJHQuVHlwZUVycm9yOyAvLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG5cbiAgdmFyIGNyZWF0ZU1ldGhvZCQ1ID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhcmd1bWVudHNMZW5ndGgsIG1lbW8pIHtcbiAgICAgIGFDYWxsYWJsZSQzKGNhbGxiYWNrZm4pO1xuICAgICAgdmFyIE8gPSB0b09iamVjdCRjKHRoYXQpO1xuICAgICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0JDIoTyk7XG4gICAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UkYyhPKTtcbiAgICAgIHZhciBpbmRleCA9IElTX1JJR0hUID8gbGVuZ3RoIC0gMSA6IDA7XG4gICAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCArPSBpO1xuXG4gICAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICAgIHRocm93IFR5cGVFcnJvciRkKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICg7IElTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuXG4gIHZhciBhcnJheVJlZHVjZSA9IHtcbiAgICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gICAgbGVmdDogY3JlYXRlTWV0aG9kJDUoZmFsc2UpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4gICAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCQ1KHRydWUpXG4gIH07XG5cbiAgdmFyIGZhaWxzJGogPSBmYWlscyRyO1xuXG4gIHZhciBhcnJheU1ldGhvZElzU3RyaWN0JDUgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gICAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMkaihmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSwgMSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNsYXNzb2YkZSA9IGNsYXNzb2ZSYXckMTtcbiAgdmFyIGdsb2JhbCRzID0gZ2xvYmFsJE07XG4gIHZhciBlbmdpbmVJc05vZGUgPSBjbGFzc29mJGUoZ2xvYmFsJHMucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4gIHZhciAkJEEgPSBfZXhwb3J0O1xuICB2YXIgJHJlZHVjZSA9IGFycmF5UmVkdWNlLmxlZnQ7XG4gIHZhciBhcnJheU1ldGhvZElzU3RyaWN0JDQgPSBhcnJheU1ldGhvZElzU3RyaWN0JDU7XG4gIHZhciBDSFJPTUVfVkVSU0lPTiA9IGVuZ2luZVY4VmVyc2lvbjtcbiAgdmFyIElTX05PREUgPSBlbmdpbmVJc05vZGU7XG4gIHZhciBTVFJJQ1RfTUVUSE9EJDQgPSBhcnJheU1ldGhvZElzU3RyaWN0JDQoJ3JlZHVjZScpOyAvLyBDaHJvbWUgODAtODIgaGFzIGEgY3JpdGljYWwgYnVnXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcblxuICB2YXIgQ0hST01FX0JVRyA9ICFJU19OT0RFICYmIENIUk9NRV9WRVJTSU9OID4gNzkgJiYgQ0hST01FX1ZFUlNJT04gPCA4MzsgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcblxuICAkJEEoe1xuICAgIHRhcmdldDogJ0FycmF5JyxcbiAgICBwcm90bzogdHJ1ZSxcbiAgICBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EJDQgfHwgQ0hST01FX0JVR1xuICB9LCB7XG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmblxuICAgIC8qICwgaW5pdGlhbFZhbHVlICovXG4gICAgKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJGkgPSBlbnRyeVZpcnR1YWwkaztcbiAgdmFyIHJlZHVjZSQzID0gZW50cnlWaXJ0dWFsJGkoJ0FycmF5JykucmVkdWNlO1xuXG4gIHZhciBpc1Byb3RvdHlwZU9mJGcgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xuICB2YXIgbWV0aG9kJGQgPSByZWR1Y2UkMztcbiAgdmFyIEFycmF5UHJvdG90eXBlJGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIHJlZHVjZSQyID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0LnJlZHVjZTtcbiAgICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlJGUgfHwgaXNQcm90b3R5cGVPZiRnKEFycmF5UHJvdG90eXBlJGUsIGl0KSAmJiBvd24gPT09IEFycmF5UHJvdG90eXBlJGUucmVkdWNlID8gbWV0aG9kJGQgOiBvd247XG4gIH07XG5cbiAgdmFyIHBhcmVudCRSID0gcmVkdWNlJDI7XG4gIHZhciByZWR1Y2UkMSA9IHBhcmVudCRSO1xuXG4gIHZhciByZWR1Y2UgPSByZWR1Y2UkMTtcblxuICB2YXIgY2xhc3NvZiRkID0gY2xhc3NvZlJhdyQxOyAvLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5cbiAgdmFyIGlzQXJyYXkkZCA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmd1bWVudCkge1xuICAgIHJldHVybiBjbGFzc29mJGQoYXJndW1lbnQpID09ICdBcnJheSc7XG4gIH07XG5cbiAgdmFyIHdlbGxLbm93blN5bWJvbCRoID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciBUT19TVFJJTkdfVEFHJDMgPSB3ZWxsS25vd25TeW1ib2wkaCgndG9TdHJpbmdUYWcnKTtcbiAgdmFyIHRlc3QkMiA9IHt9O1xuICB0ZXN0JDJbVE9fU1RSSU5HX1RBRyQzXSA9ICd6JztcbiAgdmFyIHRvU3RyaW5nVGFnU3VwcG9ydCA9IFN0cmluZyh0ZXN0JDIpID09PSAnW29iamVjdCB6XSc7XG5cbiAgdmFyIGdsb2JhbCRyID0gZ2xvYmFsJE07XG4gIHZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQkMiA9IHRvU3RyaW5nVGFnU3VwcG9ydDtcbiAgdmFyIGlzQ2FsbGFibGUkOSA9IGlzQ2FsbGFibGUkaDtcbiAgdmFyIGNsYXNzb2ZSYXcgPSBjbGFzc29mUmF3JDE7XG4gIHZhciB3ZWxsS25vd25TeW1ib2wkZyA9IHdlbGxLbm93blN5bWJvbCRqO1xuICB2YXIgVE9fU1RSSU5HX1RBRyQyID0gd2VsbEtub3duU3ltYm9sJGcoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBPYmplY3QkNSA9IGdsb2JhbCRyLk9iamVjdDsgLy8gRVMzIHdyb25nIGhlcmVcblxuICB2YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzO1xuICB9KCkpID09ICdBcmd1bWVudHMnOyAvLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxuXG4gIHZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaXRba2V5XTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLyogZW1wdHkgKi9cbiAgICB9XG4gIH07IC8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2BcblxuXG4gIHZhciBjbGFzc29mJGMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQkMiA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gICAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdCQ1KGl0KSwgVE9fU1RSSU5HX1RBRyQyKSkgPT0gJ3N0cmluZycgPyB0YWcgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTykgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIGlzQ2FsbGFibGUkOShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbiAgfTtcblxuICB2YXIgdW5jdXJyeVRoaXMkaiA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBpc0NhbGxhYmxlJDggPSBpc0NhbGxhYmxlJGg7XG4gIHZhciBzdG9yZSQxID0gc2hhcmVkU3RvcmU7XG4gIHZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMkaihGdW5jdGlvbi50b1N0cmluZyk7IC8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcblxuICBpZiAoIWlzQ2FsbGFibGUkOChzdG9yZSQxLmluc3BlY3RTb3VyY2UpKSB7XG4gICAgc3RvcmUkMS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnNwZWN0U291cmNlJDIgPSBzdG9yZSQxLmluc3BlY3RTb3VyY2U7XG5cbiAgdmFyIHVuY3VycnlUaGlzJGkgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xuICB2YXIgZmFpbHMkaSA9IGZhaWxzJHI7XG4gIHZhciBpc0NhbGxhYmxlJDcgPSBpc0NhbGxhYmxlJGg7XG4gIHZhciBjbGFzc29mJGIgPSBjbGFzc29mJGM7XG4gIHZhciBnZXRCdWlsdEluJDYgPSBnZXRCdWlsdEluJDk7XG4gIHZhciBpbnNwZWN0U291cmNlJDEgPSBpbnNwZWN0U291cmNlJDI7XG5cbiAgdmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogZW1wdHkgKi9cbiAgfTtcblxuICB2YXIgZW1wdHkgPSBbXTtcbiAgdmFyIGNvbnN0cnVjdCQzID0gZ2V0QnVpbHRJbiQ2KCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xuICB2YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xuICB2YXIgZXhlYyQyID0gdW5jdXJyeVRoaXMkaShjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbiAgdmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAuZXhlYyhub29wKTtcblxuICB2YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgICBpZiAoIWlzQ2FsbGFibGUkNyhhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdHJ1Y3QkMyhub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlJDcoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBzd2l0Y2ggKGNsYXNzb2YkYihhcmd1bWVudCkpIHtcbiAgICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyQyKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlJDEoYXJndW1lbnQpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIGlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7IC8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5cbiAgdmFyIGlzQ29uc3RydWN0b3IkNCA9ICFjb25zdHJ1Y3QkMyB8fCBmYWlscyRpKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FsbGVkO1xuICAgIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbCkgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KSB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pIHx8IGNhbGxlZDtcbiAgfSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcblxuICB2YXIgZ2xvYmFsJHEgPSBnbG9iYWwkTTtcbiAgdmFyIGlzQXJyYXkkYyA9IGlzQXJyYXkkZDtcbiAgdmFyIGlzQ29uc3RydWN0b3IkMyA9IGlzQ29uc3RydWN0b3IkNDtcbiAgdmFyIGlzT2JqZWN0JDkgPSBpc09iamVjdCRmO1xuICB2YXIgd2VsbEtub3duU3ltYm9sJGYgPSB3ZWxsS25vd25TeW1ib2wkajtcbiAgdmFyIFNQRUNJRVMkMyA9IHdlbGxLbm93blN5bWJvbCRmKCdzcGVjaWVzJyk7XG4gIHZhciBBcnJheSQ1ID0gZ2xvYmFsJHEuQXJyYXk7IC8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxuICB2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IkMSA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gICAgdmFyIEM7XG5cbiAgICBpZiAoaXNBcnJheSRjKG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjsgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcblxuICAgICAgaWYgKGlzQ29uc3RydWN0b3IkMyhDKSAmJiAoQyA9PT0gQXJyYXkkNSB8fCBpc0FycmF5JGMoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtlbHNlIGlmIChpc09iamVjdCQ5KEMpKSB7XG4gICAgICAgIEMgPSBDW1NQRUNJRVMkM107XG4gICAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSQ1IDogQztcbiAgfTtcblxuICB2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSBhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciQxOyAvLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxuICB2YXIgYXJyYXlTcGVjaWVzQ3JlYXRlJDQgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBiaW5kJDUgPSBmdW5jdGlvbkJpbmRDb250ZXh0O1xuICB2YXIgdW5jdXJyeVRoaXMkaCA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBJbmRleGVkT2JqZWN0JDEgPSBpbmRleGVkT2JqZWN0O1xuICB2YXIgdG9PYmplY3QkYiA9IHRvT2JqZWN0JGU7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSRiID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIGFycmF5U3BlY2llc0NyZWF0ZSQzID0gYXJyYXlTcGVjaWVzQ3JlYXRlJDQ7XG4gIHZhciBwdXNoJDUgPSB1bmN1cnJ5VGhpcyRoKFtdLnB1c2gpOyAvLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG5cbiAgdmFyIGNyZWF0ZU1ldGhvZCQ0ID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICAgIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gICAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gICAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICAgIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICAgIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICAgIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICAgIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0JGIoJHRoaXMpO1xuICAgICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0JDEoTyk7XG4gICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQkNShjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSRiKHNlbGYpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGUkMztcbiAgICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgdmFsdWUsIHJlc3VsdDtcblxuICAgICAgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG5cbiAgICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHNvbWVcblxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAvLyBmaW5kXG5cbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgLy8gZmluZEluZGV4XG5cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgcHVzaCQ1KHRhcmdldCwgdmFsdWUpO1xuICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLyBldmVyeVxuXG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgIHB1c2gkNSh0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgICAgIC8vIGZpbHRlclJlamVjdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGFycmF5SXRlcmF0aW9uID0ge1xuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICAgIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCQ0KDApLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgICBtYXA6IGNyZWF0ZU1ldGhvZCQ0KDEpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCQ0KDIpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICAgIHNvbWU6IGNyZWF0ZU1ldGhvZCQ0KDMpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gICAgZXZlcnk6IGNyZWF0ZU1ldGhvZCQ0KDQpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICAgIGZpbmQ6IGNyZWF0ZU1ldGhvZCQ0KDUpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCQ0KDYpLFxuICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyUmVqZWN0YCBtZXRob2RcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCQ0KDcpXG4gIH07XG5cbiAgdmFyIGZhaWxzJGggPSBmYWlscyRyO1xuICB2YXIgd2VsbEtub3duU3ltYm9sJGUgPSB3ZWxsS25vd25TeW1ib2wkajtcbiAgdmFyIFY4X1ZFUlNJT04kMSA9IGVuZ2luZVY4VmVyc2lvbjtcbiAgdmFyIFNQRUNJRVMkMiA9IHdlbGxLbm93blN5bWJvbCRlKCdzcGVjaWVzJyk7XG5cbiAgdmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkNSA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAgIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAgIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICAgIHJldHVybiBWOF9WRVJTSU9OJDEgPj0gNTEgfHwgIWZhaWxzJGgoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuXG4gICAgICBjb25zdHJ1Y3RvcltTUEVDSUVTJDJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvbzogMVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyICQkeiA9IF9leHBvcnQ7XG4gIHZhciAkZmlsdGVyID0gYXJyYXlJdGVyYXRpb24uZmlsdGVyO1xuICB2YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCQ0ID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCQ1O1xuICB2YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCQzID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCQ0KCdmaWx0ZXInKTsgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcblxuICAkJHooe1xuICAgIHRhcmdldDogJ0FycmF5JyxcbiAgICBwcm90bzogdHJ1ZSxcbiAgICBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUJDNcbiAgfSwge1xuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm5cbiAgICAvKiAsIHRoaXNBcmcgKi9cbiAgICApIHtcbiAgICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkaCA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgZmlsdGVyJDMgPSBlbnRyeVZpcnR1YWwkaCgnQXJyYXknKS5maWx0ZXI7XG5cbiAgdmFyIGlzUHJvdG90eXBlT2YkZiA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBtZXRob2QkYyA9IGZpbHRlciQzO1xuICB2YXIgQXJyYXlQcm90b3R5cGUkZCA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgZmlsdGVyJDIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgb3duID0gaXQuZmlsdGVyO1xuICAgIHJldHVybiBpdCA9PT0gQXJyYXlQcm90b3R5cGUkZCB8fCBpc1Byb3RvdHlwZU9mJGYoQXJyYXlQcm90b3R5cGUkZCwgaXQpICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUkZC5maWx0ZXIgPyBtZXRob2QkYyA6IG93bjtcbiAgfTtcblxuICB2YXIgcGFyZW50JFEgPSBmaWx0ZXIkMjtcbiAgdmFyIGZpbHRlciQxID0gcGFyZW50JFE7XG5cbiAgdmFyIGZpbHRlciA9IGZpbHRlciQxO1xuXG4gIHZhciAkJHkgPSBfZXhwb3J0O1xuICB2YXIgJG1hcCA9IGFycmF5SXRlcmF0aW9uLm1hcDtcbiAgdmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkMyA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkNTtcbiAgdmFyIEhBU19TUEVDSUVTX1NVUFBPUlQkMiA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkMygnbWFwJyk7IC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIC8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG5cbiAgJCR5KHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWUsXG4gICAgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCQyXG4gIH0sIHtcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuXG4gICAgLyogLCB0aGlzQXJnICovXG4gICAgKSB7XG4gICAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJGcgPSBlbnRyeVZpcnR1YWwkaztcbiAgdmFyIG1hcCQ2ID0gZW50cnlWaXJ0dWFsJGcoJ0FycmF5JykubWFwO1xuXG4gIHZhciBpc1Byb3RvdHlwZU9mJGUgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xuICB2YXIgbWV0aG9kJGIgPSBtYXAkNjtcbiAgdmFyIEFycmF5UHJvdG90eXBlJGMgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIG1hcCQ1ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0Lm1hcDtcbiAgICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlJGMgfHwgaXNQcm90b3R5cGVPZiRlKEFycmF5UHJvdG90eXBlJGMsIGl0KSAmJiBvd24gPT09IEFycmF5UHJvdG90eXBlJGMubWFwID8gbWV0aG9kJGIgOiBvd247XG4gIH07XG5cbiAgdmFyIHBhcmVudCRQID0gbWFwJDU7XG4gIHZhciBtYXAkNCA9IHBhcmVudCRQO1xuXG4gIHZhciBtYXAkMyA9IG1hcCQ0O1xuXG4gIHZhciBnbG9iYWwkcCA9IGdsb2JhbCRNO1xuICB2YXIgaXNBcnJheSRiID0gaXNBcnJheSRkO1xuICB2YXIgbGVuZ3RoT2ZBcnJheUxpa2UkYSA9IGxlbmd0aE9mQXJyYXlMaWtlJGQ7XG4gIHZhciBiaW5kJDQgPSBmdW5jdGlvbkJpbmRDb250ZXh0O1xuICB2YXIgVHlwZUVycm9yJGMgPSBnbG9iYWwkcC5UeXBlRXJyb3I7IC8vIGBGbGF0dGVuSW50b0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxuXG4gIHZhciBmbGF0dGVuSW50b0FycmF5JDEgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gICAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kJDQobWFwcGVyLCB0aGlzQXJnKSA6IGZhbHNlO1xuICAgIHZhciBlbGVtZW50LCBlbGVtZW50TGVuO1xuXG4gICAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheSRiKGVsZW1lbnQpKSB7XG4gICAgICAgICAgZWxlbWVudExlbiA9IGxlbmd0aE9mQXJyYXlMaWtlJGEoZWxlbWVudCk7XG4gICAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5JDEodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgZWxlbWVudExlbiwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFGRkZGRkZGRkZGRkZGKSB0aHJvdyBUeXBlRXJyb3IkYygnRXhjZWVkIHRoZSBhY2NlcHRhYmxlIGFycmF5IGxlbmd0aCcpO1xuICAgICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgc291cmNlSW5kZXgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0SW5kZXg7XG4gIH07XG5cbiAgdmFyIGZsYXR0ZW5JbnRvQXJyYXlfMSA9IGZsYXR0ZW5JbnRvQXJyYXkkMTtcblxuICB2YXIgJCR4ID0gX2V4cG9ydDtcbiAgdmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmbGF0dGVuSW50b0FycmF5XzE7XG4gIHZhciBhQ2FsbGFibGUkMiA9IGFDYWxsYWJsZSQ3O1xuICB2YXIgdG9PYmplY3QkYSA9IHRvT2JqZWN0JGU7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSQ5ID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIGFycmF5U3BlY2llc0NyZWF0ZSQyID0gYXJyYXlTcGVjaWVzQ3JlYXRlJDQ7IC8vIGBBcnJheS5wcm90b3R5cGUuZmxhdE1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRtYXBcblxuICAkJHgoe1xuICAgIHRhcmdldDogJ0FycmF5JyxcbiAgICBwcm90bzogdHJ1ZVxuICB9LCB7XG4gICAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuXG4gICAgLyogLCB0aGlzQXJnICovXG4gICAgKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0JGEodGhpcyk7XG4gICAgICB2YXIgc291cmNlTGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UkOShPKTtcbiAgICAgIHZhciBBO1xuICAgICAgYUNhbGxhYmxlJDIoY2FsbGJhY2tmbik7XG4gICAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlJDIoTywgMCk7XG4gICAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkZiA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgZmxhdE1hcCQzID0gZW50cnlWaXJ0dWFsJGYoJ0FycmF5JykuZmxhdE1hcDtcblxuICB2YXIgaXNQcm90b3R5cGVPZiRkID0gb2JqZWN0SXNQcm90b3R5cGVPZjtcbiAgdmFyIG1ldGhvZCRhID0gZmxhdE1hcCQzO1xuICB2YXIgQXJyYXlQcm90b3R5cGUkYiA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgZmxhdE1hcCQyID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0LmZsYXRNYXA7XG4gICAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSRiIHx8IGlzUHJvdG90eXBlT2YkZChBcnJheVByb3RvdHlwZSRiLCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZSRiLmZsYXRNYXAgPyBtZXRob2QkYSA6IG93bjtcbiAgfTtcblxuICB2YXIgcGFyZW50JE8gPSBmbGF0TWFwJDI7XG4gIHZhciBmbGF0TWFwJDEgPSBwYXJlbnQkTztcblxuICB2YXIgZmxhdE1hcCA9IGZsYXRNYXAkMTtcblxuICAvKipcclxuICAgKiBDcmVhdGUgbmV3IGRhdGEgcGlwZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBmcm9tIC0gVGhlIHNvdXJjZSBkYXRhIHNldCBvciBkYXRhIHZpZXcuXHJcbiAgICogQHJlbWFya3NcclxuICAgKiBFeGFtcGxlIHVzYWdlOlxyXG4gICAqIGBgYHR5cGVzY3JpcHRcclxuICAgKiBpbnRlcmZhY2UgQXBwSXRlbSB7XHJcbiAgICogICB3aG9hbWk6IHN0cmluZztcclxuICAgKiAgIGFwcERhdGE6IHVua25vd247XHJcbiAgICogICB2aXNEYXRhOiBWaXNJdGVtO1xyXG4gICAqIH1cclxuICAgKiBpbnRlcmZhY2UgVmlzSXRlbSB7XHJcbiAgICogICBpZDogbnVtYmVyO1xyXG4gICAqICAgbGFiZWw6IHN0cmluZztcclxuICAgKiAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICogICB4OiBudW1iZXI7XHJcbiAgICogICB5OiBudW1iZXI7XHJcbiAgICogfVxyXG4gICAqXHJcbiAgICogY29uc3QgZHMxID0gbmV3IERhdGFTZXQ8QXBwSXRlbSwgXCJ3aG9hbWlcIj4oW10sIHsgZmllbGRJZDogXCJ3aG9hbWlcIiB9KTtcclxuICAgKiBjb25zdCBkczIgPSBuZXcgRGF0YVNldDxWaXNJdGVtLCBcImlkXCI+KCk7XHJcbiAgICpcclxuICAgKiBjb25zdCBwaXBlID0gY3JlYXRlTmV3RGF0YVBpcGVGcm9tKGRzMSlcclxuICAgKiAgIC5maWx0ZXIoKGl0ZW0pOiBib29sZWFuID0+IGl0ZW0uZW5hYmxlZCA9PT0gdHJ1ZSlcclxuICAgKiAgIC5tYXA8VmlzSXRlbSwgXCJpZFwiPigoaXRlbSk6IFZpc0l0ZW0gPT4gaXRlbS52aXNEYXRhKVxyXG4gICAqICAgLnRvKGRzMik7XHJcbiAgICpcclxuICAgKiBwaXBlLnN0YXJ0KCk7XHJcbiAgICogYGBgXHJcbiAgICogQHJldHVybnMgQSBmYWN0b3J5IHdob3NlIG1ldGhvZHMgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBwaXBlLlxyXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVOZXdEYXRhUGlwZUZyb20oZnJvbSkge1xuICAgIHJldHVybiBuZXcgRGF0YVBpcGVVbmRlckNvbnN0cnVjdGlvbihmcm9tKTtcbiAgfVxuICAvKipcclxuICAgKiBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgcGlwZS4gVGhpcyBzaG91bGQgYmUgYWNjZXNzaWJsZSBvbmx5IHRocm91Z2hcclxuICAgKiBgY3JlYXRlTmV3RGF0YVBpcGVGcm9tYCBmcm9tIHRoZSBvdXRzaWRlLlxyXG4gICAqXHJcbiAgICogQHR5cGVQYXJhbSBTSSAtIFNvdXJjZSBpdGVtIHR5cGUuXHJcbiAgICogQHR5cGVQYXJhbSBTUCAtIFNvdXJjZSBpdGVtIHR5cGUncyBpZCBwcm9wZXJ0eSBuYW1lLlxyXG4gICAqIEB0eXBlUGFyYW0gVEkgLSBUYXJnZXQgaXRlbSB0eXBlLlxyXG4gICAqIEB0eXBlUGFyYW0gVFAgLSBUYXJnZXQgaXRlbSB0eXBlJ3MgaWQgcHJvcGVydHkgbmFtZS5cclxuICAgKi9cblxuICB2YXIgU2ltcGxlRGF0YVBpcGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIC8qKlxyXG4gICAgICogQm91bmQgbGlzdGVuZXJzIGZvciB1c2Ugd2l0aCBgRGF0YUludGVyZmFjZVsnb24nIHwgJ29mZiddYC5cclxuICAgICAqL1xuXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgZGF0YSBwaXBlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBfc291cmNlIC0gVGhlIGRhdGEgc2V0IG9yIGRhdGEgdmlldyB0aGF0IHdpbGwgYmUgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcGFyYW0gX3RyYW5zZm9ybWVycyAtIEFuIGFycmF5IG9mIHRyYW5zZm9ybWluZyBmdW5jdGlvbnMgdG8gYmUgdXNlZCB0b1xyXG4gICAgICogZmlsdGVyIG9yIHRyYW5zZm9ybSB0aGUgaXRlbXMgaW4gdGhlIHBpcGUuXHJcbiAgICAgKiBAcGFyYW0gX3RhcmdldCAtIFRoZSBkYXRhIHNldCBvciBkYXRhIHZpZXcgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIGl0ZW1zLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2ltcGxlRGF0YVBpcGUoX3NvdXJjZSwgX3RyYW5zZm9ybWVycywgX3RhcmdldCkge1xuICAgICAgdmFyIF9jb250ZXh0LCBfY29udGV4dDIsIF9jb250ZXh0MztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZURhdGFQaXBlKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3NvdXJjZVwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfdHJhbnNmb3JtZXJzXCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl90YXJnZXRcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2xpc3RlbmVyc1wiLCB7XG4gICAgICAgIGFkZDogYmluZCQ2KF9jb250ZXh0ID0gdGhpcy5fYWRkKS5jYWxsKF9jb250ZXh0LCB0aGlzKSxcbiAgICAgICAgcmVtb3ZlOiBiaW5kJDYoX2NvbnRleHQyID0gdGhpcy5fcmVtb3ZlKS5jYWxsKF9jb250ZXh0MiwgdGhpcyksXG4gICAgICAgIHVwZGF0ZTogYmluZCQ2KF9jb250ZXh0MyA9IHRoaXMuX3VwZGF0ZSkuY2FsbChfY29udGV4dDMsIHRoaXMpXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc291cmNlID0gX3NvdXJjZTtcbiAgICAgIHRoaXMuX3RyYW5zZm9ybWVycyA9IF90cmFuc2Zvcm1lcnM7XG4gICAgICB0aGlzLl90YXJnZXQgPSBfdGFyZ2V0O1xuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKFNpbXBsZURhdGFQaXBlLCBbe1xuICAgICAga2V5OiBcImFsbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFsbCgpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0LnVwZGF0ZSh0aGlzLl90cmFuc2Zvcm1JdGVtcyh0aGlzLl9zb3VyY2UuZ2V0KCkpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZS5vbihcImFkZFwiLCB0aGlzLl9saXN0ZW5lcnMuYWRkKTtcblxuICAgICAgICB0aGlzLl9zb3VyY2Uub24oXCJyZW1vdmVcIiwgdGhpcy5fbGlzdGVuZXJzLnJlbW92ZSk7XG5cbiAgICAgICAgdGhpcy5fc291cmNlLm9uKFwidXBkYXRlXCIsIHRoaXMuX2xpc3RlbmVycy51cGRhdGUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZS5vZmYoXCJhZGRcIiwgdGhpcy5fbGlzdGVuZXJzLmFkZCk7XG5cbiAgICAgICAgdGhpcy5fc291cmNlLm9mZihcInJlbW92ZVwiLCB0aGlzLl9saXN0ZW5lcnMucmVtb3ZlKTtcblxuICAgICAgICB0aGlzLl9zb3VyY2Uub2ZmKFwidXBkYXRlXCIsIHRoaXMuX2xpc3RlbmVycy51cGRhdGUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIEFwcGx5IHRoZSB0cmFuc2Zvcm1lcnMgdG8gdGhlIGl0ZW1zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gaXRlbXMgLSBUaGUgaXRlbXMgdG8gYmUgdHJhbnNmb3JtZWQuXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSB0cmFuc2Zvcm1lZCBpdGVtcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3RyYW5zZm9ybUl0ZW1zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3RyYW5zZm9ybUl0ZW1zKGl0ZW1zKSB7XG4gICAgICAgIHZhciBfY29udGV4dDQ7XG5cbiAgICAgICAgcmV0dXJuIHJlZHVjZShfY29udGV4dDQgPSB0aGlzLl90cmFuc2Zvcm1lcnMpLmNhbGwoX2NvbnRleHQ0LCBmdW5jdGlvbiAoaXRlbXMsIHRyYW5zZm9ybSkge1xuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0oaXRlbXMpO1xuICAgICAgICB9LCBpdGVtcyk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogSGFuZGxlIGFuIGFkZCBldmVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIF9uYW1lIC0gSWdub3JlZC5cclxuICAgICAgICogQHBhcmFtIHBheWxvYWQgLSBUaGUgcGF5bG9hZCBjb250YWluaW5nIHRoZSBpZHMgb2YgdGhlIGFkZGVkIGl0ZW1zLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfYWRkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZChfbmFtZSwgcGF5bG9hZCkge1xuICAgICAgICBpZiAocGF5bG9hZCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdGFyZ2V0LmFkZCh0aGlzLl90cmFuc2Zvcm1JdGVtcyh0aGlzLl9zb3VyY2UuZ2V0KHBheWxvYWQuaXRlbXMpKSk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogSGFuZGxlIGFuIHVwZGF0ZSBldmVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIF9uYW1lIC0gSWdub3JlZC5cclxuICAgICAgICogQHBhcmFtIHBheWxvYWQgLSBUaGUgcGF5bG9hZCBjb250YWluaW5nIHRoZSBpZHMgb2YgdGhlIHVwZGF0ZWQgaXRlbXMuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIl91cGRhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKF9uYW1lLCBwYXlsb2FkKSB7XG4gICAgICAgIGlmIChwYXlsb2FkID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl90YXJnZXQudXBkYXRlKHRoaXMuX3RyYW5zZm9ybUl0ZW1zKHRoaXMuX3NvdXJjZS5nZXQocGF5bG9hZC5pdGVtcykpKTtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBIYW5kbGUgYSByZW1vdmUgZXZlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBfbmFtZSAtIElnbm9yZWQuXHJcbiAgICAgICAqIEBwYXJhbSBwYXlsb2FkIC0gVGhlIHBheWxvYWQgY29udGFpbmluZyB0aGUgZGF0YSBvZiB0aGUgcmVtb3ZlZCBpdGVtcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3JlbW92ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmUoX25hbWUsIHBheWxvYWQpIHtcbiAgICAgICAgaWYgKHBheWxvYWQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RhcmdldC5yZW1vdmUodGhpcy5fdHJhbnNmb3JtSXRlbXMocGF5bG9hZC5vbGREYXRhKSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNpbXBsZURhdGFQaXBlO1xuICB9KCk7XG4gIC8qKlxyXG4gICAqIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBwaXBlIGZhY3RvcnkuIFRoaXMgc2hvdWxkIGJlIGFjY2Vzc2libGVcclxuICAgKiBvbmx5IHRocm91Z2ggYGNyZWF0ZU5ld0RhdGFQaXBlRnJvbWAgZnJvbSB0aGUgb3V0c2lkZS5cclxuICAgKlxyXG4gICAqIEB0eXBlUGFyYW0gVEkgLSBUYXJnZXQgaXRlbSB0eXBlLlxyXG4gICAqIEB0eXBlUGFyYW0gVFAgLSBUYXJnZXQgaXRlbSB0eXBlJ3MgaWQgcHJvcGVydHkgbmFtZS5cclxuICAgKi9cblxuXG4gIHZhciBEYXRhUGlwZVVuZGVyQ29uc3RydWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAvKipcclxuICAgICAqIEFycmF5IHRyYW5zZm9ybWVycyB1c2VkIHRvIHRyYW5zZm9ybSBpdGVtcyB3aXRoaW4gdGhlIHBpcGUuIFRoaXMgaXMgdHlwZWRcclxuICAgICAqIGFzIGFueSBmb3IgdGhlIHNha2Ugb2Ygc2ltcGxpY2l0eS5cclxuICAgICAqL1xuXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgZGF0YSBwaXBlIGZhY3RvcnkuIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29uc3RydWN0b3IgdGhhdFxyXG4gICAgICogc2hvdWxkIG5ldmVyIGJlIGNhbGxlZCBmcm9tIG91dHNpZGUgb2YgdGhpcyBmaWxlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBfc291cmNlIC0gVGhlIHNvdXJjZSBkYXRhIHNldCBvciBkYXRhIHZpZXcgZm9yIHRoaXMgcGlwZS5cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERhdGFQaXBlVW5kZXJDb25zdHJ1Y3Rpb24oX3NvdXJjZSkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFQaXBlVW5kZXJDb25zdHJ1Y3Rpb24pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc291cmNlXCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl90cmFuc2Zvcm1lcnNcIiwgW10pO1xuXG4gICAgICB0aGlzLl9zb3VyY2UgPSBfc291cmNlO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEZpbHRlciB0aGUgaXRlbXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gQSBmaWx0ZXJpbmcgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgZ2l2ZW4gaXRlbVxyXG4gICAgICogc2hvdWxkIGJlIHBpcGVkIGFuZCBmYWxzZSBpZiBub3QuXHJcbiAgICAgKiBAcmV0dXJucyBUaGlzIGZhY3RvcnkgZm9yIGZ1cnRoZXIgY29uZmlndXJhdGlvbi5cclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoRGF0YVBpcGVVbmRlckNvbnN0cnVjdGlvbiwgW3tcbiAgICAgIGtleTogXCJmaWx0ZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXIkMShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl90cmFuc2Zvcm1lcnMucHVzaChmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICByZXR1cm4gZmlsdGVyKGlucHV0KS5jYWxsKGlucHV0LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIE1hcCBlYWNoIHNvdXJjZSBpdGVtIHRvIGEgbmV3IHR5cGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIEEgbWFwcGluZyBmdW5jdGlvbiB0aGF0IHRha2VzIGEgc291cmNlIGl0ZW0gYW5kIHJldHVybnNcclxuICAgICAgICogY29ycmVzcG9uZGluZyBtYXBwZWQgaXRlbS5cclxuICAgICAgICogQHR5cGVQYXJhbSBUSSAtIFRhcmdldCBpdGVtIHR5cGUuXHJcbiAgICAgICAqIEB0eXBlUGFyYW0gVFAgLSBUYXJnZXQgaXRlbSB0eXBlJ3MgaWQgcHJvcGVydHkgbmFtZS5cclxuICAgICAgICogQHJldHVybnMgVGhpcyBmYWN0b3J5IGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1hcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hcChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl90cmFuc2Zvcm1lcnMucHVzaChmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICByZXR1cm4gbWFwJDMoaW5wdXQpLmNhbGwoaW5wdXQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogTWFwIGVhY2ggc291cmNlIGl0ZW0gdG8gemVybyBvciBtb3JlIGl0ZW1zIG9mIGEgbmV3IHR5cGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIEEgbWFwcGluZyBmdW5jdGlvbiB0aGF0IHRha2VzIGEgc291cmNlIGl0ZW0gYW5kIHJldHVybnNcclxuICAgICAgICogYW4gYXJyYXkgb2YgY29ycmVzcG9uZGluZyBtYXBwZWQgaXRlbXMuXHJcbiAgICAgICAqIEB0eXBlUGFyYW0gVEkgLSBUYXJnZXQgaXRlbSB0eXBlLlxyXG4gICAgICAgKiBAdHlwZVBhcmFtIFRQIC0gVGFyZ2V0IGl0ZW0gdHlwZSdzIGlkIHByb3BlcnR5IG5hbWUuXHJcbiAgICAgICAqIEByZXR1cm5zIFRoaXMgZmFjdG9yeSBmb3IgZnVydGhlciBjb25maWd1cmF0aW9uLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmbGF0TWFwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmxhdE1hcCQxKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybWVycy5wdXNoKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgIHJldHVybiBmbGF0TWFwKGlucHV0KS5jYWxsKGlucHV0LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbm5lY3QgdGhpcyBwaXBlIHRvIGdpdmVuIGRhdGEgc2V0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIGRhdGEgc2V0IHRoYXQgd2lsbCByZWNlaXZlIHRoZSBpdGVtcyBmcm9tIHRoaXMgcGlwZS5cclxuICAgICAgICogQHJldHVybnMgVGhlIHBpcGUgY29ubmVjdGVkIGJldHdlZW4gZ2l2ZW4gZGF0YSBzZXRzIGFuZCBwZXJmb3JtaW5nXHJcbiAgICAgICAqIGNvbmZpZ3VyZWQgdHJhbnNmb3JtYXRpb24gb24gdGhlIHByb2Nlc3NlZCBpdGVtcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0byh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVEYXRhUGlwZSh0aGlzLl9zb3VyY2UsIHRoaXMuX3RyYW5zZm9ybWVycywgdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGF0YVBpcGVVbmRlckNvbnN0cnVjdGlvbjtcbiAgfSgpO1xuXG4gIHZhciBnbG9iYWwkbyA9IGdsb2JhbCRNO1xuICB2YXIgY2xhc3NvZiRhID0gY2xhc3NvZiRjO1xuICB2YXIgU3RyaW5nJDIgPSBnbG9iYWwkby5TdHJpbmc7XG5cbiAgdmFyIHRvU3RyaW5nJDcgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICBpZiAoY2xhc3NvZiRhKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgICByZXR1cm4gU3RyaW5nJDIoYXJndW1lbnQpO1xuICB9O1xuXG4gIHZhciB1bmN1cnJ5VGhpcyRnID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIHRvSW50ZWdlck9ySW5maW5pdHkkMiA9IHRvSW50ZWdlck9ySW5maW5pdHkkNDtcbiAgdmFyIHRvU3RyaW5nJDYgPSB0b1N0cmluZyQ3O1xuICB2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSQyID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ1O1xuICB2YXIgY2hhckF0JDIgPSB1bmN1cnJ5VGhpcyRnKCcnLmNoYXJBdCk7XG4gIHZhciBjaGFyQ29kZUF0JDEgPSB1bmN1cnJ5VGhpcyRnKCcnLmNoYXJDb2RlQXQpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcyRnKCcnLnNsaWNlKTtcblxuICB2YXIgY3JlYXRlTWV0aG9kJDMgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICAgIHZhciBTID0gdG9TdHJpbmckNihyZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDIoJHRoaXMpKTtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkkMihwb3MpO1xuICAgICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICAgIGZpcnN0ID0gY2hhckNvZGVBdCQxKFMsIHBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemUgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQkMShTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYgPyBDT05WRVJUX1RPX1NUUklORyA/IGNoYXJBdCQyKFMsIHBvc2l0aW9uKSA6IGZpcnN0IDogQ09OVkVSVF9UT19TVFJJTkcgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgc3RyaW5nTXVsdGlieXRlID0ge1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZCQzKGZhbHNlKSxcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICAgIGNoYXJBdDogY3JlYXRlTWV0aG9kJDModHJ1ZSlcbiAgfTtcblxuICB2YXIgZ2xvYmFsJG4gPSBnbG9iYWwkTTtcbiAgdmFyIGlzQ2FsbGFibGUkNiA9IGlzQ2FsbGFibGUkaDtcbiAgdmFyIGluc3BlY3RTb3VyY2UgPSBpbnNwZWN0U291cmNlJDI7XG4gIHZhciBXZWFrTWFwJDEgPSBnbG9iYWwkbi5XZWFrTWFwO1xuICB2YXIgbmF0aXZlV2Vha01hcCA9IGlzQ2FsbGFibGUkNihXZWFrTWFwJDEpICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXAkMSkpO1xuXG4gIHZhciBzaGFyZWQkMiA9IHNoYXJlZCQ0LmV4cG9ydHM7XG4gIHZhciB1aWQkMiA9IHVpZCQ0O1xuICB2YXIga2V5cyQ3ID0gc2hhcmVkJDIoJ2tleXMnKTtcblxuICB2YXIgc2hhcmVkS2V5JDQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleXMkN1trZXldIHx8IChrZXlzJDdba2V5XSA9IHVpZCQyKGtleSkpO1xuICB9O1xuXG4gIHZhciBoaWRkZW5LZXlzJDYgPSB7fTtcblxuICB2YXIgTkFUSVZFX1dFQUtfTUFQID0gbmF0aXZlV2Vha01hcDtcbiAgdmFyIGdsb2JhbCRtID0gZ2xvYmFsJE07XG4gIHZhciB1bmN1cnJ5VGhpcyRmID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGlzT2JqZWN0JDggPSBpc09iamVjdCRmO1xuICB2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDQgPSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNjtcbiAgdmFyIGhhc093biRiID0gaGFzT3duUHJvcGVydHlfMTtcbiAgdmFyIHNoYXJlZCQxID0gc2hhcmVkU3RvcmU7XG4gIHZhciBzaGFyZWRLZXkkMyA9IHNoYXJlZEtleSQ0O1xuICB2YXIgaGlkZGVuS2V5cyQ1ID0gaGlkZGVuS2V5cyQ2O1xuICB2YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xuICB2YXIgVHlwZUVycm9yJGIgPSBnbG9iYWwkbS5UeXBlRXJyb3I7XG4gIHZhciBXZWFrTWFwID0gZ2xvYmFsJG0uV2Vha01hcDtcbiAgdmFyIHNldCQzLCBnZXQsIGhhcztcblxuICB2YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldCQzKGl0LCB7fSk7XG4gIH07XG5cbiAgdmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHN0YXRlO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0JDgoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yJGIoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9O1xuICB9O1xuXG4gIGlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkJDEuc3RhdGUpIHtcbiAgICB2YXIgc3RvcmUgPSBzaGFyZWQkMS5zdGF0ZSB8fCAoc2hhcmVkJDEuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgICB2YXIgd21nZXQgPSB1bmN1cnJ5VGhpcyRmKHN0b3JlLmdldCk7XG4gICAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMkZihzdG9yZS5oYXMpO1xuICAgIHZhciB3bXNldCA9IHVuY3VycnlUaGlzJGYoc3RvcmUuc2V0KTtcblxuICAgIHNldCQzID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgICAgaWYgKHdtaGFzKHN0b3JlLCBpdCkpIHRocm93IG5ldyBUeXBlRXJyb3IkYihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICAgIHdtc2V0KHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgIH07XG5cbiAgICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiB3bWdldChzdG9yZSwgaXQpIHx8IHt9O1xuICAgIH07XG5cbiAgICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiB3bWhhcyhzdG9yZSwgaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIFNUQVRFID0gc2hhcmVkS2V5JDMoJ3N0YXRlJyk7XG4gICAgaGlkZGVuS2V5cyQ1W1NUQVRFXSA9IHRydWU7XG5cbiAgICBzZXQkMyA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICAgIGlmIChoYXNPd24kYihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yJGIoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNChpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICAgIHJldHVybiBtZXRhZGF0YTtcbiAgICB9O1xuXG4gICAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaGFzT3duJGIoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICAgIH07XG5cbiAgICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBoYXNPd24kYihpdCwgU1RBVEUpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaW50ZXJuYWxTdGF0ZSA9IHtcbiAgICBzZXQ6IHNldCQzLFxuICAgIGdldDogZ2V0LFxuICAgIGhhczogaGFzLFxuICAgIGVuZm9yY2U6IGVuZm9yY2UsXG4gICAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3JcbiAgfTtcblxuICB2YXIgREVTQ1JJUFRPUlMkYiA9IGRlc2NyaXB0b3JzO1xuICB2YXIgaGFzT3duJGEgPSBoYXNPd25Qcm9wZXJ0eV8xO1xuICB2YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcblxuICB2YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTJGIgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgdmFyIEVYSVNUUyA9IGhhc093biRhKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpOyAvLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG5cbiAgdmFyIFBST1BFUiA9IEVYSVNUUyAmJiBmdW5jdGlvbiBzb21ldGhpbmcoKSB7XG4gICAgLyogZW1wdHkgKi9cbiAgfS5uYW1lID09PSAnc29tZXRoaW5nJztcblxuICB2YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMkYiB8fCBERVNDUklQVE9SUyRiICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKTtcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IHtcbiAgICBFWElTVFM6IEVYSVNUUyxcbiAgICBQUk9QRVI6IFBST1BFUixcbiAgICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxuICB9O1xuXG4gIHZhciBvYmplY3REZWZpbmVQcm9wZXJ0aWVzID0ge307XG5cbiAgdmFyIHRvSW50ZWdlck9ySW5maW5pdHkkMSA9IHRvSW50ZWdlck9ySW5maW5pdHkkNDtcbiAgdmFyIG1heCQzID0gTWF0aC5tYXg7XG4gIHZhciBtaW4kMSA9IE1hdGgubWluOyAvLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbiAgLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuICAvLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxuXG4gIHZhciB0b0Fic29sdXRlSW5kZXgkNSA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgdmFyIGludGVnZXIgPSB0b0ludGVnZXJPckluZmluaXR5JDEoaW5kZXgpO1xuICAgIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heCQzKGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluJDEoaW50ZWdlciwgbGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdG9JbmRleGVkT2JqZWN0JDkgPSB0b0luZGV4ZWRPYmplY3QkYjtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCQ0ID0gdG9BYnNvbHV0ZUluZGV4JDU7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSQ4ID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDsgLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cblxuICB2YXIgY3JlYXRlTWV0aG9kJDIgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCQ5KCR0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSQ4KE8pO1xuICAgICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4JDQoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgICAgdmFyIHZhbHVlOyAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuXG4gICAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgICB2YWx1ZSA9IE9baW5kZXgrK107IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG5cbiAgICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTsgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgICAgfSBlbHNlIGZvciAoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGFycmF5SW5jbHVkZXMgPSB7XG4gICAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgICBpbmNsdWRlczogY3JlYXRlTWV0aG9kJDIodHJ1ZSksXG4gICAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gICAgaW5kZXhPZjogY3JlYXRlTWV0aG9kJDIoZmFsc2UpXG4gIH07XG5cbiAgdmFyIHVuY3VycnlUaGlzJGUgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xuICB2YXIgaGFzT3duJDkgPSBoYXNPd25Qcm9wZXJ0eV8xO1xuICB2YXIgdG9JbmRleGVkT2JqZWN0JDggPSB0b0luZGV4ZWRPYmplY3QkYjtcbiAgdmFyIGluZGV4T2YgPSBhcnJheUluY2x1ZGVzLmluZGV4T2Y7XG4gIHZhciBoaWRkZW5LZXlzJDQgPSBoaWRkZW5LZXlzJDY7XG4gIHZhciBwdXNoJDQgPSB1bmN1cnJ5VGhpcyRlKFtdLnB1c2gpO1xuXG4gIHZhciBvYmplY3RLZXlzSW50ZXJuYWwgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0JDgob2JqZWN0KTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG5cbiAgICBmb3IgKGtleSBpbiBPKSAhaGFzT3duJDkoaGlkZGVuS2V5cyQ0LCBrZXkpICYmIGhhc093biQ5KE8sIGtleSkgJiYgcHVzaCQ0KHJlc3VsdCwga2V5KTsgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuXG5cbiAgICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093biQ5KE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaCQ0KHJlc3VsdCwga2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBlbnVtQnVnS2V5cyQzID0gWydjb25zdHJ1Y3RvcicsICdoYXNPd25Qcm9wZXJ0eScsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXTtcblxuICB2YXIgaW50ZXJuYWxPYmplY3RLZXlzJDEgPSBvYmplY3RLZXlzSW50ZXJuYWw7XG4gIHZhciBlbnVtQnVnS2V5cyQyID0gZW51bUJ1Z0tleXMkMzsgLy8gYE9iamVjdC5rZXlzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWtleXMgLS0gc2FmZVxuXG4gIHZhciBvYmplY3RLZXlzJDQgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzJDEoTywgZW51bUJ1Z0tleXMkMik7XG4gIH07XG5cbiAgdmFyIERFU0NSSVBUT1JTJGEgPSBkZXNjcmlwdG9ycztcbiAgdmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gdjhQcm90b3R5cGVEZWZpbmVCdWc7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQzID0gb2JqZWN0RGVmaW5lUHJvcGVydHk7XG4gIHZhciBhbk9iamVjdCQ5ID0gYW5PYmplY3QkYjtcbiAgdmFyIHRvSW5kZXhlZE9iamVjdCQ3ID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciBvYmplY3RLZXlzJDMgPSBvYmplY3RLZXlzJDQ7IC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcblxuICBvYmplY3REZWZpbmVQcm9wZXJ0aWVzLmYgPSBERVNDUklQVE9SUyRhICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gICAgYW5PYmplY3QkOShPKTtcbiAgICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QkNyhQcm9wZXJ0aWVzKTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMkMyhQcm9wZXJ0aWVzKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5O1xuXG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQzLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG5cbiAgICByZXR1cm4gTztcbiAgfTtcblxuICB2YXIgZ2V0QnVpbHRJbiQ1ID0gZ2V0QnVpbHRJbiQ5O1xuICB2YXIgaHRtbCQxID0gZ2V0QnVpbHRJbiQ1KCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcblxuICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xuICB2YXIgYW5PYmplY3QkOCA9IGFuT2JqZWN0JGI7XG4gIHZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlJDEgPSBvYmplY3REZWZpbmVQcm9wZXJ0aWVzO1xuICB2YXIgZW51bUJ1Z0tleXMkMSA9IGVudW1CdWdLZXlzJDM7XG4gIHZhciBoaWRkZW5LZXlzJDMgPSBoaWRkZW5LZXlzJDY7XG4gIHZhciBodG1sID0gaHRtbCQxO1xuICB2YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50JDE7XG4gIHZhciBzaGFyZWRLZXkkMiA9IHNoYXJlZEtleSQ0O1xuICB2YXIgR1QgPSAnPic7XG4gIHZhciBMVCA9ICc8JztcbiAgdmFyIFBST1RPVFlQRSQxID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbiAgdmFyIElFX1BST1RPJDEgPSBzaGFyZWRLZXkkMignSUVfUFJPVE8nKTtcblxuICB2YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKiBlbXB0eSAqL1xuICB9O1xuXG4gIHZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG4gIH07IC8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG5cblxuICB2YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gICAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gICAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuXG4gICAgcmV0dXJuIHRlbXA7XG4gIH07IC8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcblxuXG4gIHZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gICAgdmFyIGlmcmFtZURvY3VtZW50O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuXG4gICAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gICAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gICAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICAgIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xuICB9OyAvLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4gIC8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gIC8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4gIC8vIGF2b2lkIElFIEdDIGJ1Z1xuXG5cbiAgdmFyIGFjdGl2ZVhEb2N1bWVudDtcblxuICB2YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLyogaWdub3JlICovXG4gICAgfVxuXG4gICAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSAvLyBvbGQgSUVcbiAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcblxuICAgIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cyQxLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEUkMV1bZW51bUJ1Z0tleXMkMVtsZW5ndGhdXTtcblxuICAgIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbiAgfTtcblxuICBoaWRkZW5LZXlzJDNbSUVfUFJPVE8kMV0gPSB0cnVlOyAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuXG4gIHZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHJlc3VsdDtcblxuICAgIGlmIChPICE9PSBudWxsKSB7XG4gICAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRSQxXSA9IGFuT2JqZWN0JDgoTyk7XG4gICAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEUkMV0gPSBudWxsOyAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG5cbiAgICAgIHJlc3VsdFtJRV9QUk9UTyQxXSA9IE87XG4gICAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuXG4gICAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUkMS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG4gIH07XG5cbiAgdmFyIGZhaWxzJGcgPSBmYWlscyRyO1xuICB2YXIgY29ycmVjdFByb3RvdHlwZUdldHRlciA9ICFmYWlscyRnKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGKCkge1xuICAgICAgLyogZW1wdHkgKi9cbiAgICB9XG5cbiAgICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xuICB9KTtcblxuICB2YXIgZ2xvYmFsJGwgPSBnbG9iYWwkTTtcbiAgdmFyIGhhc093biQ4ID0gaGFzT3duUHJvcGVydHlfMTtcbiAgdmFyIGlzQ2FsbGFibGUkNSA9IGlzQ2FsbGFibGUkaDtcbiAgdmFyIHRvT2JqZWN0JDkgPSB0b09iamVjdCRlO1xuICB2YXIgc2hhcmVkS2V5JDEgPSBzaGFyZWRLZXkkNDtcbiAgdmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiQxID0gY29ycmVjdFByb3RvdHlwZUdldHRlcjtcbiAgdmFyIElFX1BST1RPID0gc2hhcmVkS2V5JDEoJ0lFX1BST1RPJyk7XG4gIHZhciBPYmplY3QkNCA9IGdsb2JhbCRsLk9iamVjdDtcbiAgdmFyIE9iamVjdFByb3RvdHlwZSQyID0gT2JqZWN0JDQucHJvdG90eXBlOyAvLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcblxuICB2YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIkMSA/IE9iamVjdCQ0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgICB2YXIgb2JqZWN0ID0gdG9PYmplY3QkOShPKTtcbiAgICBpZiAoaGFzT3duJDgob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcblxuICAgIGlmIChpc0NhbGxhYmxlJDUoY29uc3RydWN0b3IpICYmIG9iamVjdCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBPYmplY3QkNCA/IE9iamVjdFByb3RvdHlwZSQyIDogbnVsbDtcbiAgfTtcblxuICB2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDMgPSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNjtcblxuICB2YXIgcmVkZWZpbmUkNCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVudW1lcmFibGUpIHRhcmdldFtrZXldID0gdmFsdWU7ZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMyh0YXJnZXQsIGtleSwgdmFsdWUpO1xuICB9O1xuXG4gIHZhciBmYWlscyRmID0gZmFpbHMkcjtcbiAgdmFyIGlzQ2FsbGFibGUkNCA9IGlzQ2FsbGFibGUkaDtcbiAgdmFyIGNyZWF0ZSRhID0gb2JqZWN0Q3JlYXRlO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YkNiA9IG9iamVjdEdldFByb3RvdHlwZU9mO1xuICB2YXIgcmVkZWZpbmUkMyA9IHJlZGVmaW5lJDQ7XG4gIHZhciB3ZWxsS25vd25TeW1ib2wkZCA9IHdlbGxLbm93blN5bWJvbCRqO1xuICB2YXIgSVRFUkFUT1IkNSA9IHdlbGxLbm93blN5bWJvbCRkKCdpdGVyYXRvcicpO1xuICB2YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyQxID0gZmFsc2U7IC8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSQxLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG4gIC8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cblxuICBpZiAoW10ua2V5cykge1xuICAgIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7IC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuXG4gICAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTJDEgPSB0cnVlO2Vsc2Uge1xuICAgICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YkNihnZXRQcm90b3R5cGVPZiQ2KGFycmF5SXRlcmF0b3IpKTtcbiAgICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlJDEgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSQxID09IHVuZGVmaW5lZCB8fCBmYWlscyRmKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9IHt9OyAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcblxuICAgIHJldHVybiBJdGVyYXRvclByb3RvdHlwZSQxW0lURVJBVE9SJDVdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG4gIH0pO1xuICBpZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUkMSA9IHt9O2Vsc2UgSXRlcmF0b3JQcm90b3R5cGUkMSA9IGNyZWF0ZSRhKEl0ZXJhdG9yUHJvdG90eXBlJDEpOyAvLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcblxuICBpZiAoIWlzQ2FsbGFibGUkNChJdGVyYXRvclByb3RvdHlwZSQxW0lURVJBVE9SJDVdKSkge1xuICAgIHJlZGVmaW5lJDMoSXRlcmF0b3JQcm90b3R5cGUkMSwgSVRFUkFUT1IkNSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaXRlcmF0b3JzQ29yZSA9IHtcbiAgICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUkMSxcbiAgICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTJDFcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUJDEgPSB0b1N0cmluZ1RhZ1N1cHBvcnQ7XG4gIHZhciBjbGFzc29mJDkgPSBjbGFzc29mJGM7IC8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5cbiAgdmFyIG9iamVjdFRvU3RyaW5nID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUJDEgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZiQ5KHRoaXMpICsgJ10nO1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSB0b1N0cmluZ1RhZ1N1cHBvcnQ7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSQ2ID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZjtcbiAgdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQyID0gY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDY7XG4gIHZhciBoYXNPd24kNyA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciB0b1N0cmluZyQ1ID0gb2JqZWN0VG9TdHJpbmc7XG4gIHZhciB3ZWxsS25vd25TeW1ib2wkYyA9IHdlbGxLbm93blN5bWJvbCRqO1xuICB2YXIgVE9fU1RSSU5HX1RBRyQxID0gd2VsbEtub3duU3ltYm9sJGMoJ3RvU3RyaW5nVGFnJyk7XG5cbiAgdmFyIHNldFRvU3RyaW5nVGFnJDUgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDLCBTRVRfTUVUSE9EKSB7XG4gICAgaWYgKGl0KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGU7XG5cbiAgICAgIGlmICghaGFzT3duJDcodGFyZ2V0LCBUT19TVFJJTkdfVEFHJDEpKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5JDYodGFyZ2V0LCBUT19TVFJJTkdfVEFHJDEsIHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IFRBR1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKFNFVF9NRVRIT0QgJiYgIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMih0YXJnZXQsICd0b1N0cmluZycsIHRvU3RyaW5nJDUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaXRlcmF0b3JzID0ge307XG5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gaXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbiAgdmFyIGNyZWF0ZSQ5ID0gb2JqZWN0Q3JlYXRlO1xuICB2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDIgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNTtcbiAgdmFyIHNldFRvU3RyaW5nVGFnJDQgPSBzZXRUb1N0cmluZ1RhZyQ1O1xuICB2YXIgSXRlcmF0b3JzJDUgPSBpdGVyYXRvcnM7XG5cbiAgdmFyIHJldHVyblRoaXMkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciQxID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICAgIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICAgIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlJDkoSXRlcmF0b3JQcm90b3R5cGUsIHtcbiAgICAgIG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQyKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KVxuICAgIH0pO1xuICAgIHNldFRvU3RyaW5nVGFnJDQoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICAgIEl0ZXJhdG9ycyQ1W1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcyQxO1xuICAgIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xuICB9O1xuXG4gIHZhciBnbG9iYWwkayA9IGdsb2JhbCRNO1xuICB2YXIgaXNDYWxsYWJsZSQzID0gaXNDYWxsYWJsZSRoO1xuICB2YXIgU3RyaW5nJDEgPSBnbG9iYWwkay5TdHJpbmc7XG4gIHZhciBUeXBlRXJyb3IkYSA9IGdsb2JhbCRrLlR5cGVFcnJvcjtcblxuICB2YXIgYVBvc3NpYmxlUHJvdG90eXBlJDEgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUkMyhhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgICB0aHJvdyBUeXBlRXJyb3IkYShcIkNhbid0IHNldCBcIiArIFN0cmluZyQxKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG4gIHZhciB1bmN1cnJ5VGhpcyRkID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGFuT2JqZWN0JDcgPSBhbk9iamVjdCRiO1xuICB2YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gYVBvc3NpYmxlUHJvdG90eXBlJDE7IC8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuICAvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5cbiAgdmFyIG9iamVjdFNldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgICB2YXIgdGVzdCA9IHt9O1xuICAgIHZhciBzZXR0ZXI7XG5cbiAgICB0cnkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgICAgc2V0dGVyID0gdW5jdXJyeVRoaXMkZChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgICAgc2V0dGVyKHRlc3QsIFtdKTtcbiAgICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvKiBlbXB0eSAqL1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgYW5PYmplY3QkNyhPKTtcbiAgICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7ZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgcmV0dXJuIE87XG4gICAgfTtcbiAgfSgpIDogdW5kZWZpbmVkKTtcblxuICB2YXIgJCR3ID0gX2V4cG9ydDtcbiAgdmFyIGNhbGwkNiA9IGZ1bmN0aW9uQ2FsbDtcbiAgdmFyIEZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZTtcbiAgdmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yJDE7XG4gIHZhciBnZXRQcm90b3R5cGVPZiQ1ID0gb2JqZWN0R2V0UHJvdG90eXBlT2Y7XG4gIHZhciBzZXRUb1N0cmluZ1RhZyQzID0gc2V0VG9TdHJpbmdUYWckNTtcbiAgdmFyIHJlZGVmaW5lJDIgPSByZWRlZmluZSQ0O1xuICB2YXIgd2VsbEtub3duU3ltYm9sJGIgPSB3ZWxsS25vd25TeW1ib2wkajtcbiAgdmFyIEl0ZXJhdG9ycyQ0ID0gaXRlcmF0b3JzO1xuICB2YXIgSXRlcmF0b3JzQ29yZSA9IGl0ZXJhdG9yc0NvcmU7XG4gIHZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSQxID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbiAgdmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG4gIHZhciBJVEVSQVRPUiQ0ID0gd2VsbEtub3duU3ltYm9sJGIoJ2l0ZXJhdG9yJyk7XG4gIHZhciBLRVlTID0gJ2tleXMnO1xuICB2YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG4gIHZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG4gIHZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBkZWZpbmVJdGVyYXRvciQzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAgIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG5cbiAgICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgICBjYXNlIEtFWVM6XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIFZBTFVFUzpcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBFTlRSSUVTOlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpO1xuICAgICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICAgIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gICAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1IkNF0gfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXSB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICAgIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gICAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICAgIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTsgLy8gZml4IG5hdGl2ZVxuXG4gICAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiQ1KGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcblxuICAgICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuXG5cbiAgICAgICAgc2V0VG9TdHJpbmdUYWckMyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgICBJdGVyYXRvcnMkNFtUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgICB9XG4gICAgfSAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG5cblxuICAgIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSQxICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgICAge1xuICAgICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuXG4gICAgICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbCQ2KG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcblxuXG4gICAgaWYgKERFRkFVTFQpIHtcbiAgICAgIG1ldGhvZHMgPSB7XG4gICAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgICB9O1xuICAgICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgICAgcmVkZWZpbmUkMihJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgJCR3KHtcbiAgICAgICAgdGFyZ2V0OiBOQU1FLFxuICAgICAgICBwcm90bzogdHJ1ZSxcbiAgICAgICAgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRVxuICAgICAgfSwgbWV0aG9kcyk7XG4gICAgfSAvLyBkZWZpbmUgaXRlcmF0b3JcblxuXG4gICAgaWYgKChGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SJDRdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICAgIHJlZGVmaW5lJDIoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SJDQsIGRlZmF1bHRJdGVyYXRvciwge1xuICAgICAgICBuYW1lOiBERUZBVUxUXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBJdGVyYXRvcnMkNFtOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcbiAgICByZXR1cm4gbWV0aG9kcztcbiAgfTtcblxuICB2YXIgY2hhckF0JDEgPSBzdHJpbmdNdWx0aWJ5dGUuY2hhckF0O1xuICB2YXIgdG9TdHJpbmckNCA9IHRvU3RyaW5nJDc7XG4gIHZhciBJbnRlcm5hbFN0YXRlTW9kdWxlJDQgPSBpbnRlcm5hbFN0YXRlO1xuICB2YXIgZGVmaW5lSXRlcmF0b3IkMiA9IGRlZmluZUl0ZXJhdG9yJDM7XG4gIHZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbiAgdmFyIHNldEludGVybmFsU3RhdGUkNCA9IEludGVybmFsU3RhdGVNb2R1bGUkNC5zZXQ7XG4gIHZhciBnZXRJbnRlcm5hbFN0YXRlJDIgPSBJbnRlcm5hbFN0YXRlTW9kdWxlJDQuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7IC8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcblxuICBkZWZpbmVJdGVyYXRvciQyKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICAgIHNldEludGVybmFsU3RhdGUkNCh0aGlzLCB7XG4gICAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgICBzdHJpbmc6IHRvU3RyaW5nJDQoaXRlcmF0ZWQpLFxuICAgICAgaW5kZXg6IDBcbiAgICB9KTsgLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbiAgfSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlJDIodGhpcyk7XG4gICAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgICB2YXIgcG9pbnQ7XG4gICAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZG9uZTogdHJ1ZVxuICAgIH07XG4gICAgcG9pbnQgPSBjaGFyQXQkMShzdHJpbmcsIGluZGV4KTtcbiAgICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIGNhbGwkNSA9IGZ1bmN0aW9uQ2FsbDtcbiAgdmFyIGFuT2JqZWN0JDYgPSBhbk9iamVjdCRiO1xuICB2YXIgZ2V0TWV0aG9kJDEgPSBnZXRNZXRob2QkMztcblxuICB2YXIgaXRlcmF0b3JDbG9zZSQyID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICAgIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgICBhbk9iamVjdCQ2KGl0ZXJhdG9yKTtcblxuICAgIHRyeSB7XG4gICAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZCQxKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG5cbiAgICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgICAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlubmVyUmVzdWx0ID0gY2FsbCQ1KGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlubmVyRXJyb3IgPSB0cnVlO1xuICAgICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgICB9XG5cbiAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICAgIGFuT2JqZWN0JDYoaW5uZXJSZXN1bHQpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICB2YXIgYW5PYmplY3QkNSA9IGFuT2JqZWN0JGI7XG4gIHZhciBpdGVyYXRvckNsb3NlJDEgPSBpdGVyYXRvckNsb3NlJDI7IC8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcblxuICB2YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyQxID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCQ1KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlJDEoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHdlbGxLbm93blN5bWJvbCRhID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciBJdGVyYXRvcnMkMyA9IGl0ZXJhdG9ycztcbiAgdmFyIElURVJBVE9SJDMgPSB3ZWxsS25vd25TeW1ib2wkYSgnaXRlcmF0b3InKTtcbiAgdmFyIEFycmF5UHJvdG90eXBlJGEgPSBBcnJheS5wcm90b3R5cGU7IC8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcblxuICB2YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kJDIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzJDMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlJGFbSVRFUkFUT1IkM10gPT09IGl0KTtcbiAgfTtcblxuICB2YXIgdG9Qcm9wZXJ0eUtleSQxID0gdG9Qcm9wZXJ0eUtleSQ0O1xuICB2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUkMiA9IG9iamVjdERlZmluZVByb3BlcnR5O1xuICB2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDEgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNTtcblxuICB2YXIgY3JlYXRlUHJvcGVydHkkNiA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvcGVydHlLZXkgPSB0b1Byb3BlcnR5S2V5JDEoa2V5KTtcbiAgICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQyLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDEoMCwgdmFsdWUpKTtlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgY2xhc3NvZiQ4ID0gY2xhc3NvZiRjO1xuICB2YXIgZ2V0TWV0aG9kID0gZ2V0TWV0aG9kJDM7XG4gIHZhciBJdGVyYXRvcnMkMiA9IGl0ZXJhdG9ycztcbiAgdmFyIHdlbGxLbm93blN5bWJvbCQ5ID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciBJVEVSQVRPUiQyID0gd2VsbEtub3duU3ltYm9sJDkoJ2l0ZXJhdG9yJyk7XG5cbiAgdmFyIGdldEl0ZXJhdG9yTWV0aG9kJDggPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gZ2V0TWV0aG9kKGl0LCBJVEVSQVRPUiQyKSB8fCBnZXRNZXRob2QoaXQsICdAQGl0ZXJhdG9yJykgfHwgSXRlcmF0b3JzJDJbY2xhc3NvZiQ4KGl0KV07XG4gIH07XG5cbiAgdmFyIGdsb2JhbCRqID0gZ2xvYmFsJE07XG4gIHZhciBjYWxsJDQgPSBmdW5jdGlvbkNhbGw7XG4gIHZhciBhQ2FsbGFibGUkMSA9IGFDYWxsYWJsZSQ3O1xuICB2YXIgYW5PYmplY3QkNCA9IGFuT2JqZWN0JGI7XG4gIHZhciB0cnlUb1N0cmluZyQyID0gdHJ5VG9TdHJpbmckNDtcbiAgdmFyIGdldEl0ZXJhdG9yTWV0aG9kJDcgPSBnZXRJdGVyYXRvck1ldGhvZCQ4O1xuICB2YXIgVHlwZUVycm9yJDkgPSBnbG9iYWwkai5UeXBlRXJyb3I7XG5cbiAgdmFyIGdldEl0ZXJhdG9yJDcgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kJDcoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgICBpZiAoYUNhbGxhYmxlJDEoaXRlcmF0b3JNZXRob2QpKSByZXR1cm4gYW5PYmplY3QkNChjYWxsJDQoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7XG4gICAgdGhyb3cgVHlwZUVycm9yJDkodHJ5VG9TdHJpbmckMihhcmd1bWVudCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICB9O1xuXG4gIHZhciBnbG9iYWwkaSA9IGdsb2JhbCRNO1xuICB2YXIgYmluZCQzID0gZnVuY3Rpb25CaW5kQ29udGV4dDtcbiAgdmFyIGNhbGwkMyA9IGZ1bmN0aW9uQ2FsbDtcbiAgdmFyIHRvT2JqZWN0JDggPSB0b09iamVjdCRlO1xuICB2YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmckMTtcbiAgdmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCQxID0gaXNBcnJheUl0ZXJhdG9yTWV0aG9kJDI7XG4gIHZhciBpc0NvbnN0cnVjdG9yJDIgPSBpc0NvbnN0cnVjdG9yJDQ7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSQ3ID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIGNyZWF0ZVByb3BlcnR5JDUgPSBjcmVhdGVQcm9wZXJ0eSQ2O1xuICB2YXIgZ2V0SXRlcmF0b3IkNiA9IGdldEl0ZXJhdG9yJDc7XG4gIHZhciBnZXRJdGVyYXRvck1ldGhvZCQ2ID0gZ2V0SXRlcmF0b3JNZXRob2QkODtcbiAgdmFyIEFycmF5JDQgPSBnbG9iYWwkaS5BcnJheTsgLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cblxuICB2YXIgYXJyYXlGcm9tID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2VcbiAgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqL1xuICApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0JDgoYXJyYXlMaWtlKTtcbiAgICB2YXIgSVNfQ09OU1RSVUNUT1IgPSBpc0NvbnN0cnVjdG9yJDIodGhpcyk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZCQzKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZCQ2KE8pO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7IC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG5cbiAgICBpZiAoaXRlcmF0b3JNZXRob2QgJiYgISh0aGlzID09IEFycmF5JDQgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kJDEoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvciQ2KE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG5cbiAgICAgIGZvciAoOyAhKHN0ZXAgPSBjYWxsJDMobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5JDUocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZSQ3KE8pO1xuICAgICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcyhsZW5ndGgpIDogQXJyYXkkNChsZW5ndGgpO1xuXG4gICAgICBmb3IgKDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eSQ1KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgd2VsbEtub3duU3ltYm9sJDggPSB3ZWxsS25vd25TeW1ib2wkajtcbiAgdmFyIElURVJBVE9SJDEgPSB3ZWxsS25vd25TeW1ib2wkOCgnaXRlcmF0b3InKTtcbiAgdmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgdmFyIGNhbGxlZCA9IDA7XG4gICAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiAhIWNhbGxlZCsrXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SJDFdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuXG4gICAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IDI7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLyogZW1wdHkgKi9cbiAgfVxuXG4gIHZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24kMSA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIG9iamVjdCA9IHt9O1xuXG4gICAgICBvYmplY3RbSVRFUkFUT1IkMV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIGV4ZWMob2JqZWN0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLyogZW1wdHkgKi9cbiAgICB9XG5cbiAgICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG4gIH07XG5cbiAgdmFyICQkdiA9IF9leHBvcnQ7XG4gIHZhciBmcm9tJDYgPSBhcnJheUZyb207XG4gIHZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24kMTtcbiAgdmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG4gIH0pOyAvLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuXG4gICQkdih7XG4gICAgdGFyZ2V0OiAnQXJyYXknLFxuICAgIHN0YXQ6IHRydWUsXG4gICAgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OXG4gIH0sIHtcbiAgICBmcm9tOiBmcm9tJDZcbiAgfSk7XG5cbiAgdmFyIHBhdGgkbCA9IHBhdGgkcTtcbiAgdmFyIGZyb20kNSA9IHBhdGgkbC5BcnJheS5mcm9tO1xuXG4gIHZhciBwYXJlbnQkTiA9IGZyb20kNTtcbiAgdmFyIGZyb20kNCA9IHBhcmVudCROO1xuXG4gIHZhciBmcm9tJDMgPSBmcm9tJDQ7XG5cbiAgdmFyIHRvSW5kZXhlZE9iamVjdCQ2ID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciBJdGVyYXRvcnMkMSA9IGl0ZXJhdG9ycztcbiAgdmFyIEludGVybmFsU3RhdGVNb2R1bGUkMyA9IGludGVybmFsU3RhdGU7XG4gIG9iamVjdERlZmluZVByb3BlcnR5LmY7XG4gIHZhciBkZWZpbmVJdGVyYXRvciQxID0gZGVmaW5lSXRlcmF0b3IkMztcbiAgdmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbiAgdmFyIHNldEludGVybmFsU3RhdGUkMyA9IEludGVybmFsU3RhdGVNb2R1bGUkMy5zZXQ7XG4gIHZhciBnZXRJbnRlcm5hbFN0YXRlJDEgPSBJbnRlcm5hbFN0YXRlTW9kdWxlJDMuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTsgLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4gIC8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4gIC8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gIC8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5cbiAgZGVmaW5lSXRlcmF0b3IkMShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSQzKHRoaXMsIHtcbiAgICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QkNihpdGVyYXRlZCksXG4gICAgICAvLyB0YXJnZXRcbiAgICAgIGluZGV4OiAwLFxuICAgICAgLy8gbmV4dCBpbmRleFxuICAgICAga2luZDoga2luZCAvLyBraW5kXG5cbiAgICB9KTsgLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG4gIH0sIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlJDEodGhpcyk7XG4gICAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gICAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcblxuICAgIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4ge1xuICAgICAgdmFsdWU6IGluZGV4LFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9O1xuICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4ge1xuICAgICAgdmFsdWU6IHRhcmdldFtpbmRleF0sXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9O1xuICB9LCAndmFsdWVzJyk7IC8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5cbiAgSXRlcmF0b3JzJDEuQXJndW1lbnRzID0gSXRlcmF0b3JzJDEuQXJyYXk7IC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcblxuICB2YXIgZ2V0SXRlcmF0b3JNZXRob2QkNSA9IGdldEl0ZXJhdG9yTWV0aG9kJDg7XG4gIHZhciBnZXRJdGVyYXRvck1ldGhvZF8xID0gZ2V0SXRlcmF0b3JNZXRob2QkNTtcblxuICAvLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5cbiAgdmFyIGRvbUl0ZXJhYmxlcyA9IHtcbiAgICBDU1NSdWxlTGlzdDogMCxcbiAgICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICAgIENTU1ZhbHVlTGlzdDogMCxcbiAgICBDbGllbnRSZWN0TGlzdDogMCxcbiAgICBET01SZWN0TGlzdDogMCxcbiAgICBET01TdHJpbmdMaXN0OiAwLFxuICAgIERPTVRva2VuTGlzdDogMSxcbiAgICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgICBGaWxlTGlzdDogMCxcbiAgICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gICAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gICAgTWVkaWFMaXN0OiAwLFxuICAgIE1pbWVUeXBlQXJyYXk6IDAsXG4gICAgTmFtZWROb2RlTWFwOiAwLFxuICAgIE5vZGVMaXN0OiAxLFxuICAgIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gICAgUGx1Z2luOiAwLFxuICAgIFBsdWdpbkFycmF5OiAwLFxuICAgIFNWR0xlbmd0aExpc3Q6IDAsXG4gICAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgICBTVkdQb2ludExpc3Q6IDAsXG4gICAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICAgIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gICAgU3R5bGVTaGVldExpc3Q6IDAsXG4gICAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgICBUZXh0VHJhY2tMaXN0OiAwLFxuICAgIFRvdWNoTGlzdDogMFxuICB9O1xuXG4gIHZhciBET01JdGVyYWJsZXMkNCA9IGRvbUl0ZXJhYmxlcztcbiAgdmFyIGdsb2JhbCRoID0gZ2xvYmFsJE07XG4gIHZhciBjbGFzc29mJDcgPSBjbGFzc29mJGM7XG4gIHZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMSA9IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ2O1xuICB2YXIgSXRlcmF0b3JzID0gaXRlcmF0b3JzO1xuICB2YXIgd2VsbEtub3duU3ltYm9sJDcgPSB3ZWxsS25vd25TeW1ib2wkajtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2wkNygndG9TdHJpbmdUYWcnKTtcblxuICBmb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzJDQpIHtcbiAgICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbCRoW0NPTExFQ1RJT05fTkFNRV07XG4gICAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuXG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgY2xhc3NvZiQ3KENvbGxlY3Rpb25Qcm90b3R5cGUpICE9PSBUT19TVFJJTkdfVEFHKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cblxuICAgIEl0ZXJhdG9yc1tDT0xMRUNUSU9OX05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xuICB9XG5cbiAgdmFyIHBhcmVudCRNID0gZ2V0SXRlcmF0b3JNZXRob2RfMTtcbiAgdmFyIGdldEl0ZXJhdG9yTWV0aG9kJDQgPSBwYXJlbnQkTTtcblxuICB2YXIgcGFyZW50JEwgPSBnZXRJdGVyYXRvck1ldGhvZCQ0O1xuICB2YXIgZ2V0SXRlcmF0b3JNZXRob2QkMyA9IHBhcmVudCRMO1xuXG4gIHZhciBwYXJlbnQkSyA9IGdldEl0ZXJhdG9yTWV0aG9kJDM7XG4gIHZhciBnZXRJdGVyYXRvck1ldGhvZCQyID0gcGFyZW50JEs7XG5cbiAgdmFyIGdldEl0ZXJhdG9yTWV0aG9kJDEgPSBnZXRJdGVyYXRvck1ldGhvZCQyO1xuXG4gIHZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzID0ge307XG5cbiAgdmFyIGludGVybmFsT2JqZWN0S2V5cyA9IG9iamVjdEtleXNJbnRlcm5hbDtcbiAgdmFyIGVudW1CdWdLZXlzID0gZW51bUJ1Z0tleXMkMztcbiAgdmFyIGhpZGRlbktleXMkMiA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpOyAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5cbiAgb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gICAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzJDIpO1xuICB9O1xuXG4gIHZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSB7fTtcblxuICB2YXIgZ2xvYmFsJGcgPSBnbG9iYWwkTTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCQzID0gdG9BYnNvbHV0ZUluZGV4JDU7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSQ2ID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIGNyZWF0ZVByb3BlcnR5JDQgPSBjcmVhdGVQcm9wZXJ0eSQ2O1xuICB2YXIgQXJyYXkkMyA9IGdsb2JhbCRnLkFycmF5O1xuICB2YXIgbWF4JDIgPSBNYXRoLm1heDtcblxuICB2YXIgYXJyYXlTbGljZVNpbXBsZSA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlJDYoTyk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgkMyhzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4JDMoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5JDMobWF4JDIoZmluIC0gaywgMCkpO1xuXG4gICAgZm9yICh2YXIgbiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBjcmVhdGVQcm9wZXJ0eSQ0KHJlc3VsdCwgbiwgT1trXSk7XG5cbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbiAgdmFyIGNsYXNzb2YkNiA9IGNsYXNzb2ZSYXckMTtcbiAgdmFyIHRvSW5kZXhlZE9iamVjdCQ1ID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyQxID0gb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcy5mO1xuICB2YXIgYXJyYXlTbGljZSQzID0gYXJyYXlTbGljZVNpbXBsZTtcbiAgdmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbiAgdmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyQxKGl0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGFycmF5U2xpY2UkMyh3aW5kb3dOYW1lcyk7XG4gICAgfVxuICB9OyAvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5cblxuICBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZiQ2KGl0KSA9PSAnV2luZG93JyA/IGdldFdpbmRvd05hbWVzKGl0KSA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzJDEodG9JbmRleGVkT2JqZWN0JDUoaXQpKTtcbiAgfTtcblxuICB2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzID0ge307XG5cbiAgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHZhciB3ZWxsS25vd25TeW1ib2xXcmFwcGVkID0ge307XG5cbiAgdmFyIHdlbGxLbm93blN5bWJvbCQ2ID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHdlbGxLbm93blN5bWJvbFdyYXBwZWQuZiA9IHdlbGxLbm93blN5bWJvbCQ2O1xuXG4gIHZhciBwYXRoJGsgPSBwYXRoJHE7XG4gIHZhciBoYXNPd24kNiA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlJDEgPSB3ZWxsS25vd25TeW1ib2xXcmFwcGVkO1xuICB2YXIgZGVmaW5lUHJvcGVydHkkNSA9IG9iamVjdERlZmluZVByb3BlcnR5LmY7XG5cbiAgdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCRsID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgICB2YXIgU3ltYm9sID0gcGF0aCRrLlN5bWJvbCB8fCAocGF0aCRrLlN5bWJvbCA9IHt9KTtcbiAgICBpZiAoIWhhc093biQ2KFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5JDUoU3ltYm9sLCBOQU1FLCB7XG4gICAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSQxLmYoTkFNRSlcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgJCR1ID0gX2V4cG9ydDtcbiAgdmFyIGdsb2JhbCRmID0gZ2xvYmFsJE07XG4gIHZhciBnZXRCdWlsdEluJDQgPSBnZXRCdWlsdEluJDk7XG4gIHZhciBhcHBseSQ0ID0gZnVuY3Rpb25BcHBseTtcbiAgdmFyIGNhbGwkMiA9IGZ1bmN0aW9uQ2FsbDtcbiAgdmFyIHVuY3VycnlUaGlzJGMgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xuICB2YXIgREVTQ1JJUFRPUlMkOSA9IGRlc2NyaXB0b3JzO1xuICB2YXIgTkFUSVZFX1NZTUJPTCA9IG5hdGl2ZVN5bWJvbDtcbiAgdmFyIGZhaWxzJGUgPSBmYWlscyRyO1xuICB2YXIgaGFzT3duJDUgPSBoYXNPd25Qcm9wZXJ0eV8xO1xuICB2YXIgaXNBcnJheSRhID0gaXNBcnJheSRkO1xuICB2YXIgaXNDYWxsYWJsZSQyID0gaXNDYWxsYWJsZSRoO1xuICB2YXIgaXNPYmplY3QkNyA9IGlzT2JqZWN0JGY7XG4gIHZhciBpc1Byb3RvdHlwZU9mJGMgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xuICB2YXIgaXNTeW1ib2wgPSBpc1N5bWJvbCQzO1xuICB2YXIgYW5PYmplY3QkMyA9IGFuT2JqZWN0JGI7XG4gIHZhciB0b09iamVjdCQ3ID0gdG9PYmplY3QkZTtcbiAgdmFyIHRvSW5kZXhlZE9iamVjdCQ0ID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciB0b1Byb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleSQ0O1xuICB2YXIgJHRvU3RyaW5nID0gdG9TdHJpbmckNztcbiAgdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQ1O1xuICB2YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gb2JqZWN0Q3JlYXRlO1xuICB2YXIgb2JqZWN0S2V5cyQyID0gb2JqZWN0S2V5cyQ0O1xuICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSQyID0gb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcztcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IG9iamVjdEdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbDtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQyID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlJDEgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQxID0gb2JqZWN0RGVmaW5lUHJvcGVydHk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gb2JqZWN0RGVmaW5lUHJvcGVydGllcztcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlJDEgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgdmFyIGFycmF5U2xpY2UkMiA9IGFycmF5U2xpY2UkNTtcbiAgdmFyIHJlZGVmaW5lJDEgPSByZWRlZmluZSQ0O1xuICB2YXIgc2hhcmVkID0gc2hhcmVkJDQuZXhwb3J0cztcbiAgdmFyIHNoYXJlZEtleSA9IHNoYXJlZEtleSQ0O1xuICB2YXIgaGlkZGVuS2V5cyQxID0gaGlkZGVuS2V5cyQ2O1xuICB2YXIgdWlkJDEgPSB1aWQkNDtcbiAgdmFyIHdlbGxLbm93blN5bWJvbCQ1ID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gd2VsbEtub3duU3ltYm9sV3JhcHBlZDtcbiAgdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCRrID0gZGVmaW5lV2VsbEtub3duU3ltYm9sJGw7XG4gIHZhciBzZXRUb1N0cmluZ1RhZyQyID0gc2V0VG9TdHJpbmdUYWckNTtcbiAgdmFyIEludGVybmFsU3RhdGVNb2R1bGUkMiA9IGludGVybmFsU3RhdGU7XG4gIHZhciAkZm9yRWFjaCQxID0gYXJyYXlJdGVyYXRpb24uZm9yRWFjaDtcbiAgdmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG4gIHZhciBTWU1CT0wgPSAnU3ltYm9sJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sJDUoJ3RvUHJpbWl0aXZlJyk7XG4gIHZhciBzZXRJbnRlcm5hbFN0YXRlJDIgPSBJbnRlcm5hbFN0YXRlTW9kdWxlJDIuc2V0O1xuICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUkMi5nZXR0ZXJGb3IoU1lNQk9MKTtcbiAgdmFyIE9iamVjdFByb3RvdHlwZSQxID0gT2JqZWN0W1BST1RPVFlQRV07XG4gIHZhciAkU3ltYm9sID0gZ2xvYmFsJGYuU3ltYm9sO1xuICB2YXIgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbCAmJiAkU3ltYm9sW1BST1RPVFlQRV07XG4gIHZhciBUeXBlRXJyb3IkOCA9IGdsb2JhbCRmLlR5cGVFcnJvcjtcbiAgdmFyIFFPYmplY3QgPSBnbG9iYWwkZi5RT2JqZWN0O1xuICB2YXIgJHN0cmluZ2lmeSQxID0gZ2V0QnVpbHRJbiQ0KCdKU09OJywgJ3N0cmluZ2lmeScpO1xuICB2YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUkMS5mO1xuICB2YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQxLmY7XG4gIHZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG4gIHZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlJDEuZjtcbiAgdmFyIHB1c2gkMyA9IHVuY3VycnlUaGlzJGMoW10ucHVzaCk7XG4gIHZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG4gIHZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG4gIHZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG4gIHZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG4gIHZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpOyAvLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcblxuICB2YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7IC8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xuXG4gIHZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMkOSAmJiBmYWlscyRlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7XG4gICAgICAgICAgdmFsdWU6IDdcbiAgICAgICAgfSkuYTtcbiAgICAgIH1cbiAgICB9KSkuYSAhPSA3O1xuICB9KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gICAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMShPYmplY3RQcm90b3R5cGUkMSwgUCk7XG4gICAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGUkMVtQXTtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcblxuICAgIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSQxKSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUkMSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gICAgfVxuICB9IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbiAgdmFyIHdyYXAkMSA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZShTeW1ib2xQcm90b3R5cGUpO1xuICAgIHNldEludGVybmFsU3RhdGUkMihzeW1ib2wsIHtcbiAgICAgIHR5cGU6IFNZTUJPTCxcbiAgICAgIHRhZzogdGFnLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUyQ5KSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9O1xuXG4gIHZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gICAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSQxKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gICAgYW5PYmplY3QkMyhPKTtcbiAgICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgICBhbk9iamVjdCQzKEF0dHJpYnV0ZXMpO1xuXG4gICAgaWYgKGhhc093biQ1KEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICAgIGlmICghaGFzT3duJDUoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGhhc093biQ1KE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywge1xuICAgICAgICAgIGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH07XG5cbiAgdmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gICAgYW5PYmplY3QkMyhPKTtcbiAgICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdCQ0KFByb3BlcnRpZXMpO1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyQyKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgICAkZm9yRWFjaCQxKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMkOSB8fCBjYWxsJDIoJHByb3BlcnR5SXNFbnVtZXJhYmxlJDEsIHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIE87XG4gIH07XG5cbiAgdmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICAgIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xuICB9O1xuXG4gIHZhciAkcHJvcGVydHlJc0VudW1lcmFibGUkMSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgICB2YXIgUCA9IHRvUHJvcGVydHlLZXkoVik7XG4gICAgdmFyIGVudW1lcmFibGUgPSBjYWxsJDIobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUkMSAmJiBoYXNPd24kNShBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duJDUoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duJDUodGhpcywgUCkgfHwgIWhhc093biQ1KEFsbFN5bWJvbHMsIFApIHx8IGhhc093biQ1KHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7XG4gIH07XG5cbiAgdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICAgIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdCQ0KE8pO1xuICAgIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICAgIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlJDEgJiYgaGFzT3duJDUoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duJDUoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICAgIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEoaXQsIGtleSk7XG5cbiAgICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24kNShBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duJDUoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTtcblxuICB2YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdCQ0KE8pKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgJGZvckVhY2gkMShuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFoYXNPd24kNShBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24kNShoaWRkZW5LZXlzJDEsIGtleSkpIHB1c2gkMyhyZXN1bHQsIGtleSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gICAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGUkMTtcbiAgICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0JDQoTykpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAkZm9yRWFjaCQxKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoaGFzT3duJDUoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duJDUoT2JqZWN0UHJvdG90eXBlJDEsIGtleSkpKSB7XG4gICAgICAgIHB1c2gkMyhyZXN1bHQsIEFsbFN5bWJvbHNba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTsgLy8gYFN5bWJvbGAgY29uc3RydWN0b3JcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcblxuXG4gIGlmICghTkFUSVZFX1NZTUJPTCkge1xuICAgICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGVPZiRjKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IFR5cGVFcnJvciQ4KCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgICB2YXIgdGFnID0gdWlkJDEoZGVzY3JpcHRpb24pO1xuXG4gICAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUkMSkgY2FsbCQyKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgICBpZiAoaGFzT3duJDUodGhpcywgSElEREVOKSAmJiBoYXNPd24kNSh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChERVNDUklQVE9SUyQ5ICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlJDEsIHRhZywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHNldDogc2V0dGVyXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB3cmFwJDEodGFnLCBkZXNjcmlwdGlvbik7XG4gICAgfTtcblxuICAgIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcbiAgICByZWRlZmluZSQxKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gICAgfSk7XG4gICAgcmVkZWZpbmUkMSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgICAgcmV0dXJuIHdyYXAkMSh1aWQkMShkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgICB9KTtcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSQxLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGUkMTtcbiAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQxLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gICAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlJDEuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSQyLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQyLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gICAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiB3cmFwJDEod2VsbEtub3duU3ltYm9sJDUobmFtZSksIG5hbWUpO1xuICAgIH07XG5cbiAgICBpZiAoREVTQ1JJUFRPUlMkOSkge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAkJHUoe1xuICAgIGdsb2JhbDogdHJ1ZSxcbiAgICB3cmFwOiB0cnVlLFxuICAgIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsXG4gICAgc2hhbTogIU5BVElWRV9TWU1CT0xcbiAgfSwge1xuICAgIFN5bWJvbDogJFN5bWJvbFxuICB9KTtcbiAgJGZvckVhY2gkMShvYmplY3RLZXlzJDIoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBkZWZpbmVXZWxsS25vd25TeW1ib2wkayhuYW1lKTtcbiAgfSk7XG4gICQkdSh7XG4gICAgdGFyZ2V0OiBTWU1CT0wsXG4gICAgc3RhdDogdHJ1ZSxcbiAgICBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MXG4gIH0sIHtcbiAgICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBzdHJpbmcgPSAkdG9TdHJpbmcoa2V5KTtcbiAgICAgIGlmIChoYXNPd24kNShTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgfSxcbiAgICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gICAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvciQ4KHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgICBpZiAoaGFzT3duJDUoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgICB9LFxuICAgIHVzZVNldHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgVVNFX1NFVFRFUiA9IHRydWU7XG4gICAgfSxcbiAgICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFVTRV9TRVRURVIgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICAkJHUoe1xuICAgIHRhcmdldDogJ09iamVjdCcsXG4gICAgc3RhdDogdHJ1ZSxcbiAgICBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLFxuICAgIHNoYW06ICFERVNDUklQVE9SUyQ5XG4gIH0sIHtcbiAgICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gICAgY3JlYXRlOiAkY3JlYXRlLFxuICAgIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gICAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxuICB9KTtcbiAgJCR1KHtcbiAgICB0YXJnZXQ6ICdPYmplY3QnLFxuICAgIHN0YXQ6IHRydWUsXG4gICAgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTFxuICB9LCB7XG4gICAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gICAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gICAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICAgIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xuICB9KTsgLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG5cbiAgJCR1KHtcbiAgICB0YXJnZXQ6ICdPYmplY3QnLFxuICAgIHN0YXQ6IHRydWUsXG4gICAgZm9yY2VkOiBmYWlscyRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQyLmYoMSk7XG4gICAgfSlcbiAgfSwge1xuICAgIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlJDIuZih0b09iamVjdCQ3KGl0KSk7XG4gICAgfVxuICB9KTsgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcblxuICBpZiAoJHN0cmluZ2lmeSQxKSB7XG4gICAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzJGUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTsgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cblxuICAgICAgcmV0dXJuICRzdHJpbmdpZnkkMShbc3ltYm9sXSkgIT0gJ1tudWxsXScgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5JDEoe1xuICAgICAgICBhOiBzeW1ib2xcbiAgICAgIH0pICE9ICd7fScgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkkMShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgICB9KTtcbiAgICAkJHUoe1xuICAgICAgdGFyZ2V0OiAnSlNPTicsXG4gICAgICBzdGF0OiB0cnVlLFxuICAgICAgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRllcbiAgICB9LCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UkMihhcmd1bWVudHMpO1xuICAgICAgICB2YXIgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIGlmICghaXNPYmplY3QkNyhyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuXG4gICAgICAgIGlmICghaXNBcnJheSRhKHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc0NhbGxhYmxlJDIoJHJlcGxhY2VyKSkgdmFsdWUgPSBjYWxsJDIoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICAgIHJldHVybiBhcHBseSQ0KCRzdHJpbmdpZnkkMSwgbnVsbCwgYXJncyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuXG5cbiAgaWYgKCFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICAgIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlLnZhbHVlT2Y7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgLmxlbmd0aFxuXG4gICAgcmVkZWZpbmUkMShTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIC8vIFRPRE86IGltcHJvdmUgaGludCBsb2dpY1xuICAgICAgcmV0dXJuIGNhbGwkMih2YWx1ZU9mLCB0aGlzKTtcbiAgICB9KTtcbiAgfSAvLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcblxuXG4gIHNldFRvU3RyaW5nVGFnJDIoJFN5bWJvbCwgU1lNQk9MKTtcbiAgaGlkZGVuS2V5cyQxW0hJRERFTl0gPSB0cnVlO1xuXG4gIHZhciBwYXRoJGogPSBwYXRoJHE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMkMiA9IHBhdGgkai5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHZhciBwYXJlbnQkSiA9IGdldE93blByb3BlcnR5U3ltYm9scyQyO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzJDEgPSBwYXJlbnQkSjtcblxuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzJDE7XG5cbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciQzID0ge2V4cG9ydHM6IHt9fTtcblxuICB2YXIgJCR0ID0gX2V4cG9ydDtcbiAgdmFyIGZhaWxzJGQgPSBmYWlscyRyO1xuICB2YXIgdG9JbmRleGVkT2JqZWN0JDMgPSB0b0luZGV4ZWRPYmplY3QkYjtcbiAgdmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mO1xuICB2YXIgREVTQ1JJUFRPUlMkOCA9IGRlc2NyaXB0b3JzO1xuICB2YXIgRkFJTFNfT05fUFJJTUlUSVZFUyQzID0gZmFpbHMkZChmdW5jdGlvbiAoKSB7XG4gICAgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpO1xuICB9KTtcbiAgdmFyIEZPUkNFRCQ1ID0gIURFU0NSSVBUT1JTJDggfHwgRkFJTFNfT05fUFJJTUlUSVZFUyQzOyAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuXG4gICQkdCh7XG4gICAgdGFyZ2V0OiAnT2JqZWN0JyxcbiAgICBzdGF0OiB0cnVlLFxuICAgIGZvcmNlZDogRk9SQ0VEJDUsXG4gICAgc2hhbTogIURFU0NSSVBUT1JTJDhcbiAgfSwge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0JDMoaXQpLCBrZXkpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHBhdGgkaSA9IHBhdGgkcTtcbiAgdmFyIE9iamVjdCQzID0gcGF0aCRpLk9iamVjdDtcblxuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDIgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMy5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gT2JqZWN0JDMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICB9O1xuXG4gIGlmIChPYmplY3QkMy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iuc2hhbSkgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDIuc2hhbSA9IHRydWU7XG5cbiAgdmFyIHBhcmVudCRJID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDMuZXhwb3J0cztcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciQxID0gcGFyZW50JEk7XG5cbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciQxO1xuXG4gIHZhciBnZXRCdWlsdEluJDMgPSBnZXRCdWlsdEluJDk7XG4gIHZhciB1bmN1cnJ5VGhpcyRiID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUkMSA9IG9iamVjdEdldE93blByb3BlcnR5TmFtZXM7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUkMSA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scztcbiAgdmFyIGFuT2JqZWN0JDIgPSBhbk9iamVjdCRiO1xuICB2YXIgY29uY2F0JDUgPSB1bmN1cnJ5VGhpcyRiKFtdLmNvbmNhdCk7IC8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcblxuICB2YXIgb3duS2V5cyQ2ID0gZ2V0QnVpbHRJbiQzKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlJDEuZihhbk9iamVjdCQyKGl0KSk7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQxLmY7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdCQ1KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbiAgfTtcblxuICB2YXIgJCRzID0gX2V4cG9ydDtcbiAgdmFyIERFU0NSSVBUT1JTJDcgPSBkZXNjcmlwdG9ycztcbiAgdmFyIG93bktleXMkNSA9IG93bktleXMkNjtcbiAgdmFyIHRvSW5kZXhlZE9iamVjdCQyID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIHZhciBjcmVhdGVQcm9wZXJ0eSQzID0gY3JlYXRlUHJvcGVydHkkNjsgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuXG4gICQkcyh7XG4gICAgdGFyZ2V0OiAnT2JqZWN0JyxcbiAgICBzdGF0OiB0cnVlLFxuICAgIHNoYW06ICFERVNDUklQVE9SUyQ3XG4gIH0sIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QkMihvYmplY3QpO1xuICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgICAgdmFyIGtleXMgPSBvd25LZXlzJDUoTyk7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcblxuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkkMyhyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcGF0aCRoID0gcGF0aCRxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyQyID0gcGF0aCRoLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuXG4gIHZhciBwYXJlbnQkSCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMkMjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMkMSA9IHBhcmVudCRIO1xuXG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyQxO1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0aWVzJDQgPSB7ZXhwb3J0czoge319O1xuXG4gIHZhciAkJHIgPSBfZXhwb3J0O1xuICB2YXIgREVTQ1JJUFRPUlMkNiA9IGRlc2NyaXB0b3JzO1xuICB2YXIgZGVmaW5lUHJvcGVydGllcyQzID0gb2JqZWN0RGVmaW5lUHJvcGVydGllcy5mOyAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5cbiAgJCRyKHtcbiAgICB0YXJnZXQ6ICdPYmplY3QnLFxuICAgIHN0YXQ6IHRydWUsXG4gICAgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyAhPT0gZGVmaW5lUHJvcGVydGllcyQzLFxuICAgIHNoYW06ICFERVNDUklQVE9SUyQ2XG4gIH0sIHtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzOiBkZWZpbmVQcm9wZXJ0aWVzJDNcbiAgfSk7XG5cbiAgdmFyIHBhdGgkZyA9IHBhdGgkcTtcbiAgdmFyIE9iamVjdCQyID0gcGF0aCRnLk9iamVjdDtcblxuICB2YXIgZGVmaW5lUHJvcGVydGllcyQyID0gZGVmaW5lUHJvcGVydGllcyQ0LmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKFQsIEQpIHtcbiAgICByZXR1cm4gT2JqZWN0JDIuZGVmaW5lUHJvcGVydGllcyhULCBEKTtcbiAgfTtcblxuICBpZiAoT2JqZWN0JDIuZGVmaW5lUHJvcGVydGllcy5zaGFtKSBkZWZpbmVQcm9wZXJ0aWVzJDIuc2hhbSA9IHRydWU7XG5cbiAgdmFyIHBhcmVudCRHID0gZGVmaW5lUHJvcGVydGllcyQ0LmV4cG9ydHM7XG4gIHZhciBkZWZpbmVQcm9wZXJ0aWVzJDEgPSBwYXJlbnQkRztcblxuICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IGRlZmluZVByb3BlcnRpZXMkMTtcblxuICB2YXIgZGVmaW5lUHJvcGVydHkkNCA9IGRlZmluZVByb3BlcnR5JGE7XG5cbiAgdmFyICQkcSA9IF9leHBvcnQ7XG4gIHZhciBpc0FycmF5JDkgPSBpc0FycmF5JGQ7IC8vIGBBcnJheS5pc0FycmF5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5pc2FycmF5XG5cbiAgJCRxKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgc3RhdDogdHJ1ZVxuICB9LCB7XG4gICAgaXNBcnJheTogaXNBcnJheSQ5XG4gIH0pO1xuXG4gIHZhciBwYXRoJGYgPSBwYXRoJHE7XG4gIHZhciBpc0FycmF5JDggPSBwYXRoJGYuQXJyYXkuaXNBcnJheTtcblxuICB2YXIgcGFyZW50JEYgPSBpc0FycmF5JDg7XG4gIHZhciBpc0FycmF5JDcgPSBwYXJlbnQkRjtcblxuICB2YXIgcGFyZW50JEUgPSBpc0FycmF5JDc7XG4gIHZhciBpc0FycmF5JDYgPSBwYXJlbnQkRTtcblxuICB2YXIgcGFyZW50JEQgPSBpc0FycmF5JDY7XG4gIHZhciBpc0FycmF5JDUgPSBwYXJlbnQkRDtcblxuICB2YXIgaXNBcnJheSQ0ID0gaXNBcnJheSQ1O1xuXG4gIGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgICBpZiAoaXNBcnJheSQ0KGFycikpIHJldHVybiBhcnI7XG4gIH1cblxuICB2YXIgJCRwID0gX2V4cG9ydDtcbiAgdmFyIGdsb2JhbCRlID0gZ2xvYmFsJE07XG4gIHZhciBmYWlscyRjID0gZmFpbHMkcjtcbiAgdmFyIGlzQXJyYXkkMyA9IGlzQXJyYXkkZDtcbiAgdmFyIGlzT2JqZWN0JDYgPSBpc09iamVjdCRmO1xuICB2YXIgdG9PYmplY3QkNiA9IHRvT2JqZWN0JGU7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSQ1ID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIGNyZWF0ZVByb3BlcnR5JDIgPSBjcmVhdGVQcm9wZXJ0eSQ2O1xuICB2YXIgYXJyYXlTcGVjaWVzQ3JlYXRlJDEgPSBhcnJheVNwZWNpZXNDcmVhdGUkNDtcbiAgdmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkMiA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkNTtcbiAgdmFyIHdlbGxLbm93blN5bWJvbCQ0ID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciBWOF9WRVJTSU9OID0gZW5naW5lVjhWZXJzaW9uO1xuICB2YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2wkNCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG4gIHZhciBNQVhfU0FGRV9JTlRFR0VSJDEgPSAweDFGRkZGRkZGRkZGRkZGO1xuICB2YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG4gIHZhciBUeXBlRXJyb3IkNyA9IGdsb2JhbCRlLlR5cGVFcnJvcjsgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcblxuICB2YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzJGMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICAgIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG4gIH0pO1xuICB2YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCQyKCdjb25jYXQnKTtcblxuICB2YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgICBpZiAoIWlzT2JqZWN0JDYoTykpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5JDMoTyk7XG4gIH07XG5cbiAgdmFyIEZPUkNFRCQ0ID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDsgLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbiAgLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG5cbiAgJCRwKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWUsXG4gICAgZm9yY2VkOiBGT1JDRUQkNFxuICB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QkNih0aGlzKTtcbiAgICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlJDEoTywgMCk7XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG5cbiAgICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgICAgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UkNShFKTtcbiAgICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIkMSkgdGhyb3cgVHlwZUVycm9yJDcoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcblxuICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eSQyKEEsIG4sIEVba10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIkMSkgdGhyb3cgVHlwZUVycm9yJDcoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgICBjcmVhdGVQcm9wZXJ0eSQyKEEsIG4rKywgRSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgQS5sZW5ndGggPSBuO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGogPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5hc3luY2l0ZXJhdG9yXG5cbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sJGooJ2FzeW5jSXRlcmF0b3InKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGkgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5oYXNJbnN0YW5jZWAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkaSgnaGFzSW5zdGFuY2UnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGggPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGVgIHdlbGwta25vd24gc3ltYm9sXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmlzY29uY2F0c3ByZWFkYWJsZVxuXG4gIGRlZmluZVdlbGxLbm93blN5bWJvbCRoKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGcgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkZygnaXRlcmF0b3InKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGYgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkZignbWF0Y2gnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGUgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5tYXRjaEFsbGAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hhbGxcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkZSgnbWF0Y2hBbGwnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGQgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5yZXBsYWNlYCB3ZWxsLWtub3duIHN5bWJvbFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5yZXBsYWNlXG5cbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sJGQoJ3JlcGxhY2UnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGMgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5zZWFyY2hgIHdlbGwta25vd24gc3ltYm9sXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNlYXJjaFxuXG4gIGRlZmluZVdlbGxLbm93blN5bWJvbCRjKCdzZWFyY2gnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGIgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5zcGVjaWVzYCB3ZWxsLWtub3duIHN5bWJvbFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGVjaWVzXG5cbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sJGIoJ3NwZWNpZXMnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJGEgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5zcGxpdGAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BsaXRcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkYSgnc3BsaXQnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJDkgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC50b1ByaW1pdGl2ZWAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9wcmltaXRpdmVcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkOSgndG9QcmltaXRpdmUnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJDggPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9zdHJpbmd0YWdcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkOCgndG9TdHJpbmdUYWcnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJDcgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC51bnNjb3BhYmxlc2Agd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudW5zY29wYWJsZXNcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkNygndW5zY29wYWJsZXMnKTtcblxuICB2YXIgZ2xvYmFsJGQgPSBnbG9iYWwkTTtcbiAgdmFyIHNldFRvU3RyaW5nVGFnJDEgPSBzZXRUb1N0cmluZ1RhZyQ1OyAvLyBKU09OW0BAdG9TdHJpbmdUYWddIHByb3BlcnR5XG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5cbiAgc2V0VG9TdHJpbmdUYWckMShnbG9iYWwkZC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG4gIHZhciBwYXRoJGUgPSBwYXRoJHE7XG4gIHZhciBzeW1ib2wkNSA9IHBhdGgkZS5TeW1ib2w7XG5cbiAgdmFyIHBhcmVudCRDID0gc3ltYm9sJDU7XG4gIHZhciBzeW1ib2wkNCA9IHBhcmVudCRDO1xuXG4gIHZhciBwYXJlbnQkQiA9IHN5bWJvbCQ0O1xuICB2YXIgc3ltYm9sJDMgPSBwYXJlbnQkQjtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJDYgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5hc3luY0Rpc3Bvc2VgIHdlbGwta25vd24gc3ltYm9sXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXVzaW5nLXN0YXRlbWVudFxuXG4gIGRlZmluZVdlbGxLbm93blN5bWJvbCQ2KCdhc3luY0Rpc3Bvc2UnKTtcblxuICB2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sJDUgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDsgLy8gYFN5bWJvbC5kaXNwb3NlYCB3ZWxsLWtub3duIHN5bWJvbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC11c2luZy1zdGF0ZW1lbnRcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkNSgnZGlzcG9zZScpO1xuXG4gIHZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wkNCA9IGRlZmluZVdlbGxLbm93blN5bWJvbCRsOyAvLyBgU3ltYm9sLm1hdGNoZXJgIHdlbGwta25vd24gc3ltYm9sXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXBhdHRlcm4tbWF0Y2hpbmdcblxuICBkZWZpbmVXZWxsS25vd25TeW1ib2wkNCgnbWF0Y2hlcicpO1xuXG4gIHZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wkMyA9IGRlZmluZVdlbGxLbm93blN5bWJvbCRsOyAvLyBgU3ltYm9sLm1ldGFkYXRhYCB3ZWxsLWtub3duIHN5bWJvbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1kZWNvcmF0b3JzXG5cbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sJDMoJ21ldGFkYXRhJyk7XG5cbiAgdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCQyID0gZGVmaW5lV2VsbEtub3duU3ltYm9sJGw7IC8vIGBTeW1ib2wub2JzZXJ2YWJsZWAgd2VsbC1rbm93biBzeW1ib2xcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuXG4gIGRlZmluZVdlbGxLbm93blN5bWJvbCQyKCdvYnNlcnZhYmxlJyk7XG5cbiAgdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCQxID0gZGVmaW5lV2VsbEtub3duU3ltYm9sJGw7IC8vIGBTeW1ib2wucGF0dGVybk1hdGNoYCB3ZWxsLWtub3duIHN5bWJvbFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wYXR0ZXJuLW1hdGNoaW5nXG5cbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sJDEoJ3BhdHRlcm5NYXRjaCcpO1xuXG4gIHZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSBkZWZpbmVXZWxsS25vd25TeW1ib2wkbDtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlQWxsJyk7XG5cbiAgdmFyIHBhcmVudCRBID0gc3ltYm9sJDM7IC8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG4gIC8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgXG5cbiAgdmFyIHN5bWJvbCQyID0gcGFyZW50JEE7XG5cbiAgdmFyIHN5bWJvbCQxID0gc3ltYm9sJDI7XG5cbiAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICAgIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBzeW1ib2wkMSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnZXRJdGVyYXRvck1ldGhvZCQxKGFycikgfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICAgIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICB2YXIgX24gPSB0cnVlO1xuICAgIHZhciBfZCA9IGZhbHNlO1xuXG4gICAgdmFyIF9zLCBfZTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2QgPSB0cnVlO1xuICAgICAgX2UgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICB2YXIgJCRvID0gX2V4cG9ydDtcbiAgdmFyIGdsb2JhbCRjID0gZ2xvYmFsJE07XG4gIHZhciBpc0FycmF5JDIgPSBpc0FycmF5JGQ7XG4gIHZhciBpc0NvbnN0cnVjdG9yJDEgPSBpc0NvbnN0cnVjdG9yJDQ7XG4gIHZhciBpc09iamVjdCQ1ID0gaXNPYmplY3QkZjtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCQyID0gdG9BYnNvbHV0ZUluZGV4JDU7XG4gIHZhciBsZW5ndGhPZkFycmF5TGlrZSQ0ID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIHRvSW5kZXhlZE9iamVjdCQxID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciBjcmVhdGVQcm9wZXJ0eSQxID0gY3JlYXRlUHJvcGVydHkkNjtcbiAgdmFyIHdlbGxLbm93blN5bWJvbCQzID0gd2VsbEtub3duU3ltYm9sJGo7XG4gIHZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0JDEgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0JDU7XG4gIHZhciB1biRTbGljZSA9IGFycmF5U2xpY2UkNTtcbiAgdmFyIEhBU19TUEVDSUVTX1NVUFBPUlQkMSA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQkMSgnc2xpY2UnKTtcbiAgdmFyIFNQRUNJRVMkMSA9IHdlbGxLbm93blN5bWJvbCQzKCdzcGVjaWVzJyk7XG4gIHZhciBBcnJheSQyID0gZ2xvYmFsJGMuQXJyYXk7XG4gIHZhciBtYXgkMSA9IE1hdGgubWF4OyAvLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2VcbiAgLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuXG4gICQkbyh7XG4gICAgdGFyZ2V0OiAnQXJyYXknLFxuICAgIHByb3RvOiB0cnVlLFxuICAgIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQkMVxuICB9LCB7XG4gICAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0JDEodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UkNChPKTtcbiAgICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4JDIoc3RhcnQsIGxlbmd0aCk7XG4gICAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4JDIoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7IC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuXG4gICAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcblxuICAgICAgaWYgKGlzQXJyYXkkMihPKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7IC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG5cbiAgICAgICAgaWYgKGlzQ29uc3RydWN0b3IkMShDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSQyIHx8IGlzQXJyYXkkMihDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0JDUoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTJDFdO1xuICAgICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5JDIgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB1biRTbGljZShPLCBrLCBmaW4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5JDIgOiBDb25zdHJ1Y3RvcikobWF4JDEoZmluIC0gaywgMCkpO1xuXG4gICAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkkMShyZXN1bHQsIG4sIE9ba10pO1xuXG4gICAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJGUgPSBlbnRyeVZpcnR1YWwkaztcbiAgdmFyIHNsaWNlJDYgPSBlbnRyeVZpcnR1YWwkZSgnQXJyYXknKS5zbGljZTtcblxuICB2YXIgaXNQcm90b3R5cGVPZiRiID0gb2JqZWN0SXNQcm90b3R5cGVPZjtcbiAgdmFyIG1ldGhvZCQ5ID0gc2xpY2UkNjtcbiAgdmFyIEFycmF5UHJvdG90eXBlJDkgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIHNsaWNlJDUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgb3duID0gaXQuc2xpY2U7XG4gICAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSQ5IHx8IGlzUHJvdG90eXBlT2YkYihBcnJheVByb3RvdHlwZSQ5LCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZSQ5LnNsaWNlID8gbWV0aG9kJDkgOiBvd247XG4gIH07XG5cbiAgdmFyIHBhcmVudCR6ID0gc2xpY2UkNTtcbiAgdmFyIHNsaWNlJDQgPSBwYXJlbnQkejtcblxuICB2YXIgcGFyZW50JHkgPSBzbGljZSQ0O1xuICB2YXIgc2xpY2UkMyA9IHBhcmVudCR5O1xuXG4gIHZhciBwYXJlbnQkeCA9IHNsaWNlJDM7XG4gIHZhciBzbGljZSQyID0gcGFyZW50JHg7XG5cbiAgdmFyIHNsaWNlJDEgPSBzbGljZSQyO1xuXG4gIHZhciBwYXJlbnQkdyA9IGZyb20kNDtcbiAgdmFyIGZyb20kMiA9IHBhcmVudCR3O1xuXG4gIHZhciBwYXJlbnQkdiA9IGZyb20kMjtcbiAgdmFyIGZyb20kMSA9IHBhcmVudCR2O1xuXG4gIHZhciBmcm9tID0gZnJvbSQxO1xuXG4gIGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5JDQoYXJyLCBsZW4pIHtcbiAgICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSQ0KG8sIG1pbkxlbikge1xuICAgIHZhciBfY29udGV4dDtcblxuICAgIGlmICghbykgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5JDQobywgbWluTGVuKTtcblxuICAgIHZhciBuID0gc2xpY2UkMShfY29udGV4dCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSkuY2FsbChfY29udGV4dCwgOCwgLTEpO1xuXG4gICAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gZnJvbShvKTtcbiAgICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5JDQobywgbWluTGVuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkkNChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbiAgfVxuXG4gIHZhciBXcmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gd2VsbEtub3duU3ltYm9sV3JhcHBlZDtcbiAgdmFyIGl0ZXJhdG9yJDUgPSBXcmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoJ2l0ZXJhdG9yJyk7XG5cbiAgdmFyIHBhcmVudCR1ID0gaXRlcmF0b3IkNTtcbiAgdmFyIGl0ZXJhdG9yJDQgPSBwYXJlbnQkdTtcblxuICB2YXIgcGFyZW50JHQgPSBpdGVyYXRvciQ0O1xuICB2YXIgaXRlcmF0b3IkMyA9IHBhcmVudCR0O1xuXG4gIHZhciBwYXJlbnQkcyA9IGl0ZXJhdG9yJDM7XG4gIHZhciBpdGVyYXRvciQyID0gcGFyZW50JHM7XG5cbiAgdmFyIGl0ZXJhdG9yJDEgPSBpdGVyYXRvciQyO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gICAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHN5bWJvbCQxICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIGl0ZXJhdG9yJDEgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHN5bWJvbCQxICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gc3ltYm9sJDEgJiYgb2JqICE9PSBzeW1ib2wkMS5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9LCBfdHlwZW9mKG9iaik7XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gICAgaWYgKGlzQXJyYXkkNChhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkkNChhcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gICAgaWYgKHR5cGVvZiBzeW1ib2wkMSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnZXRJdGVyYXRvck1ldGhvZCQxKGl0ZXIpICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIGZyb20oaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkkNChhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xuICB9XG5cbiAgdmFyIHN5bWJvbCA9IHN5bWJvbCQ0O1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkZCA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgY29uY2F0JDQgPSBlbnRyeVZpcnR1YWwkZCgnQXJyYXknKS5jb25jYXQ7XG5cbiAgdmFyIGlzUHJvdG90eXBlT2YkYSA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBtZXRob2QkOCA9IGNvbmNhdCQ0O1xuICB2YXIgQXJyYXlQcm90b3R5cGUkOCA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgY29uY2F0JDMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgb3duID0gaXQuY29uY2F0O1xuICAgIHJldHVybiBpdCA9PT0gQXJyYXlQcm90b3R5cGUkOCB8fCBpc1Byb3RvdHlwZU9mJGEoQXJyYXlQcm90b3R5cGUkOCwgaXQpICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUkOC5jb25jYXQgPyBtZXRob2QkOCA6IG93bjtcbiAgfTtcblxuICB2YXIgcGFyZW50JHIgPSBjb25jYXQkMztcbiAgdmFyIGNvbmNhdCQyID0gcGFyZW50JHI7XG5cbiAgdmFyIGNvbmNhdCQxID0gY29uY2F0JDI7XG5cbiAgdmFyIHNsaWNlID0gc2xpY2UkNDtcblxuICB2YXIgJCRuID0gX2V4cG9ydDtcbiAgdmFyIG93bktleXMkNCA9IG93bktleXMkNjsgLy8gYFJlZmxlY3Qub3duS2V5c2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5vd25rZXlzXG5cbiAgJCRuKHtcbiAgICB0YXJnZXQ6ICdSZWZsZWN0JyxcbiAgICBzdGF0OiB0cnVlXG4gIH0sIHtcbiAgICBvd25LZXlzOiBvd25LZXlzJDRcbiAgfSk7XG5cbiAgdmFyIHBhdGgkZCA9IHBhdGgkcTtcbiAgdmFyIG93bktleXMkMyA9IHBhdGgkZC5SZWZsZWN0Lm93bktleXM7XG5cbiAgdmFyIHBhcmVudCRxID0gb3duS2V5cyQzO1xuICB2YXIgb3duS2V5cyQyID0gcGFyZW50JHE7XG5cbiAgdmFyIG93bktleXMkMSA9IG93bktleXMkMjtcblxuICB2YXIgaXNBcnJheSQxID0gaXNBcnJheSQ3O1xuXG4gIHZhciAkJG0gPSBfZXhwb3J0O1xuICB2YXIgdG9PYmplY3QkNSA9IHRvT2JqZWN0JGU7XG4gIHZhciBuYXRpdmVLZXlzID0gb2JqZWN0S2V5cyQ0O1xuICB2YXIgZmFpbHMkYiA9IGZhaWxzJHI7XG4gIHZhciBGQUlMU19PTl9QUklNSVRJVkVTJDIgPSBmYWlscyRiKGZ1bmN0aW9uICgpIHtcbiAgICBuYXRpdmVLZXlzKDEpO1xuICB9KTsgLy8gYE9iamVjdC5rZXlzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuXG4gICQkbSh7XG4gICAgdGFyZ2V0OiAnT2JqZWN0JyxcbiAgICBzdGF0OiB0cnVlLFxuICAgIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyQyXG4gIH0sIHtcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdCQ1KGl0KSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcGF0aCRjID0gcGF0aCRxO1xuICB2YXIga2V5cyQ2ID0gcGF0aCRjLk9iamVjdC5rZXlzO1xuXG4gIHZhciBwYXJlbnQkcCA9IGtleXMkNjtcbiAgdmFyIGtleXMkNSA9IHBhcmVudCRwO1xuXG4gIHZhciBrZXlzJDQgPSBrZXlzJDU7XG5cbiAgdmFyICQkbCA9IF9leHBvcnQ7XG4gIHZhciBnbG9iYWwkYiA9IGdsb2JhbCRNO1xuICB2YXIgdW5jdXJyeVRoaXMkYSA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBEYXRlJDEgPSBnbG9iYWwkYi5EYXRlO1xuICB2YXIgZ2V0VGltZSA9IHVuY3VycnlUaGlzJGEoRGF0ZSQxLnByb3RvdHlwZS5nZXRUaW1lKTsgLy8gYERhdGUubm93YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLm5vd1xuXG4gICQkbCh7XG4gICAgdGFyZ2V0OiAnRGF0ZScsXG4gICAgc3RhdDogdHJ1ZVxuICB9LCB7XG4gICAgbm93OiBmdW5jdGlvbiBub3coKSB7XG4gICAgICByZXR1cm4gZ2V0VGltZShuZXcgRGF0ZSQxKCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHBhdGgkYiA9IHBhdGgkcTtcbiAgcGF0aCRiLkRhdGUubm93O1xuXG4gIHZhciAkZm9yRWFjaCA9IGFycmF5SXRlcmF0aW9uLmZvckVhY2g7XG4gIHZhciBhcnJheU1ldGhvZElzU3RyaWN0JDMgPSBhcnJheU1ldGhvZElzU3RyaWN0JDU7XG4gIHZhciBTVFJJQ1RfTUVUSE9EJDMgPSBhcnJheU1ldGhvZElzU3RyaWN0JDMoJ2ZvckVhY2gnKTsgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuXG4gIHZhciBhcnJheUZvckVhY2ggPSAhU1RSSUNUX01FVEhPRCQzID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuXG4gIC8qICwgdGhpc0FyZyAqL1xuICApIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuICB9IDogW10uZm9yRWFjaDtcblxuICB2YXIgJCRrID0gX2V4cG9ydDtcbiAgdmFyIGZvckVhY2gkNSA9IGFycmF5Rm9yRWFjaDsgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuXG4gICQkayh7XG4gICAgdGFyZ2V0OiAnQXJyYXknLFxuICAgIHByb3RvOiB0cnVlLFxuICAgIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoJDVcbiAgfSwge1xuICAgIGZvckVhY2g6IGZvckVhY2gkNVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJGMgPSBlbnRyeVZpcnR1YWwkaztcbiAgdmFyIGZvckVhY2gkNCA9IGVudHJ5VmlydHVhbCRjKCdBcnJheScpLmZvckVhY2g7XG5cbiAgdmFyIHBhcmVudCRvID0gZm9yRWFjaCQ0O1xuICB2YXIgZm9yRWFjaCQzID0gcGFyZW50JG87XG5cbiAgdmFyIGNsYXNzb2YkNSA9IGNsYXNzb2YkYztcbiAgdmFyIGhhc093biQ0ID0gaGFzT3duUHJvcGVydHlfMTtcbiAgdmFyIGlzUHJvdG90eXBlT2YkOSA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBtZXRob2QkNyA9IGZvckVhY2gkMztcbiAgdmFyIEFycmF5UHJvdG90eXBlJDcgPSBBcnJheS5wcm90b3R5cGU7XG4gIHZhciBET01JdGVyYWJsZXMkMyA9IHtcbiAgICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gICAgTm9kZUxpc3Q6IHRydWVcbiAgfTtcblxuICB2YXIgZm9yRWFjaCQyID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0LmZvckVhY2g7XG4gICAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSQ3IHx8IGlzUHJvdG90eXBlT2YkOShBcnJheVByb3RvdHlwZSQ3LCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZSQ3LmZvckVhY2ggfHwgaGFzT3duJDQoRE9NSXRlcmFibGVzJDMsIGNsYXNzb2YkNShpdCkpID8gbWV0aG9kJDcgOiBvd247XG4gIH07XG5cbiAgdmFyIGZvckVhY2gkMSA9IGZvckVhY2gkMjtcblxuICB2YXIgJCRqID0gX2V4cG9ydDtcbiAgdmFyIHVuY3VycnlUaGlzJDkgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xuICB2YXIgaXNBcnJheSA9IGlzQXJyYXkkZDtcbiAgdmFyIHVuJFJldmVyc2UgPSB1bmN1cnJ5VGhpcyQ5KFtdLnJldmVyc2UpO1xuICB2YXIgdGVzdCQxID0gWzEsIDJdOyAvLyBgQXJyYXkucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4gIC8vIGZpeCBmb3IgU2FmYXJpIDEyLjAgYnVnXG4gIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODg3OTRcblxuICAkJGooe1xuICAgIHRhcmdldDogJ0FycmF5JyxcbiAgICBwcm90bzogdHJ1ZSxcbiAgICBmb3JjZWQ6IFN0cmluZyh0ZXN0JDEpID09PSBTdHJpbmcodGVzdCQxLnJldmVyc2UoKSlcbiAgfSwge1xuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ24gLS0gZGlydHkgaGFja1xuICAgICAgaWYgKGlzQXJyYXkodGhpcykpIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICByZXR1cm4gdW4kUmV2ZXJzZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkYiA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgcmV2ZXJzZSQzID0gZW50cnlWaXJ0dWFsJGIoJ0FycmF5JykucmV2ZXJzZTtcblxuICB2YXIgaXNQcm90b3R5cGVPZiQ4ID0gb2JqZWN0SXNQcm90b3R5cGVPZjtcbiAgdmFyIG1ldGhvZCQ2ID0gcmV2ZXJzZSQzO1xuICB2YXIgQXJyYXlQcm90b3R5cGUkNiA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgcmV2ZXJzZSQyID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0LnJldmVyc2U7XG4gICAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSQ2IHx8IGlzUHJvdG90eXBlT2YkOChBcnJheVByb3RvdHlwZSQ2LCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZSQ2LnJldmVyc2UgPyBtZXRob2QkNiA6IG93bjtcbiAgfTtcblxuICB2YXIgcGFyZW50JG4gPSByZXZlcnNlJDI7XG4gIHZhciByZXZlcnNlJDEgPSBwYXJlbnQkbjtcblxuICB2YXIgcmV2ZXJzZSA9IHJldmVyc2UkMTtcblxuICB2YXIgJCRpID0gX2V4cG9ydDtcbiAgdmFyIGdsb2JhbCRhID0gZ2xvYmFsJE07XG4gIHZhciB0b0Fic29sdXRlSW5kZXgkMSA9IHRvQWJzb2x1dGVJbmRleCQ1O1xuICB2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHRvSW50ZWdlck9ySW5maW5pdHkkNDtcbiAgdmFyIGxlbmd0aE9mQXJyYXlMaWtlJDMgPSBsZW5ndGhPZkFycmF5TGlrZSRkO1xuICB2YXIgdG9PYmplY3QkNCA9IHRvT2JqZWN0JGU7XG4gIHZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSBhcnJheVNwZWNpZXNDcmVhdGUkNDtcbiAgdmFyIGNyZWF0ZVByb3BlcnR5ID0gY3JlYXRlUHJvcGVydHkkNjtcbiAgdmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0JDU7XG4gIHZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG4gIHZhciBUeXBlRXJyb3IkNiA9IGdsb2JhbCRhLlR5cGVFcnJvcjtcbiAgdmFyIG1heCA9IE1hdGgubWF4O1xuICB2YXIgbWluID0gTWF0aC5taW47XG4gIHZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbiAgdmFyIE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQgPSAnTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZCc7IC8vIGBBcnJheS5wcm90b3R5cGUuc3BsaWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4gIC8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG5cbiAgJCRpKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWUsXG4gICAgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVFxuICB9LCB7XG4gICAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50XG4gICAgLyogLCAuLi5pdGVtcyAqL1xuICAgICkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCQ0KHRoaXMpO1xuICAgICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlJDMoTyk7XG4gICAgICB2YXIgYWN0dWFsU3RhcnQgPSB0b0Fic29sdXRlSW5kZXgkMShzdGFydCwgbGVuKTtcbiAgICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgdmFyIGluc2VydENvdW50LCBhY3R1YWxEZWxldGVDb3VudCwgQSwgaywgZnJvbSwgdG87XG5cbiAgICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5zZXJ0Q291bnQgPSBhY3R1YWxEZWxldGVDb3VudCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbGVuIC0gYWN0dWFsU3RhcnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICAgIGFjdHVhbERlbGV0ZUNvdW50ID0gbWluKG1heCh0b0ludGVnZXJPckluZmluaXR5KGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlbiArIGluc2VydENvdW50IC0gYWN0dWFsRGVsZXRlQ291bnQgPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvciQ2KE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgICAgfVxuXG4gICAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcblxuICAgICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgICAgaWYgKGZyb20gaW4gTykgY3JlYXRlUHJvcGVydHkoQSwgaywgT1tmcm9tXSk7XG4gICAgICB9XG5cbiAgICAgIEEubGVuZ3RoID0gYWN0dWFsRGVsZXRlQ291bnQ7XG5cbiAgICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgIGZvciAoayA9IGFjdHVhbFN0YXJ0OyBrIDwgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO2Vsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgICBPW2sgKyBhY3R1YWxTdGFydF0gPSBhcmd1bWVudHNbayArIDJdO1xuICAgICAgfVxuXG4gICAgICBPLmxlbmd0aCA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkYSA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgc3BsaWNlJDMgPSBlbnRyeVZpcnR1YWwkYSgnQXJyYXknKS5zcGxpY2U7XG5cbiAgdmFyIGlzUHJvdG90eXBlT2YkNyA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBtZXRob2QkNSA9IHNwbGljZSQzO1xuICB2YXIgQXJyYXlQcm90b3R5cGUkNSA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgc3BsaWNlJDIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgb3duID0gaXQuc3BsaWNlO1xuICAgIHJldHVybiBpdCA9PT0gQXJyYXlQcm90b3R5cGUkNSB8fCBpc1Byb3RvdHlwZU9mJDcoQXJyYXlQcm90b3R5cGUkNSwgaXQpICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUkNS5zcGxpY2UgPyBtZXRob2QkNSA6IG93bjtcbiAgfTtcblxuICB2YXIgcGFyZW50JG0gPSBzcGxpY2UkMjtcbiAgdmFyIHNwbGljZSQxID0gcGFyZW50JG07XG5cbiAgdmFyIHNwbGljZSA9IHNwbGljZSQxO1xuXG4gIHZhciBERVNDUklQVE9SUyQ1ID0gZGVzY3JpcHRvcnM7XG4gIHZhciB1bmN1cnJ5VGhpcyQ4ID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIGNhbGwkMSA9IGZ1bmN0aW9uQ2FsbDtcbiAgdmFyIGZhaWxzJGEgPSBmYWlscyRyO1xuICB2YXIgb2JqZWN0S2V5cyQxID0gb2JqZWN0S2V5cyQ0O1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgdmFyIHRvT2JqZWN0JDMgPSB0b09iamVjdCRlO1xuICB2YXIgSW5kZXhlZE9iamVjdCA9IGluZGV4ZWRPYmplY3Q7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcblxuICB2YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuICB2YXIgZGVmaW5lUHJvcGVydHkkMyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbiAgdmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzJDgoW10uY29uY2F0KTsgLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cblxuICB2YXIgb2JqZWN0QXNzaWduID0gISRhc3NpZ24gfHwgZmFpbHMkYShmdW5jdGlvbiAoKSB7XG4gICAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgICBpZiAoREVTQ1JJUFRPUlMkNSAmJiAkYXNzaWduKHtcbiAgICAgIGI6IDFcbiAgICB9LCAkYXNzaWduKGRlZmluZVByb3BlcnR5JDMoe30sICdhJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSQzKHRoaXMsICdiJywge1xuICAgICAgICAgIHZhbHVlOiAzLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLCB7XG4gICAgICBiOiAyXG4gICAgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlOyAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcblxuICAgIHZhciBBID0ge307XG4gICAgdmFyIEIgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlXG5cbiAgICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gICAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgICBBW3N5bWJvbF0gPSA3O1xuICAgIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHtcbiAgICAgIEJbY2hyXSA9IGNocjtcbiAgICB9KTtcbiAgICByZXR1cm4gJGFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMkMSgkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gYWxwaGFiZXQ7XG4gIH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgdmFyIFQgPSB0b09iamVjdCQzKHRhcmdldCk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gMTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcblxuICAgIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdChvYmplY3RLZXlzJDEoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzJDEoUyk7XG4gICAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICB2YXIgaiA9IDA7XG4gICAgICB2YXIga2V5O1xuXG4gICAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICAgIGlmICghREVTQ1JJUFRPUlMkNSB8fCBjYWxsJDEocHJvcGVydHlJc0VudW1lcmFibGUsIFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfSA6ICRhc3NpZ247XG5cbiAgdmFyICQkaCA9IF9leHBvcnQ7XG4gIHZhciBhc3NpZ24kNSA9IG9iamVjdEFzc2lnbjsgLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcblxuICAkJGgoe1xuICAgIHRhcmdldDogJ09iamVjdCcsXG4gICAgc3RhdDogdHJ1ZSxcbiAgICBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiQ1XG4gIH0sIHtcbiAgICBhc3NpZ246IGFzc2lnbiQ1XG4gIH0pO1xuXG4gIHZhciBwYXRoJGEgPSBwYXRoJHE7XG4gIHZhciBhc3NpZ24kNCA9IHBhdGgkYS5PYmplY3QuYXNzaWduO1xuXG4gIHZhciBwYXJlbnQkbCA9IGFzc2lnbiQ0O1xuICB2YXIgYXNzaWduJDMgPSBwYXJlbnQkbDtcblxuICB2YXIgYXNzaWduJDIgPSBhc3NpZ24kMztcblxuICB2YXIgJCRnID0gX2V4cG9ydDtcbiAgdmFyICRpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMuaW5jbHVkZXM7XG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG5cbiAgJCRnKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWVcbiAgfSwge1xuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbFxuICAgIC8qICwgZnJvbUluZGV4ID0gMCAqL1xuICAgICkge1xuICAgICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7IC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcblxuICB2YXIgZW50cnlWaXJ0dWFsJDkgPSBlbnRyeVZpcnR1YWwkaztcbiAgZW50cnlWaXJ0dWFsJDkoJ0FycmF5JykuaW5jbHVkZXM7XG5cbiAgdmFyIGlzT2JqZWN0JDQgPSBpc09iamVjdCRmO1xuICB2YXIgY2xhc3NvZiQ0ID0gY2xhc3NvZlJhdyQxO1xuICB2YXIgd2VsbEtub3duU3ltYm9sJDIgPSB3ZWxsS25vd25TeW1ib2wkajtcbiAgdmFyIE1BVENIJDEgPSB3ZWxsS25vd25TeW1ib2wkMignbWF0Y2gnKTsgLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxuXG4gIHZhciBpc1JlZ2V4cCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBpc1JlZ0V4cDtcbiAgICByZXR1cm4gaXNPYmplY3QkNChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIJDFdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YkNChpdCkgPT0gJ1JlZ0V4cCcpO1xuICB9O1xuXG4gIHZhciBnbG9iYWwkOSA9IGdsb2JhbCRNO1xuICB2YXIgaXNSZWdFeHAgPSBpc1JlZ2V4cDtcbiAgdmFyIFR5cGVFcnJvciQ1ID0gZ2xvYmFsJDkuVHlwZUVycm9yO1xuXG4gIHZhciBub3RBUmVnZXhwID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yJDUoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0O1xuICB9O1xuXG4gIHZhciB3ZWxsS25vd25TeW1ib2wkMSA9IHdlbGxLbm93blN5bWJvbCRqO1xuICB2YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2wkMSgnbWF0Y2gnKTtcblxuICB2YXIgY29ycmVjdElzUmVnZXhwTG9naWMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgICB2YXIgcmVnZXhwID0gLy4vO1xuXG4gICAgdHJ5IHtcbiAgICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgICAgLyogZW1wdHkgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdmFyICQkZiA9IF9leHBvcnQ7XG4gIHZhciB1bmN1cnJ5VGhpcyQ3ID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIG5vdEFSZWdFeHAgPSBub3RBUmVnZXhwO1xuICB2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSQxID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ1O1xuICB2YXIgdG9TdHJpbmckMyA9IHRvU3RyaW5nJDc7XG4gIHZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IGNvcnJlY3RJc1JlZ2V4cExvZ2ljO1xuICB2YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzJDcoJycuaW5kZXhPZik7IC8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG5cbiAgJCRmKHtcbiAgICB0YXJnZXQ6ICdTdHJpbmcnLFxuICAgIHByb3RvOiB0cnVlLFxuICAgIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpXG4gIH0sIHtcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nXG4gICAgLyogLCBwb3NpdGlvbiA9IDAgKi9cbiAgICApIHtcbiAgICAgIHJldHVybiAhIX5zdHJpbmdJbmRleE9mKHRvU3RyaW5nJDMocmVxdWlyZU9iamVjdENvZXJjaWJsZSQxKHRoaXMpKSwgdG9TdHJpbmckMyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJDggPSBlbnRyeVZpcnR1YWwkaztcbiAgZW50cnlWaXJ0dWFsJDgoJ1N0cmluZycpLmluY2x1ZGVzO1xuXG4gIHZhciAkJGUgPSBfZXhwb3J0O1xuICB2YXIgZmFpbHMkOSA9IGZhaWxzJHI7XG4gIHZhciB0b09iamVjdCQyID0gdG9PYmplY3QkZTtcbiAgdmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gb2JqZWN0R2V0UHJvdG90eXBlT2Y7XG4gIHZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSBjb3JyZWN0UHJvdG90eXBlR2V0dGVyO1xuICB2YXIgRkFJTFNfT05fUFJJTUlUSVZFUyQxID0gZmFpbHMkOShmdW5jdGlvbiAoKSB7XG4gICAgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7XG4gIH0pOyAvLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcblxuICAkJGUoe1xuICAgIHRhcmdldDogJ09iamVjdCcsXG4gICAgc3RhdDogdHJ1ZSxcbiAgICBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMkMSxcbiAgICBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSXG4gIH0sIHtcbiAgICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdCQyKGl0KSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcGF0aCQ5ID0gcGF0aCRxO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YkNCA9IHBhdGgkOS5PYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbiAgdmFyIHBhcmVudCRrID0gZ2V0UHJvdG90eXBlT2YkNDtcbiAgdmFyIGdldFByb3RvdHlwZU9mJDMgPSBwYXJlbnQkaztcblxuICB2YXIgREVTQ1JJUFRPUlMkNCA9IGRlc2NyaXB0b3JzO1xuICB2YXIgdW5jdXJyeVRoaXMkNiA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBvYmplY3RLZXlzID0gb2JqZWN0S2V5cyQ0O1xuICB2YXIgdG9JbmRleGVkT2JqZWN0ID0gdG9JbmRleGVkT2JqZWN0JGI7XG4gIHZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcyQ2KCRwcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG4gIHZhciBwdXNoJDIgPSB1bmN1cnJ5VGhpcyQ2KFtdLnB1c2gpOyAvLyBgT2JqZWN0LnsgZW50cmllcywgdmFsdWVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cblxuICB2YXIgY3JlYXRlTWV0aG9kJDEgPSBmdW5jdGlvbiAoVE9fRU5UUklFUykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTtcbiAgICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhciBrZXk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICAgIGtleSA9IGtleXNbaSsrXTtcblxuICAgICAgICBpZiAoIURFU0NSSVBUT1JTJDQgfHwgcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkge1xuICAgICAgICAgIHB1c2gkMihyZXN1bHQsIFRPX0VOVFJJRVMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG9iamVjdFRvQXJyYXkgPSB7XG4gICAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4gICAgZW50cmllczogY3JlYXRlTWV0aG9kJDEodHJ1ZSksXG4gICAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICAgIHZhbHVlczogY3JlYXRlTWV0aG9kJDEoZmFsc2UpXG4gIH07XG5cbiAgdmFyICQkZCA9IF9leHBvcnQ7XG4gIHZhciAkdmFsdWVzID0gb2JqZWN0VG9BcnJheS52YWx1ZXM7IC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG5cbiAgJCRkKHtcbiAgICB0YXJnZXQ6ICdPYmplY3QnLFxuICAgIHN0YXQ6IHRydWVcbiAgfSwge1xuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHBhdGgkOCA9IHBhdGgkcTtcbiAgcGF0aCQ4Lk9iamVjdC52YWx1ZXM7XG5cbiAgdmFyIHdoaXRlc3BhY2VzJDMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICsgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcblxuICB2YXIgdW5jdXJyeVRoaXMkNSA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ1O1xuICB2YXIgdG9TdHJpbmckMiA9IHRvU3RyaW5nJDc7XG4gIHZhciB3aGl0ZXNwYWNlcyQyID0gd2hpdGVzcGFjZXMkMztcbiAgdmFyIHJlcGxhY2UkMSA9IHVuY3VycnlUaGlzJDUoJycucmVwbGFjZSk7XG4gIHZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMkMiArICddJztcbiAgdmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbiAgdmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7IC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cblxuICB2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmckMihyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2UkMShzdHJpbmcsIGx0cmltLCAnJyk7XG4gICAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2UkMShzdHJpbmcsIHJ0cmltLCAnJyk7XG4gICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIHN0cmluZ1RyaW0gPSB7XG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gICAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICAgIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxuICB9O1xuXG4gIHZhciBnbG9iYWwkOCA9IGdsb2JhbCRNO1xuICB2YXIgZmFpbHMkOCA9IGZhaWxzJHI7XG4gIHZhciB1bmN1cnJ5VGhpcyQ0ID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyIHRvU3RyaW5nJDEgPSB0b1N0cmluZyQ3O1xuICB2YXIgdHJpbSA9IHN0cmluZ1RyaW0udHJpbTtcbiAgdmFyIHdoaXRlc3BhY2VzJDEgPSB3aGl0ZXNwYWNlcyQzO1xuICB2YXIgJHBhcnNlSW50JDEgPSBnbG9iYWwkOC5wYXJzZUludDtcbiAgdmFyIFN5bWJvbCQxID0gZ2xvYmFsJDguU3ltYm9sO1xuICB2YXIgSVRFUkFUT1IgPSBTeW1ib2wkMSAmJiBTeW1ib2wkMS5pdGVyYXRvcjtcbiAgdmFyIGhleCA9IC9eWystXT8weC9pO1xuICB2YXIgZXhlYyQxID0gdW5jdXJyeVRoaXMkNChoZXguZXhlYyk7XG4gIHZhciBGT1JDRUQkMyA9ICRwYXJzZUludCQxKHdoaXRlc3BhY2VzJDEgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQkMSh3aGl0ZXNwYWNlcyQxICsgJzB4MTYnKSAhPT0gMjIgLy8gTVMgRWRnZSAxOC0gYnJva2VuIHdpdGggYm94ZWQgc3ltYm9sc1xuICB8fCBJVEVSQVRPUiAmJiAhZmFpbHMkOChmdW5jdGlvbiAoKSB7XG4gICAgJHBhcnNlSW50JDEoT2JqZWN0KElURVJBVE9SKSk7XG4gIH0pOyAvLyBgcGFyc2VJbnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuXG4gIHZhciBudW1iZXJQYXJzZUludCA9IEZPUkNFRCQzID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkge1xuICAgIHZhciBTID0gdHJpbSh0b1N0cmluZyQxKHN0cmluZykpO1xuICAgIHJldHVybiAkcGFyc2VJbnQkMShTLCByYWRpeCA+Pj4gMCB8fCAoZXhlYyQxKGhleCwgUykgPyAxNiA6IDEwKSk7XG4gIH0gOiAkcGFyc2VJbnQkMTtcblxuICB2YXIgJCRjID0gX2V4cG9ydDtcbiAgdmFyICRwYXJzZUludCA9IG51bWJlclBhcnNlSW50OyAvLyBgcGFyc2VJbnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuXG4gICQkYyh7XG4gICAgZ2xvYmFsOiB0cnVlLFxuICAgIGZvcmNlZDogcGFyc2VJbnQgIT0gJHBhcnNlSW50XG4gIH0sIHtcbiAgICBwYXJzZUludDogJHBhcnNlSW50XG4gIH0pO1xuXG4gIHZhciBwYXRoJDcgPSBwYXRoJHE7XG4gIHBhdGgkNy5wYXJzZUludDtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtaW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuXG5cbiAgdmFyICQkYiA9IF9leHBvcnQ7XG4gIHZhciB1bmN1cnJ5VGhpcyQzID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbiAgdmFyICRJbmRleE9mID0gYXJyYXlJbmNsdWRlcy5pbmRleE9mO1xuICB2YXIgYXJyYXlNZXRob2RJc1N0cmljdCQyID0gYXJyYXlNZXRob2RJc1N0cmljdCQ1O1xuICB2YXIgdW4kSW5kZXhPZiA9IHVuY3VycnlUaGlzJDMoW10uaW5kZXhPZik7XG4gIHZhciBORUdBVElWRV9aRVJPID0gISF1biRJbmRleE9mICYmIDEgLyB1biRJbmRleE9mKFsxXSwgMSwgLTApIDwgMDtcbiAgdmFyIFNUUklDVF9NRVRIT0QkMiA9IGFycmF5TWV0aG9kSXNTdHJpY3QkMignaW5kZXhPZicpOyAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG5cbiAgJCRiKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWUsXG4gICAgZm9yY2VkOiBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EJDJcbiAgfSwge1xuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudFxuICAgIC8qICwgZnJvbUluZGV4ID0gMCAqL1xuICAgICkge1xuICAgICAgdmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIE5FR0FUSVZFX1pFUk8gLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyB1biRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkgfHwgMCA6ICRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJDcgPSBlbnRyeVZpcnR1YWwkaztcbiAgZW50cnlWaXJ0dWFsJDcoJ0FycmF5JykuaW5kZXhPZjtcblxuICB2YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBmdW5jdGlvbk5hbWUuUFJPUEVSO1xuICB2YXIgZmFpbHMkNyA9IGZhaWxzJHI7XG4gIHZhciB3aGl0ZXNwYWNlcyA9IHdoaXRlc3BhY2VzJDM7XG4gIHZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJzsgLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3RcbiAgLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxuXG4gIHZhciBzdHJpbmdUcmltRm9yY2VkID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gICAgcmV0dXJuIGZhaWxzJDcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9PSBub24gfHwgUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdLm5hbWUgIT09IE1FVEhPRF9OQU1FO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciAkJGEgPSBfZXhwb3J0O1xuICB2YXIgJHRyaW0gPSBzdHJpbmdUcmltLnRyaW07XG4gIHZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gc3RyaW5nVHJpbUZvcmNlZDsgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG5cbiAgJCRhKHtcbiAgICB0YXJnZXQ6ICdTdHJpbmcnLFxuICAgIHByb3RvOiB0cnVlLFxuICAgIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpXG4gIH0sIHtcbiAgICB0cmltOiBmdW5jdGlvbiB0cmltKCkge1xuICAgICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGVudHJ5VmlydHVhbCQ2ID0gZW50cnlWaXJ0dWFsJGs7XG4gIGVudHJ5VmlydHVhbCQ2KCdTdHJpbmcnKS50cmltO1xuXG4gIHZhciAkJDkgPSBfZXhwb3J0O1xuICB2YXIgREVTQ1JJUFRPUlMkMyA9IGRlc2NyaXB0b3JzO1xuICB2YXIgY3JlYXRlJDggPSBvYmplY3RDcmVhdGU7IC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5cbiAgJCQ5KHtcbiAgICB0YXJnZXQ6ICdPYmplY3QnLFxuICAgIHN0YXQ6IHRydWUsXG4gICAgc2hhbTogIURFU0NSSVBUT1JTJDNcbiAgfSwge1xuICAgIGNyZWF0ZTogY3JlYXRlJDhcbiAgfSk7XG5cbiAgdmFyIHBhdGgkNiA9IHBhdGgkcTtcbiAgdmFyIE9iamVjdCQxID0gcGF0aCQ2Lk9iamVjdDtcblxuICB2YXIgY3JlYXRlJDcgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICAgIHJldHVybiBPYmplY3QkMS5jcmVhdGUoUCwgRCk7XG4gIH07XG5cbiAgdmFyIHBhcmVudCRqID0gY3JlYXRlJDc7XG4gIHZhciBjcmVhdGUkNiA9IHBhcmVudCRqO1xuXG4gIHZhciBjcmVhdGUkNSA9IGNyZWF0ZSQ2O1xuXG4gIHZhciAkJDggPSBfZXhwb3J0O1xuICB2YXIgZ2xvYmFsJDcgPSBnbG9iYWwkTTtcbiAgdmFyIGdldEJ1aWx0SW4kMiA9IGdldEJ1aWx0SW4kOTtcbiAgdmFyIGFwcGx5JDMgPSBmdW5jdGlvbkFwcGx5O1xuICB2YXIgdW5jdXJyeVRoaXMkMiA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBmYWlscyQ2ID0gZmFpbHMkcjtcbiAgdmFyIEFycmF5JDEgPSBnbG9iYWwkNy5BcnJheTtcbiAgdmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluJDIoJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG4gIHZhciBleGVjID0gdW5jdXJyeVRoaXMkMigvLi8uZXhlYyk7XG4gIHZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcyQyKCcnLmNoYXJBdCk7XG4gIHZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMkMignJy5jaGFyQ29kZUF0KTtcbiAgdmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcyQyKCcnLnJlcGxhY2UpO1xuICB2YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyQyKDEuMC50b1N0cmluZyk7XG4gIHZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbiAgdmFyIGxvdyA9IC9eW1xcdUQ4MDAtXFx1REJGRl0kLztcbiAgdmFyIGhpID0gL15bXFx1REMwMC1cXHVERkZGXSQvO1xuXG4gIHZhciBmaXggPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gICAgdmFyIHByZXYgPSBjaGFyQXQoc3RyaW5nLCBvZmZzZXQgLSAxKTtcbiAgICB2YXIgbmV4dCA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCArIDEpO1xuXG4gICAgaWYgKGV4ZWMobG93LCBtYXRjaCkgJiYgIWV4ZWMoaGksIG5leHQpIHx8IGV4ZWMoaGksIG1hdGNoKSAmJiAhZXhlYyhsb3csIHByZXYpKSB7XG4gICAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xuXG4gIHZhciBGT1JDRUQkMiA9IGZhaWxzJDYoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkc3RyaW5naWZ5KCdcXHVERjA2XFx1RDgzNCcpICE9PSAnXCJcXFxcdWRmMDZcXFxcdWQ4MzRcIicgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG4gIH0pO1xuXG4gIGlmICgkc3RyaW5naWZ5KSB7XG4gICAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG4gICAgJCQ4KHtcbiAgICAgIHRhcmdldDogJ0pTT04nLFxuICAgICAgc3RhdDogdHJ1ZSxcbiAgICAgIGZvcmNlZDogRk9SQ0VEJDJcbiAgICB9LCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheSQxKGwpOyBpIDwgbDsgaSsrKSBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSBhcHBseSQzKCRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeCkgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcGF0aCQ1ID0gcGF0aCRxO1xuICB2YXIgYXBwbHkkMiA9IGZ1bmN0aW9uQXBwbHk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1qc29uIC0tIHNhZmVcblxuICBpZiAoIXBhdGgkNS5KU09OKSBwYXRoJDUuSlNPTiA9IHtcbiAgICBzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5XG4gIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG5cbiAgdmFyIHN0cmluZ2lmeSQzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICByZXR1cm4gYXBwbHkkMihwYXRoJDUuSlNPTi5zdHJpbmdpZnksIG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHBhcmVudCRpID0gc3RyaW5naWZ5JDM7XG4gIHZhciBzdHJpbmdpZnkkMiA9IHBhcmVudCRpO1xuXG4gIHZhciBzdHJpbmdpZnkkMSA9IHN0cmluZ2lmeSQyO1xuXG4gIHZhciBnbG9iYWwkNiA9IGdsb2JhbCRNO1xuICB2YXIgVHlwZUVycm9yJDQgPSBnbG9iYWwkNi5UeXBlRXJyb3I7XG5cbiAgdmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoJDEgPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICAgIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgVHlwZUVycm9yJDQoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG4gICAgcmV0dXJuIHBhc3NlZDtcbiAgfTtcblxuICB2YXIgJCQ3ID0gX2V4cG9ydDtcbiAgdmFyIGdsb2JhbCQ1ID0gZ2xvYmFsJE07XG4gIHZhciBhcHBseSQxID0gZnVuY3Rpb25BcHBseTtcbiAgdmFyIGlzQ2FsbGFibGUkMSA9IGlzQ2FsbGFibGUkaDtcbiAgdmFyIHVzZXJBZ2VudCQyID0gZW5naW5lVXNlckFnZW50O1xuICB2YXIgYXJyYXlTbGljZSQxID0gYXJyYXlTbGljZSQ1O1xuICB2YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCQxO1xuICB2YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50JDIpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG5cbiAgdmFyIEZ1bmN0aW9uJDEgPSBnbG9iYWwkNS5GdW5jdGlvbjtcblxuICB2YXIgd3JhcCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXRcbiAgICAvKiAsIC4uLmFyZ3VtZW50cyAqL1xuICAgICkge1xuICAgICAgdmFyIGJvdW5kQXJncyA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMjtcbiAgICAgIHZhciBmbiA9IGlzQ2FsbGFibGUkMShoYW5kbGVyKSA/IGhhbmRsZXIgOiBGdW5jdGlvbiQxKGhhbmRsZXIpO1xuICAgICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBhcnJheVNsaWNlJDEoYXJndW1lbnRzLCAyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBzY2hlZHVsZXIoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBhcHBseSQxKGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0gOiBmbiwgdGltZW91dCk7XG4gICAgfTtcbiAgfTsgLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI3RpbWVyc1xuXG5cbiAgJCQ3KHtcbiAgICBnbG9iYWw6IHRydWUsXG4gICAgYmluZDogdHJ1ZSxcbiAgICBmb3JjZWQ6IE1TSUVcbiAgfSwge1xuICAgIC8vIGBzZXRUaW1lb3V0YCBtZXRob2RcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXR0aW1lb3V0XG4gICAgc2V0VGltZW91dDogd3JhcChnbG9iYWwkNS5zZXRUaW1lb3V0KSxcbiAgICAvLyBgc2V0SW50ZXJ2YWxgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXNldGludGVydmFsXG4gICAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsJDUuc2V0SW50ZXJ2YWwpXG4gIH0pO1xuXG4gIHZhciBwYXRoJDQgPSBwYXRoJHE7XG4gIHZhciBzZXRUaW1lb3V0JDIgPSBwYXRoJDQuc2V0VGltZW91dDtcblxuICB2YXIgc2V0VGltZW91dCQxID0gc2V0VGltZW91dCQyO1xuXG4gIHZhciB0b09iamVjdCQxID0gdG9PYmplY3QkZTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHRvQWJzb2x1dGVJbmRleCQ1O1xuICB2YXIgbGVuZ3RoT2ZBcnJheUxpa2UkMiA9IGxlbmd0aE9mQXJyYXlMaWtlJGQ7IC8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcblxuICB2YXIgYXJyYXlGaWxsID0gZnVuY3Rpb24gZmlsbCh2YWx1ZVxuICAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqL1xuICApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0JDEodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlJDIoTyk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcblxuICAgIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuXG4gICAgcmV0dXJuIE87XG4gIH07XG5cbiAgdmFyICQkNiA9IF9leHBvcnQ7XG4gIHZhciBmaWxsID0gYXJyYXlGaWxsO1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG5cbiAgJCQ2KHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWVcbiAgfSwge1xuICAgIGZpbGw6IGZpbGxcbiAgfSk7IC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcblxuICB2YXIgZW50cnlWaXJ0dWFsJDUgPSBlbnRyeVZpcnR1YWwkaztcbiAgZW50cnlWaXJ0dWFsJDUoJ0FycmF5JykuZmlsbDtcblxuICB2YXIgY29tcG9uZW50RW1pdHRlciA9IHtleHBvcnRzOiB7fX07XG5cbiAgKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAvKipcclxuICAgICAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAgICAgKi9cbiAgICB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAgICAgKlxyXG4gICAgICogQGFwaSBwdWJsaWNcclxuICAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBFbWl0dGVyKG9iaikge1xuICAgICAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKiBAYXBpIHByaXZhdGVcclxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICAgICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gICAgICogQHJldHVybiB7RW1pdHRlcn1cclxuICAgICAqIEBhcGkgcHVibGljXHJcbiAgICAgKi9cblxuXG4gICAgRW1pdHRlci5wcm90b3R5cGUub24gPSBFbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICAgICAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKS5wdXNoKGZuKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICAgICAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gICAgICogQHJldHVybiB7RW1pdHRlcn1cclxuICAgICAqIEBhcGkgcHVibGljXHJcbiAgICAgKi9cblxuXG4gICAgRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICB0aGlzLm9mZihldmVudCwgb24pO1xuICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICBvbi5mbiA9IGZuO1xuICAgICAgdGhpcy5vbihldmVudCwgb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAgICAgKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAgICAgKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gICAgICogQGFwaSBwdWJsaWNcclxuICAgICAqL1xuXG5cbiAgICBFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307IC8vIGFsbFxuXG4gICAgICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gLy8gc3BlY2lmaWMgZXZlbnRcblxuXG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgICAgIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpczsgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuXG4gICAgICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcblxuXG4gICAgICB2YXIgY2I7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNiID0gY2FsbGJhY2tzW2ldO1xuXG4gICAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgZXZlbnQgc3BlY2lmaWMgYXJyYXlzIGZvciBldmVudCB0eXBlcyB0aGF0IG5vXG4gICAgICAvLyBvbmUgaXMgc3Vic2NyaWJlZCBmb3IgdG8gYXZvaWQgbWVtb3J5IGxlYWsuXG5cblxuICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gICAgICogQHJldHVybiB7RW1pdHRlcn1cclxuICAgICAqL1xuXG5cbiAgICBFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXG4gICAgICAgICAgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgICAqIEBhcGkgcHVibGljXHJcbiAgICAgKi9cblxuXG4gICAgRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcbiAgICB9O1xuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqIEBhcGkgcHVibGljXHJcbiAgICAgKi9cblxuXG4gICAgRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gISF0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xuICAgIH07XG4gIH0pKGNvbXBvbmVudEVtaXR0ZXIpO1xuXG4gIHZhciBFbWl0dGVyID0gY29tcG9uZW50RW1pdHRlci5leHBvcnRzO1xuXG4gIC8qISBIYW1tZXIuSlMgLSB2Mi4wLjE3LXJjIC0gMjAxOS0xMi0xNlxuICAgKiBodHRwOi8vbmF2ZXIuZ2l0aHViLmlvL2VnanNcbiAgICpcbiAgICogRm9ya2VkIEJ5IE5hdmVyIGVnanNcbiAgICogQ29weXJpZ2h0IChjKSBoYW1tZXJqc1xuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKi9cbiAgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG5cbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gICAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQkMShzZWxmKSB7XG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBleHRlbmQgb2JqZWN0LlxuICAgKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgaW4gZGVzdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBvbmVzIGluIHNyYy5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICAgKiBAcGFyYW0gey4uLk9iamVjdH0gb2JqZWN0c190b19hc3NpZ25cbiAgICogQHJldHVybnMge09iamVjdH0gdGFyZ2V0XG4gICAqL1xuXG5cbiAgdmFyIGFzc2lnbjtcblxuICBpZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT09ICdmdW5jdGlvbicpIHtcbiAgICBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuXG4gICAgICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuICB9XG5cbiAgdmFyIGFzc2lnbiQxID0gYXNzaWduO1xuICB2YXIgVkVORE9SX1BSRUZJWEVTID0gWycnLCAnd2Via2l0JywgJ01veicsICdNUycsICdtcycsICdvJ107XG4gIHZhciBURVNUX0VMRU1FTlQgPSB0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyB7XG4gICAgc3R5bGU6IHt9XG4gIH0gOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIFRZUEVfRlVOQ1RJT04gPSAnZnVuY3Rpb24nO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgYWJzID0gTWF0aC5hYnM7XG4gIHZhciBub3cgPSBEYXRlLm5vdztcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGdldCB0aGUgcHJlZml4ZWQgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHJldHVybnMge1N0cmluZ3xVbmRlZmluZWR9IHByZWZpeGVkXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHByZWZpeGVkKG9iaiwgcHJvcGVydHkpIHtcbiAgICB2YXIgcHJlZml4O1xuICAgIHZhciBwcm9wO1xuICAgIHZhciBjYW1lbFByb3AgPSBwcm9wZXJ0eVswXS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBWRU5ET1JfUFJFRklYRVMubGVuZ3RoKSB7XG4gICAgICBwcmVmaXggPSBWRU5ET1JfUFJFRklYRVNbaV07XG4gICAgICBwcm9wID0gcHJlZml4ID8gcHJlZml4ICsgY2FtZWxQcm9wIDogcHJvcGVydHk7XG5cbiAgICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3LWZ1bmMsIG5vLW5lc3RlZC10ZXJuYXJ5ICovXG5cblxuICB2YXIgd2luO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gd2luZG93IGlzIHVuZGVmaW5lZCBpbiBub2RlLmpzXG4gICAgd2luID0ge307XG4gIH0gZWxzZSB7XG4gICAgd2luID0gd2luZG93O1xuICB9XG5cbiAgdmFyIFBSRUZJWEVEX1RPVUNIX0FDVElPTiA9IHByZWZpeGVkKFRFU1RfRUxFTUVOVC5zdHlsZSwgJ3RvdWNoQWN0aW9uJyk7XG4gIHZhciBOQVRJVkVfVE9VQ0hfQUNUSU9OID0gUFJFRklYRURfVE9VQ0hfQUNUSU9OICE9PSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpIHtcbiAgICBpZiAoIU5BVElWRV9UT1VDSF9BQ1RJT04pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdG91Y2hNYXAgPSB7fTtcbiAgICB2YXIgY3NzU3VwcG9ydHMgPSB3aW4uQ1NTICYmIHdpbi5DU1Muc3VwcG9ydHM7XG4gICAgWydhdXRvJywgJ21hbmlwdWxhdGlvbicsICdwYW4teScsICdwYW4teCcsICdwYW4teCBwYW4teScsICdub25lJ10uZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAvLyBJZiBjc3Muc3VwcG9ydHMgaXMgbm90IHN1cHBvcnRlZCBidXQgdGhlcmUgaXMgbmF0aXZlIHRvdWNoLWFjdGlvbiBhc3N1bWUgaXQgc3VwcG9ydHNcbiAgICAgIC8vIGFsbCB2YWx1ZXMuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIElFIDEwIGFuZCAxMS5cbiAgICAgIHJldHVybiB0b3VjaE1hcFt2YWxdID0gY3NzU3VwcG9ydHMgPyB3aW4uQ1NTLnN1cHBvcnRzKCd0b3VjaC1hY3Rpb24nLCB2YWwpIDogdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG91Y2hNYXA7XG4gIH1cblxuICB2YXIgVE9VQ0hfQUNUSU9OX0NPTVBVVEUgPSAnY29tcHV0ZSc7XG4gIHZhciBUT1VDSF9BQ1RJT05fQVVUTyA9ICdhdXRvJztcbiAgdmFyIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04gPSAnbWFuaXB1bGF0aW9uJzsgLy8gbm90IGltcGxlbWVudGVkXG5cbiAgdmFyIFRPVUNIX0FDVElPTl9OT05FID0gJ25vbmUnO1xuICB2YXIgVE9VQ0hfQUNUSU9OX1BBTl9YID0gJ3Bhbi14JztcbiAgdmFyIFRPVUNIX0FDVElPTl9QQU5fWSA9ICdwYW4teSc7XG4gIHZhciBUT1VDSF9BQ1RJT05fTUFQID0gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpO1xuICB2YXIgTU9CSUxFX1JFR0VYID0gL21vYmlsZXx0YWJsZXR8aXAoYWR8aG9uZXxvZCl8YW5kcm9pZC9pO1xuICB2YXIgU1VQUE9SVF9UT1VDSCA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW4pO1xuICB2YXIgU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyA9IHByZWZpeGVkKHdpbiwgJ1BvaW50ZXJFdmVudCcpICE9PSB1bmRlZmluZWQ7XG4gIHZhciBTVVBQT1JUX09OTFlfVE9VQ0ggPSBTVVBQT1JUX1RPVUNIICYmIE1PQklMRV9SRUdFWC50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB2YXIgSU5QVVRfVFlQRV9UT1VDSCA9ICd0b3VjaCc7XG4gIHZhciBJTlBVVF9UWVBFX1BFTiA9ICdwZW4nO1xuICB2YXIgSU5QVVRfVFlQRV9NT1VTRSA9ICdtb3VzZSc7XG4gIHZhciBJTlBVVF9UWVBFX0tJTkVDVCA9ICdraW5lY3QnO1xuICB2YXIgQ09NUFVURV9JTlRFUlZBTCA9IDI1O1xuICB2YXIgSU5QVVRfU1RBUlQgPSAxO1xuICB2YXIgSU5QVVRfTU9WRSA9IDI7XG4gIHZhciBJTlBVVF9FTkQgPSA0O1xuICB2YXIgSU5QVVRfQ0FOQ0VMID0gODtcbiAgdmFyIERJUkVDVElPTl9OT05FID0gMTtcbiAgdmFyIERJUkVDVElPTl9MRUZUID0gMjtcbiAgdmFyIERJUkVDVElPTl9SSUdIVCA9IDQ7XG4gIHZhciBESVJFQ1RJT05fVVAgPSA4O1xuICB2YXIgRElSRUNUSU9OX0RPV04gPSAxNjtcbiAgdmFyIERJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XG4gIHZhciBESVJFQ1RJT05fVkVSVElDQUwgPSBESVJFQ1RJT05fVVAgfCBESVJFQ1RJT05fRE9XTjtcbiAgdmFyIERJUkVDVElPTl9BTEwgPSBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTDtcbiAgdmFyIFBST1BTX1hZID0gWyd4JywgJ3knXTtcbiAgdmFyIFBST1BTX0NMSUVOVF9YWSA9IFsnY2xpZW50WCcsICdjbGllbnRZJ107XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiB3YWxrIG9iamVjdHMgYW5kIGFycmF5c1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBpO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob2JqLmZvckVhY2gpIHtcbiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgb2JqLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShpKSAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGxldCBhIGJvb2xlYW4gdmFsdWUgYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgbXVzdCByZXR1cm4gYSBib29sZWFuXG4gICAqIHRoaXMgZmlyc3QgaXRlbSBpbiBhcmdzIHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICAgKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IHZhbFxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnc11cbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYm9vbE9yRm4odmFsLCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFRZUEVfRlVOQ1RJT04pIHtcbiAgICAgIHJldHVybiB2YWwuYXBwbHkoYXJncyA/IGFyZ3NbMF0gfHwgdW5kZWZpbmVkIDogdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBzbWFsbCBpbmRleE9mIHdyYXBwZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gZm91bmRcbiAgICovXG5cblxuICBmdW5jdGlvbiBpblN0cihzdHIsIGZpbmQpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2YoZmluZCkgPiAtMTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogd2hlbiB0aGUgdG91Y2hBY3Rpb25zIGFyZSBjb2xsZWN0ZWQgdGhleSBhcmUgbm90IGEgdmFsaWQgdmFsdWUsIHNvIHdlIG5lZWQgdG8gY2xlYW4gdGhpbmdzIHVwLiAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25zXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMpIHtcbiAgICAvLyBub25lXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSkge1xuICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xuICAgIH1cblxuICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSk7IC8vIGlmIGJvdGggcGFuLXggYW5kIHBhbi15IGFyZSBzZXQgKGRpZmZlcmVudCByZWNvZ25pemVyc1xuICAgIC8vIGZvciBkaWZmZXJlbnQgZGlyZWN0aW9ucywgZS5nLiBob3Jpem9udGFsIHBhbiBidXQgdmVydGljYWwgc3dpcGU/KVxuICAgIC8vIHdlIG5lZWQgbm9uZSAoYXMgb3RoZXJ3aXNlIHdpdGggcGFuLXggcGFuLXkgY29tYmluZWQgbm9uZSBvZiB0aGVzZVxuICAgIC8vIHJlY29nbml6ZXJzIHdpbGwgd29yaywgc2luY2UgdGhlIGJyb3dzZXIgd291bGQgaGFuZGxlIGFsbCBwYW5uaW5nXG5cbiAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfSAvLyBwYW4teCBPUiBwYW4teVxuXG5cbiAgICBpZiAoaGFzUGFuWCB8fCBoYXNQYW5ZKSB7XG4gICAgICByZXR1cm4gaGFzUGFuWCA/IFRPVUNIX0FDVElPTl9QQU5fWCA6IFRPVUNIX0FDVElPTl9QQU5fWTtcbiAgICB9IC8vIG1hbmlwdWxhdGlvblxuXG5cbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTikpIHtcbiAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OO1xuICAgIH1cblxuICAgIHJldHVybiBUT1VDSF9BQ1RJT05fQVVUTztcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogVG91Y2ggQWN0aW9uXG4gICAqIHNldHMgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IG9yIHVzZXMgdGhlIGpzIGFsdGVybmF0aXZlXG4gICAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuXG5cbiAgdmFyIFRvdWNoQWN0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb3VjaEFjdGlvbihtYW5hZ2VyLCB2YWx1ZSkge1xuICAgICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICAgIHRoaXMuc2V0KHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBzZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlIG9uIHRoZSBlbGVtZW50IG9yIGVuYWJsZSB0aGUgcG9seWZpbGxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgKi9cblxuXG4gICAgdmFyIF9wcm90byA9IFRvdWNoQWN0aW9uLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIC8vIGZpbmQgb3V0IHRoZSB0b3VjaC1hY3Rpb24gYnkgdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAgICBpZiAodmFsdWUgPT09IFRPVUNIX0FDVElPTl9DT01QVVRFKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5jb21wdXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChOQVRJVkVfVE9VQ0hfQUNUSU9OICYmIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlICYmIFRPVUNIX0FDVElPTl9NQVBbdmFsdWVdKSB7XG4gICAgICAgIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlW1BSRUZJWEVEX1RPVUNIX0FDVElPTl0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hY3Rpb25zID0gdmFsdWUudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIGp1c3QgcmUtc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZVxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdGhpcy5zZXQodGhpcy5tYW5hZ2VyLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBjb21wdXRlIHRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IGJhc2VkIG9uIHRoZSByZWNvZ25pemVyJ3Mgc2V0dGluZ3NcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uY29tcHV0ZSA9IGZ1bmN0aW9uIGNvbXB1dGUoKSB7XG4gICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgZWFjaCh0aGlzLm1hbmFnZXIucmVjb2duaXplcnMsIGZ1bmN0aW9uIChyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChib29sT3JGbihyZWNvZ25pemVyLm9wdGlvbnMuZW5hYmxlLCBbcmVjb2duaXplcl0pKSB7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnMuY29uY2F0KHJlY29nbml6ZXIuZ2V0VG91Y2hBY3Rpb24oKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMuam9pbignICcpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uIGVhY2ggaW5wdXQgY3ljbGUgYW5kIHByb3ZpZGVzIHRoZSBwcmV2ZW50aW5nIG9mIHRoZSBicm93c2VyIGJlaGF2aW9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG5cblxuICAgIF9wcm90by5wcmV2ZW50RGVmYXVsdHMgPSBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdHMoaW5wdXQpIHtcbiAgICAgIHZhciBzcmNFdmVudCA9IGlucHV0LnNyY0V2ZW50O1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0Lm9mZnNldERpcmVjdGlvbjsgLy8gaWYgdGhlIHRvdWNoIGFjdGlvbiBkaWQgcHJldmVudGVkIG9uY2UgdGhpcyBzZXNzaW9uXG5cbiAgICAgIGlmICh0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQpIHtcbiAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgIHZhciBoYXNOb25lID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1ldO1xuICAgICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9QQU5fWF07XG5cbiAgICAgIGlmIChoYXNOb25lKSB7XG4gICAgICAgIC8vIGRvIG5vdCBwcmV2ZW50IGRlZmF1bHRzIGlmIHRoaXMgaXMgYSB0YXAgZ2VzdHVyZVxuICAgICAgICB2YXIgaXNUYXBQb2ludGVyID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSAxO1xuICAgICAgICB2YXIgaXNUYXBNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgMjtcbiAgICAgICAgdmFyIGlzVGFwVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgMjUwO1xuXG4gICAgICAgIGlmIChpc1RhcFBvaW50ZXIgJiYgaXNUYXBNb3ZlbWVudCAmJiBpc1RhcFRvdWNoVGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgIC8vIGBwYW4teCBwYW4teWAgbWVhbnMgYnJvd3NlciBoYW5kbGVzIGFsbCBzY3JvbGxpbmcvcGFubmluZywgZG8gbm90IHByZXZlbnRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzTm9uZSB8fCBoYXNQYW5ZICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMIHx8IGhhc1BhblggJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXZlbnRTcmMoc3JjRXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjRXZlbnRcbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLnByZXZlbnRTcmMgPSBmdW5jdGlvbiBwcmV2ZW50U3JjKHNyY0V2ZW50KSB7XG4gICAgICB0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRvdWNoQWN0aW9uO1xuICB9KCk7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XG4gICAqIEBtZXRob2QgaGFzUGFyZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGZvdW5kXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFzUGFyZW50KG5vZGUsIHBhcmVudCkge1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogZ2V0IHRoZSBjZW50ZXIgb2YgYWxsIHRoZSBwb2ludGVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludGVyc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IGNlbnRlciBjb250YWlucyBgeGAgYW5kIGB5YCBwcm9wZXJ0aWVzXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0Q2VudGVyKHBvaW50ZXJzKSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoOyAvLyBubyBuZWVkIHRvIGxvb3Agd2hlbiBvbmx5IG9uZSB0b3VjaFxuXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRYKSxcbiAgICAgICAgeTogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHggPSAwO1xuICAgIHZhciB5ID0gMDtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IHBvaW50ZXJzTGVuZ3RoKSB7XG4gICAgICB4ICs9IHBvaW50ZXJzW2ldLmNsaWVudFg7XG4gICAgICB5ICs9IHBvaW50ZXJzW2ldLmNsaWVudFk7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHJvdW5kKHggLyBwb2ludGVyc0xlbmd0aCksXG4gICAgICB5OiByb3VuZCh5IC8gcG9pbnRlcnNMZW5ndGgpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogY3JlYXRlIGEgc2ltcGxlIGNsb25lIGZyb20gdGhlIGlucHV0IHVzZWQgZm9yIHN0b3JhZ2Ugb2YgZmlyc3RJbnB1dCBhbmQgZmlyc3RNdWx0aXBsZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICogQHJldHVybnMge09iamVjdH0gY2xvbmVkSW5wdXREYXRhXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpIHtcbiAgICAvLyBtYWtlIGEgc2ltcGxlIGNvcHkgb2YgdGhlIHBvaW50ZXJzIGJlY2F1c2Ugd2Ugd2lsbCBnZXQgYSByZWZlcmVuY2UgaWYgd2UgZG9uJ3RcbiAgICAvLyB3ZSBvbmx5IG5lZWQgY2xpZW50WFkgZm9yIHRoZSBjYWxjdWxhdGlvbnNcbiAgICB2YXIgcG9pbnRlcnMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCkge1xuICAgICAgcG9pbnRlcnNbaV0gPSB7XG4gICAgICAgIGNsaWVudFg6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFgpLFxuICAgICAgICBjbGllbnRZOiByb3VuZChpbnB1dC5wb2ludGVyc1tpXS5jbGllbnRZKVxuICAgICAgfTtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGltZVN0YW1wOiBub3coKSxcbiAgICAgIHBvaW50ZXJzOiBwb2ludGVycyxcbiAgICAgIGNlbnRlcjogZ2V0Q2VudGVyKHBvaW50ZXJzKSxcbiAgICAgIGRlbHRhWDogaW5wdXQuZGVsdGFYLFxuICAgICAgZGVsdGFZOiBpbnB1dC5kZWx0YVlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBjYWxjdWxhdGUgdGhlIGFic29sdXRlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xuICAgKiBAcGFyYW0ge09iamVjdH0gcDEge3gsIHl9XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwMiB7eCwgeX1cbiAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGRpc3RhbmNlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuXG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV07XG4gICAgdmFyIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogY2FsY3VsYXRlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlc1xuICAgKiBAcGFyYW0ge09iamVjdH0gcDFcbiAgICogQHBhcmFtIHtPYmplY3R9IHAyXG4gICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcbiAgICogQHJldHVybiB7TnVtYmVyfSBhbmdsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldEFuZ2xlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICBwcm9wcyA9IFBST1BTX1hZO1xuICAgIH1cblxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dO1xuICAgIHZhciB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHksIHgpICogMTgwIC8gTWF0aC5QSTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogZ2V0IHRoZSBkaXJlY3Rpb24gYmV0d2VlbiB0d28gcG9pbnRzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAqIEByZXR1cm4ge051bWJlcn0gZGlyZWN0aW9uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHgsIHkpIHtcbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgcmV0dXJuIERJUkVDVElPTl9OT05FO1xuICAgIH1cblxuICAgIGlmIChhYnMoeCkgPj0gYWJzKHkpKSB7XG4gICAgICByZXR1cm4geCA8IDAgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcbiAgICB9XG5cbiAgICByZXR1cm4geSA8IDAgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlcjsgLy8gbGV0IHsgb2Zmc2V0RGVsdGE6b2Zmc2V0ID0ge30sIHByZXZEZWx0YSA9IHt9LCBwcmV2SW5wdXQgPSB7fSB9ID0gc2Vzc2lvbjtcbiAgICAvLyBqc2NzIHRocm93aW5nIGVycm9yIG9uIGRlZmFsdXQgZGVzdHJ1Y3R1cmVkIHZhbHVlcyBhbmQgd2l0aG91dCBkZWZhdWx0cyB0ZXN0cyBmYWlsXG5cbiAgICB2YXIgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZJbnB1dCA9IHNlc3Npb24ucHJldklucHV0IHx8IHt9O1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfU1RBUlQgfHwgcHJldklucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfRU5EKSB7XG4gICAgICBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSA9IHtcbiAgICAgICAgeDogcHJldklucHV0LmRlbHRhWCB8fCAwLFxuICAgICAgICB5OiBwcmV2SW5wdXQuZGVsdGFZIHx8IDBcbiAgICAgIH07XG4gICAgICBvZmZzZXQgPSBzZXNzaW9uLm9mZnNldERlbHRhID0ge1xuICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgeTogY2VudGVyLnlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaW5wdXQuZGVsdGFYID0gcHJldkRlbHRhLnggKyAoY2VudGVyLnggLSBvZmZzZXQueCk7XG4gICAgaW5wdXQuZGVsdGFZID0gcHJldkRlbHRhLnkgKyAoY2VudGVyLnkgLSBvZmZzZXQueSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGNhbGN1bGF0ZSB0aGUgdmVsb2NpdHkgYmV0d2VlbiB0d28gcG9pbnRzLiB1bml0IGlzIGluIHB4IHBlciBtcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhVGltZVxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHZlbG9jaXR5IGB4YCBhbmQgYHlgXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0VmVsb2NpdHkoZGVsdGFUaW1lLCB4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggLyBkZWx0YVRpbWUgfHwgMCxcbiAgICAgIHk6IHkgLyBkZWx0YVRpbWUgfHwgMFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGNhbGN1bGF0ZSB0aGUgc2NhbGUgZmFjdG9yIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXG4gICAqIG5vIHNjYWxlIGlzIDEsIGFuZCBnb2VzIGRvd24gdG8gMCB3aGVuIHBpbmNoZWQgdG9nZXRoZXIsIGFuZCBiaWdnZXIgd2hlbiBwaW5jaGVkIG91dFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAgICogQHJldHVybiB7TnVtYmVyfSBzY2FsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFNjYWxlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0RGlzdGFuY2UoZW5kWzBdLCBlbmRbMV0sIFBST1BTX0NMSUVOVF9YWSkgLyBnZXREaXN0YW5jZShzdGFydFswXSwgc3RhcnRbMV0sIFBST1BTX0NMSUVOVF9YWSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGNhbGN1bGF0ZSB0aGUgcm90YXRpb24gZGVncmVlcyBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAgICogQHJldHVybiB7TnVtYmVyfSByb3RhdGlvblxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFJvdGF0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0QW5nbGUoZW5kWzFdLCBlbmRbMF0sIFBST1BTX0NMSUVOVF9YWSkgKyBnZXRBbmdsZShzdGFydFsxXSwgc3RhcnRbMF0sIFBST1BTX0NMSUVOVF9YWSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIHZlbG9jaXR5IGlzIGNhbGN1bGF0ZWQgZXZlcnkgeCBtc1xuICAgKiBAcGFyYW0ge09iamVjdH0gc2Vzc2lvblxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpIHtcbiAgICB2YXIgbGFzdCA9IHNlc3Npb24ubGFzdEludGVydmFsIHx8IGlucHV0O1xuICAgIHZhciBkZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBsYXN0LnRpbWVTdGFtcDtcbiAgICB2YXIgdmVsb2NpdHk7XG4gICAgdmFyIHZlbG9jaXR5WDtcbiAgICB2YXIgdmVsb2NpdHlZO1xuICAgIHZhciBkaXJlY3Rpb247XG5cbiAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9PSBJTlBVVF9DQU5DRUwgJiYgKGRlbHRhVGltZSA+IENPTVBVVEVfSU5URVJWQUwgfHwgbGFzdC52ZWxvY2l0eSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgdmFyIGRlbHRhWCA9IGlucHV0LmRlbHRhWCAtIGxhc3QuZGVsdGFYO1xuICAgICAgdmFyIGRlbHRhWSA9IGlucHV0LmRlbHRhWSAtIGxhc3QuZGVsdGFZO1xuICAgICAgdmFyIHYgPSBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIGRlbHRhWCwgZGVsdGFZKTtcbiAgICAgIHZlbG9jaXR5WCA9IHYueDtcbiAgICAgIHZlbG9jaXR5WSA9IHYueTtcbiAgICAgIHZlbG9jaXR5ID0gYWJzKHYueCkgPiBhYnModi55KSA/IHYueCA6IHYueTtcbiAgICAgIGRpcmVjdGlvbiA9IGdldERpcmVjdGlvbihkZWx0YVgsIGRlbHRhWSk7XG4gICAgICBzZXNzaW9uLmxhc3RJbnRlcnZhbCA9IGlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1c2UgbGF0ZXN0IHZlbG9jaXR5IGluZm8gaWYgaXQgZG9lc24ndCBvdmVydGFrZSBhIG1pbmltdW0gcGVyaW9kXG4gICAgICB2ZWxvY2l0eSA9IGxhc3QudmVsb2NpdHk7XG4gICAgICB2ZWxvY2l0eVggPSBsYXN0LnZlbG9jaXR5WDtcbiAgICAgIHZlbG9jaXR5WSA9IGxhc3QudmVsb2NpdHlZO1xuICAgICAgZGlyZWN0aW9uID0gbGFzdC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgaW5wdXQudmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICBpbnB1dC52ZWxvY2l0eVggPSB2ZWxvY2l0eVg7XG4gICAgaW5wdXQudmVsb2NpdHlZID0gdmVsb2NpdHlZO1xuICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgfVxuICAvKipcbiAgKiBAcHJpdmF0ZVxuICAgKiBleHRlbmQgdGhlIGRhdGEgd2l0aCBzb21lIHVzYWJsZSBwcm9wZXJ0aWVzIGxpa2Ugc2NhbGUsIHJvdGF0ZSwgdmVsb2NpdHkgZXRjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYW5hZ2VyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpIHtcbiAgICB2YXIgc2Vzc2lvbiA9IG1hbmFnZXIuc2Vzc2lvbjtcbiAgICB2YXIgcG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycztcbiAgICB2YXIgcG9pbnRlcnNMZW5ndGggPSBwb2ludGVycy5sZW5ndGg7IC8vIHN0b3JlIHRoZSBmaXJzdCBpbnB1dCB0byBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGFuZCBkaXJlY3Rpb25cblxuICAgIGlmICghc2Vzc2lvbi5maXJzdElucHV0KSB7XG4gICAgICBzZXNzaW9uLmZpcnN0SW5wdXQgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfSAvLyB0byBjb21wdXRlIHNjYWxlIGFuZCByb3RhdGlvbiB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBtdWx0aXBsZSB0b3VjaGVzXG5cblxuICAgIGlmIChwb2ludGVyc0xlbmd0aCA+IDEgJiYgIXNlc3Npb24uZmlyc3RNdWx0aXBsZSkge1xuICAgICAgc2Vzc2lvbi5maXJzdE11bHRpcGxlID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcbiAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBmaXJzdElucHV0ID0gc2Vzc2lvbi5maXJzdElucHV0LFxuICAgICAgICBmaXJzdE11bHRpcGxlID0gc2Vzc2lvbi5maXJzdE11bHRpcGxlO1xuICAgIHZhciBvZmZzZXRDZW50ZXIgPSBmaXJzdE11bHRpcGxlID8gZmlyc3RNdWx0aXBsZS5jZW50ZXIgOiBmaXJzdElucHV0LmNlbnRlcjtcbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyID0gZ2V0Q2VudGVyKHBvaW50ZXJzKTtcbiAgICBpbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICBpbnB1dC5kZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBmaXJzdElucHV0LnRpbWVTdGFtcDtcbiAgICBpbnB1dC5hbmdsZSA9IGdldEFuZ2xlKG9mZnNldENlbnRlciwgY2VudGVyKTtcbiAgICBpbnB1dC5kaXN0YW5jZSA9IGdldERpc3RhbmNlKG9mZnNldENlbnRlciwgY2VudGVyKTtcbiAgICBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCk7XG4gICAgaW5wdXQub2Zmc2V0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcbiAgICB2YXIgb3ZlcmFsbFZlbG9jaXR5ID0gZ2V0VmVsb2NpdHkoaW5wdXQuZGVsdGFUaW1lLCBpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5WCA9IG92ZXJhbGxWZWxvY2l0eS54O1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVkgPSBvdmVyYWxsVmVsb2NpdHkueTtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHkgPSBhYnMob3ZlcmFsbFZlbG9jaXR5LngpID4gYWJzKG92ZXJhbGxWZWxvY2l0eS55KSA/IG92ZXJhbGxWZWxvY2l0eS54IDogb3ZlcmFsbFZlbG9jaXR5Lnk7XG4gICAgaW5wdXQuc2NhbGUgPSBmaXJzdE11bHRpcGxlID8gZ2V0U2NhbGUoZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMTtcbiAgICBpbnB1dC5yb3RhdGlvbiA9IGZpcnN0TXVsdGlwbGUgPyBnZXRSb3RhdGlvbihmaXJzdE11bHRpcGxlLnBvaW50ZXJzLCBwb2ludGVycykgOiAwO1xuICAgIGlucHV0Lm1heFBvaW50ZXJzID0gIXNlc3Npb24ucHJldklucHV0ID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogaW5wdXQucG9pbnRlcnMubGVuZ3RoID4gc2Vzc2lvbi5wcmV2SW5wdXQubWF4UG9pbnRlcnMgPyBpbnB1dC5wb2ludGVycy5sZW5ndGggOiBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycztcbiAgICBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpOyAvLyBmaW5kIHRoZSBjb3JyZWN0IHRhcmdldFxuXG4gICAgdmFyIHRhcmdldCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICB2YXIgc3JjRXZlbnQgPSBpbnB1dC5zcmNFdmVudDtcbiAgICB2YXIgc3JjRXZlbnRUYXJnZXQ7XG5cbiAgICBpZiAoc3JjRXZlbnQuY29tcG9zZWRQYXRoKSB7XG4gICAgICBzcmNFdmVudFRhcmdldCA9IHNyY0V2ZW50LmNvbXBvc2VkUGF0aCgpWzBdO1xuICAgIH0gZWxzZSBpZiAoc3JjRXZlbnQucGF0aCkge1xuICAgICAgc3JjRXZlbnRUYXJnZXQgPSBzcmNFdmVudC5wYXRoWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBzcmNFdmVudFRhcmdldCA9IHNyY0V2ZW50LnRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoaGFzUGFyZW50KHNyY0V2ZW50VGFyZ2V0LCB0YXJnZXQpKSB7XG4gICAgICB0YXJnZXQgPSBzcmNFdmVudFRhcmdldDtcbiAgICB9XG5cbiAgICBpbnB1dC50YXJnZXQgPSB0YXJnZXQ7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGhhbmRsZSBpbnB1dCBldmVudHNcbiAgICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaW5wdXRIYW5kbGVyKG1hbmFnZXIsIGV2ZW50VHlwZSwgaW5wdXQpIHtcbiAgICB2YXIgcG9pbnRlcnNMZW4gPSBpbnB1dC5wb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGNoYW5nZWRQb2ludGVyc0xlbiA9IGlucHV0LmNoYW5nZWRQb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGlzRmlyc3QgPSBldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiBwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMDtcbiAgICB2YXIgaXNGaW5hbCA9IGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwO1xuICAgIGlucHV0LmlzRmlyc3QgPSAhIWlzRmlyc3Q7XG4gICAgaW5wdXQuaXNGaW5hbCA9ICEhaXNGaW5hbDtcblxuICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICBtYW5hZ2VyLnNlc3Npb24gPSB7fTtcbiAgICB9IC8vIHNvdXJjZSBldmVudCBpcyB0aGUgbm9ybWFsaXplZCB2YWx1ZSBvZiB0aGUgZG9tRXZlbnRzXG4gICAgLy8gbGlrZSAndG91Y2hzdGFydCwgbW91c2V1cCwgcG9pbnRlcmRvd24nXG5cblxuICAgIGlucHV0LmV2ZW50VHlwZSA9IGV2ZW50VHlwZTsgLy8gY29tcHV0ZSBzY2FsZSwgcm90YXRpb24gZXRjXG5cbiAgICBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KTsgLy8gZW1pdCBzZWNyZXQgZXZlbnRcblxuICAgIG1hbmFnZXIuZW1pdCgnaGFtbWVyLmlucHV0JywgaW5wdXQpO1xuICAgIG1hbmFnZXIucmVjb2duaXplKGlucHV0KTtcbiAgICBtYW5hZ2VyLnNlc3Npb24ucHJldklucHV0ID0gaW5wdXQ7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIHNwbGl0IHN0cmluZyBvbiB3aGl0ZXNwYWNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybnMge0FycmF5fSB3b3Jkc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNwbGl0U3RyKHN0cikge1xuICAgIHJldHVybiBzdHIudHJpbSgpLnNwbGl0KC9cXHMrL2cpO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBhZGRFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiByZW1vdmVFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBnZXQgdGhlIHdpbmRvdyBvYmplY3Qgb2YgYW4gZWxlbWVudFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtEb2N1bWVudFZpZXd8V2luZG93fVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFdpbmRvd0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZWxlbWVudDtcbiAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3cgfHwgd2luZG93O1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICAgKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge0lucHV0fVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG5cblxuICB2YXIgSW5wdXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElucHV0KG1hbmFnZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgdGhpcy5lbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgICAgdGhpcy50YXJnZXQgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRUYXJnZXQ7IC8vIHNtYWxsZXIgd3JhcHBlciBhcm91bmQgdGhlIGhhbmRsZXIsIGZvciB0aGUgc2NvcGUgYW5kIHRoZSBlbmFibGVkIHN0YXRlIG9mIHRoZSBtYW5hZ2VyLFxuICAgICAgLy8gc28gd2hlbiBkaXNhYmxlZCB0aGUgaW5wdXQgZXZlbnRzIGFyZSBjb21wbGV0ZWx5IGJ5cGFzc2VkLlxuXG4gICAgICB0aGlzLmRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKGJvb2xPckZuKG1hbmFnZXIub3B0aW9ucy5lbmFibGUsIFttYW5hZ2VyXSkpIHtcbiAgICAgICAgICBzZWxmLmhhbmRsZXIoZXYpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBzaG91bGQgaGFuZGxlIHRoZSBpbnB1dEV2ZW50IGRhdGEgYW5kIHRyaWdnZXIgdGhlIGNhbGxiYWNrXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cblxuXG4gICAgdmFyIF9wcm90byA9IElucHV0LnByb3RvdHlwZTtcblxuICAgIF9wcm90by5oYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcigpIHt9O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG5cblxuICAgIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMuZXZFbCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgIHRoaXMuZXZUYXJnZXQgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICB0aGlzLmV2V2luICYmIGFkZEV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogdW5iaW5kIHRoZSBldmVudHNcbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5ldkVsICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMuZWxlbWVudCwgdGhpcy5ldkVsLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgdGhpcy5ldlRhcmdldCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgIHRoaXMuZXZXaW4gJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gSW5wdXQ7XG4gIH0oKTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGZpbmQgaWYgYSBhcnJheSBjb250YWlucyB0aGUgb2JqZWN0IHVzaW5nIGluZGV4T2Ygb3IgYSBzaW1wbGUgcG9seUZpbGxcbiAgICogQHBhcmFtIHtBcnJheX0gc3JjXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZmluZEJ5S2V5XVxuICAgKiBAcmV0dXJuIHtCb29sZWFufE51bWJlcn0gZmFsc2Ugd2hlbiBub3QgZm91bmQsIG9yIHRoZSBpbmRleFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGluQXJyYXkoc3JjLCBmaW5kLCBmaW5kQnlLZXkpIHtcbiAgICBpZiAoc3JjLmluZGV4T2YgJiYgIWZpbmRCeUtleSkge1xuICAgICAgcmV0dXJuIHNyYy5pbmRleE9mKGZpbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICBpZiAoZmluZEJ5S2V5ICYmIHNyY1tpXVtmaW5kQnlLZXldID09IGZpbmQgfHwgIWZpbmRCeUtleSAmJiBzcmNbaV0gPT09IGZpbmQpIHtcbiAgICAgICAgICAvLyBkbyBub3QgdXNlID09PSBoZXJlLCB0ZXN0IGZhaWxzXG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgUE9JTlRFUl9JTlBVVF9NQVAgPSB7XG4gICAgcG9pbnRlcmRvd246IElOUFVUX1NUQVJULFxuICAgIHBvaW50ZXJtb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHBvaW50ZXJ1cDogSU5QVVRfRU5ELFxuICAgIHBvaW50ZXJjYW5jZWw6IElOUFVUX0NBTkNFTCxcbiAgICBwb2ludGVyb3V0OiBJTlBVVF9DQU5DRUxcbiAgfTsgLy8gaW4gSUUxMCB0aGUgcG9pbnRlciB0eXBlcyBpcyBkZWZpbmVkIGFzIGFuIGVudW1cblxuICB2YXIgSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSA9IHtcbiAgICAyOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgIDM6IElOUFVUX1RZUEVfUEVOLFxuICAgIDQ6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgNTogSU5QVVRfVFlQRV9LSU5FQ1QgLy8gc2VlIGh0dHBzOi8vdHdpdHRlci5jb20vamFjb2Jyb3NzaS9zdGF0dXMvNDgwNTk2NDM4NDg5ODkwODE2XG5cbiAgfTtcbiAgdmFyIFBPSU5URVJfRUxFTUVOVF9FVkVOVFMgPSAncG9pbnRlcmRvd24nO1xuICB2YXIgUE9JTlRFUl9XSU5ET1dfRVZFTlRTID0gJ3BvaW50ZXJtb3ZlIHBvaW50ZXJ1cCBwb2ludGVyY2FuY2VsJzsgLy8gSUUxMCBoYXMgcHJlZml4ZWQgc3VwcG9ydCwgYW5kIGNhc2Utc2Vuc2l0aXZlXG5cbiAgaWYgKHdpbi5NU1BvaW50ZXJFdmVudCAmJiAhd2luLlBvaW50ZXJFdmVudCkge1xuICAgIFBPSU5URVJfRUxFTUVOVF9FVkVOVFMgPSAnTVNQb2ludGVyRG93bic7XG4gICAgUE9JTlRFUl9XSU5ET1dfRVZFTlRTID0gJ01TUG9pbnRlck1vdmUgTVNQb2ludGVyVXAgTVNQb2ludGVyQ2FuY2VsJztcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUG9pbnRlciBldmVudHMgaW5wdXRcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIElucHV0XG4gICAqL1xuXG5cbiAgdmFyIFBvaW50ZXJFdmVudElucHV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfSW5wdXQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQb2ludGVyRXZlbnRJbnB1dCwgX0lucHV0KTtcblxuICAgIGZ1bmN0aW9uIFBvaW50ZXJFdmVudElucHV0KCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICB2YXIgcHJvdG8gPSBQb2ludGVyRXZlbnRJbnB1dC5wcm90b3R5cGU7XG4gICAgICBwcm90by5ldkVsID0gUE9JTlRFUl9FTEVNRU5UX0VWRU5UUztcbiAgICAgIHByb3RvLmV2V2luID0gUE9JTlRFUl9XSU5ET1dfRVZFTlRTO1xuICAgICAgX3RoaXMgPSBfSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuc3RvcmUgPSBfdGhpcy5tYW5hZ2VyLnNlc3Npb24ucG9pbnRlckV2ZW50cyA9IFtdO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cblxuXG4gICAgdmFyIF9wcm90byA9IFBvaW50ZXJFdmVudElucHV0LnByb3RvdHlwZTtcblxuICAgIF9wcm90by5oYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihldikge1xuICAgICAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgIHZhciByZW1vdmVQb2ludGVyID0gZmFsc2U7XG4gICAgICB2YXIgZXZlbnRUeXBlTm9ybWFsaXplZCA9IGV2LnR5cGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdtcycsICcnKTtcbiAgICAgIHZhciBldmVudFR5cGUgPSBQT0lOVEVSX0lOUFVUX01BUFtldmVudFR5cGVOb3JtYWxpemVkXTtcbiAgICAgIHZhciBwb2ludGVyVHlwZSA9IElFMTBfUE9JTlRFUl9UWVBFX0VOVU1bZXYucG9pbnRlclR5cGVdIHx8IGV2LnBvaW50ZXJUeXBlO1xuICAgICAgdmFyIGlzVG91Y2ggPSBwb2ludGVyVHlwZSA9PT0gSU5QVVRfVFlQRV9UT1VDSDsgLy8gZ2V0IGluZGV4IG9mIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcblxuICAgICAgdmFyIHN0b3JlSW5kZXggPSBpbkFycmF5KHN0b3JlLCBldi5wb2ludGVySWQsICdwb2ludGVySWQnKTsgLy8gc3RhcnQgYW5kIG1vdXNlIG11c3QgYmUgZG93blxuXG4gICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgKGV2LmJ1dHRvbiA9PT0gMCB8fCBpc1RvdWNoKSkge1xuICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICBzdG9yZS5wdXNoKGV2KTtcbiAgICAgICAgICBzdG9yZUluZGV4ID0gc3RvcmUubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICByZW1vdmVQb2ludGVyID0gdHJ1ZTtcbiAgICAgIH0gLy8gaXQgbm90IGZvdW5kLCBzbyB0aGUgcG9pbnRlciBoYXNuJ3QgYmVlbiBkb3duIChzbyBpdCdzIHByb2JhYmx5IGEgaG92ZXIpXG5cblxuICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gdXBkYXRlIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcblxuXG4gICAgICBzdG9yZVtzdG9yZUluZGV4XSA9IGV2O1xuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIGV2ZW50VHlwZSwge1xuICAgICAgICBwb2ludGVyczogc3RvcmUsXG4gICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgcG9pbnRlclR5cGU6IHBvaW50ZXJUeXBlLFxuICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVtb3ZlUG9pbnRlcikge1xuICAgICAgICAvLyByZW1vdmUgZnJvbSB0aGUgc3RvcmVcbiAgICAgICAgc3RvcmUuc3BsaWNlKHN0b3JlSW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gUG9pbnRlckV2ZW50SW5wdXQ7XG4gIH0oSW5wdXQpO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogY29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gcmVhbCBhcnJheXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqLCAwKTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogdW5pcXVlIGFycmF5IHdpdGggb2JqZWN0cyBiYXNlZCBvbiBhIGtleSAobGlrZSAnaWQnKSBvciBqdXN0IGJ5IHRoZSBhcnJheSdzIHZhbHVlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNyYyBbe2lkOjF9LHtpZDoyfSx7aWQ6MX1dXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBba2V5XVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtzb3J0PUZhbHNlXVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFt7aWQ6MX0se2lkOjJ9XVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHVuaXF1ZUFycmF5KHNyYywga2V5LCBzb3J0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsID0ga2V5ID8gc3JjW2ldW2tleV0gOiBzcmNbaV07XG5cbiAgICAgIGlmIChpbkFycmF5KHZhbHVlcywgdmFsKSA8IDApIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHNyY1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlc1tpXSA9IHZhbDtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoc29ydCkge1xuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhW2tleV0gPiBiW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgdmFyIFRPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG4gIH07XG4gIHZhciBUT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIE11bHRpLXVzZXIgdG91Y2ggZXZlbnRzIGlucHV0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBJbnB1dFxuICAgKi9cblxuICB2YXIgVG91Y2hJbnB1dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0lucHV0KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoVG91Y2hJbnB1dCwgX0lucHV0KTtcblxuICAgIGZ1bmN0aW9uIFRvdWNoSW5wdXQoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIFRvdWNoSW5wdXQucHJvdG90eXBlLmV2VGFyZ2V0ID0gVE9VQ0hfVEFSR0VUX0VWRU5UUztcbiAgICAgIF90aGlzID0gX0lucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLnRhcmdldElkcyA9IHt9OyAvLyB0aGlzLmV2VGFyZ2V0ID0gVE9VQ0hfVEFSR0VUX0VWRU5UUztcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBUb3VjaElucHV0LnByb3RvdHlwZTtcblxuICAgIF9wcm90by5oYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihldikge1xuICAgICAgdmFyIHR5cGUgPSBUT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG4gICAgICB2YXIgdG91Y2hlcyA9IGdldFRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG5cbiAgICAgIGlmICghdG91Y2hlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IHRvdWNoZXNbMV0sXG4gICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gVG91Y2hJbnB1dDtcbiAgfShJbnB1dCk7XG5cbiAgZnVuY3Rpb24gZ2V0VG91Y2hlcyhldiwgdHlwZSkge1xuICAgIHZhciBhbGxUb3VjaGVzID0gdG9BcnJheShldi50b3VjaGVzKTtcbiAgICB2YXIgdGFyZ2V0SWRzID0gdGhpcy50YXJnZXRJZHM7IC8vIHdoZW4gdGhlcmUgaXMgb25seSBvbmUgdG91Y2gsIHRoZSBwcm9jZXNzIGNhbiBiZSBzaW1wbGlmaWVkXG5cbiAgICBpZiAodHlwZSAmIChJTlBVVF9TVEFSVCB8IElOUFVUX01PVkUpICYmIGFsbFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0YXJnZXRJZHNbYWxsVG91Y2hlc1swXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICByZXR1cm4gW2FsbFRvdWNoZXMsIGFsbFRvdWNoZXNdO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciB0YXJnZXRUb3VjaGVzO1xuICAgIHZhciBjaGFuZ2VkVG91Y2hlcyA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpO1xuICAgIHZhciBjaGFuZ2VkVGFyZ2V0VG91Y2hlcyA9IFtdO1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldDsgLy8gZ2V0IHRhcmdldCB0b3VjaGVzIGZyb20gdG91Y2hlc1xuXG4gICAgdGFyZ2V0VG91Y2hlcyA9IGFsbFRvdWNoZXMuZmlsdGVyKGZ1bmN0aW9uICh0b3VjaCkge1xuICAgICAgcmV0dXJuIGhhc1BhcmVudCh0b3VjaC50YXJnZXQsIHRhcmdldCk7XG4gICAgfSk7IC8vIGNvbGxlY3QgdG91Y2hlc1xuXG4gICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCB0YXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICB0YXJnZXRJZHNbdGFyZ2V0VG91Y2hlc1tpXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IC8vIGZpbHRlciBjaGFuZ2VkIHRvdWNoZXMgdG8gb25seSBjb250YWluIHRvdWNoZXMgdGhhdCBleGlzdCBpbiB0aGUgY29sbGVjdGVkIHRhcmdldCBpZHNcblxuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGNoYW5nZWRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgaWYgKHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5wdXNoKGNoYW5nZWRUb3VjaGVzW2ldKTtcbiAgICAgIH0gLy8gY2xlYW51cCByZW1vdmVkIHRvdWNoZXNcblxuXG4gICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgIGRlbGV0ZSB0YXJnZXRJZHNbY2hhbmdlZFRvdWNoZXNbaV0uaWRlbnRpZmllcl07XG4gICAgICB9XG5cbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoIWNoYW5nZWRUYXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBbLy8gbWVyZ2UgdGFyZ2V0VG91Y2hlcyB3aXRoIGNoYW5nZWRUYXJnZXRUb3VjaGVzIHNvIGl0IGNvbnRhaW5zIEFMTCB0b3VjaGVzLCBpbmNsdWRpbmcgJ2VuZCcgYW5kICdjYW5jZWwnXG4gICAgdW5pcXVlQXJyYXkodGFyZ2V0VG91Y2hlcy5jb25jYXQoY2hhbmdlZFRhcmdldFRvdWNoZXMpLCAnaWRlbnRpZmllcicsIHRydWUpLCBjaGFuZ2VkVGFyZ2V0VG91Y2hlc107XG4gIH1cblxuICB2YXIgTU9VU0VfSU5QVVRfTUFQID0ge1xuICAgIG1vdXNlZG93bjogSU5QVVRfU1RBUlQsXG4gICAgbW91c2Vtb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIG1vdXNldXA6IElOUFVUX0VORFxuICB9O1xuICB2YXIgTU9VU0VfRUxFTUVOVF9FVkVOVFMgPSAnbW91c2Vkb3duJztcbiAgdmFyIE1PVVNFX1dJTkRPV19FVkVOVFMgPSAnbW91c2Vtb3ZlIG1vdXNldXAnO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogTW91c2UgZXZlbnRzIGlucHV0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBJbnB1dFxuICAgKi9cblxuICB2YXIgTW91c2VJbnB1dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0lucHV0KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoTW91c2VJbnB1dCwgX0lucHV0KTtcblxuICAgIGZ1bmN0aW9uIE1vdXNlSW5wdXQoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIHZhciBwcm90byA9IE1vdXNlSW5wdXQucHJvdG90eXBlO1xuICAgICAgcHJvdG8uZXZFbCA9IE1PVVNFX0VMRU1FTlRfRVZFTlRTO1xuICAgICAgcHJvdG8uZXZXaW4gPSBNT1VTRV9XSU5ET1dfRVZFTlRTO1xuICAgICAgX3RoaXMgPSBfSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMucHJlc3NlZCA9IGZhbHNlOyAvLyBtb3VzZWRvd24gc3RhdGVcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cblxuXG4gICAgdmFyIF9wcm90byA9IE1vdXNlSW5wdXQucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKGV2KSB7XG4gICAgICB2YXIgZXZlbnRUeXBlID0gTU9VU0VfSU5QVVRfTUFQW2V2LnR5cGVdOyAvLyBvbiBzdGFydCB3ZSB3YW50IHRvIGhhdmUgdGhlIGxlZnQgbW91c2UgYnV0dG9uIGRvd25cblxuICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIGV2LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICB0aGlzLnByZXNzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfTU9WRSAmJiBldi53aGljaCAhPT0gMSkge1xuICAgICAgICBldmVudFR5cGUgPSBJTlBVVF9FTkQ7XG4gICAgICB9IC8vIG1vdXNlIG11c3QgYmUgZG93blxuXG5cbiAgICAgIGlmICghdGhpcy5wcmVzc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIGV2ZW50VHlwZSwge1xuICAgICAgICBwb2ludGVyczogW2V2XSxcbiAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE1vdXNlSW5wdXQ7XG4gIH0oSW5wdXQpO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQ29tYmluZWQgdG91Y2ggYW5kIG1vdXNlIGlucHV0XG4gICAqXG4gICAqIFRvdWNoIGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGVuIG1vdXNlLCBhbmQgd2hpbGUgdG91Y2hpbmcgbm8gbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkLlxuICAgKiBUaGlzIGJlY2F1c2UgdG91Y2ggZGV2aWNlcyBhbHNvIGVtaXQgbW91c2UgZXZlbnRzIHdoaWxlIGRvaW5nIGEgdG91Y2guXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBJbnB1dFxuICAgKi9cblxuXG4gIHZhciBERURVUF9USU1FT1VUID0gMjUwMDtcbiAgdmFyIERFRFVQX0RJU1RBTkNFID0gMjU7XG5cbiAgZnVuY3Rpb24gc2V0TGFzdFRvdWNoKGV2ZW50RGF0YSkge1xuICAgIHZhciBfZXZlbnREYXRhJGNoYW5nZWRQb2kgPSBldmVudERhdGEuY2hhbmdlZFBvaW50ZXJzLFxuICAgICAgICB0b3VjaCA9IF9ldmVudERhdGEkY2hhbmdlZFBvaVswXTtcblxuICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLnByaW1hcnlUb3VjaCkge1xuICAgICAgdmFyIGxhc3RUb3VjaCA9IHtcbiAgICAgICAgeDogdG91Y2guY2xpZW50WCxcbiAgICAgICAgeTogdG91Y2guY2xpZW50WVxuICAgICAgfTtcbiAgICAgIHZhciBsdHMgPSB0aGlzLmxhc3RUb3VjaGVzO1xuICAgICAgdGhpcy5sYXN0VG91Y2hlcy5wdXNoKGxhc3RUb3VjaCk7XG5cbiAgICAgIHZhciByZW1vdmVMYXN0VG91Y2ggPSBmdW5jdGlvbiByZW1vdmVMYXN0VG91Y2goKSB7XG4gICAgICAgIHZhciBpID0gbHRzLmluZGV4T2YobGFzdFRvdWNoKTtcblxuICAgICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgICAgbHRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2V0VGltZW91dChyZW1vdmVMYXN0VG91Y2gsIERFRFVQX1RJTUVPVVQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZFRvdWNoZXMoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgIHRoaXMucHJpbWFyeVRvdWNoID0gZXZlbnREYXRhLmNoYW5nZWRQb2ludGVyc1swXS5pZGVudGlmaWVyO1xuICAgICAgc2V0TGFzdFRvdWNoLmNhbGwodGhpcywgZXZlbnREYXRhKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICBzZXRMYXN0VG91Y2guY2FsbCh0aGlzLCBldmVudERhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ludGhldGljRXZlbnQoZXZlbnREYXRhKSB7XG4gICAgdmFyIHggPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WDtcbiAgICB2YXIgeSA9IGV2ZW50RGF0YS5zcmNFdmVudC5jbGllbnRZO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxhc3RUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHRoaXMubGFzdFRvdWNoZXNbaV07XG4gICAgICB2YXIgZHggPSBNYXRoLmFicyh4IC0gdC54KTtcbiAgICAgIHZhciBkeSA9IE1hdGguYWJzKHkgLSB0LnkpO1xuXG4gICAgICBpZiAoZHggPD0gREVEVVBfRElTVEFOQ0UgJiYgZHkgPD0gREVEVVBfRElTVEFOQ0UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIFRvdWNoTW91c2VJbnB1dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgdmFyIFRvdWNoTW91c2VJbnB1dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0lucHV0KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShUb3VjaE1vdXNlSW5wdXQsIF9JbnB1dCk7XG5cbiAgICAgIGZ1bmN0aW9uIFRvdWNoTW91c2VJbnB1dChfbWFuYWdlciwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzO1xuXG4gICAgICAgIF90aGlzID0gX0lucHV0LmNhbGwodGhpcywgX21hbmFnZXIsIGNhbGxiYWNrKSB8fCB0aGlzO1xuXG4gICAgICAgIF90aGlzLmhhbmRsZXIgPSBmdW5jdGlvbiAobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKSB7XG4gICAgICAgICAgdmFyIGlzVG91Y2ggPSBpbnB1dERhdGEucG9pbnRlclR5cGUgPT09IElOUFVUX1RZUEVfVE9VQ0g7XG4gICAgICAgICAgdmFyIGlzTW91c2UgPSBpbnB1dERhdGEucG9pbnRlclR5cGUgPT09IElOUFVUX1RZUEVfTU9VU0U7XG5cbiAgICAgICAgICBpZiAoaXNNb3VzZSAmJiBpbnB1dERhdGEuc291cmNlQ2FwYWJpbGl0aWVzICYmIGlucHV0RGF0YS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gd2hlbiB3ZSdyZSBpbiBhIHRvdWNoIGV2ZW50LCByZWNvcmQgdG91Y2hlcyB0byAgZGUtZHVwZSBzeW50aGV0aWMgbW91c2UgZXZlbnRcblxuXG4gICAgICAgICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgICAgICAgIHJlY29yZFRvdWNoZXMuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkJDEoX2Fzc2VydFRoaXNJbml0aWFsaXplZCQxKF90aGlzKSksIGlucHV0RXZlbnQsIGlucHV0RGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc01vdXNlICYmIGlzU3ludGhldGljRXZlbnQuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkJDEoX2Fzc2VydFRoaXNJbml0aWFsaXplZCQxKF90aGlzKSksIGlucHV0RGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5jYWxsYmFjayhtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLnRvdWNoID0gbmV3IFRvdWNoSW5wdXQoX3RoaXMubWFuYWdlciwgX3RoaXMuaGFuZGxlcik7XG4gICAgICAgIF90aGlzLm1vdXNlID0gbmV3IE1vdXNlSW5wdXQoX3RoaXMubWFuYWdlciwgX3RoaXMuaGFuZGxlcik7XG4gICAgICAgIF90aGlzLnByaW1hcnlUb3VjaCA9IG51bGw7XG4gICAgICAgIF90aGlzLmxhc3RUb3VjaGVzID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIGhhbmRsZSBtb3VzZSBhbmQgdG91Y2ggZXZlbnRzXG4gICAgICAgKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0RXZlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgICAqL1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBUb3VjaE1vdXNlSW5wdXQucHJvdG90eXBlO1xuICAgICAgLyoqXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAqL1xuXG4gICAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudG91Y2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1vdXNlLmRlc3Ryb3koKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBUb3VjaE1vdXNlSW5wdXQ7XG4gICAgfShJbnB1dCk7XG5cbiAgICByZXR1cm4gVG91Y2hNb3VzZUlucHV0O1xuICB9KCk7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICAgKiBjYWxsZWQgYnkgdGhlIE1hbmFnZXIgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAgICogQHJldHVybnMge0lucHV0fVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUlucHV0SW5zdGFuY2UobWFuYWdlcikge1xuICAgIHZhciBUeXBlOyAvLyBsZXQgaW5wdXRDbGFzcyA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dENsYXNzO1xuXG4gICAgdmFyIGlucHV0Q2xhc3MgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRDbGFzcztcblxuICAgIGlmIChpbnB1dENsYXNzKSB7XG4gICAgICBUeXBlID0gaW5wdXRDbGFzcztcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMpIHtcbiAgICAgIFR5cGUgPSBQb2ludGVyRXZlbnRJbnB1dDtcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfT05MWV9UT1VDSCkge1xuICAgICAgVHlwZSA9IFRvdWNoSW5wdXQ7XG4gICAgfSBlbHNlIGlmICghU1VQUE9SVF9UT1VDSCkge1xuICAgICAgVHlwZSA9IE1vdXNlSW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIFR5cGUgPSBUb3VjaE1vdXNlSW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUeXBlKG1hbmFnZXIsIGlucHV0SGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgd2Ugd2FudCB0byBleGVjdXRlIHRoZSBmbiBvbiBlYWNoIGVudHJ5XG4gICAqIGlmIGl0IGFpbnQgYW4gYXJyYXkgd2UgZG9uJ3Qgd2FudCB0byBkbyBhIHRoaW5nLlxuICAgKiB0aGlzIGlzIHVzZWQgYnkgYWxsIHRoZSBtZXRob2RzIHRoYXQgYWNjZXB0IGEgc2luZ2xlIGFuZCBhcnJheSBhcmd1bWVudC5cbiAgICogQHBhcmFtIHsqfEFycmF5fSBhcmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF1cbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaW52b2tlQXJyYXlBcmcoYXJnLCBmbiwgY29udGV4dCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgIGVhY2goYXJnLCBjb250ZXh0W2ZuXSwgY29udGV4dCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgU1RBVEVfUE9TU0lCTEUgPSAxO1xuICB2YXIgU1RBVEVfQkVHQU4gPSAyO1xuICB2YXIgU1RBVEVfQ0hBTkdFRCA9IDQ7XG4gIHZhciBTVEFURV9FTkRFRCA9IDg7XG4gIHZhciBTVEFURV9SRUNPR05JWkVEID0gU1RBVEVfRU5ERUQ7XG4gIHZhciBTVEFURV9DQU5DRUxMRUQgPSAxNjtcbiAgdmFyIFNUQVRFX0ZBSUxFRCA9IDMyO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogZ2V0IGEgdW5pcXVlIGlkXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHVuaXF1ZUlkXG4gICAqL1xuXG4gIHZhciBfdW5pcXVlSWQgPSAxO1xuXG4gIGZ1bmN0aW9uIHVuaXF1ZUlkKCkge1xuICAgIHJldHVybiBfdW5pcXVlSWQrKztcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogZ2V0IGEgcmVjb2duaXplciBieSBuYW1lIGlmIGl0IGlzIGJvdW5kIHRvIGEgbWFuYWdlclxuICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSBvdGhlclJlY29nbml6ZXJcbiAgICogQHBhcmFtIHtSZWNvZ25pemVyfSByZWNvZ25pemVyXG4gICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCByZWNvZ25pemVyKSB7XG4gICAgdmFyIG1hbmFnZXIgPSByZWNvZ25pemVyLm1hbmFnZXI7XG5cbiAgICBpZiAobWFuYWdlcikge1xuICAgICAgcmV0dXJuIG1hbmFnZXIuZ2V0KG90aGVyUmVjb2duaXplcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG90aGVyUmVjb2duaXplcjtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogZ2V0IGEgdXNhYmxlIHN0cmluZywgdXNlZCBhcyBldmVudCBwb3N0Zml4XG4gICAqIEBwYXJhbSB7Y29uc3RhbnR9IHN0YXRlXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0YXRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3RhdGVTdHIoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgJiBTVEFURV9DQU5DRUxMRUQpIHtcbiAgICAgIHJldHVybiAnY2FuY2VsJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfRU5ERUQpIHtcbiAgICAgIHJldHVybiAnZW5kJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQ0hBTkdFRCkge1xuICAgICAgcmV0dXJuICdtb3ZlJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQkVHQU4pIHtcbiAgICAgIHJldHVybiAnc3RhcnQnO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmVjb2duaXplciBmbG93IGV4cGxhaW5lZDsgKlxuICAgKiBBbGwgcmVjb2duaXplcnMgaGF2ZSB0aGUgaW5pdGlhbCBzdGF0ZSBvZiBQT1NTSUJMRSB3aGVuIGEgaW5wdXQgc2Vzc2lvbiBzdGFydHMuXG4gICAqIFRoZSBkZWZpbml0aW9uIG9mIGEgaW5wdXQgc2Vzc2lvbiBpcyBmcm9tIHRoZSBmaXJzdCBpbnB1dCB1bnRpbCB0aGUgbGFzdCBpbnB1dCwgd2l0aCBhbGwgaXQncyBtb3ZlbWVudCBpbiBpdC4gKlxuICAgKiBFeGFtcGxlIHNlc3Npb24gZm9yIG1vdXNlLWlucHV0OiBtb3VzZWRvd24gLT4gbW91c2Vtb3ZlIC0+IG1vdXNldXBcbiAgICpcbiAgICogT24gZWFjaCByZWNvZ25pemluZyBjeWNsZSAoc2VlIE1hbmFnZXIucmVjb2duaXplKSB0aGUgLnJlY29nbml6ZSgpIG1ldGhvZCBpcyBleGVjdXRlZFxuICAgKiB3aGljaCBkZXRlcm1pbmVzIHdpdGggc3RhdGUgaXQgc2hvdWxkIGJlLlxuICAgKlxuICAgKiBJZiB0aGUgcmVjb2duaXplciBoYXMgdGhlIHN0YXRlIEZBSUxFRCwgQ0FOQ0VMTEVEIG9yIFJFQ09HTklaRUQgKGVxdWFscyBFTkRFRCksIGl0IGlzIHJlc2V0IHRvXG4gICAqIFBPU1NJQkxFIHRvIGdpdmUgaXQgYW5vdGhlciBjaGFuZ2Ugb24gdGhlIG5leHQgY3ljbGUuXG4gICAqXG4gICAqICAgICAgICAgICAgICAgUG9zc2libGVcbiAgICogICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgICAgICAgKy0tLS0tKy0tLS0tLS0tLS0tLS0tLStcbiAgICogICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiAgICAgICstLS0tLSstLS0tLSsgICAgICAgICAgICAgICB8XG4gICAqICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgICAgIHxcbiAgICogICBGYWlsZWQgICAgICBDYW5jZWxsZWQgICAgICAgICAgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0rLS0tLS0tK1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgfFxuICAgKiAgICAgICAgICAgICAgICAgICAgICBSZWNvZ25pemVkICAgICAgIEJlZ2FuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2VkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuZGVkL1JlY29nbml6ZWRcbiAgICovXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFJlY29nbml6ZXJcbiAgICogRXZlcnkgcmVjb2duaXplciBuZWVkcyB0byBleHRlbmQgZnJvbSB0aGlzIGNsYXNzLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICovXG5cblxuICB2YXIgUmVjb2duaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVjb2duaXplcihvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgICBlbmFibGU6IHRydWVcbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgdGhpcy5pZCA9IHVuaXF1ZUlkKCk7XG4gICAgICB0aGlzLm1hbmFnZXIgPSBudWxsOyAvLyBkZWZhdWx0IGlzIGVuYWJsZSB0cnVlXG5cbiAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcbiAgICAgIHRoaXMuc2ltdWx0YW5lb3VzID0ge307XG4gICAgICB0aGlzLnJlcXVpcmVGYWlsID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1JlY29nbml6ZXJ9XG4gICAgICovXG5cblxuICAgIHZhciBfcHJvdG8gPSBSZWNvZ25pemVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQob3B0aW9ucykge1xuICAgICAgYXNzaWduJDEodGhpcy5vcHRpb25zLCBvcHRpb25zKTsgLy8gYWxzbyB1cGRhdGUgdGhlIHRvdWNoQWN0aW9uLCBpbiBjYXNlIHNvbWV0aGluZyBjaGFuZ2VkIGFib3V0IHRoZSBkaXJlY3Rpb25zL2VuYWJsZWQgc3RhdGVcblxuICAgICAgdGhpcy5tYW5hZ2VyICYmIHRoaXMubWFuYWdlci50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG5cblxuICAgIF9wcm90by5yZWNvZ25pemVXaXRoID0gZnVuY3Rpb24gcmVjb2duaXplV2l0aChvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaW11bHRhbmVvdXMgPSB0aGlzLnNpbXVsdGFuZW91cztcbiAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcblxuICAgICAgaWYgKCFzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSkge1xuICAgICAgICBzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSA9IG90aGVyUmVjb2duaXplcjtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlY29nbml6ZVdpdGgodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBkcm9wIHRoZSBzaW11bHRhbmVvdXMgbGluay4gaXQgZG9lc250IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG5cblxuICAgIF9wcm90by5kcm9wUmVjb2duaXplV2l0aCA9IGZ1bmN0aW9uIGRyb3BSZWNvZ25pemVXaXRoKG90aGVyUmVjb2duaXplcikge1xuICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIHJlY29nbml6ZXIgY2FuIG9ubHkgcnVuIHdoZW4gYW4gb3RoZXIgaXMgZmFpbGluZ1xuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLnJlcXVpcmVGYWlsdXJlID0gZnVuY3Rpb24gcmVxdWlyZUZhaWx1cmUob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcXVpcmVGYWlsID0gdGhpcy5yZXF1aXJlRmFpbDtcbiAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcblxuICAgICAgaWYgKGluQXJyYXkocmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcikgPT09IC0xKSB7XG4gICAgICAgIHJlcXVpcmVGYWlsLnB1c2gob3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogZHJvcCB0aGUgcmVxdWlyZUZhaWx1cmUgbGluay4gaXQgZG9lcyBub3QgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLmRyb3BSZXF1aXJlRmFpbHVyZSA9IGZ1bmN0aW9uIGRyb3BSZXF1aXJlRmFpbHVyZShvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgdmFyIGluZGV4ID0gaW5BcnJheSh0aGlzLnJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpO1xuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLnJlcXVpcmVGYWlsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBoYXMgcmVxdWlyZSBmYWlsdXJlcyBib29sZWFuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG5cblxuICAgIF9wcm90by5oYXNSZXF1aXJlRmFpbHVyZXMgPSBmdW5jdGlvbiBoYXNSZXF1aXJlRmFpbHVyZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGggPiAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBpZiB0aGUgcmVjb2duaXplciBjYW4gcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uY2FuUmVjb2duaXplV2l0aCA9IGZ1bmN0aW9uIGNhblJlY29nbml6ZVdpdGgob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICByZXR1cm4gISF0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBZb3Ugc2hvdWxkIHVzZSBgdHJ5RW1pdGAgaW5zdGVhZCBvZiBgZW1pdGAgZGlyZWN0bHkgdG8gY2hlY2tcbiAgICAgKiB0aGF0IGFsbCB0aGUgbmVlZGVkIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQgYmVmb3JlIGVtaXR0aW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoaW5wdXQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgc2VsZi5tYW5hZ2VyLmVtaXQoZXZlbnQsIGlucHV0KTtcbiAgICAgIH0gLy8gJ3BhbnN0YXJ0JyBhbmQgJ3Bhbm1vdmUnXG5cblxuICAgICAgaWYgKHN0YXRlIDwgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQgKyBzdGF0ZVN0cihzdGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCk7IC8vIHNpbXBsZSAnZXZlbnROYW1lJyBldmVudHNcblxuICAgICAgaWYgKGlucHV0LmFkZGl0aW9uYWxFdmVudCkge1xuICAgICAgICAvLyBhZGRpdGlvbmFsIGV2ZW50KHBhbmxlZnQsIHBhbnJpZ2h0LCBwaW5jaGluLCBwaW5jaG91dC4uLilcbiAgICAgICAgZW1pdChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpO1xuICAgICAgfSAvLyBwYW5lbmQgYW5kIHBhbmNhbmNlbFxuXG5cbiAgICAgIGlmIChzdGF0ZSA+PSBTVEFURV9FTkRFRCkge1xuICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCArIHN0YXRlU3RyKHN0YXRlKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIENoZWNrIHRoYXQgYWxsIHRoZSByZXF1aXJlIGZhaWx1cmUgcmVjb2duaXplcnMgaGFzIGZhaWxlZCxcbiAgICAgKiBpZiB0cnVlLCBpdCBlbWl0cyBhIGdlc3R1cmUgZXZlbnQsXG4gICAgICogb3RoZXJ3aXNlLCBzZXR1cCB0aGUgc3RhdGUgdG8gRkFJTEVELlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8udHJ5RW1pdCA9IGZ1bmN0aW9uIHRyeUVtaXQoaW5wdXQpIHtcbiAgICAgIGlmICh0aGlzLmNhbkVtaXQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KGlucHV0KTtcbiAgICAgIH0gLy8gaXQncyBmYWlsaW5nIGFueXdheVxuXG5cbiAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIGNhbiB3ZSBlbWl0P1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uY2FuRW1pdCA9IGZ1bmN0aW9uIGNhbkVtaXQoKSB7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCEodGhpcy5yZXF1aXJlRmFpbFtpXS5zdGF0ZSAmIChTVEFURV9GQUlMRUQgfCBTVEFURV9QT1NTSUJMRSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogdXBkYXRlIHRoZSByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8ucmVjb2duaXplID0gZnVuY3Rpb24gcmVjb2duaXplKGlucHV0RGF0YSkge1xuICAgICAgLy8gbWFrZSBhIG5ldyBjb3B5IG9mIHRoZSBpbnB1dERhdGFcbiAgICAgIC8vIHNvIHdlIGNhbiBjaGFuZ2UgdGhlIGlucHV0RGF0YSB3aXRob3V0IG1lc3NpbmcgdXAgdGhlIG90aGVyIHJlY29nbml6ZXJzXG4gICAgICB2YXIgaW5wdXREYXRhQ2xvbmUgPSBhc3NpZ24kMSh7fSwgaW5wdXREYXRhKTsgLy8gaXMgaXMgZW5hYmxlZCBhbmQgYWxsb3cgcmVjb2duaXppbmc/XG5cbiAgICAgIGlmICghYm9vbE9yRm4odGhpcy5vcHRpb25zLmVuYWJsZSwgW3RoaXMsIGlucHV0RGF0YUNsb25lXSkpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHJlc2V0IHdoZW4gd2UndmUgcmVhY2hlZCB0aGUgZW5kXG5cblxuICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfUkVDT0dOSVpFRCB8IFNUQVRFX0NBTkNFTExFRCB8IFNUQVRFX0ZBSUxFRCkpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BPU1NJQkxFO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRlID0gdGhpcy5wcm9jZXNzKGlucHV0RGF0YUNsb25lKTsgLy8gdGhlIHJlY29nbml6ZXIgaGFzIHJlY29nbml6ZWQgYSBnZXN0dXJlXG4gICAgICAvLyBzbyB0cmlnZ2VyIGFuIGV2ZW50XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEIHwgU1RBVEVfQ0FOQ0VMTEVEKSkge1xuICAgICAgICB0aGlzLnRyeUVtaXQoaW5wdXREYXRhQ2xvbmUpO1xuICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiByZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSByZWNvZ25pemVyXG4gICAgICogdGhlIGFjdHVhbCByZWNvZ25pemluZyBoYXBwZW5zIGluIHRoaXMgbWV0aG9kXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICogQHJldHVybnMge2NvbnN0YW50fSBTVEFURVxuICAgICAqL1xuXG4gICAgLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuXG5cbiAgICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoaW5wdXREYXRhKSB7fTtcbiAgICAvKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiByZXR1cm4gdGhlIHByZWZlcnJlZCB0b3VjaC1hY3Rpb25cbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLmdldFRvdWNoQWN0aW9uID0gZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb24oKSB7fTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBnZXN0dXJlIGlzbid0IGFsbG93ZWQgdG8gcmVjb2duaXplXG4gICAgICogbGlrZSB3aGVuIGFub3RoZXIgaXMgYmVpbmcgcmVjb2duaXplZCBvciBpdCBpcyBkaXNhYmxlZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG5cblxuICAgIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge307XG5cbiAgICByZXR1cm4gUmVjb2duaXplcjtcbiAgfSgpO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQSB0YXAgaXMgcmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvaW5nIGEgc21hbGwgdGFwL2NsaWNrLiBNdWx0aXBsZSB0YXBzIGFyZSByZWNvZ25pemVkIGlmIHRoZXkgb2NjdXJcbiAgICogYmV0d2VlbiB0aGUgZ2l2ZW4gaW50ZXJ2YWwgYW5kIHBvc2l0aW9uLiBUaGUgZGVsYXkgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBtdWx0aS10YXBzIHdpdGhvdXQgZmlyaW5nXG4gICAqIGEgc2luZ2xlIHRhcC5cbiAgICpcbiAgICogVGhlIGV2ZW50RGF0YSBmcm9tIHRoZSBlbWl0dGVkIGV2ZW50IGNvbnRhaW5zIHRoZSBwcm9wZXJ0eSBgdGFwQ291bnRgLCB3aGljaCBjb250YWlucyB0aGUgYW1vdW50IG9mXG4gICAqIG11bHRpLXRhcHMgYmVpbmcgcmVjb2duaXplZC5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAgICovXG5cblxuICB2YXIgVGFwUmVjb2duaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlY29nbml6ZXIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShUYXBSZWNvZ25pemVyLCBfUmVjb2duaXplcik7XG5cbiAgICBmdW5jdGlvbiBUYXBSZWNvZ25pemVyKG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX1JlY29nbml6ZXIuY2FsbCh0aGlzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGV2ZW50OiAndGFwJyxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIHRhcHM6IDEsXG4gICAgICAgIGludGVydmFsOiAzMDAsXG4gICAgICAgIC8vIG1heCB0aW1lIGJldHdlZW4gdGhlIG11bHRpLXRhcCB0YXBzXG4gICAgICAgIHRpbWU6IDI1MCxcbiAgICAgICAgLy8gbWF4IHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgZG93biAobGlrZSBmaW5nZXIgb24gdGhlIHNjcmVlbilcbiAgICAgICAgdGhyZXNob2xkOiA5LFxuICAgICAgICAvLyBhIG1pbmltYWwgbW92ZW1lbnQgaXMgb2ssIGJ1dCBrZWVwIGl0IGxvd1xuICAgICAgICBwb3NUaHJlc2hvbGQ6IDEwXG4gICAgICB9LCBvcHRpb25zKSkgfHwgdGhpczsgLy8gcHJldmlvdXMgdGltZSBhbmQgY2VudGVyLFxuICAgICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXG5cbiAgICAgIF90aGlzLnBUaW1lID0gZmFsc2U7XG4gICAgICBfdGhpcy5wQ2VudGVyID0gZmFsc2U7XG4gICAgICBfdGhpcy5fdGltZXIgPSBudWxsO1xuICAgICAgX3RoaXMuX2lucHV0ID0gbnVsbDtcbiAgICAgIF90aGlzLmNvdW50ID0gMDtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gVGFwUmVjb2duaXplci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0VG91Y2hBY3Rpb24gPSBmdW5jdGlvbiBnZXRUb3VjaEFjdGlvbigpIHtcbiAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTl07XG4gICAgfTtcblxuICAgIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcyhpbnB1dCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICB2YXIgdmFsaWRUb3VjaFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPCBvcHRpb25zLnRpbWU7XG4gICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiB0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICB9IC8vIHdlIG9ubHkgYWxsb3cgbGl0dGxlIG1vdmVtZW50XG4gICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG5cblxuICAgICAgaWYgKHZhbGlkTW92ZW1lbnQgJiYgdmFsaWRUb3VjaFRpbWUgJiYgdmFsaWRQb2ludGVycykge1xuICAgICAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9PSBJTlBVVF9FTkQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsVGltZW91dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbGlkSW50ZXJ2YWwgPSB0aGlzLnBUaW1lID8gaW5wdXQudGltZVN0YW1wIC0gdGhpcy5wVGltZSA8IG9wdGlvbnMuaW50ZXJ2YWwgOiB0cnVlO1xuICAgICAgICB2YXIgdmFsaWRNdWx0aVRhcCA9ICF0aGlzLnBDZW50ZXIgfHwgZ2V0RGlzdGFuY2UodGhpcy5wQ2VudGVyLCBpbnB1dC5jZW50ZXIpIDwgb3B0aW9ucy5wb3NUaHJlc2hvbGQ7XG4gICAgICAgIHRoaXMucFRpbWUgPSBpbnB1dC50aW1lU3RhbXA7XG4gICAgICAgIHRoaXMucENlbnRlciA9IGlucHV0LmNlbnRlcjtcblxuICAgICAgICBpZiAoIXZhbGlkTXVsdGlUYXAgfHwgIXZhbGlkSW50ZXJ2YWwpIHtcbiAgICAgICAgICB0aGlzLmNvdW50ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0OyAvLyBpZiB0YXAgY291bnQgbWF0Y2hlcyB3ZSBoYXZlIHJlY29nbml6ZWQgaXQsXG4gICAgICAgIC8vIGVsc2UgaXQgaGFzIGJlZ2FuIHJlY29nbml6aW5nLi4uXG5cbiAgICAgICAgdmFyIHRhcENvdW50ID0gdGhpcy5jb3VudCAlIG9wdGlvbnMudGFwcztcblxuICAgICAgICBpZiAodGFwQ291bnQgPT09IDApIHtcbiAgICAgICAgICAvLyBubyBmYWlsaW5nIHJlcXVpcmVtZW50cywgaW1tZWRpYXRlbHkgdHJpZ2dlciB0aGUgdGFwIGV2ZW50XG4gICAgICAgICAgLy8gb3Igd2FpdCBhcyBsb25nIGFzIHRoZSBtdWx0aXRhcCBpbnRlcnZhbCB0byB0cmlnZ2VyXG4gICAgICAgICAgaWYgKCF0aGlzLmhhc1JlcXVpcmVGYWlsdXJlcygpKSB7XG4gICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcblxuICAgICAgICAgICAgICBfdGhpczIudHJ5RW1pdCgpO1xuICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcnZhbCk7XG4gICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfTtcblxuICAgIF9wcm90by5mYWlsVGltZW91dCA9IGZ1bmN0aW9uIGZhaWxUaW1lb3V0KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgIH0sIHRoaXMub3B0aW9ucy5pbnRlcnZhbCk7XG4gICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfTtcblxuICAgIF9wcm90by5lbWl0ID0gZnVuY3Rpb24gZW1pdCgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgIHRoaXMuX2lucHV0LnRhcENvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUYXBSZWNvZ25pemVyO1xuICB9KFJlY29nbml6ZXIpO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogVGhpcyByZWNvZ25pemVyIGlzIGp1c3QgdXNlZCBhcyBhIGJhc2UgZm9yIHRoZSBzaW1wbGUgYXR0cmlidXRlIHJlY29nbml6ZXJzLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgUmVjb2duaXplclxuICAgKi9cblxuXG4gIHZhciBBdHRyUmVjb2duaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlY29nbml6ZXIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShBdHRyUmVjb2duaXplciwgX1JlY29nbml6ZXIpO1xuXG4gICAgZnVuY3Rpb24gQXR0clJlY29nbml6ZXIob3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfUmVjb2duaXplci5jYWxsKHRoaXMsIF9leHRlbmRzKHtcbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICAgIH0sIG9wdGlvbnMpKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFVzZWQgdG8gY2hlY2sgaWYgaXQgdGhlIHJlY29nbml6ZXIgcmVjZWl2ZXMgdmFsaWQgaW5wdXQsIGxpa2UgaW5wdXQuZGlzdGFuY2UgPiAxMC5cbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gcmVjb2duaXplZFxuICAgICAqL1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQXR0clJlY29nbml6ZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmF0dHJUZXN0ID0gZnVuY3Rpb24gYXR0clRlc3QoaW5wdXQpIHtcbiAgICAgIHZhciBvcHRpb25Qb2ludGVycyA9IHRoaXMub3B0aW9ucy5wb2ludGVycztcbiAgICAgIHJldHVybiBvcHRpb25Qb2ludGVycyA9PT0gMCB8fCBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvblBvaW50ZXJzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBQcm9jZXNzIHRoZSBpbnB1dCBhbmQgcmV0dXJuIHRoZSBzdGF0ZSBmb3IgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Kn0gU3RhdGVcbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLnByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKGlucHV0KSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0LmV2ZW50VHlwZTtcbiAgICAgIHZhciBpc1JlY29nbml6ZWQgPSBzdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQpO1xuICAgICAgdmFyIGlzVmFsaWQgPSB0aGlzLmF0dHJUZXN0KGlucHV0KTsgLy8gb24gY2FuY2VsIGlucHV0IGFuZCB3ZSd2ZSByZWNvZ25pemVkIGJlZm9yZSwgcmV0dXJuIFNUQVRFX0NBTkNFTExFRFxuXG4gICAgICBpZiAoaXNSZWNvZ25pemVkICYmIChldmVudFR5cGUgJiBJTlBVVF9DQU5DRUwgfHwgIWlzVmFsaWQpKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NBTkNFTExFRDtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWNvZ25pemVkIHx8IGlzVmFsaWQpIHtcbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0VOREVEO1xuICAgICAgICB9IGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcbiAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH07XG5cbiAgICByZXR1cm4gQXR0clJlY29nbml6ZXI7XG4gIH0oUmVjb2duaXplcik7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBkaXJlY3Rpb24gY29ucyB0byBzdHJpbmdcbiAgICogQHBhcmFtIHtjb25zdGFudH0gZGlyZWN0aW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uU3RyKGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTl9ET1dOKSB7XG4gICAgICByZXR1cm4gJ2Rvd24nO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT05fVVApIHtcbiAgICAgIHJldHVybiAndXAnO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTEVGVCkge1xuICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX1JJR0hUKSB7XG4gICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFBhblxuICAgKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBhbmQgbW92ZWQgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAgICovXG5cblxuICB2YXIgUGFuUmVjb2duaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0F0dHJSZWNvZ25pemVyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUGFuUmVjb2duaXplciwgX0F0dHJSZWNvZ25pemVyKTtcblxuICAgIGZ1bmN0aW9uIFBhblJlY29nbml6ZXIob3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfQXR0clJlY29nbml6ZXIuY2FsbCh0aGlzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGV2ZW50OiAncGFuJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0FMTFxuICAgICAgfSwgb3B0aW9ucykpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5wWCA9IG51bGw7XG4gICAgICBfdGhpcy5wWSA9IG51bGw7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFBhblJlY29nbml6ZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldFRvdWNoQWN0aW9uID0gZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb24oKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgIHZhciBhY3Rpb25zID0gW107XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXJlY3Rpb25UZXN0ID0gZnVuY3Rpb24gZGlyZWN0aW9uVGVzdChpbnB1dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICB2YXIgaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgdmFyIGRpc3RhbmNlID0gaW5wdXQuZGlzdGFuY2U7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQuZGlyZWN0aW9uO1xuICAgICAgdmFyIHggPSBpbnB1dC5kZWx0YVg7XG4gICAgICB2YXIgeSA9IGlucHV0LmRlbHRhWTsgLy8gbG9jayB0byBheGlzP1xuXG4gICAgICBpZiAoIShkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbikpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICBkaXJlY3Rpb24gPSB4ID09PSAwID8gRElSRUNUSU9OX05PTkUgOiB4IDwgMCA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgICAgICAgIGhhc01vdmVkID0geCAhPT0gdGhpcy5wWDtcbiAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGlucHV0LmRlbHRhWCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlyZWN0aW9uID0geSA9PT0gMCA/IERJUkVDVElPTl9OT05FIDogeSA8IDAgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbiAgICAgICAgICBoYXNNb3ZlZCA9IHkgIT09IHRoaXMucFk7XG4gICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgIHJldHVybiBoYXNNb3ZlZCAmJiBkaXN0YW5jZSA+IG9wdGlvbnMudGhyZXNob2xkICYmIGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIH07XG5cbiAgICBfcHJvdG8uYXR0clRlc3QgPSBmdW5jdGlvbiBhdHRyVGVzdChpbnB1dCkge1xuICAgICAgcmV0dXJuIEF0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJiAoIC8vIHJlcGxhY2Ugd2l0aCBhIHN1cGVyIGNhbGxcbiAgICAgIHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTiB8fCAhKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTikgJiYgdGhpcy5kaXJlY3Rpb25UZXN0KGlucHV0KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5lbWl0ID0gZnVuY3Rpb24gZW1pdChpbnB1dCkge1xuICAgICAgdGhpcy5wWCA9IGlucHV0LmRlbHRhWDtcbiAgICAgIHRoaXMucFkgPSBpbnB1dC5kZWx0YVk7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0LmRpcmVjdGlvbik7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgaW5wdXQuYWRkaXRpb25hbEV2ZW50ID0gdGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uO1xuICAgICAgfVxuXG4gICAgICBfQXR0clJlY29nbml6ZXIucHJvdG90eXBlLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XG4gICAgfTtcblxuICAgIHJldHVybiBQYW5SZWNvZ25pemVyO1xuICB9KEF0dHJSZWNvZ25pemVyKTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFN3aXBlXG4gICAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBtb3ZpbmcgZmFzdCAodmVsb2NpdHkpLCB3aXRoIGVub3VnaCBkaXN0YW5jZSBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICAgKi9cblxuXG4gIHZhciBTd2lwZVJlY29nbml6ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BdHRyUmVjb2duaXplcikge1xuICAgIF9pbmhlcml0c0xvb3NlKFN3aXBlUmVjb2duaXplciwgX0F0dHJSZWNvZ25pemVyKTtcblxuICAgIGZ1bmN0aW9uIFN3aXBlUmVjb2duaXplcihvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9BdHRyUmVjb2duaXplci5jYWxsKHRoaXMsIF9leHRlbmRzKHtcbiAgICAgICAgZXZlbnQ6ICdzd2lwZScsXG4gICAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICAgIHZlbG9jaXR5OiAwLjMsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgICAgIHBvaW50ZXJzOiAxXG4gICAgICB9LCBvcHRpb25zKSkgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gU3dpcGVSZWNvZ25pemVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRUb3VjaEFjdGlvbiA9IGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uKCkge1xuICAgICAgcmV0dXJuIFBhblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIF9wcm90by5hdHRyVGVzdCA9IGZ1bmN0aW9uIGF0dHJUZXN0KGlucHV0KSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgIHZhciB2ZWxvY2l0eTtcblxuICAgICAgaWYgKGRpcmVjdGlvbiAmIChESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCkpIHtcbiAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHk7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5WDtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5WTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9BdHRyUmVjb2duaXplci5wcm90b3R5cGUuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiYgZGlyZWN0aW9uICYgaW5wdXQub2Zmc2V0RGlyZWN0aW9uICYmIGlucHV0LmRpc3RhbmNlID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAmJiBpbnB1dC5tYXhQb2ludGVycyA9PT0gdGhpcy5vcHRpb25zLnBvaW50ZXJzICYmIGFicyh2ZWxvY2l0eSkgPiB0aGlzLm9wdGlvbnMudmVsb2NpdHkgJiYgaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoaW5wdXQpIHtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQub2Zmc2V0RGlyZWN0aW9uKTtcblxuICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyBkaXJlY3Rpb24sIGlucHV0KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCBpbnB1dCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTd2lwZVJlY29nbml6ZXI7XG4gIH0oQXR0clJlY29nbml6ZXIpO1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUGluY2hcbiAgICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXJzIGFyZSBtb3ZpbmcgdG93YXJkICh6b29tLWluKSBvciBhd2F5IGZyb20gZWFjaCBvdGhlciAoem9vbS1vdXQpLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAgICovXG5cblxuICB2YXIgUGluY2hSZWNvZ25pemVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQXR0clJlY29nbml6ZXIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQaW5jaFJlY29nbml6ZXIsIF9BdHRyUmVjb2duaXplcik7XG5cbiAgICBmdW5jdGlvbiBQaW5jaFJlY29nbml6ZXIob3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfQXR0clJlY29nbml6ZXIuY2FsbCh0aGlzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGV2ZW50OiAncGluY2gnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgIHBvaW50ZXJzOiAyXG4gICAgICB9LCBvcHRpb25zKSkgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUGluY2hSZWNvZ25pemVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRUb3VjaEFjdGlvbiA9IGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uKCkge1xuICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgfTtcblxuICAgIF9wcm90by5hdHRyVGVzdCA9IGZ1bmN0aW9uIGF0dHJUZXN0KGlucHV0KSB7XG4gICAgICByZXR1cm4gX0F0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJiAoTWF0aC5hYnMoaW5wdXQuc2NhbGUgLSAxKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGlucHV0KSB7XG4gICAgICBpZiAoaW5wdXQuc2NhbGUgIT09IDEpIHtcbiAgICAgICAgdmFyIGluT3V0ID0gaW5wdXQuc2NhbGUgPCAxID8gJ2luJyA6ICdvdXQnO1xuICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBpbk91dDtcbiAgICAgIH1cblxuICAgICAgX0F0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUGluY2hSZWNvZ25pemVyO1xuICB9KEF0dHJSZWNvZ25pemVyKTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFJvdGF0ZVxuICAgKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlciBhcmUgbW92aW5nIGluIGEgY2lyY3VsYXIgbW90aW9uLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAgICovXG5cblxuICB2YXIgUm90YXRlUmVjb2duaXplciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0F0dHJSZWNvZ25pemVyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUm90YXRlUmVjb2duaXplciwgX0F0dHJSZWNvZ25pemVyKTtcblxuICAgIGZ1bmN0aW9uIFJvdGF0ZVJlY29nbml6ZXIob3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfQXR0clJlY29nbml6ZXIuY2FsbCh0aGlzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGV2ZW50OiAncm90YXRlJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgICAgfSwgb3B0aW9ucykpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFJvdGF0ZVJlY29nbml6ZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldFRvdWNoQWN0aW9uID0gZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmF0dHJUZXN0ID0gZnVuY3Rpb24gYXR0clRlc3QoaW5wdXQpIHtcbiAgICAgIHJldHVybiBfQXR0clJlY29nbml6ZXIucHJvdG90eXBlLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmIChNYXRoLmFicyhpbnB1dC5yb3RhdGlvbikgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTik7XG4gICAgfTtcblxuICAgIHJldHVybiBSb3RhdGVSZWNvZ25pemVyO1xuICB9KEF0dHJSZWNvZ25pemVyKTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIFByZXNzXG4gICAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGZvciB4IG1zIHdpdGhvdXQgYW55IG1vdmVtZW50LlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgUmVjb2duaXplclxuICAgKi9cblxuXG4gIHZhciBQcmVzc1JlY29nbml6ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWNvZ25pemVyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJlc3NSZWNvZ25pemVyLCBfUmVjb2duaXplcik7XG5cbiAgICBmdW5jdGlvbiBQcmVzc1JlY29nbml6ZXIob3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfUmVjb2duaXplci5jYWxsKHRoaXMsIF9leHRlbmRzKHtcbiAgICAgICAgZXZlbnQ6ICdwcmVzcycsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0aW1lOiAyNTEsXG4gICAgICAgIC8vIG1pbmltYWwgdGltZSBvZiB0aGUgcG9pbnRlciB0byBiZSBwcmVzc2VkXG4gICAgICAgIHRocmVzaG9sZDogOVxuICAgICAgfSwgb3B0aW9ucykpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5fdGltZXIgPSBudWxsO1xuICAgICAgX3RoaXMuX2lucHV0ID0gbnVsbDtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJlc3NSZWNvZ25pemVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRUb3VjaEFjdGlvbiA9IGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uKCkge1xuICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fQVVUT107XG4gICAgfTtcblxuICAgIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcyhpbnB1dCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICB2YXIgdmFsaWRUaW1lID0gaW5wdXQuZGVsdGFUaW1lID4gb3B0aW9ucy50aW1lO1xuICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDsgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgIC8vIGFuZCB3ZSd2ZSByZWFjaGVkIGFuIGVuZCBldmVudCwgc28gYSB0YXAgaXMgcG9zc2libGVcblxuICAgICAgaWYgKCF2YWxpZE1vdmVtZW50IHx8ICF2YWxpZFBvaW50ZXJzIHx8IGlucHV0LmV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmICF2YWxpZFRpbWUpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcblxuICAgICAgICAgIF90aGlzMi50cnlFbWl0KCk7XG4gICAgICAgIH0sIG9wdGlvbnMudGltZSk7XG4gICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoaW5wdXQpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlucHV0ICYmIGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyBcInVwXCIsIGlucHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIHRoaXMuX2lucHV0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFByZXNzUmVjb2duaXplcjtcbiAgfShSZWNvZ25pemVyKTtcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBzZXQgaWYgRE9NIGV2ZW50cyBhcmUgYmVpbmcgdHJpZ2dlcmVkLlxuICAgICAqIEJ1dCB0aGlzIGlzIHNsb3dlciBhbmQgdW51c2VkIGJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbnMsIHNvIGRpc2FibGVkIGJ5IGRlZmF1bHQuXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBkb21FdmVudHM6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eS9mYWxsYmFjay5cbiAgICAgKiBXaGVuIHNldCB0byBgY29tcHV0ZWAgaXQgd2lsbCBtYWdpY2FsbHkgc2V0IHRoZSBjb3JyZWN0IHZhbHVlIGJhc2VkIG9uIHRoZSBhZGRlZCByZWNvZ25pemVycy5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IGNvbXB1dGVcbiAgICAgKi9cbiAgICB0b3VjaEFjdGlvbjogVE9VQ0hfQUNUSU9OX0NPTVBVVEUsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBlbmFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEVYUEVSSU1FTlRBTCBGRUFUVVJFIC0tIGNhbiBiZSByZW1vdmVkL2NoYW5nZWRcbiAgICAgKiBDaGFuZ2UgdGhlIHBhcmVudCBpbnB1dCB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBJZiBOdWxsLCB0aGVuIGl0IGlzIGJlaW5nIHNldCB0aGUgdG8gbWFpbiBlbGVtZW50LlxuICAgICAqIEB0eXBlIHtOdWxsfEV2ZW50VGFyZ2V0fVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpbnB1dFRhcmdldDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogZm9yY2UgYW4gaW5wdXQgY2xhc3NcbiAgICAgKiBAdHlwZSB7TnVsbHxGdW5jdGlvbn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRDbGFzczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogU29tZSBDU1MgcHJvcGVydGllcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHRoZSB3b3JraW5nIG9mIEhhbW1lci5cbiAgICAgKiBBZGQgdGhlbSB0byB0aGlzIG1ldGhvZCBhbmQgdGhleSB3aWxsIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIuXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIGNzc1Byb3BzOiB7XG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBEaXNhYmxlcyB0ZXh0IHNlbGVjdGlvbiB0byBpbXByb3ZlIHRoZSBkcmFnZ2luZyBnZXN0dXJlLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgKi9cbiAgICAgIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBEaXNhYmxlIHRoZSBXaW5kb3dzIFBob25lIGdyaXBwZXJzIHdoZW4gcHJlc3NpbmcgYW4gZWxlbWVudC5cbiAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAqL1xuICAgICAgdG91Y2hTZWxlY3Q6IFwibm9uZVwiLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBEaXNhYmxlcyB0aGUgZGVmYXVsdCBjYWxsb3V0IHNob3duIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0LlxuICAgICAgICogT24gaU9TLCB3aGVuIHlvdSB0b3VjaCBhbmQgaG9sZCBhIHRvdWNoIHRhcmdldCBzdWNoIGFzIGEgbGluaywgU2FmYXJpIGRpc3BsYXlzXG4gICAgICAgKiBhIGNhbGxvdXQgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluay4gVGhpcyBwcm9wZXJ0eSBhbGxvd3MgeW91IHRvIGRpc2FibGUgdGhhdCBjYWxsb3V0LlxuICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICovXG4gICAgICB0b3VjaENhbGxvdXQ6IFwibm9uZVwiLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB6b29taW5nIGlzIGVuYWJsZWQuIFVzZWQgYnkgSUUxMD5cbiAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAqL1xuICAgICAgY29udGVudFpvb21pbmc6IFwibm9uZVwiLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBlbnRpcmUgZWxlbWVudCBzaG91bGQgYmUgZHJhZ2dhYmxlIGluc3RlYWQgb2YgaXRzIGNvbnRlbnRzLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgKi9cbiAgICAgIHVzZXJEcmFnOiBcIm5vbmVcIixcblxuICAgICAgLyoqXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogT3ZlcnJpZGVzIHRoZSBoaWdobGlnaHQgY29sb3Igc2hvd24gd2hlbiB0aGUgdXNlciB0YXBzIGEgbGluayBvciBhIEphdmFTY3JpcHRcbiAgICAgICAqIGNsaWNrYWJsZSBlbGVtZW50IGluIGlPUy4gVGhpcyBwcm9wZXJ0eSBvYmV5cyB0aGUgYWxwaGEgdmFsdWUsIGlmIHNwZWNpZmllZC5cbiAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgKiBAZGVmYXVsdCAncmdiYSgwLDAsMCwwKSdcbiAgICAgICAqL1xuICAgICAgdGFwSGlnaGxpZ2h0Q29sb3I6IFwicmdiYSgwLDAsMCwwKVwiXG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogRGVmYXVsdCByZWNvZ25pemVyIHNldHVwIHdoZW4gY2FsbGluZyBgSGFtbWVyKClgXG4gICAqIFdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlciB0aGVzZSB3aWxsIGJlIHNraXBwZWQuXG4gICAqIFRoaXMgaXMgc2VwYXJhdGVkIHdpdGggb3RoZXIgZGVmYXVsdHMgYmVjYXVzZSBvZiB0cmVlLXNoYWtpbmcuXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG5cbiAgdmFyIHByZXNldCA9IFtbUm90YXRlUmVjb2duaXplciwge1xuICAgIGVuYWJsZTogZmFsc2VcbiAgfV0sIFtQaW5jaFJlY29nbml6ZXIsIHtcbiAgICBlbmFibGU6IGZhbHNlXG4gIH0sIFsncm90YXRlJ11dLCBbU3dpcGVSZWNvZ25pemVyLCB7XG4gICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTFxuICB9XSwgW1BhblJlY29nbml6ZXIsIHtcbiAgICBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMXG4gIH0sIFsnc3dpcGUnXV0sIFtUYXBSZWNvZ25pemVyXSwgW1RhcFJlY29nbml6ZXIsIHtcbiAgICBldmVudDogJ2RvdWJsZXRhcCcsXG4gICAgdGFwczogMlxuICB9LCBbJ3RhcCddXSwgW1ByZXNzUmVjb2duaXplcl1dO1xuICB2YXIgU1RPUCA9IDE7XG4gIHZhciBGT1JDRURfU1RPUCA9IDI7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBhZGQvcmVtb3ZlIHRoZSBjc3MgcHJvcGVydGllcyBhcyBkZWZpbmVkIGluIG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wc1xuICAgKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAgICogQHBhcmFtIHtCb29sZWFufSBhZGRcbiAgICovXG5cbiAgZnVuY3Rpb24gdG9nZ2xlQ3NzUHJvcHMobWFuYWdlciwgYWRkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG5cbiAgICBpZiAoIWVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJvcDtcbiAgICBlYWNoKG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wcywgZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7XG4gICAgICBwcm9wID0gcHJlZml4ZWQoZWxlbWVudC5zdHlsZSwgbmFtZSk7XG5cbiAgICAgIGlmIChhZGQpIHtcbiAgICAgICAgbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSA9IGVsZW1lbnQuc3R5bGVbcHJvcF07XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBtYW5hZ2VyLm9sZENzc1Byb3BzW3Byb3BdIHx8IFwiXCI7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWFkZCkge1xuICAgICAgbWFuYWdlci5vbGRDc3NQcm9wcyA9IHt9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogdHJpZ2dlciBkb20gZXZlbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgdmFyIGdlc3R1cmVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgZ2VzdHVyZUV2ZW50LmluaXRFdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgZ2VzdHVyZUV2ZW50Lmdlc3R1cmUgPSBkYXRhO1xuICAgIGRhdGEudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VzdHVyZUV2ZW50KTtcbiAgfVxuICAvKipcbiAgKiBAcHJpdmF0ZVxuICAgKiBNYW5hZ2VyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG5cblxuICB2YXIgTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24kMSh7fSwgZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuICAgICAgdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0ID0gdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0IHx8IGVsZW1lbnQ7XG4gICAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICAgIHRoaXMucmVjb2duaXplcnMgPSBbXTtcbiAgICAgIHRoaXMub2xkQ3NzUHJvcHMgPSB7fTtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLmlucHV0ID0gY3JlYXRlSW5wdXRJbnN0YW5jZSh0aGlzKTtcbiAgICAgIHRoaXMudG91Y2hBY3Rpb24gPSBuZXcgVG91Y2hBY3Rpb24odGhpcywgdGhpcy5vcHRpb25zLnRvdWNoQWN0aW9uKTtcbiAgICAgIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIHRydWUpO1xuICAgICAgZWFjaCh0aGlzLm9wdGlvbnMucmVjb2duaXplcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciByZWNvZ25pemVyID0gX3RoaXMuYWRkKG5ldyBpdGVtWzBdKGl0ZW1bMV0pKTtcblxuICAgICAgICBpdGVtWzJdICYmIHJlY29nbml6ZXIucmVjb2duaXplV2l0aChpdGVtWzJdKTtcbiAgICAgICAgaXRlbVszXSAmJiByZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKGl0ZW1bM10pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuXG5cbiAgICB2YXIgX3Byb3RvID0gTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KG9wdGlvbnMpIHtcbiAgICAgIGFzc2lnbiQxKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7IC8vIE9wdGlvbnMgdGhhdCBuZWVkIGEgbGl0dGxlIG1vcmUgc2V0dXBcblxuICAgICAgaWYgKG9wdGlvbnMudG91Y2hBY3Rpb24pIHtcbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaW5wdXRUYXJnZXQpIHtcbiAgICAgICAgLy8gQ2xlYW4gdXAgZXhpc3RpbmcgZXZlbnQgbGlzdGVuZXJzIGFuZCByZWluaXRpYWxpemVcbiAgICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaW5wdXQudGFyZ2V0ID0gb3B0aW9ucy5pbnB1dFRhcmdldDtcbiAgICAgICAgdGhpcy5pbnB1dC5pbml0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBzdG9wIHJlY29nbml6aW5nIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICogVGhpcyBzZXNzaW9uIHdpbGwgYmUgZGlzY2FyZGVkLCB3aGVuIGEgbmV3IFtpbnB1dF1zdGFydCBldmVudCBpcyBmaXJlZC5cbiAgICAgKiBXaGVuIGZvcmNlZCwgdGhlIHJlY29nbml6ZXIgY3ljbGUgaXMgc3RvcHBlZCBpbW1lZGlhdGVseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZV1cbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLnN0b3AgPSBmdW5jdGlvbiBzdG9wKGZvcmNlKSB7XG4gICAgICB0aGlzLnNlc3Npb24uc3RvcHBlZCA9IGZvcmNlID8gRk9SQ0VEX1NUT1AgOiBTVE9QO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBydW4gdGhlIHJlY29nbml6ZXJzIVxuICAgICAqIGNhbGxlZCBieSB0aGUgaW5wdXRIYW5kbGVyIGZ1bmN0aW9uIG9uIGV2ZXJ5IG1vdmVtZW50IG9mIHRoZSBwb2ludGVycyAodG91Y2hlcylcbiAgICAgKiBpdCB3YWxrcyB0aHJvdWdoIGFsbCB0aGUgcmVjb2duaXplcnMgYW5kIHRyaWVzIHRvIGRldGVjdCB0aGUgZ2VzdHVyZSB0aGF0IGlzIGJlaW5nIG1hZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG5cblxuICAgIF9wcm90by5yZWNvZ25pemUgPSBmdW5jdGlvbiByZWNvZ25pemUoaW5wdXREYXRhKSB7XG4gICAgICB2YXIgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbjtcblxuICAgICAgaWYgKHNlc3Npb24uc3RvcHBlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHJ1biB0aGUgdG91Y2gtYWN0aW9uIHBvbHlmaWxsXG5cblxuICAgICAgdGhpcy50b3VjaEFjdGlvbi5wcmV2ZW50RGVmYXVsdHMoaW5wdXREYXRhKTtcbiAgICAgIHZhciByZWNvZ25pemVyO1xuICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVyczsgLy8gdGhpcyBob2xkcyB0aGUgcmVjb2duaXplciB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAvLyBzbyB0aGUgcmVjb2duaXplcidzIHN0YXRlIG5lZWRzIHRvIGJlIEJFR0FOLCBDSEFOR0VELCBFTkRFRCBvciBSRUNPR05JWkVEXG4gICAgICAvLyBpZiBubyByZWNvZ25pemVyIGlzIGRldGVjdGluZyBhIHRoaW5nLCBpdCBpcyBzZXQgdG8gYG51bGxgXG5cbiAgICAgIHZhciBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyOyAvLyByZXNldCB3aGVuIHRoZSBsYXN0IHJlY29nbml6ZXIgaXMgcmVjb2duaXplZFxuICAgICAgLy8gb3Igd2hlbiB3ZSdyZSBpbiBhIG5ldyBzZXNzaW9uXG5cbiAgICAgIGlmICghY3VyUmVjb2duaXplciB8fCBjdXJSZWNvZ25pemVyICYmIGN1clJlY29nbml6ZXIuc3RhdGUgJiBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgIHNlc3Npb24uY3VyUmVjb2duaXplciA9IG51bGw7XG4gICAgICAgIGN1clJlY29nbml6ZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgcmVjb2duaXplcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlY29nbml6ZXIgPSByZWNvZ25pemVyc1tpXTsgLy8gZmluZCBvdXQgaWYgd2UgYXJlIGFsbG93ZWQgdHJ5IHRvIHJlY29nbml6ZSB0aGUgaW5wdXQgZm9yIHRoaXMgb25lLlxuICAgICAgICAvLyAxLiAgIGFsbG93IGlmIHRoZSBzZXNzaW9uIGlzIE5PVCBmb3JjZWQgc3RvcHBlZCAoc2VlIHRoZSAuc3RvcCgpIG1ldGhvZClcbiAgICAgICAgLy8gMi4gICBhbGxvdyBpZiB3ZSBzdGlsbCBoYXZlbid0IHJlY29nbml6ZWQgYSBnZXN0dXJlIGluIHRoaXMgc2Vzc2lvbiwgb3IgdGhlIHRoaXMgcmVjb2duaXplciBpcyB0aGUgb25lXG4gICAgICAgIC8vICAgICAgdGhhdCBpcyBiZWluZyByZWNvZ25pemVkLlxuICAgICAgICAvLyAzLiAgIGFsbG93IGlmIHRoZSByZWNvZ25pemVyIGlzIGFsbG93ZWQgdG8gcnVuIHNpbXVsdGFuZW91cyB3aXRoIHRoZSBjdXJyZW50IHJlY29nbml6ZWQgcmVjb2duaXplci5cbiAgICAgICAgLy8gICAgICB0aGlzIGNhbiBiZSBzZXR1cCB3aXRoIHRoZSBgcmVjb2duaXplV2l0aCgpYCBtZXRob2Qgb24gdGhlIHJlY29nbml6ZXIuXG5cbiAgICAgICAgaWYgKHNlc3Npb24uc3RvcHBlZCAhPT0gRk9SQ0VEX1NUT1AgJiYgKCAvLyAxXG4gICAgICAgICFjdXJSZWNvZ25pemVyIHx8IHJlY29nbml6ZXIgPT09IGN1clJlY29nbml6ZXIgfHwgLy8gMlxuICAgICAgICByZWNvZ25pemVyLmNhblJlY29nbml6ZVdpdGgoY3VyUmVjb2duaXplcikpKSB7XG4gICAgICAgICAgLy8gM1xuICAgICAgICAgIHJlY29nbml6ZXIucmVjb2duaXplKGlucHV0RGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjb2duaXplci5yZXNldCgpO1xuICAgICAgICB9IC8vIGlmIHRoZSByZWNvZ25pemVyIGhhcyBiZWVuIHJlY29nbml6aW5nIHRoZSBpbnB1dCBhcyBhIHZhbGlkIGdlc3R1cmUsIHdlIHdhbnQgdG8gc3RvcmUgdGhpcyBvbmUgYXMgdGhlXG4gICAgICAgIC8vIGN1cnJlbnQgYWN0aXZlIHJlY29nbml6ZXIuIGJ1dCBvbmx5IGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhbiBhY3RpdmUgcmVjb2duaXplclxuXG5cbiAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyICYmIHJlY29nbml6ZXIuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQpKSB7XG4gICAgICAgICAgc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgICBjdXJSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogZ2V0IGEgcmVjb2duaXplciBieSBpdHMgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ8TnVsbH1cbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChyZWNvZ25pemVyKSB7XG4gICAgICBpZiAocmVjb2duaXplciBpbnN0YW5jZW9mIFJlY29nbml6ZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb2duaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlY29nbml6ZXJzW2ldLm9wdGlvbnMuZXZlbnQgPT09IHJlY29nbml6ZXIpIHtcbiAgICAgICAgICByZXR1cm4gcmVjb2duaXplcnNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSBhZGQgYSByZWNvZ25pemVyIHRvIHRoZSBtYW5hZ2VyXG4gICAgICogZXhpc3RpbmcgcmVjb2duaXplcnMgd2l0aCB0aGUgc2FtZSBldmVudCBuYW1lIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE1hbmFnZXJ9XG4gICAgICovXG5cblxuICAgIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQocmVjb2duaXplcikge1xuICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsIFwiYWRkXCIsIHRoaXMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSAvLyByZW1vdmUgZXhpc3RpbmdcblxuXG4gICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldChyZWNvZ25pemVyLm9wdGlvbnMuZXZlbnQpO1xuXG4gICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoZXhpc3RpbmcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlY29nbml6ZXJzLnB1c2gocmVjb2duaXplcik7XG4gICAgICByZWNvZ25pemVyLm1hbmFnZXIgPSB0aGlzO1xuICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiByZW1vdmUgYSByZWNvZ25pemVyIGJ5IG5hbWUgb3IgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG5cblxuICAgIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocmVjb2duaXplcikge1xuICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsIFwicmVtb3ZlXCIsIHRoaXMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0UmVjb2duaXplciA9IHRoaXMuZ2V0KHJlY29nbml6ZXIpOyAvLyBsZXQncyBtYWtlIHN1cmUgdGhpcyByZWNvZ25pemVyIGV4aXN0c1xuXG4gICAgICBpZiAocmVjb2duaXplcikge1xuICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuICAgICAgICB2YXIgaW5kZXggPSBpbkFycmF5KHJlY29nbml6ZXJzLCB0YXJnZXRSZWNvZ25pemVyKTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgcmVjb2duaXplcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBiaW5kIGV2ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXG4gICAgICovXG5cblxuICAgIF9wcm90by5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkIHx8IGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGUgdW5iaW5kIGV2ZW50LCBsZWF2ZSBlbWl0IGJsYW5rIHRvIHJlbW92ZSBhbGwgaGFuZGxlcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2hhbmRsZXJdXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuXG5cbiAgICBfcHJvdG8ub2ZmID0gZnVuY3Rpb24gb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgZGVsZXRlIGhhbmRsZXJzW2V2ZW50XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYW5kbGVyc1tldmVudF0gJiYgaGFuZGxlcnNbZXZlbnRdLnNwbGljZShpbkFycmF5KGhhbmRsZXJzW2V2ZW50XSwgaGFuZGxlciksIDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGUgZW1pdCBldmVudCB0byB0aGUgbGlzdGVuZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cblxuXG4gICAgX3Byb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBkYXRhKSB7XG4gICAgICAvLyB3ZSBhbHNvIHdhbnQgdG8gdHJpZ2dlciBkb20gZXZlbnRzXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRvbUV2ZW50cykge1xuICAgICAgICB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpO1xuICAgICAgfSAvLyBubyBoYW5kbGVycywgc28gc2tpcCBpdCBhbGxcblxuXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW2V2ZW50XSAmJiB0aGlzLmhhbmRsZXJzW2V2ZW50XS5zbGljZSgpO1xuXG4gICAgICBpZiAoIWhhbmRsZXJzIHx8ICFoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnR5cGUgPSBldmVudDtcblxuICAgICAgZGF0YS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGF0YS5zcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICBoYW5kbGVyc1tpXShkYXRhKTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBkZXN0cm95IHRoZSBtYW5hZ2VyIGFuZCB1bmJpbmRzIGFsbCBldmVudHNcbiAgICAgKiBpdCBkb2Vzbid0IHVuYmluZCBkb20gZXZlbnRzLCB0aGF0IGlzIHRoZSB1c2VyIG93biByZXNwb25zaWJpbGl0eVxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmVsZW1lbnQgJiYgdG9nZ2xlQ3NzUHJvcHModGhpcywgZmFsc2UpO1xuICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBNYW5hZ2VyO1xuICB9KCk7XG5cbiAgdmFyIFNJTkdMRV9UT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxuICB9O1xuICB2YXIgU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCc7XG4gIHZhciBTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUyA9ICd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCc7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBUb3VjaCBldmVudHMgaW5wdXRcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIElucHV0XG4gICAqL1xuXG4gIHZhciBTaW5nbGVUb3VjaElucHV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfSW5wdXQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShTaW5nbGVUb3VjaElucHV0LCBfSW5wdXQpO1xuXG4gICAgZnVuY3Rpb24gU2luZ2xlVG91Y2hJbnB1dCgpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgdmFyIHByb3RvID0gU2luZ2xlVG91Y2hJbnB1dC5wcm90b3R5cGU7XG4gICAgICBwcm90by5ldlRhcmdldCA9IFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTO1xuICAgICAgcHJvdG8uZXZXaW4gPSBTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUztcbiAgICAgIF90aGlzID0gX0lucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gU2luZ2xlVG91Y2hJbnB1dC5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoZXYpIHtcbiAgICAgIHZhciB0eXBlID0gU0lOR0xFX1RPVUNIX0lOUFVUX01BUFtldi50eXBlXTsgLy8gc2hvdWxkIHdlIGhhbmRsZSB0aGUgdG91Y2ggZXZlbnRzP1xuXG4gICAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG91Y2hlcyA9IG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7IC8vIHdoZW4gZG9uZSwgcmVzZXQgdGhlIHN0YXJ0ZWQgc3RhdGVcblxuICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiB0b3VjaGVzWzBdLmxlbmd0aCAtIHRvdWNoZXNbMV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgdHlwZSwge1xuICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNpbmdsZVRvdWNoSW5wdXQ7XG4gIH0oSW5wdXQpO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsID0gdG9BcnJheShldi50b3VjaGVzKTtcbiAgICB2YXIgY2hhbmdlZCA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpO1xuXG4gICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgYWxsID0gdW5pcXVlQXJyYXkoYWxsLmNvbmNhdChjaGFuZ2VkKSwgJ2lkZW50aWZpZXInLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2FsbCwgY2hhbmdlZF07XG4gIH1cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIHdyYXAgYSBtZXRob2Qgd2l0aCBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgYW5kIHN0YWNrIHRyYWNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbmV3IGZ1bmN0aW9uIHdyYXBwaW5nIHRoZSBzdXBwbGllZCBtZXRob2QuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGVwcmVjYXRlKG1ldGhvZCwgbmFtZSwgbWVzc2FnZSkge1xuICAgIHZhciBkZXByZWNhdGlvbk1lc3NhZ2UgPSBcIkRFUFJFQ0FURUQgTUVUSE9EOiBcIiArIG5hbWUgKyBcIlxcblwiICsgbWVzc2FnZSArIFwiIEFUIFxcblwiO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZSA9IG5ldyBFcnJvcignZ2V0LXN0YWNrLXRyYWNlJyk7XG4gICAgICB2YXIgc3RhY2sgPSBlICYmIGUuc3RhY2sgPyBlLnN0YWNrLnJlcGxhY2UoL15bXlxcKF0rP1tcXG4kXS9nbSwgJycpLnJlcGxhY2UoL15cXHMrYXRcXHMrL2dtLCAnJykucmVwbGFjZSgvXk9iamVjdC48YW5vbnltb3VzPlxccypcXCgvZ20sICd7YW5vbnltb3VzfSgpQCcpIDogJ1Vua25vd24gU3RhY2sgVHJhY2UnO1xuICAgICAgdmFyIGxvZyA9IHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS53YXJuIHx8IHdpbmRvdy5jb25zb2xlLmxvZyk7XG5cbiAgICAgIGlmIChsb2cpIHtcbiAgICAgICAgbG9nLmNhbGwod2luZG93LmNvbnNvbGUsIGRlcHJlY2F0aW9uTWVzc2FnZSwgc3RhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogZXh0ZW5kIG9iamVjdC5cbiAgICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbbWVyZ2U9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAgICovXG5cblxuICB2YXIgZXh0ZW5kID0gZGVwcmVjYXRlKGZ1bmN0aW9uIChkZXN0LCBzcmMsIG1lcmdlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmICghbWVyZ2UgfHwgbWVyZ2UgJiYgZGVzdFtrZXlzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgICB9XG5cbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdDtcbiAgfSwgJ2V4dGVuZCcsICdVc2UgYGFzc2lnbmAuJyk7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBtZXJnZSB0aGUgdmFsdWVzIGZyb20gc3JjIGluIHRoZSBkZXN0LlxuICAgKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgdGhhdCBleGlzdCBpbiBkZXN0IHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIGJ5IHNyY1xuICAgKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICAgKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAgICovXG5cbiAgdmFyIG1lcmdlJDEgPSBkZXByZWNhdGUoZnVuY3Rpb24gKGRlc3QsIHNyYykge1xuICAgIHJldHVybiBleHRlbmQoZGVzdCwgc3JjLCB0cnVlKTtcbiAgfSwgJ21lcmdlJywgJ1VzZSBgYXNzaWduYC4nKTtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGlsZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBiYXNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc11cbiAgICovXG5cbiAgZnVuY3Rpb24gaW5oZXJpdChjaGlsZCwgYmFzZSwgcHJvcGVydGllcykge1xuICAgIHZhciBiYXNlUCA9IGJhc2UucHJvdG90eXBlO1xuICAgIHZhciBjaGlsZFA7XG4gICAgY2hpbGRQID0gY2hpbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlUCk7XG4gICAgY2hpbGRQLmNvbnN0cnVjdG9yID0gY2hpbGQ7XG4gICAgY2hpbGRQLl9zdXBlciA9IGJhc2VQO1xuXG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIGFzc2lnbiQxKGNoaWxkUCwgcHJvcGVydGllcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBzaW1wbGUgZnVuY3Rpb24gYmluZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYmluZEZuKGZuLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kRm4oKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBTaW1wbGUgd2F5IHRvIGNyZWF0ZSBhIG1hbmFnZXIgd2l0aCBhIGRlZmF1bHQgc2V0IG9mIHJlY29nbml6ZXJzLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuXG5cbiAgdmFyIEhhbW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgdmFyIEhhbW1lciA9XG4gICAgLyoqXG4gICAgICAqIEBwcml2YXRlXG4gICAgICAqIEBjb25zdCB7c3RyaW5nfVxuICAgICAgKi9cbiAgICBmdW5jdGlvbiBIYW1tZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgTWFuYWdlcihlbGVtZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlY29nbml6ZXJzOiBwcmVzZXQuY29uY2F0KClcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgSGFtbWVyLlZFUlNJT04gPSBcIjIuMC4xNy1yY1wiO1xuICAgIEhhbW1lci5ESVJFQ1RJT05fQUxMID0gRElSRUNUSU9OX0FMTDtcbiAgICBIYW1tZXIuRElSRUNUSU9OX0RPV04gPSBESVJFQ1RJT05fRE9XTjtcbiAgICBIYW1tZXIuRElSRUNUSU9OX0xFRlQgPSBESVJFQ1RJT05fTEVGVDtcbiAgICBIYW1tZXIuRElSRUNUSU9OX1JJR0hUID0gRElSRUNUSU9OX1JJR0hUO1xuICAgIEhhbW1lci5ESVJFQ1RJT05fVVAgPSBESVJFQ1RJT05fVVA7XG4gICAgSGFtbWVyLkRJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0hPUklaT05UQUw7XG4gICAgSGFtbWVyLkRJUkVDVElPTl9WRVJUSUNBTCA9IERJUkVDVElPTl9WRVJUSUNBTDtcbiAgICBIYW1tZXIuRElSRUNUSU9OX05PTkUgPSBESVJFQ1RJT05fTk9ORTtcbiAgICBIYW1tZXIuRElSRUNUSU9OX0RPV04gPSBESVJFQ1RJT05fRE9XTjtcbiAgICBIYW1tZXIuSU5QVVRfU1RBUlQgPSBJTlBVVF9TVEFSVDtcbiAgICBIYW1tZXIuSU5QVVRfTU9WRSA9IElOUFVUX01PVkU7XG4gICAgSGFtbWVyLklOUFVUX0VORCA9IElOUFVUX0VORDtcbiAgICBIYW1tZXIuSU5QVVRfQ0FOQ0VMID0gSU5QVVRfQ0FOQ0VMO1xuICAgIEhhbW1lci5TVEFURV9QT1NTSUJMRSA9IFNUQVRFX1BPU1NJQkxFO1xuICAgIEhhbW1lci5TVEFURV9CRUdBTiA9IFNUQVRFX0JFR0FOO1xuICAgIEhhbW1lci5TVEFURV9DSEFOR0VEID0gU1RBVEVfQ0hBTkdFRDtcbiAgICBIYW1tZXIuU1RBVEVfRU5ERUQgPSBTVEFURV9FTkRFRDtcbiAgICBIYW1tZXIuU1RBVEVfUkVDT0dOSVpFRCA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgSGFtbWVyLlNUQVRFX0NBTkNFTExFRCA9IFNUQVRFX0NBTkNFTExFRDtcbiAgICBIYW1tZXIuU1RBVEVfRkFJTEVEID0gU1RBVEVfRkFJTEVEO1xuICAgIEhhbW1lci5NYW5hZ2VyID0gTWFuYWdlcjtcbiAgICBIYW1tZXIuSW5wdXQgPSBJbnB1dDtcbiAgICBIYW1tZXIuVG91Y2hBY3Rpb24gPSBUb3VjaEFjdGlvbjtcbiAgICBIYW1tZXIuVG91Y2hJbnB1dCA9IFRvdWNoSW5wdXQ7XG4gICAgSGFtbWVyLk1vdXNlSW5wdXQgPSBNb3VzZUlucHV0O1xuICAgIEhhbW1lci5Qb2ludGVyRXZlbnRJbnB1dCA9IFBvaW50ZXJFdmVudElucHV0O1xuICAgIEhhbW1lci5Ub3VjaE1vdXNlSW5wdXQgPSBUb3VjaE1vdXNlSW5wdXQ7XG4gICAgSGFtbWVyLlNpbmdsZVRvdWNoSW5wdXQgPSBTaW5nbGVUb3VjaElucHV0O1xuICAgIEhhbW1lci5SZWNvZ25pemVyID0gUmVjb2duaXplcjtcbiAgICBIYW1tZXIuQXR0clJlY29nbml6ZXIgPSBBdHRyUmVjb2duaXplcjtcbiAgICBIYW1tZXIuVGFwID0gVGFwUmVjb2duaXplcjtcbiAgICBIYW1tZXIuUGFuID0gUGFuUmVjb2duaXplcjtcbiAgICBIYW1tZXIuU3dpcGUgPSBTd2lwZVJlY29nbml6ZXI7XG4gICAgSGFtbWVyLlBpbmNoID0gUGluY2hSZWNvZ25pemVyO1xuICAgIEhhbW1lci5Sb3RhdGUgPSBSb3RhdGVSZWNvZ25pemVyO1xuICAgIEhhbW1lci5QcmVzcyA9IFByZXNzUmVjb2duaXplcjtcbiAgICBIYW1tZXIub24gPSBhZGRFdmVudExpc3RlbmVycztcbiAgICBIYW1tZXIub2ZmID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnM7XG4gICAgSGFtbWVyLmVhY2ggPSBlYWNoO1xuICAgIEhhbW1lci5tZXJnZSA9IG1lcmdlJDE7XG4gICAgSGFtbWVyLmV4dGVuZCA9IGV4dGVuZDtcbiAgICBIYW1tZXIuYmluZEZuID0gYmluZEZuO1xuICAgIEhhbW1lci5hc3NpZ24gPSBhc3NpZ24kMTtcbiAgICBIYW1tZXIuaW5oZXJpdCA9IGluaGVyaXQ7XG4gICAgSGFtbWVyLmJpbmRGbiA9IGJpbmRGbjtcbiAgICBIYW1tZXIucHJlZml4ZWQgPSBwcmVmaXhlZDtcbiAgICBIYW1tZXIudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgSGFtbWVyLmluQXJyYXkgPSBpbkFycmF5O1xuICAgIEhhbW1lci51bmlxdWVBcnJheSA9IHVuaXF1ZUFycmF5O1xuICAgIEhhbW1lci5zcGxpdFN0ciA9IHNwbGl0U3RyO1xuICAgIEhhbW1lci5ib29sT3JGbiA9IGJvb2xPckZuO1xuICAgIEhhbW1lci5oYXNQYXJlbnQgPSBoYXNQYXJlbnQ7XG4gICAgSGFtbWVyLmFkZEV2ZW50TGlzdGVuZXJzID0gYWRkRXZlbnRMaXN0ZW5lcnM7XG4gICAgSGFtbWVyLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnM7XG4gICAgSGFtbWVyLmRlZmF1bHRzID0gYXNzaWduJDEoe30sIGRlZmF1bHRzLCB7XG4gICAgICBwcmVzZXQ6IHByZXNldFxuICAgIH0pO1xuICAgIHJldHVybiBIYW1tZXI7XG4gIH0oKTsgLy8gIHN0eWxlIGxvYWRlciBidXQgYnkgc2NyaXB0IHRhZywgbm90IGJ5IHRoZSBsb2FkZXIuXG4gIHZhciBSZWFsSGFtbWVyID0gSGFtbWVyO1xuXG4gIGZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDMobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIHN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnZXRJdGVyYXRvck1ldGhvZCQxKG8pIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChpc0FycmF5JDEobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5JDMobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG4gIGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSQzKG8sIG1pbkxlbikgeyB2YXIgX2NvbnRleHQyMTsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5JDMobywgbWluTGVuKTsgdmFyIG4gPSBzbGljZShfY29udGV4dDIxID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pKS5jYWxsKF9jb250ZXh0MjEsIDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIGZyb20kMyhvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheSQzKG8sIG1pbkxlbik7IH1cblxuICBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheSQzKGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuICAvKipcclxuICAgKiBVc2UgdGhpcyBzeW1ib2wgdG8gZGVsZXRlIHByb3BlcmllcyBpbiBkZWVwT2JqZWN0QXNzaWduLlxyXG4gICAqL1xuXG4gIHZhciBERUxFVEUgPSBzeW1ib2woXCJERUxFVEVcIik7XG4gIC8qKlxyXG4gICAqIFB1cmUgdmVyc2lvbiBvZiBkZWVwT2JqZWN0QXNzaWduLCBpdCBkb2Vzbid0IG1vZGlmeSBhbnkgb2YgaXQncyBhcmd1bWVudHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYmFzZSAtIFRoZSBiYXNlIG9iamVjdCB0aGF0IGZ1bGxmaWxzIHRoZSB3aG9sZSBpbnRlcmZhY2UgVC5cclxuICAgKiBAcGFyYW0gdXBkYXRlcyAtIFVwZGF0ZXMgdGhhdCBtYXkgY2hhbmdlIG9yIGRlbGV0ZSBwcm9wcy5cclxuICAgKiBAcmV0dXJucyBBIGJyYW5kIG5ldyBpbnN0YW5jZSB3aXRoIGFsbCB0aGUgc3VwcGxpZWQgb2JqZWN0cyBkZWVwbHkgbWVyZ2VkLlxyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcHVyZURlZXBPYmplY3RBc3NpZ24oYmFzZSkge1xuICAgIHZhciBfY29udGV4dDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB1cGRhdGVzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHVwZGF0ZXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBkZWVwT2JqZWN0QXNzaWduLmFwcGx5KHZvaWQgMCwgY29uY2F0JDEoX2NvbnRleHQgPSBbe30sIGJhc2VdKS5jYWxsKF9jb250ZXh0LCB1cGRhdGVzKSk7XG4gIH1cbiAgLyoqXHJcbiAgICogRGVlcCB2ZXJzaW9uIG9mIG9iamVjdCBhc3NpZ24gd2l0aCBhZGRpdGlvbmFsIGRlbGV0aW5nIGJ5IHRoZSBERUxFVEUgc3ltYm9sLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHZhbHVlcyAtIE9iamVjdHMgdG8gYmUgZGVlcGx5IG1lcmdlZC5cclxuICAgKiBAcmV0dXJucyBUaGUgZmlyc3Qgb2JqZWN0IGZyb20gdmFsdWVzLlxyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGVlcE9iamVjdEFzc2lnbigpIHtcbiAgICB2YXIgbWVyZ2VkID0gZGVlcE9iamVjdEFzc2lnbk5vbmVudHJ5LmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICBzdHJpcERlbGV0ZShtZXJnZWQpO1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH1cbiAgLyoqXHJcbiAgICogRGVlcCB2ZXJzaW9uIG9mIG9iamVjdCBhc3NpZ24gd2l0aCBhZGRpdGlvbmFsIGRlbGV0aW5nIGJ5IHRoZSBERUxFVEUgc3ltYm9sLlxyXG4gICAqXHJcbiAgICogQHJlbWFya3NcclxuICAgKiBUaGlzIGRvZXNuJ3Qgc3RyaXAgdGhlIERFTEVURSBzeW1ib2xzIHNvIHRoZXkgbWF5IGVuZCB1cCBpbiB0aGUgZmluYWwgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB2YWx1ZXMgLSBPYmplY3RzIHRvIGJlIGRlZXBseSBtZXJnZWQuXHJcbiAgICogQHJldHVybnMgVGhlIGZpcnN0IG9iamVjdCBmcm9tIHZhbHVlcy5cclxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRlZXBPYmplY3RBc3NpZ25Ob25lbnRyeSgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgdmFsdWVzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgIH0gZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+IDIpIHtcbiAgICAgIHZhciBfY29udGV4dDI7XG5cbiAgICAgIHJldHVybiBkZWVwT2JqZWN0QXNzaWduTm9uZW50cnkuYXBwbHkodm9pZCAwLCBjb25jYXQkMShfY29udGV4dDIgPSBbZGVlcE9iamVjdEFzc2lnbih2YWx1ZXNbMF0sIHZhbHVlc1sxXSldKS5jYWxsKF9jb250ZXh0MiwgX3RvQ29uc3VtYWJsZUFycmF5KHNsaWNlKHZhbHVlcykuY2FsbCh2YWx1ZXMsIDIpKSkpO1xuICAgIH1cblxuICAgIHZhciBhID0gdmFsdWVzWzBdO1xuICAgIHZhciBiID0gdmFsdWVzWzFdO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDMob3duS2V5cyQxKGIpKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIHByb3AgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoYiwgcHJvcCkpIDtlbHNlIGlmIChiW3Byb3BdID09PSBERUxFVEUpIHtcbiAgICAgICAgICBkZWxldGUgYVtwcm9wXTtcbiAgICAgICAgfSBlbHNlIGlmIChhW3Byb3BdICE9PSBudWxsICYmIGJbcHJvcF0gIT09IG51bGwgJiYgX3R5cGVvZihhW3Byb3BdKSA9PT0gXCJvYmplY3RcIiAmJiBfdHlwZW9mKGJbcHJvcF0pID09PSBcIm9iamVjdFwiICYmICFpc0FycmF5JDEoYVtwcm9wXSkgJiYgIWlzQXJyYXkkMShiW3Byb3BdKSkge1xuICAgICAgICAgIGFbcHJvcF0gPSBkZWVwT2JqZWN0QXNzaWduTm9uZW50cnkoYVtwcm9wXSwgYltwcm9wXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYVtwcm9wXSA9IGNsb25lKGJbcHJvcF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG4gIC8qKlxyXG4gICAqIERlZXAgY2xvbmUgZ2l2ZW4gb2JqZWN0IG9yIGFycmF5LiBJbiBjYXNlIG9mIHByaW1pdGl2ZSBzaW1wbHkgcmV0dXJuLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGEgLSBBbnl0aGluZy5cclxuICAgKiBAcmV0dXJucyBEZWVwIGNsb25lZCBvYmplY3QvYXJyYXkgb3IgdW5jaGFuZ2VkIGEuXHJcbiAgICovXG5cblxuICBmdW5jdGlvbiBjbG9uZShhKSB7XG4gICAgaWYgKGlzQXJyYXkkMShhKSkge1xuICAgICAgcmV0dXJuIG1hcCQzKGEpLmNhbGwoYSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjbG9uZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKF90eXBlb2YoYSkgPT09IFwib2JqZWN0XCIgJiYgYSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGRlZXBPYmplY3RBc3NpZ25Ob25lbnRyeSh7fSwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfVxuICAvKipcclxuICAgKiBTdHJpcCBERUxFVEUgZnJvbSBnaXZlbiBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYSAtIE9iamVjdCB3aGljaCBtYXkgY29udGFpbiBERUxFVEUgYnV0IHdvbid0IGFmdGVyIHRoaXMgaXMgZXhlY3V0ZWQuXHJcbiAgICovXG5cblxuICBmdW5jdGlvbiBzdHJpcERlbGV0ZShhKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JGtleXMgPSBrZXlzJDQoYSk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIHByb3AgPSBfT2JqZWN0JGtleXNbX2ldO1xuXG4gICAgICBpZiAoYVtwcm9wXSA9PT0gREVMRVRFKSB7XG4gICAgICAgIGRlbGV0ZSBhW3Byb3BdO1xuICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKGFbcHJvcF0pID09PSBcIm9iamVjdFwiICYmIGFbcHJvcF0gIT09IG51bGwpIHtcbiAgICAgICAgc3RyaXBEZWxldGUoYVtwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXR1cCBhIG1vY2sgaGFtbWVyLmpzIG9iamVjdCwgZm9yIHVuaXQgdGVzdGluZy5cbiAgICpcbiAgICogSW5zcGlyYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS91YmVyL2RlY2suZ2wvcHVsbC82NThcbiAgICpcbiAgICogQHJldHVybnMge3tvbjogbm9vcCwgb2ZmOiBub29wLCBkZXN0cm95OiBub29wLCBlbWl0OiBub29wLCBnZXQ6IGdldH19XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFtbWVyTW9jaygpIHtcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICAgIHJldHVybiB7XG4gICAgICBvbjogbm9vcCxcbiAgICAgIG9mZjogbm9vcCxcbiAgICAgIGRlc3Ryb3k6IG5vb3AsXG4gICAgICBlbWl0OiBub29wLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2V0OiBub29wXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBIYW1tZXIkMSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cuSGFtbWVyIHx8IFJlYWxIYW1tZXIgOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaGFtbWVyLmpzIGlzIG9ubHkgYXZhaWxhYmxlIGluIGEgYnJvd3Nlciwgbm90IGluIG5vZGUuanMuIFJlcGxhY2luZyBpdCB3aXRoIGEgbW9jayBvYmplY3QuXG4gICAgcmV0dXJuIGhhbW1lck1vY2soKTtcbiAgfTtcbiAgLyoqXG4gICAqIFR1cm4gYW4gZWxlbWVudCBpbnRvIGFuIGNsaWNrVG9Vc2UgZWxlbWVudC5cbiAgICogV2hlbiBub3QgYWN0aXZlLCB0aGUgZWxlbWVudCBoYXMgYSB0cmFuc3BhcmVudCBvdmVybGF5LiBXaGVuIHRoZSBvdmVybGF5IGlzXG4gICAqIGNsaWNrZWQsIHRoZSBtb2RlIGlzIGNoYW5nZWQgdG8gYWN0aXZlLlxuICAgKiBXaGVuIGFjdGl2ZSwgdGhlIGVsZW1lbnQgaXMgZGlzcGxheWVkIHdpdGggYSBibHVlIGJvcmRlciBhcm91bmQgaXQsIGFuZFxuICAgKiB0aGUgaW50ZXJhY3RpdmUgY29udGVudHMgb2YgdGhlIGVsZW1lbnQgY2FuIGJlIHVzZWQuIFdoZW4gY2xpY2tlZCBvdXRzaWRlXG4gICAqIHRoZSBlbGVtZW50LCB0aGUgZWxlbWVudHMgbW9kZSBpcyBjaGFuZ2VkIHRvIGluYWN0aXZlLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRhaW5lclxuICAgKiBAY2xhc3MgQWN0aXZhdG9yXG4gICAqL1xuXG4gIGZ1bmN0aW9uIEFjdGl2YXRvciQxKGNvbnRhaW5lcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIF9jb250ZXh0MztcblxuICAgIHRoaXMuX2NsZWFudXBRdWV1ZSA9IFtdO1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5fZG9tID0ge1xuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBvdmVybGF5OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgfTtcblxuICAgIHRoaXMuX2RvbS5vdmVybGF5LmNsYXNzTGlzdC5hZGQoXCJ2aXMtb3ZlcmxheVwiKTtcblxuICAgIHRoaXMuX2RvbS5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fZG9tLm92ZXJsYXkpO1xuXG4gICAgdGhpcy5fY2xlYW51cFF1ZXVlLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX2RvbS5vdmVybGF5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3RoaXMuX2RvbS5vdmVybGF5KTtcbiAgICB9KTtcblxuICAgIHZhciBoYW1tZXIgPSBIYW1tZXIkMSh0aGlzLl9kb20ub3ZlcmxheSk7XG4gICAgaGFtbWVyLm9uKFwidGFwXCIsIGJpbmQkNihfY29udGV4dDMgPSB0aGlzLl9vblRhcE92ZXJsYXkpLmNhbGwoX2NvbnRleHQzLCB0aGlzKSk7XG5cbiAgICB0aGlzLl9jbGVhbnVwUXVldWUucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBoYW1tZXIuZGVzdHJveSgpOyAvLyBGSVhNRTogY2xlYW5pbmcgdXAgaGFtbWVyIGluc3RhbmNlcyBkb2Vzbid0IHdvcmsgKFRpbWVsaW5lIG5vdCByZW1vdmVkXG4gICAgICAvLyBmcm9tIG1lbW9yeSlcbiAgICB9KTsgLy8gYmxvY2sgYWxsIHRvdWNoIGV2ZW50cyAoZXhjZXB0IHRhcClcblxuXG4gICAgdmFyIGV2ZW50cyA9IFtcInRhcFwiLCBcImRvdWJsZXRhcFwiLCBcInByZXNzXCIsIFwicGluY2hcIiwgXCJwYW5cIiwgXCJwYW5zdGFydFwiLCBcInBhbm1vdmVcIiwgXCJwYW5lbmRcIl07XG5cbiAgICBmb3JFYWNoJDEoZXZlbnRzKS5jYWxsKGV2ZW50cywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBoYW1tZXIub24oZXZlbnQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zcmNFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0pO1xuICAgIH0pOyAvLyBhdHRhY2ggYSBjbGljayBldmVudCB0byB0aGUgd2luZG93LCBpbiBvcmRlciB0byBkZWFjdGl2YXRlIHdoZW4gY2xpY2tpbmcgb3V0c2lkZSB0aGUgdGltZWxpbmVcblxuXG4gICAgaWYgKGRvY3VtZW50ICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIHRoaXMuX29uQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFfaGFzUGFyZW50KGV2ZW50LnRhcmdldCwgY29udGFpbmVyKSkge1xuICAgICAgICAgIF90aGlzLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5fb25DbGljayk7XG5cbiAgICAgIHRoaXMuX2NsZWFudXBRdWV1ZS5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3RoaXMuX29uQ2xpY2spO1xuICAgICAgfSk7XG4gICAgfSAvLyBwcmVwYXJlIGVzY2FwZSBrZXkgbGlzdGVuZXIgZm9yIGRlYWN0aXZhdGluZyB3aGVuIGFjdGl2ZVxuXG5cbiAgICB0aGlzLl9lc2NMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKFwia2V5XCIgaW4gZXZlbnQgPyBldmVudC5rZXkgPT09IFwiRXNjYXBlXCIgOiBldmVudC5rZXlDb2RlID09PSAyN1xuICAgICAgLyogdGhlIGtleUNvZGUgaXMgZm9yIElFMTEgKi9cbiAgICAgICkge1xuICAgICAgICBfdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSAvLyB0dXJuIGludG8gYW4gZXZlbnQgZW1pdHRlclxuXG5cbiAgRW1pdHRlcihBY3RpdmF0b3IkMS5wcm90b3R5cGUpOyAvLyBUaGUgY3VycmVudGx5IGFjdGl2ZSBhY3RpdmF0b3JcblxuICBBY3RpdmF0b3IkMS5jdXJyZW50ID0gbnVsbDtcbiAgLyoqXG4gICAqIERlc3Ryb3kgdGhlIGFjdGl2YXRvci4gQ2xlYW5zIHVwIGFsbCBjcmVhdGVkIERPTSBhbmQgZXZlbnQgbGlzdGVuZXJzXG4gICAqL1xuXG4gIEFjdGl2YXRvciQxLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29udGV4dDQsIF9jb250ZXh0NTtcblxuICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuXG4gICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQzKHJldmVyc2UoX2NvbnRleHQ0ID0gc3BsaWNlKF9jb250ZXh0NSA9IHRoaXMuX2NsZWFudXBRdWV1ZSkuY2FsbChfY29udGV4dDUsIDApKS5jYWxsKF9jb250ZXh0NCkpLFxuICAgICAgICBfc3RlcDI7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIEFjdGl2YXRlIHRoZSBlbGVtZW50XG4gICAqIE92ZXJsYXkgaXMgaGlkZGVuLCBlbGVtZW50IGlzIGRlY29yYXRlZCB3aXRoIGEgYmx1ZSBzaGFkb3cgYm9yZGVyXG4gICAqL1xuXG5cbiAgQWN0aXZhdG9yJDEucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHdlIGFsbG93IG9ubHkgb25lIGFjdGl2ZSBhY3RpdmF0b3IgYXQgYSB0aW1lXG4gICAgaWYgKEFjdGl2YXRvciQxLmN1cnJlbnQpIHtcbiAgICAgIEFjdGl2YXRvciQxLmN1cnJlbnQuZGVhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIEFjdGl2YXRvciQxLmN1cnJlbnQgPSB0aGlzO1xuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLl9kb20ub3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICB0aGlzLl9kb20uY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ2aXMtYWN0aXZlXCIpO1xuXG4gICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIpO1xuICAgIHRoaXMuZW1pdChcImFjdGl2YXRlXCIpOyAvLyB1Z2x5IGhhY2s6IGJpbmQgRVNDIGFmdGVyIGVtaXR0aW5nIHRoZSBldmVudHMsIGFzIHRoZSBOZXR3b3JrIHJlYmluZHMgYWxsXG4gICAgLy8ga2V5Ym9hcmQgZXZlbnRzIG9uIGEgJ2NoYW5nZScgZXZlbnRcblxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5fZXNjTGlzdGVuZXIpO1xuICB9O1xuICAvKipcbiAgICogRGVhY3RpdmF0ZSB0aGUgZWxlbWVudFxuICAgKiBPdmVybGF5IGlzIGRpc3BsYXllZCBvbiB0b3Agb2YgdGhlIGVsZW1lbnRcbiAgICovXG5cblxuICBBY3RpdmF0b3IkMS5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuX2RvbS5vdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICB0aGlzLl9kb20uY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXMtYWN0aXZlXCIpO1xuXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9lc2NMaXN0ZW5lcik7XG4gICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIpO1xuICAgIHRoaXMuZW1pdChcImRlYWN0aXZhdGVcIik7XG4gIH07XG4gIC8qKlxuICAgKiBIYW5kbGUgYSB0YXAgZXZlbnQ6IGFjdGl2YXRlIHRoZSBjb250YWluZXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gIGV2ZW50ICAgVGhlIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgQWN0aXZhdG9yJDEucHJvdG90eXBlLl9vblRhcE92ZXJsYXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBhY3RpdmF0ZSB0aGUgY29udGFpbmVyXG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIGV2ZW50LnNyY0V2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9O1xuICAvKipcbiAgICogVGVzdCB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyB0aGUgcmVxdWVzdGVkIHBhcmVudCBlbGVtZW50IHNvbWV3aGVyZSBpblxuICAgKiBpdHMgY2hhaW4gb2YgcGFyZW50IG5vZGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIHdoZW4gdGhlIHBhcmVudCBpcyBmb3VuZCBzb21ld2hlcmUgaW4gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICBjaGFpbiBvZiBwYXJlbnQgbm9kZXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gX2hhc1BhcmVudChlbGVtZW50LCBwYXJlbnQpIHtcbiAgICB3aGlsZSAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQgPT09IHBhcmVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gdXRpbGl0eSBmdW5jdGlvbnNcblxuICB2YXIgZ2xvYmFsJDQgPSBnbG9iYWwkTTtcbiAgdmFyIGlzQ29uc3RydWN0b3IgPSBpc0NvbnN0cnVjdG9yJDQ7XG4gIHZhciB0cnlUb1N0cmluZyQxID0gdHJ5VG9TdHJpbmckNDtcbiAgdmFyIFR5cGVFcnJvciQzID0gZ2xvYmFsJDQuVHlwZUVycm9yOyAvLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxuXG4gIHZhciBhQ29uc3RydWN0b3IkMSA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICAgIHRocm93IFR5cGVFcnJvciQzKHRyeVRvU3RyaW5nJDEoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICB9O1xuXG4gIHZhciAkJDUgPSBfZXhwb3J0O1xuICB2YXIgZ2V0QnVpbHRJbiQxID0gZ2V0QnVpbHRJbiQ5O1xuICB2YXIgYXBwbHkgPSBmdW5jdGlvbkFwcGx5O1xuICB2YXIgYmluZCQyID0gZnVuY3Rpb25CaW5kO1xuICB2YXIgYUNvbnN0cnVjdG9yID0gYUNvbnN0cnVjdG9yJDE7XG4gIHZhciBhbk9iamVjdCQxID0gYW5PYmplY3QkYjtcbiAgdmFyIGlzT2JqZWN0JDMgPSBpc09iamVjdCRmO1xuICB2YXIgY3JlYXRlJDQgPSBvYmplY3RDcmVhdGU7XG4gIHZhciBmYWlscyQ1ID0gZmFpbHMkcjtcbiAgdmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4kMSgnUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbiAgdmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBwdXNoJDEgPSBbXS5wdXNoOyAvLyBgUmVmbGVjdC5jb25zdHJ1Y3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4gIC8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuICAvLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG5cbiAgdmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMkNShmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRigpIHtcbiAgICAgIC8qIGVtcHR5ICovXG4gICAgfVxuXG4gICAgcmV0dXJuICEobmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qIGVtcHR5ICovXG4gICAgfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG4gIH0pO1xuICB2YXIgQVJHU19CVUcgPSAhZmFpbHMkNShmdW5jdGlvbiAoKSB7XG4gICAgbmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qIGVtcHR5ICovXG4gICAgfSk7XG4gIH0pO1xuICB2YXIgRk9SQ0VEJDEgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcbiAgJCQ1KHtcbiAgICB0YXJnZXQ6ICdSZWZsZWN0JyxcbiAgICBzdGF0OiB0cnVlLFxuICAgIGZvcmNlZDogRk9SQ0VEJDEsXG4gICAgc2hhbTogRk9SQ0VEJDFcbiAgfSwge1xuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJnc1xuICAgIC8qICwgbmV3VGFyZ2V0ICovXG4gICAgKSB7XG4gICAgICBhQ29uc3RydWN0b3IoVGFyZ2V0KTtcbiAgICAgIGFuT2JqZWN0JDEoYXJncyk7XG4gICAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhQ29uc3RydWN0b3IoYXJndW1lbnRzWzJdKTtcbiAgICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiBuYXRpdmVDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuXG4gICAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXQoKTtcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG5cbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcblxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICB9IC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG5cblxuICAgICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAgIGFwcGx5KHB1c2gkMSwgJGFyZ3MsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gbmV3IChhcHBseShiaW5kJDIsIFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgICAgfSAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcblxuXG4gICAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlJDQoaXNPYmplY3QkMyhwcm90bykgPyBwcm90byA6IE9iamVjdFByb3RvdHlwZSk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgICByZXR1cm4gaXNPYmplY3QkMyhyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcGF0aCQzID0gcGF0aCRxO1xuICB2YXIgY29uc3RydWN0JDIgPSBwYXRoJDMuUmVmbGVjdC5jb25zdHJ1Y3Q7XG5cbiAgdmFyIHBhcmVudCRoID0gY29uc3RydWN0JDI7XG4gIHZhciBjb25zdHJ1Y3QkMSA9IHBhcmVudCRoO1xuXG4gIHZhciBjb25zdHJ1Y3QgPSBjb25zdHJ1Y3QkMTtcblxuICBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICB2YXIgcGFyZW50JGcgPSBjcmVhdGUkNjtcbiAgdmFyIGNyZWF0ZSQzID0gcGFyZW50JGc7XG5cbiAgdmFyIHBhcmVudCRmID0gY3JlYXRlJDM7XG4gIHZhciBjcmVhdGUkMiA9IHBhcmVudCRmO1xuXG4gIHZhciBjcmVhdGUkMSA9IGNyZWF0ZSQyO1xuXG4gIHZhciAkJDQgPSBfZXhwb3J0O1xuICB2YXIgc2V0UHJvdG90eXBlT2YkNSA9IG9iamVjdFNldFByb3RvdHlwZU9mOyAvLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2ZcblxuICAkJDQoe1xuICAgIHRhcmdldDogJ09iamVjdCcsXG4gICAgc3RhdDogdHJ1ZVxuICB9LCB7XG4gICAgc2V0UHJvdG90eXBlT2Y6IHNldFByb3RvdHlwZU9mJDVcbiAgfSk7XG5cbiAgdmFyIHBhdGgkMiA9IHBhdGgkcTtcbiAgdmFyIHNldFByb3RvdHlwZU9mJDQgPSBwYXRoJDIuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuXG4gIHZhciBwYXJlbnQkZSA9IHNldFByb3RvdHlwZU9mJDQ7XG4gIHZhciBzZXRQcm90b3R5cGVPZiQzID0gcGFyZW50JGU7XG5cbiAgdmFyIHBhcmVudCRkID0gc2V0UHJvdG90eXBlT2YkMztcbiAgdmFyIHNldFByb3RvdHlwZU9mJDIgPSBwYXJlbnQkZDtcblxuICB2YXIgcGFyZW50JGMgPSBzZXRQcm90b3R5cGVPZiQyO1xuICB2YXIgc2V0UHJvdG90eXBlT2YkMSA9IHBhcmVudCRjO1xuXG4gIHZhciBzZXRQcm90b3R5cGVPZiA9IHNldFByb3RvdHlwZU9mJDE7XG5cbiAgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBfc2V0UHJvdG90eXBlT2YgPSBzZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gY3JlYXRlJDEoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0eSQ3KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7XG4gICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcblxuICAgIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICByZXR1cm4gY2FsbDtcbiAgICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xuICB9XG5cbiAgdmFyIHBhcmVudCRiID0gZ2V0UHJvdG90eXBlT2YkMztcbiAgdmFyIGdldFByb3RvdHlwZU9mJDIgPSBwYXJlbnQkYjtcblxuICB2YXIgcGFyZW50JGEgPSBnZXRQcm90b3R5cGVPZiQyO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YkMSA9IHBhcmVudCRhO1xuXG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IGdldFByb3RvdHlwZU9mJDE7XG5cbiAgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICBfZ2V0UHJvdG90eXBlT2YgPSBzZXRQcm90b3R5cGVPZiA/IGdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBnZXRQcm90b3R5cGVPZihvKTtcbiAgICB9O1xuICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH1cblxuICB2YXIgcnVudGltZSA9IHtleHBvcnRzOiB7fX07XG5cbiAgLyoqXG4gICAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICAgKlxuICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICAgKi9cblxuICAoZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgIHZhciBydW50aW1lID0gZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuICAgICAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgICAgIHZhciB1bmRlZmluZWQkMTsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG5cbiAgICAgIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gICAgICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICAgICAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgICAgIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgICAgIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgICAgIGRlZmluZSh7fSwgXCJcIik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZGVmaW5lID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgICAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICAgICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7IC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAgICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuXG4gICAgICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgICAgIH1cblxuICAgICAgZXhwb3J0cy53cmFwID0gd3JhcDsgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gICAgICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgICAgIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAgICAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAgICAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAgICAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgICAgIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAgICAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAgICAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuXG4gICAgICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgIGFyZzogZm4uY2FsbChvYmosIGFyZylcbiAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJ0aHJvd1wiLFxuICAgICAgICAgICAgYXJnOiBlcnJcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICAgICAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gICAgICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICAgICAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjsgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAgICAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuXG4gICAgICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9OyAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgICAgIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAgICAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgICAgIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG5cbiAgICAgIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG5cbiAgICAgIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cblxuICAgICAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fSAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gICAgICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuXG5cbiAgICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICAgICAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0pO1xuICAgICAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgICAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuXG4gICAgICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAgICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAgICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgICAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICAgICAgfVxuXG4gICAgICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICAgICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpOyAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAgICAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cblxuICAgICAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgICAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uIChnZW5GdW4pIHtcbiAgICAgICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gY3RvciA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8IC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgOiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uIChnZW5GdW4pIHtcbiAgICAgICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgICAgIHJldHVybiBnZW5GdW47XG4gICAgICB9OyAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgICAgIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gICAgICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gICAgICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuXG5cbiAgICAgIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgX19hd2FpdDogYXJnXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICAgICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcblxuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHVud3JhcHBlZCkge1xuICAgICAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgICAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9IC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICAgICAgfSAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgICAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cblxuXG4gICAgICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gICAgICB9XG5cbiAgICAgIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9KTtcbiAgICAgIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7IC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgICAgIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAgICAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG5cbiAgICAgIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG4gICAgICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3Iod3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksIFByb21pc2VJbXBsKTtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICAgICAgfSAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuXG5cbiAgICAgICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcblxuICAgICAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZSA/IEdlblN0YXRlQ29tcGxldGVkIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkOyAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG5cbiAgICAgICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAgICAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAgICAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gICAgICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cblxuXG4gICAgICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkJDEpIHtcbiAgICAgICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQkMTtcbiAgICAgICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlOyAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG5cbiAgICAgICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jOyAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkJDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgfSAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgICAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuXG5cbiAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfSAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAgICAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuXG5cbiAgICAgIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG4gICAgICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTsgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgICAgIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gICAgICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAgICAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgICAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0pO1xuICAgICAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICAgIHRyeUxvYzogbG9jc1swXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgICAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgICAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgICAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICAgICAgdGhpcy50cnlFbnRyaWVzID0gW3tcbiAgICAgICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgICAgIH1dO1xuICAgICAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnJldmVyc2UoKTsgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAgICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuXG4gICAgICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuXG5cbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcblxuICAgICAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkJDE7XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cblxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmV4dDogZG9uZVJlc3VsdFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICAgICAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkJDEsXG4gICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IENvbnRleHQsXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoc2tpcFRlbXBSZXNldCkge1xuICAgICAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICAgICAgdGhpcy5uZXh0ID0gMDsgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuXG4gICAgICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZCQxO1xuICAgICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQkMTtcbiAgICAgICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiYgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiYgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQkMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgICAgICB9LFxuICAgICAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gKGV4Y2VwdGlvbikge1xuICAgICAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG5cbiAgICAgICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCQxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gISFjYXVnaHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWJydXB0OiBmdW5jdGlvbiAodHlwZSwgYXJnKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmluYWxseUVudHJ5ICYmICh0eXBlID09PSBcImJyZWFrXCIgfHwgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJiBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJiBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fCByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmlzaDogZnVuY3Rpb24gKGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImNhdGNoXCI6IGZ1bmN0aW9uICh0cnlMb2MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cblxuXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgICAgICB9LFxuICAgICAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiAoaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQkMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAgICAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gICAgICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgICAgIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG5cbiAgICAgIHJldHVybiBleHBvcnRzO1xuICAgIH0oIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gICAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gICAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgICBtb2R1bGUuZXhwb3J0cyApO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gICAgfSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgICAgIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gICAgICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgICAgIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgICAgIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgICAgIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAgICAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gICAgICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAgICAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgICAgIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAgICAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gICAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pKHJ1bnRpbWUpO1xuXG4gIHZhciByZWdlbmVyYXRvciA9IHJ1bnRpbWUuZXhwb3J0cztcblxuICB2YXIgaW50ZXJuYWxNZXRhZGF0YSA9IHtleHBvcnRzOiB7fX07XG5cbiAgdmFyIGZhaWxzJDQgPSBmYWlscyRyO1xuICB2YXIgYXJyYXlCdWZmZXJOb25FeHRlbnNpYmxlID0gZmFpbHMkNChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcblxuICAgICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUoYnVmZmVyKSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJ1ZmZlciwgJ2EnLCB7XG4gICAgICAgIHZhbHVlOiA4XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBmYWlscyQzID0gZmFpbHMkcjtcbiAgdmFyIGlzT2JqZWN0JDIgPSBpc09iamVjdCRmO1xuICB2YXIgY2xhc3NvZiQzID0gY2xhc3NvZlJhdyQxO1xuICB2YXIgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFID0gYXJyYXlCdWZmZXJOb25FeHRlbnNpYmxlOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG5cbiAgdmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuICB2YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzJDMoZnVuY3Rpb24gKCkge1xuICAgICRpc0V4dGVuc2libGUoMSk7XG4gIH0pOyAvLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxuXG4gIHZhciBvYmplY3RJc0V4dGVuc2libGUgPSBGQUlMU19PTl9QUklNSVRJVkVTIHx8IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIGlmICghaXNPYmplY3QkMihpdCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YkMyhpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlO1xuICB9IDogJGlzRXh0ZW5zaWJsZTtcblxuICB2YXIgZmFpbHMkMiA9IGZhaWxzJHI7XG4gIHZhciBmcmVlemluZyA9ICFmYWlscyQyKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG4gIH0pO1xuXG4gIHZhciAkJDMgPSBfZXhwb3J0O1xuICB2YXIgdW5jdXJyeVRoaXMkMSA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBoaWRkZW5LZXlzID0gaGlkZGVuS2V5cyQ2O1xuICB2YXIgaXNPYmplY3QkMSA9IGlzT2JqZWN0JGY7XG4gIHZhciBoYXNPd24kMyA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSQyID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZjtcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlID0gb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsO1xuICB2YXIgaXNFeHRlbnNpYmxlID0gb2JqZWN0SXNFeHRlbnNpYmxlO1xuICB2YXIgdWlkID0gdWlkJDQ7XG4gIHZhciBGUkVFWklORyA9IGZyZWV6aW5nO1xuICB2YXIgUkVRVUlSRUQgPSBmYWxzZTtcbiAgdmFyIE1FVEFEQVRBID0gdWlkKCdtZXRhJyk7XG4gIHZhciBpZCA9IDA7XG5cbiAgdmFyIHNldE1ldGFkYXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgZGVmaW5lUHJvcGVydHkkMihpdCwgTUVUQURBVEEsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIG9iamVjdElEOiAnTycgKyBpZCsrLFxuICAgICAgICAvLyBvYmplY3QgSURcbiAgICAgICAgd2Vha0RhdGE6IHt9IC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZmFzdEtleSQxID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgICBpZiAoIWlzT2JqZWN0JDEoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuXG4gICAgaWYgKCFoYXNPd24kMyhpdCwgTUVUQURBVEEpKSB7XG4gICAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnOyAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuXG4gICAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJzsgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcblxuICAgICAgc2V0TWV0YWRhdGEoaXQpOyAvLyByZXR1cm4gb2JqZWN0IElEXG4gICAgfVxuXG4gICAgcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbiAgfTtcblxuICB2YXIgZ2V0V2Vha0RhdGEgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAgIGlmICghaGFzT3duJDMoaXQsIE1FVEFEQVRBKSkge1xuICAgICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7IC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG5cbiAgICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7IC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG5cbiAgICAgIHNldE1ldGFkYXRhKGl0KTsgLy8gcmV0dXJuIHRoZSBzdG9yZSBvZiB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICAgIH1cblxuICAgIHJldHVybiBpdFtNRVRBREFUQV0ud2Vha0RhdGE7XG4gIH07IC8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xuXG5cbiAgdmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKEZSRUVaSU5HICYmIFJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhc093biQzKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgICByZXR1cm4gaXQ7XG4gIH07XG5cbiAgdmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBtZXRhLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qIGVtcHR5ICovXG4gICAgfTtcblxuICAgIFJFUVVJUkVEID0gdHJ1ZTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZjtcbiAgICB2YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMkMShbXS5zcGxpY2UpO1xuICAgIHZhciB0ZXN0ID0ge307XG4gICAgdGVzdFtNRVRBREFUQV0gPSAxOyAvLyBwcmV2ZW50IGV4cG9zaW5nIG9mIG1ldGFkYXRhIGtleVxuXG4gICAgaWYgKGdldE93blByb3BlcnR5TmFtZXModGVzdCkubGVuZ3RoKSB7XG4gICAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0W2ldID09PSBNRVRBREFUQSkge1xuICAgICAgICAgICAgc3BsaWNlKHJlc3VsdCwgaSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgJCQzKHtcbiAgICAgICAgdGFyZ2V0OiAnT2JqZWN0JyxcbiAgICAgICAgc3RhdDogdHJ1ZSxcbiAgICAgICAgZm9yY2VkOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZS5mXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1ldGEgPSBpbnRlcm5hbE1ldGFkYXRhLmV4cG9ydHMgPSB7XG4gICAgZW5hYmxlOiBlbmFibGUsXG4gICAgZmFzdEtleTogZmFzdEtleSQxLFxuICAgIGdldFdlYWtEYXRhOiBnZXRXZWFrRGF0YSxcbiAgICBvbkZyZWV6ZTogb25GcmVlemVcbiAgfTtcbiAgaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuXG4gIHZhciBnbG9iYWwkMyA9IGdsb2JhbCRNO1xuICB2YXIgYmluZCQxID0gZnVuY3Rpb25CaW5kQ29udGV4dDtcbiAgdmFyIGNhbGwgPSBmdW5jdGlvbkNhbGw7XG4gIHZhciBhbk9iamVjdCA9IGFuT2JqZWN0JGI7XG4gIHZhciB0cnlUb1N0cmluZyA9IHRyeVRvU3RyaW5nJDQ7XG4gIHZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSBpc0FycmF5SXRlcmF0b3JNZXRob2QkMjtcbiAgdmFyIGxlbmd0aE9mQXJyYXlMaWtlJDEgPSBsZW5ndGhPZkFycmF5TGlrZSRkO1xuICB2YXIgaXNQcm90b3R5cGVPZiQ2ID0gb2JqZWN0SXNQcm90b3R5cGVPZjtcbiAgdmFyIGdldEl0ZXJhdG9yJDUgPSBnZXRJdGVyYXRvciQ3O1xuICB2YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZCQ4O1xuICB2YXIgaXRlcmF0b3JDbG9zZSA9IGl0ZXJhdG9yQ2xvc2UkMjtcbiAgdmFyIFR5cGVFcnJvciQyID0gZ2xvYmFsJDMuVHlwZUVycm9yO1xuXG4gIHZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gICAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgfTtcblxuICB2YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxuICB2YXIgaXRlcmF0ZSQyID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICAgIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICAgIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gICAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgICB2YXIgZm4gPSBiaW5kJDEodW5ib3VuZEZ1bmN0aW9uLCB0aGF0KTtcbiAgICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gICAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnLCBjb25kaXRpb24pO1xuICAgICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgICB9O1xuXG4gICAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgICAgYW5PYmplY3QodmFsdWUpO1xuICAgICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICAgIH07XG5cbiAgICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICAgIGlmICghaXRlckZuKSB0aHJvdyBUeXBlRXJyb3IkMih0cnlUb1N0cmluZyhpdGVyYWJsZSkgKyAnIGlzIG5vdCBpdGVyYWJsZScpOyAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuXG4gICAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlJDEoaXRlcmFibGUpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICAgIGlmIChyZXN1bHQgJiYgaXNQcm90b3R5cGVPZiQ2KFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvciQ1KGl0ZXJhYmxlLCBpdGVyRm4pO1xuICAgIH1cblxuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuXG4gICAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mJDYoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgfTtcblxuICB2YXIgZ2xvYmFsJDIgPSBnbG9iYWwkTTtcbiAgdmFyIGlzUHJvdG90eXBlT2YkNSA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBUeXBlRXJyb3IkMSA9IGdsb2JhbCQyLlR5cGVFcnJvcjtcblxuICB2YXIgYW5JbnN0YW5jZSQyID0gZnVuY3Rpb24gKGl0LCBQcm90b3R5cGUpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZiQ1KFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yJDEoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH07XG5cbiAgdmFyICQkMiA9IF9leHBvcnQ7XG4gIHZhciBnbG9iYWwkMSA9IGdsb2JhbCRNO1xuICB2YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IGludGVybmFsTWV0YWRhdGEuZXhwb3J0cztcbiAgdmFyIGZhaWxzJDEgPSBmYWlscyRyO1xuICB2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDY7XG4gIHZhciBpdGVyYXRlJDEgPSBpdGVyYXRlJDI7XG4gIHZhciBhbkluc3RhbmNlJDEgPSBhbkluc3RhbmNlJDI7XG4gIHZhciBpc0NhbGxhYmxlID0gaXNDYWxsYWJsZSRoO1xuICB2YXIgaXNPYmplY3QgPSBpc09iamVjdCRmO1xuICB2YXIgc2V0VG9TdHJpbmdUYWcgPSBzZXRUb1N0cmluZ1RhZyQ1O1xuICB2YXIgZGVmaW5lUHJvcGVydHkkMSA9IG9iamVjdERlZmluZVByb3BlcnR5LmY7XG4gIHZhciBmb3JFYWNoID0gYXJyYXlJdGVyYXRpb24uZm9yRWFjaDtcbiAgdmFyIERFU0NSSVBUT1JTJDIgPSBkZXNjcmlwdG9ycztcbiAgdmFyIEludGVybmFsU3RhdGVNb2R1bGUkMSA9IGludGVybmFsU3RhdGU7XG4gIHZhciBzZXRJbnRlcm5hbFN0YXRlJDEgPSBJbnRlcm5hbFN0YXRlTW9kdWxlJDEuc2V0O1xuICB2YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciQxID0gSW50ZXJuYWxTdGF0ZU1vZHVsZSQxLmdldHRlckZvcjtcblxuICB2YXIgY29sbGVjdGlvbiQyID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUsIHdyYXBwZXIsIGNvbW1vbikge1xuICAgIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICAgIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbCQxW0NPTlNUUlVDVE9SX05BTUVdO1xuICAgIHZhciBOYXRpdmVQcm90b3R5cGUgPSBOYXRpdmVDb25zdHJ1Y3RvciAmJiBOYXRpdmVDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGV4cG9ydGVkID0ge307XG4gICAgdmFyIENvbnN0cnVjdG9yO1xuXG4gICAgaWYgKCFERVNDUklQVE9SUyQyIHx8ICFpc0NhbGxhYmxlKE5hdGl2ZUNvbnN0cnVjdG9yKSB8fCAhKElTX1dFQUsgfHwgTmF0aXZlUHJvdG90eXBlLmZvckVhY2ggJiYgIWZhaWxzJDEoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgICB9KSkpIHtcbiAgICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICAgIEludGVybmFsTWV0YWRhdGFNb2R1bGUuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlJDEoYW5JbnN0YW5jZSQxKHRhcmdldCwgUHJvdG90eXBlKSwge1xuICAgICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgICAgY29sbGVjdGlvbjogbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKClcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUkMShpdGVyYWJsZSwgdGFyZ2V0W0FEREVSXSwge1xuICAgICAgICAgIHRoYXQ6IHRhcmdldCxcbiAgICAgICAgICBBU19FTlRSSUVTOiBJU19NQVBcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IkMShDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgIGZvckVhY2goWydhZGQnLCAnY2xlYXInLCAnZGVsZXRlJywgJ2ZvckVhY2gnLCAnZ2V0JywgJ2hhcycsICdzZXQnLCAna2V5cycsICd2YWx1ZXMnLCAnZW50cmllcyddLCBmdW5jdGlvbiAoS0VZKSB7XG4gICAgICAgIHZhciBJU19BRERFUiA9IEtFWSA9PSAnYWRkJyB8fCBLRVkgPT0gJ3NldCc7XG5cbiAgICAgICAgaWYgKEtFWSBpbiBOYXRpdmVQcm90b3R5cGUgJiYgIShJU19XRUFLICYmIEtFWSA9PSAnY2xlYXInKSkge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShQcm90b3R5cGUsIEtFWSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5jb2xsZWN0aW9uO1xuICAgICAgICAgICAgaWYgKCFJU19BRERFUiAmJiBJU19XRUFLICYmICFpc09iamVjdChhKSkgcmV0dXJuIEtFWSA9PSAnZ2V0JyA/IHVuZGVmaW5lZCA6IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbGxlY3Rpb25bS0VZXShhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgICAgICAgcmV0dXJuIElTX0FEREVSID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBJU19XRUFLIHx8IGRlZmluZVByb3BlcnR5JDEoUHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5jb2xsZWN0aW9uLnNpemU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgICAkJDIoe1xuICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgZm9yY2VkOiB0cnVlXG4gICAgfSwgZXhwb3J0ZWQpO1xuICAgIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG5cbiAgdmFyIHJlZGVmaW5lID0gcmVkZWZpbmUkNDtcblxuICB2YXIgcmVkZWZpbmVBbGwkMSA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudW5zYWZlICYmIHRhcmdldFtrZXldKSB0YXJnZXRba2V5XSA9IHNyY1trZXldO2Vsc2UgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHZhciBnZXRCdWlsdEluID0gZ2V0QnVpbHRJbiQ5O1xuICB2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBvYmplY3REZWZpbmVQcm9wZXJ0eTtcbiAgdmFyIHdlbGxLbm93blN5bWJvbCA9IHdlbGxLbm93blN5bWJvbCRqO1xuICB2YXIgREVTQ1JJUFRPUlMkMSA9IGRlc2NyaXB0b3JzO1xuICB2YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4gIHZhciBzZXRTcGVjaWVzJDEgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICAgIGlmIChERVNDUklQVE9SUyQxICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IG9iamVjdERlZmluZVByb3BlcnR5LmY7XG4gIHZhciBjcmVhdGUgPSBvYmplY3RDcmVhdGU7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlZGVmaW5lQWxsJDE7XG4gIHZhciBiaW5kID0gZnVuY3Rpb25CaW5kQ29udGV4dDtcbiAgdmFyIGFuSW5zdGFuY2UgPSBhbkluc3RhbmNlJDI7XG4gIHZhciBpdGVyYXRlID0gaXRlcmF0ZSQyO1xuICB2YXIgZGVmaW5lSXRlcmF0b3IgPSBkZWZpbmVJdGVyYXRvciQzO1xuICB2YXIgc2V0U3BlY2llcyA9IHNldFNwZWNpZXMkMTtcbiAgdmFyIERFU0NSSVBUT1JTID0gZGVzY3JpcHRvcnM7XG4gIHZhciBmYXN0S2V5ID0gaW50ZXJuYWxNZXRhZGF0YS5leHBvcnRzLmZhc3RLZXk7XG4gIHZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gaW50ZXJuYWxTdGF0ZTtcbiAgdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbiAgdmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcbiAgdmFyIGNvbGxlY3Rpb25TdHJvbmckMiA9IHtcbiAgICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICAgIGZpcnN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7XG4gICAgICAgICAgdGhhdDogdGhhdCxcbiAgICAgICAgICBBU19FTlRSSUVTOiBJU19NQVBcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICB2YXIgcHJldmlvdXMsIGluZGV4OyAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcblxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbHVlOyAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUubGFzdCA9IGVudHJ5ID0ge1xuICAgICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgICAgbmV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVtb3ZlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICghc3RhdGUuZmlyc3QpIHN0YXRlLmZpcnN0ID0gZW50cnk7XG4gICAgICAgICAgaWYgKHByZXZpb3VzKSBwcmV2aW91cy5uZXh0ID0gZW50cnk7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7ZWxzZSB0aGF0LnNpemUrKzsgLy8gYWRkIHRvIGluZGV4XG5cbiAgICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH07XG5cbiAgICAgIHZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTsgLy8gZmFzdCBjYXNlXG5cbiAgICAgICAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdOyAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcblxuICAgICAgICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHtcbiAgICAgICAgICBpZiAoZW50cnkua2V5ID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZWRlZmluZUFsbChQcm90b3R5cGUsIHtcbiAgICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuY2xlYXIoKWAgbWV0aG9kc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuY2xlYXJcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmNsZWFyXG4gICAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgICB2YXIgZGF0YSA9IHN0YXRlLmluZGV4O1xuICAgICAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmZpcnN0O1xuXG4gICAgICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaW5kZXhdO1xuICAgICAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0YXRlLmZpcnN0ID0gc3RhdGUubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO2Vsc2UgdGhhdC5zaXplID0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcblxuICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5pbmRleFtlbnRyeS5pbmRleF07XG4gICAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgICAgaWYgKG5leHQpIG5leHQucHJldmlvdXMgPSBwcmV2O1xuICAgICAgICAgICAgaWYgKHN0YXRlLmZpcnN0ID09IGVudHJ5KSBzdGF0ZS5maXJzdCA9IG5leHQ7XG4gICAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAhIWVudHJ5O1xuICAgICAgICB9LFxuICAgICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmblxuICAgICAgICAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi9cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgICAgIHZhciBlbnRyeTtcblxuICAgICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7XG4gICAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpOyAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcblxuICAgICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmhhc1xuICAgICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgICAvLyBgTWFwLnByb3RvdHlwZS5nZXQoa2V5KWAgbWV0aG9kXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5nZXRcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IDoge1xuICAgICAgICAvLyBgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpYCBtZXRob2RcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmFkZFxuICAgICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkoUHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfSxcbiAgICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICAgIHZhciBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTsgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUueyBrZXlzLCB2YWx1ZXMsIGVudHJpZXMsIEBAaXRlcmF0b3IgfSgpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmtleXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS52YWx1ZXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZW50cmllc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmtleXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5cbiAgICAgIGRlZmluZUl0ZXJhdG9yKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgICAgdHlwZTogSVRFUkFUT1JfTkFNRSxcbiAgICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgICB2YXIgZW50cnkgPSBzdGF0ZS5sYXN0OyAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcblxuICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91czsgLy8gZ2V0IG5leHQgZW50cnlcblxuXG4gICAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSAvLyByZXR1cm4gc3RlcCBieSBraW5kXG5cblxuICAgICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IGVudHJ5LmtleSxcbiAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogZW50cnkudmFsdWUsXG4gICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogW2VudHJ5LmtleSwgZW50cnkudmFsdWVdLFxuICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7IC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlW0BAc3BlY2llc11gIGFjY2Vzc29yc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtbWFwLUBAc3BlY2llc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LUBAc3BlY2llc1xuXG4gICAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY29sbGVjdGlvbiQxID0gY29sbGVjdGlvbiQyO1xuICB2YXIgY29sbGVjdGlvblN0cm9uZyQxID0gY29sbGVjdGlvblN0cm9uZyQyOyAvLyBgTWFwYCBjb25zdHJ1Y3RvclxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC1vYmplY3RzXG5cbiAgY29sbGVjdGlvbiQxKCdNYXAnLCBmdW5jdGlvbiAoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7XG4gICAgICByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB9O1xuICB9LCBjb2xsZWN0aW9uU3Ryb25nJDEpO1xuXG4gIHZhciBwYXRoJDEgPSBwYXRoJHE7XG4gIHZhciBtYXAkMiA9IHBhdGgkMS5NYXA7XG5cbiAgdmFyIHBhcmVudCQ5ID0gbWFwJDI7XG4gIHZhciBtYXAkMSA9IHBhcmVudCQ5O1xuXG4gIHZhciBtYXAgPSBtYXAkMTtcblxuICB2YXIgJCQxID0gX2V4cG9ydDtcbiAgdmFyICRzb21lID0gYXJyYXlJdGVyYXRpb24uc29tZTtcbiAgdmFyIGFycmF5TWV0aG9kSXNTdHJpY3QkMSA9IGFycmF5TWV0aG9kSXNTdHJpY3QkNTtcbiAgdmFyIFNUUklDVF9NRVRIT0QkMSA9IGFycmF5TWV0aG9kSXNTdHJpY3QkMSgnc29tZScpOyAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG5cbiAgJCQxKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWUsXG4gICAgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCQxXG4gIH0sIHtcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm5cbiAgICAvKiAsIHRoaXNBcmcgKi9cbiAgICApIHtcbiAgICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZW50cnlWaXJ0dWFsJDQgPSBlbnRyeVZpcnR1YWwkaztcbiAgdmFyIHNvbWUkMyA9IGVudHJ5VmlydHVhbCQ0KCdBcnJheScpLnNvbWU7XG5cbiAgdmFyIGlzUHJvdG90eXBlT2YkNCA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBtZXRob2QkNCA9IHNvbWUkMztcbiAgdmFyIEFycmF5UHJvdG90eXBlJDQgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIHNvbWUkMiA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBvd24gPSBpdC5zb21lO1xuICAgIHJldHVybiBpdCA9PT0gQXJyYXlQcm90b3R5cGUkNCB8fCBpc1Byb3RvdHlwZU9mJDQoQXJyYXlQcm90b3R5cGUkNCwgaXQpICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUkNC5zb21lID8gbWV0aG9kJDQgOiBvd247XG4gIH07XG5cbiAgdmFyIHBhcmVudCQ4ID0gc29tZSQyO1xuICB2YXIgc29tZSQxID0gcGFyZW50JDg7XG5cbiAgdmFyIHNvbWUgPSBzb21lJDE7XG5cbiAgdmFyIGVudHJ5VmlydHVhbCQzID0gZW50cnlWaXJ0dWFsJGs7XG4gIHZhciBrZXlzJDMgPSBlbnRyeVZpcnR1YWwkMygnQXJyYXknKS5rZXlzO1xuXG4gIHZhciBwYXJlbnQkNyA9IGtleXMkMztcbiAgdmFyIGtleXMkMiA9IHBhcmVudCQ3O1xuXG4gIHZhciBjbGFzc29mJDIgPSBjbGFzc29mJGM7XG4gIHZhciBoYXNPd24kMiA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciBpc1Byb3RvdHlwZU9mJDMgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xuICB2YXIgbWV0aG9kJDMgPSBrZXlzJDI7XG4gIHZhciBBcnJheVByb3RvdHlwZSQzID0gQXJyYXkucHJvdG90eXBlO1xuICB2YXIgRE9NSXRlcmFibGVzJDIgPSB7XG4gICAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICAgIE5vZGVMaXN0OiB0cnVlXG4gIH07XG5cbiAgdmFyIGtleXMkMSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBvd24gPSBpdC5rZXlzO1xuICAgIHJldHVybiBpdCA9PT0gQXJyYXlQcm90b3R5cGUkMyB8fCBpc1Byb3RvdHlwZU9mJDMoQXJyYXlQcm90b3R5cGUkMywgaXQpICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUkMy5rZXlzIHx8IGhhc093biQyKERPTUl0ZXJhYmxlcyQyLCBjbGFzc29mJDIoaXQpKSA/IG1ldGhvZCQzIDogb3duO1xuICB9O1xuXG4gIHZhciBrZXlzID0ga2V5cyQxO1xuXG4gIHZhciBhcnJheVNsaWNlID0gYXJyYXlTbGljZVNpbXBsZTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICB2YXIgbWVyZ2VTb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgICByZXR1cm4gbGVuZ3RoIDwgOCA/IGluc2VydGlvblNvcnQoYXJyYXksIGNvbXBhcmVmbikgOiBtZXJnZShhcnJheSwgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksIG1lcmdlU29ydChhcnJheVNsaWNlKGFycmF5LCBtaWRkbGUpLCBjb21wYXJlZm4pLCBjb21wYXJlZm4pO1xuICB9O1xuXG4gIHZhciBpbnNlcnRpb25Tb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgZWxlbWVudCwgajtcblxuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICBqID0gaTtcbiAgICAgIGVsZW1lbnQgPSBhcnJheVtpXTtcblxuICAgICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGogIT09IGkrKykgYXJyYXlbal0gPSBlbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbiAgfTtcblxuICB2YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgICB2YXIgbGxlbmd0aCA9IGxlZnQubGVuZ3RoO1xuICAgIHZhciBybGVuZ3RoID0gcmlnaHQubGVuZ3RoO1xuICAgIHZhciBsaW5kZXggPSAwO1xuICAgIHZhciByaW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKGxpbmRleCA8IGxsZW5ndGggfHwgcmluZGV4IDwgcmxlbmd0aCkge1xuICAgICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IGxpbmRleCA8IGxsZW5ndGggJiYgcmluZGV4IDwgcmxlbmd0aCA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXSA6IGxpbmRleCA8IGxsZW5ndGggPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH07XG5cbiAgdmFyIGFycmF5U29ydCA9IG1lcmdlU29ydDtcblxuICB2YXIgdXNlckFnZW50JDEgPSBlbmdpbmVVc2VyQWdlbnQ7XG4gIHZhciBmaXJlZm94ID0gdXNlckFnZW50JDEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSk7XG4gIHZhciBlbmdpbmVGZlZlcnNpb24gPSAhIWZpcmVmb3ggJiYgK2ZpcmVmb3hbMV07XG5cbiAgdmFyIFVBID0gZW5naW5lVXNlckFnZW50O1xuICB2YXIgZW5naW5lSXNJZU9yRWRnZSA9IC9NU0lFfFRyaWRlbnQvLnRlc3QoVUEpO1xuXG4gIHZhciB1c2VyQWdlbnQgPSBlbmdpbmVVc2VyQWdlbnQ7XG4gIHZhciB3ZWJraXQgPSB1c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLyk7XG4gIHZhciBlbmdpbmVXZWJraXRWZXJzaW9uID0gISF3ZWJraXQgJiYgK3dlYmtpdFsxXTtcblxuICB2YXIgJCA9IF9leHBvcnQ7XG4gIHZhciB1bmN1cnJ5VGhpcyA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG4gIHZhciBhQ2FsbGFibGUgPSBhQ2FsbGFibGUkNztcbiAgdmFyIHRvT2JqZWN0ID0gdG9PYmplY3QkZTtcbiAgdmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gbGVuZ3RoT2ZBcnJheUxpa2UkZDtcbiAgdmFyIHRvU3RyaW5nID0gdG9TdHJpbmckNztcbiAgdmFyIGZhaWxzID0gZmFpbHMkcjtcbiAgdmFyIGludGVybmFsU29ydCA9IGFycmF5U29ydDtcbiAgdmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSBhcnJheU1ldGhvZElzU3RyaWN0JDU7XG4gIHZhciBGRiA9IGVuZ2luZUZmVmVyc2lvbjtcbiAgdmFyIElFX09SX0VER0UgPSBlbmdpbmVJc0llT3JFZGdlO1xuICB2YXIgVjggPSBlbmdpbmVWOFZlcnNpb247XG4gIHZhciBXRUJLSVQgPSBlbmdpbmVXZWJraXRWZXJzaW9uO1xuICB2YXIgdGVzdCA9IFtdO1xuICB2YXIgdW4kU29ydCA9IHVuY3VycnlUaGlzKHRlc3Quc29ydCk7XG4gIHZhciBwdXNoID0gdW5jdXJyeVRoaXModGVzdC5wdXNoKTsgLy8gSUU4LVxuXG4gIHZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG4gIH0pOyAvLyBWOCBidWdcblxuICB2YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB0ZXN0LnNvcnQobnVsbCk7XG4gIH0pOyAvLyBPbGQgV2ViS2l0XG5cbiAgdmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG4gIHZhciBTVEFCTEVfU09SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZmVhdHVyZSBkZXRlY3Rpb24gY2FuIGJlIHRvbyBzbG93LCBzbyBjaGVjayBlbmdpbmVzIHZlcnNpb25zXG4gICAgaWYgKFY4KSByZXR1cm4gVjggPCA3MDtcbiAgICBpZiAoRkYgJiYgRkYgPiAzKSByZXR1cm47XG4gICAgaWYgKElFX09SX0VER0UpIHJldHVybiB0cnVlO1xuICAgIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDM7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBjb2RlLCBjaHIsIHZhbHVlLCBpbmRleDsgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgd2l0aCBtb3JlIDUxMiBlbGVtZW50cyAoQ2hha3JhIGFuZCBvbGQgVjggZmFpbHMgb25seSBpbiB0aGlzIGNhc2UpXG5cbiAgICBmb3IgKGNvZGUgPSA2NTsgY29kZSA8IDc2OyBjb2RlKyspIHtcbiAgICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG5cbiAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIDY2OlxuICAgICAgICBjYXNlIDY5OlxuICAgICAgICBjYXNlIDcwOlxuICAgICAgICBjYXNlIDcyOlxuICAgICAgICAgIHZhbHVlID0gMztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDY4OlxuICAgICAgICBjYXNlIDcxOlxuICAgICAgICAgIHZhbHVlID0gNDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gMjtcbiAgICAgIH1cblxuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDc7IGluZGV4KyspIHtcbiAgICAgICAgdGVzdC5wdXNoKHtcbiAgICAgICAgICBrOiBjaHIgKyBpbmRleCxcbiAgICAgICAgICB2OiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0ZXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBiLnYgLSBhLnY7XG4gICAgfSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0ZXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY2hyID0gdGVzdFtpbmRleF0uay5jaGFyQXQoMCk7XG4gICAgICBpZiAocmVzdWx0LmNoYXJBdChyZXN1bHQubGVuZ3RoIC0gMSkgIT09IGNocikgcmVzdWx0ICs9IGNocjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0ICE9PSAnREdCRUZIQUNJSksnO1xuICB9KTtcbiAgdmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRCB8fCAhU1RBQkxFX1NPUlQ7XG5cbiAgdmFyIGdldFNvcnRDb21wYXJlID0gZnVuY3Rpb24gKGNvbXBhcmVmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgaWYgKHkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkgcmV0dXJuIDE7XG4gICAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgICByZXR1cm4gdG9TdHJpbmcoeCkgPiB0b1N0cmluZyh5KSA/IDEgOiAtMTtcbiAgICB9O1xuICB9OyAvLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG5cblxuICAkKHtcbiAgICB0YXJnZXQ6ICdBcnJheScsXG4gICAgcHJvdG86IHRydWUsXG4gICAgZm9yY2VkOiBGT1JDRURcbiAgfSwge1xuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuICAgICAgdmFyIGFycmF5ID0gdG9PYmplY3QodGhpcyk7XG4gICAgICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZCA/IHVuJFNvcnQoYXJyYXkpIDogdW4kU29ydChhcnJheSwgY29tcGFyZWZuKTtcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgdmFyIGFycmF5TGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoYXJyYXkpO1xuICAgICAgdmFyIGl0ZW1zTGVuZ3RoLCBpbmRleDtcblxuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgaWYgKGluZGV4IGluIGFycmF5KSBwdXNoKGl0ZW1zLCBhcnJheVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICBpbnRlcm5hbFNvcnQoaXRlbXMsIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xuICAgICAgaXRlbXNMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgICBpbmRleCA9IDA7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGl0ZW1zTGVuZ3RoKSBhcnJheVtpbmRleF0gPSBpdGVtc1tpbmRleCsrXTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgYXJyYXlMZW5ndGgpIGRlbGV0ZSBhcnJheVtpbmRleCsrXTtcblxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGVudHJ5VmlydHVhbCQyID0gZW50cnlWaXJ0dWFsJGs7XG4gIHZhciBzb3J0JDMgPSBlbnRyeVZpcnR1YWwkMignQXJyYXknKS5zb3J0O1xuXG4gIHZhciBpc1Byb3RvdHlwZU9mJDIgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xuICB2YXIgbWV0aG9kJDIgPSBzb3J0JDM7XG4gIHZhciBBcnJheVByb3RvdHlwZSQyID0gQXJyYXkucHJvdG90eXBlO1xuXG4gIHZhciBzb3J0JDIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgb3duID0gaXQuc29ydDtcbiAgICByZXR1cm4gaXQgPT09IEFycmF5UHJvdG90eXBlJDIgfHwgaXNQcm90b3R5cGVPZiQyKEFycmF5UHJvdG90eXBlJDIsIGl0KSAmJiBvd24gPT09IEFycmF5UHJvdG90eXBlJDIuc29ydCA/IG1ldGhvZCQyIDogb3duO1xuICB9O1xuXG4gIHZhciBwYXJlbnQkNiA9IHNvcnQkMjtcbiAgdmFyIHNvcnQkMSA9IHBhcmVudCQ2O1xuXG4gIHZhciBzb3J0ID0gc29ydCQxO1xuXG4gIHZhciBlbnRyeVZpcnR1YWwkMSA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgdmFsdWVzJDMgPSBlbnRyeVZpcnR1YWwkMSgnQXJyYXknKS52YWx1ZXM7XG5cbiAgdmFyIHBhcmVudCQ1ID0gdmFsdWVzJDM7XG4gIHZhciB2YWx1ZXMkMiA9IHBhcmVudCQ1O1xuXG4gIHZhciBjbGFzc29mJDEgPSBjbGFzc29mJGM7XG4gIHZhciBoYXNPd24kMSA9IGhhc093blByb3BlcnR5XzE7XG4gIHZhciBpc1Byb3RvdHlwZU9mJDEgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xuICB2YXIgbWV0aG9kJDEgPSB2YWx1ZXMkMjtcbiAgdmFyIEFycmF5UHJvdG90eXBlJDEgPSBBcnJheS5wcm90b3R5cGU7XG4gIHZhciBET01JdGVyYWJsZXMkMSA9IHtcbiAgICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gICAgTm9kZUxpc3Q6IHRydWVcbiAgfTtcblxuICB2YXIgdmFsdWVzJDEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgb3duID0gaXQudmFsdWVzO1xuICAgIHJldHVybiBpdCA9PT0gQXJyYXlQcm90b3R5cGUkMSB8fCBpc1Byb3RvdHlwZU9mJDEoQXJyYXlQcm90b3R5cGUkMSwgaXQpICYmIG93biA9PT0gQXJyYXlQcm90b3R5cGUkMS52YWx1ZXMgfHwgaGFzT3duJDEoRE9NSXRlcmFibGVzJDEsIGNsYXNzb2YkMShpdCkpID8gbWV0aG9kJDEgOiBvd247XG4gIH07XG5cbiAgdmFyIHZhbHVlcyA9IHZhbHVlcyQxO1xuXG4gIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yJDQ7XG5cbiAgdmFyIGVudHJ5VmlydHVhbCA9IGVudHJ5VmlydHVhbCRrO1xuICB2YXIgZW50cmllcyQzID0gZW50cnlWaXJ0dWFsKCdBcnJheScpLmVudHJpZXM7XG5cbiAgdmFyIHBhcmVudCQ0ID0gZW50cmllcyQzO1xuICB2YXIgZW50cmllcyQyID0gcGFyZW50JDQ7XG5cbiAgdmFyIGNsYXNzb2YgPSBjbGFzc29mJGM7XG4gIHZhciBoYXNPd24gPSBoYXNPd25Qcm9wZXJ0eV8xO1xuICB2YXIgaXNQcm90b3R5cGVPZiA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG4gIHZhciBtZXRob2QgPSBlbnRyaWVzJDI7XG4gIHZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcbiAgdmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gICAgTm9kZUxpc3Q6IHRydWVcbiAgfTtcblxuICB2YXIgZW50cmllcyQxID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIG93biA9IGl0LmVudHJpZXM7XG4gICAgcmV0dXJuIGl0ID09PSBBcnJheVByb3RvdHlwZSB8fCBpc1Byb3RvdHlwZU9mKEFycmF5UHJvdG90eXBlLCBpdCkgJiYgb3duID09PSBBcnJheVByb3RvdHlwZS5lbnRyaWVzIHx8IGhhc093bihET01JdGVyYWJsZXMsIGNsYXNzb2YoaXQpKSA/IG1ldGhvZCA6IG93bjtcbiAgfTtcblxuICB2YXIgZW50cmllcyA9IGVudHJpZXMkMTtcblxuICAvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbiAgLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4gIC8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG4gIHZhciBnZXRSYW5kb21WYWx1ZXM7XG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgZnVuY3Rpb24gcm5nKCkge1xuICAgIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sXG4gICAgICAvLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxuICAgICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xuXG4gICAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gIH1cblxuICB2YXIgUkVHRVggPSAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICAgIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAgICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gICAqL1xuXG4gIHZhciBieXRlVG9IZXggPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gICAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDsgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcblxuICAgIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gICAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAgIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICAgIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV1aWQ7XG4gIH1cblxuICBmdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gICAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xuICB9XG5cbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSB2YWx1ZSBjYW4gYmUgdXNlZCBhcyBhbiBpZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB2YWx1ZSAtIElucHV0IHZhbHVlIG9mIHVua25vd24gdHlwZS5cclxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB2YWxpZCBpZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqL1xuICBmdW5jdGlvbiBpc0lkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG4gIH1cblxuICAvKipcclxuICAgKiBBIHF1ZXVlLlxyXG4gICAqXHJcbiAgICogQHR5cGVQYXJhbSBUIC0gVGhlIHR5cGUgb2YgbWV0aG9kIG5hbWVzIHRvIGJlIHJlcGxhY2VkIGJ5IHF1ZXVlZCB2ZXJzaW9ucy5cclxuICAgKi9cbiAgdmFyIFF1ZXVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICAvKiogRGVsYXkgaW4gbWlsbGlzZWNvbmRzLiBJZiBkZWZpbmVkIHRoZSBxdWV1ZSB3aWxsIGJlIHBlcmlvZGljYWxseSBmbHVzaGVkLiAqL1xuXG4gICAgLyoqIE1heGltdW0gbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIHF1ZXVlIGJlZm9yZSBpdCB3aWxsIGJlIGZsdXNoZWQuICovXG5cbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBhIG5ldyBRdWV1ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFF1ZXVlIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBRdWV1ZShvcHRpb25zKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVldWUpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZWxheVwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3F1ZXVlXCIsIFtdKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RpbWVvdXRcIiwgbnVsbCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9leHRlbmRlZFwiLCBudWxsKTtcblxuICAgICAgLy8gb3B0aW9uc1xuICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICB0aGlzLm1heCA9IEluZmluaXR5O1xuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgcXVldWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBRdWV1ZSBjb25maWd1cmF0aW9uLlxyXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhRdWV1ZSwgW3tcbiAgICAgIGtleTogXCJzZXRPcHRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmRlbGF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgdGhpcy5kZWxheSA9IG9wdGlvbnMuZGVsYXk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICB0aGlzLm1heCA9IG9wdGlvbnMubWF4O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZmx1c2hJZk5lZWRlZCgpO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIEV4dGVuZCBhbiBvYmplY3Qgd2l0aCBxdWV1aW5nIGZ1bmN0aW9uYWxpdHkuXHJcbiAgICAgICAqIFRoZSBvYmplY3Qgd2lsbCBiZSBleHRlbmRlZCB3aXRoIGEgZnVuY3Rpb24gZmx1c2gsIGFuZCB0aGUgbWV0aG9kcyBwcm92aWRlZCBpbiBvcHRpb25zLnJlcGxhY2Ugd2lsbCBiZSByZXBsYWNlZCB3aXRoIHF1ZXVlZCBvbmVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gb2JqZWN0IC0gVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZC5cclxuICAgICAgICogQHBhcmFtIG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMuXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHF1ZXVlLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZXN0cm95IHRoZSBxdWV1ZS4gVGhlIHF1ZXVlIHdpbGwgZmlyc3QgZmx1c2ggYWxsIHF1ZXVlZCBhY3Rpb25zLCBhbmQgaW4gY2FzZSBpdCBoYXMgZXh0ZW5kZWQgYW4gb2JqZWN0LCB3aWxsIHJlc3RvcmUgdGhlIG9yaWdpbmFsIG9iamVjdC5cclxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2V4dGVuZGVkKSB7XG4gICAgICAgICAgdmFyIG9iamVjdCA9IHRoaXMuX2V4dGVuZGVkLm9iamVjdDtcbiAgICAgICAgICB2YXIgbWV0aG9kcyA9IHRoaXMuX2V4dGVuZGVkLm1ldGhvZHM7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGhvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RzW2ldO1xuXG4gICAgICAgICAgICBpZiAobWV0aG9kLm9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgIC8vIEBUT0RPOiBiZXR0ZXIgc29sdXRpb24/XG4gICAgICAgICAgICAgIG9iamVjdFttZXRob2QubmFtZV0gPSBtZXRob2Qub3JpZ2luYWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBAVE9ETzogYmV0dGVyIHNvbHV0aW9uP1xuICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0W21ldGhvZC5uYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9leHRlbmRlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXBsYWNlIGEgbWV0aG9kIG9uIGFuIG9iamVjdCB3aXRoIGEgcXVldWVkIHZlcnNpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBvYmplY3QgLSBPYmplY3QgaGF2aW5nIHRoZSBtZXRob2QuXHJcbiAgICAgICAqIEBwYXJhbSBtZXRob2QgLSBUaGUgbWV0aG9kIG5hbWUuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInJlcGxhY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlKG9iamVjdCwgbWV0aG9kKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhcyAtLSBGdW5jdGlvbiB0aGlzIGlzIG5lY2Vzc2FyeSBpbiB0aGUgZnVuY3Rpb24gYmVsbG93LCBzbyBjbGFzcyB0aGlzIGhhcyB0byBiZSBzYXZlZCBpbnRvIGEgdmFyaWFibGUgaGVyZS4gKi9cbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIG9yaWdpbmFsID0gb2JqZWN0W21ldGhvZF07XG5cbiAgICAgICAgaWYgKCFvcmlnaW5hbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBcIiArIG1ldGhvZCArIFwiIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iamVjdFttZXRob2RdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBhZGQgdGhpcyBjYWxsIHRvIHRoZSBxdWV1ZVxuICAgICAgICAgIG1lLnF1ZXVlKHtcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICBmbjogb3JpZ2luYWwsXG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogUXVldWUgYSBjYWxsLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gZW50cnkgLSBUaGUgZnVuY3Rpb24gb3IgZW50cnkgdG8gYmUgcXVldWVkLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJxdWV1ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXVlKGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgICAgZm46IGVudHJ5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcXVldWUucHVzaChlbnRyeSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9mbHVzaElmTmVlZGVkKCk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogQ2hlY2sgd2hldGhlciB0aGUgcXVldWUgbmVlZHMgdG8gYmUgZmx1c2hlZC5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2ZsdXNoSWZOZWVkZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZmx1c2hJZk5lZWRlZCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBmbHVzaCB3aGVuIHRoZSBtYXhpbXVtIGlzIGV4Y2VlZGVkLlxuICAgICAgICBpZiAodGhpcy5fcXVldWUubGVuZ3RoID4gdGhpcy5tYXgpIHtcbiAgICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIH0gLy8gZmx1c2ggYWZ0ZXIgYSBwZXJpb2Qgb2YgaW5hY3Rpdml0eSB3aGVuIGEgZGVsYXkgaXMgY29uZmlndXJlZFxuXG5cbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICAgICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHRoaXMuZGVsYXkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dCQxKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmZsdXNoKCk7XG4gICAgICAgICAgfSwgdGhpcy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBGbHVzaCBhbGwgcXVldWVkIGNhbGxzXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImZsdXNoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHZhciBfY29udGV4dCwgX2NvbnRleHQyO1xuXG4gICAgICAgIGZvckVhY2gkMShfY29udGV4dCA9IHNwbGljZShfY29udGV4dDIgPSB0aGlzLl9xdWV1ZSkuY2FsbChfY29udGV4dDIsIDApKS5jYWxsKF9jb250ZXh0LCBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5mbi5hcHBseShlbnRyeS5jb250ZXh0IHx8IGVudHJ5LmZuLCBlbnRyeS5hcmdzIHx8IFtdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiZXh0ZW5kXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kKG9iamVjdCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcXVldWUgPSBuZXcgUXVldWUob3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKG9iamVjdC5mbHVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGFyZ2V0IG9iamVjdCBhbHJlYWR5IGhhcyBhIHByb3BlcnR5IGZsdXNoXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqZWN0LmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHF1ZXVlLmZsdXNoKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1ldGhvZHMgPSBbe1xuICAgICAgICAgIG5hbWU6IFwiZmx1c2hcIixcbiAgICAgICAgICBvcmlnaW5hbDogdW5kZWZpbmVkXG4gICAgICAgIH1dO1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVwbGFjZSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5yZXBsYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IG9wdGlvbnMucmVwbGFjZVtpXTtcbiAgICAgICAgICAgIG1ldGhvZHMucHVzaCh7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIC8vIEBUT0RPOiBiZXR0ZXIgc29sdXRpb24/XG4gICAgICAgICAgICAgIG9yaWdpbmFsOiBvYmplY3RbbmFtZV1cbiAgICAgICAgICAgIH0pOyAvLyBAVE9ETzogYmV0dGVyIHNvbHV0aW9uP1xuXG4gICAgICAgICAgICBxdWV1ZS5yZXBsYWNlKG9iamVjdCwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUuX2V4dGVuZGVkID0ge1xuICAgICAgICAgIG9iamVjdDogb2JqZWN0LFxuICAgICAgICAgIG1ldGhvZHM6IG1ldGhvZHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBRdWV1ZTtcbiAgfSgpO1xuXG4gIC8qKlxyXG4gICAqIFtbRGF0YVNldF1dIGNvZGUgdGhhdCBjYW4gYmUgcmV1c2VkIGluIFtbRGF0YVZpZXddXSBvciBvdGhlciBzaW1pbGFyIGltcGxlbWVudGF0aW9ucyBvZiBbW0RhdGFJbnRlcmZhY2VdXS5cclxuICAgKlxyXG4gICAqIEB0eXBlUGFyYW0gSXRlbSAtIEl0ZW0gdHlwZSB0aGF0IG1heSBvciBtYXkgbm90IGhhdmUgYW4gaWQuXHJcbiAgICogQHR5cGVQYXJhbSBJZFByb3AgLSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSBpZC5cclxuICAgKi9cbiAgdmFyIERhdGFTZXRQYXJ0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXRhU2V0UGFydCgpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhU2V0UGFydCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdWJzY3JpYmVyc1wiLCB7XG4gICAgICAgIFwiKlwiOiBbXSxcbiAgICAgICAgYWRkOiBbXSxcbiAgICAgICAgcmVtb3ZlOiBbXSxcbiAgICAgICAgdXBkYXRlOiBbXVxuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN1YnNjcmliZVwiLCBEYXRhU2V0UGFydC5wcm90b3R5cGUub24pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1bnN1YnNjcmliZVwiLCBEYXRhU2V0UGFydC5wcm90b3R5cGUub2ZmKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRGF0YVNldFBhcnQsIFt7XG4gICAgICBrZXk6IFwiX3RyaWdnZXJcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLyoqXHJcbiAgICAgICAqIFRyaWdnZXIgYW4gZXZlbnRcclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIGV2ZW50IC0gRXZlbnQgbmFtZS5cclxuICAgICAgICogQHBhcmFtIHBheWxvYWQgLSBFdmVudCBwYXlsb2FkLlxyXG4gICAgICAgKiBAcGFyYW0gc2VuZGVySWQgLSBJZCBvZiB0aGUgc2VuZGVyLlxyXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIF90cmlnZ2VyKGV2ZW50LCBwYXlsb2FkLCBzZW5kZXJJZCkge1xuICAgICAgICB2YXIgX2NvbnRleHQsIF9jb250ZXh0MjtcblxuICAgICAgICBpZiAoZXZlbnQgPT09IFwiKlwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHRyaWdnZXIgZXZlbnQgKlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2gkMShfY29udGV4dCA9IGNvbmNhdCQxKF9jb250ZXh0MiA9IFtdKS5jYWxsKF9jb250ZXh0MiwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuX3N1YnNjcmliZXJzW2V2ZW50XSksIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9zdWJzY3JpYmVyc1tcIipcIl0pKSkuY2FsbChfY29udGV4dCwgZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICBzdWJzY3JpYmVyKGV2ZW50LCBwYXlsb2FkLCBzZW5kZXJJZCAhPSBudWxsID8gc2VuZGVySWQgOiBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogU3Vic2NyaWJlIHRvIGFuIGV2ZW50LCBhZGQgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZW1hcmtzIE5vbi1mdW5jdGlvbiBjYWxsYmFja3MgYXJlIGlnbm9yZWQuXHJcbiAgICAgICAqIEBwYXJhbSBldmVudCAtIEV2ZW50IG5hbWUuXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIENhbGxiYWNrIG1ldGhvZC5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdGhpcy5fc3Vic2NyaWJlcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9IC8vIEBUT0RPOiBNYXliZSB0aHJvdyBmb3IgaW52YWxpZCBjYWxsYmFja3M/XG5cbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbnN1YnNjcmliZSBmcm9tIGFuIGV2ZW50LCByZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZW1hcmtzIElmIHRoZSBzYW1lIGNhbGxiYWNrIHdhcyBzdWJzY3JpYmVkIG1vcmUgdGhhbiBvbmNlICoqYWxsKiogb2NjdXJlbmNlcyB3aWxsIGJlIHJlbW92ZWQuXHJcbiAgICAgICAqIEBwYXJhbSBldmVudCAtIEV2ZW50IG5hbWUuXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIENhbGxiYWNrIG1ldGhvZC5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib2ZmXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX2NvbnRleHQzO1xuXG4gICAgICAgIHRoaXMuX3N1YnNjcmliZXJzW2V2ZW50XSA9IGZpbHRlcihfY29udGV4dDMgPSB0aGlzLl9zdWJzY3JpYmVyc1tldmVudF0pLmNhbGwoX2NvbnRleHQzLCBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyICE9PSBjYWxsYmFjaztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIG9uIGluc3RlYWQgKFBTOiBEYXRhVmlldy5zdWJzY3JpYmUgPT09IERhdGFWaWV3Lm9uKS5cclxuICAgICAgICovXG5cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGF0YVNldFBhcnQ7XG4gIH0oKTtcblxuICB2YXIgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24kMjtcbiAgdmFyIGNvbGxlY3Rpb25TdHJvbmcgPSBjb2xsZWN0aW9uU3Ryb25nJDI7IC8vIGBTZXRgIGNvbnN0cnVjdG9yXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcblxuICBjb2xsZWN0aW9uKCdTZXQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7XG4gICAgICByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB9O1xuICB9LCBjb2xsZWN0aW9uU3Ryb25nKTtcblxuICB2YXIgcGF0aCA9IHBhdGgkcTtcbiAgdmFyIHNldCQyID0gcGF0aC5TZXQ7XG5cbiAgdmFyIHBhcmVudCQzID0gc2V0JDI7XG4gIHZhciBzZXQkMSA9IHBhcmVudCQzO1xuXG4gIHZhciBzZXQgPSBzZXQkMTtcblxuICB2YXIgZ2V0SXRlcmF0b3IkNCA9IGdldEl0ZXJhdG9yJDc7XG4gIHZhciBnZXRJdGVyYXRvcl8xID0gZ2V0SXRlcmF0b3IkNDtcblxuICB2YXIgcGFyZW50JDIgPSBnZXRJdGVyYXRvcl8xO1xuICB2YXIgZ2V0SXRlcmF0b3IkMyA9IHBhcmVudCQyO1xuXG4gIHZhciBwYXJlbnQkMSA9IGdldEl0ZXJhdG9yJDM7XG4gIHZhciBnZXRJdGVyYXRvciQyID0gcGFyZW50JDE7XG5cbiAgdmFyIHBhcmVudCA9IGdldEl0ZXJhdG9yJDI7XG4gIHZhciBnZXRJdGVyYXRvciQxID0gcGFyZW50O1xuXG4gIHZhciBnZXRJdGVyYXRvciA9IGdldEl0ZXJhdG9yJDE7XG5cbiAgdmFyIF9TeW1ib2wkaXRlcmF0b3I7XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIkMihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2Ygc3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGdldEl0ZXJhdG9yTWV0aG9kJDEobykgfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKGlzQXJyYXkkMShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkkMihvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbiAgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5JDIobywgbWluTGVuKSB7IHZhciBfY29udGV4dDEwOyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkkMihvLCBtaW5MZW4pOyB2YXIgbiA9IHNsaWNlKF9jb250ZXh0MTAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpLmNhbGwoX2NvbnRleHQxMCwgOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gZnJvbSQzKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5JDIobywgbWluTGVuKTsgfVxuXG4gIGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5JDIoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbiAgX1N5bWJvbCRpdGVyYXRvciA9IGl0ZXJhdG9yO1xuXG4gIC8qKlxyXG4gICAqIERhdGEgc3RyZWFtXHJcbiAgICpcclxuICAgKiBAcmVtYXJrc1xyXG4gICAqIFtbRGF0YVN0cmVhbV1dIG9mZmVycyBhbiBhbHdheXMgdXAgdG8gZGF0ZSBzdHJlYW0gb2YgaXRlbXMgZnJvbSBhIFtbRGF0YVNldF1dIG9yIFtbRGF0YVZpZXddXS5cclxuICAgKiBUaGF0IG1lYW5zIHRoYXQgdGhlIHN0cmVhbSBpcyBldmFsdWF0ZWQgYXQgdGhlIHRpbWUgb2YgaXRlcmF0aW9uLCBjb252ZXJzaW9uIHRvIGFub3RoZXIgZGF0YSB0eXBlIG9yIHdoZW4gW1tjYWNoZV1dIGlzIGNhbGxlZCwgbm90IHdoZW4gdGhlIFtbRGF0YVN0cmVhbV1dIHdhcyBjcmVhdGVkLlxyXG4gICAqIE11bHRpcGxlIGludm9jYXRpb25zIG9mIGZvciBleGFtcGxlIFtbdG9JdGVtQXJyYXldXSBtYXkgeWllbGQgZGlmZmVyZW50IHJlc3VsdHMgKGlmIHRoZSBkYXRhIHNvdXJjZSBsaWtlIGZvciBleGFtcGxlIFtbRGF0YVNldF1dIGdldHMgbW9kaWZpZWQpLlxyXG4gICAqIEB0eXBlUGFyYW0gSXRlbSAtIFRoZSBpdGVtIHR5cGUgdGhpcyBzdHJlYW0gaXMgZ29pbmcgdG8gd29yayB3aXRoLlxyXG4gICAqL1xuICB2YXIgRGF0YVN0cmVhbSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgZGF0YSBzdHJlYW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhaXJzIC0gVGhlIGlkLCBpdGVtIHBhaXJzLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gRGF0YVN0cmVhbShwYWlycykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhdGFTdHJlYW0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcGFpcnNcIiwgdm9pZCAwKTtcblxuICAgICAgdGhpcy5fcGFpcnMgPSBwYWlycztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gYW4gaXRlcmFibGUgb2Yga2V5LCB2YWx1ZSBwYWlycyBmb3IgZXZlcnkgZW50cnkgaW4gdGhlIHN0cmVhbS5cclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoRGF0YVN0cmVhbSwgW3tcbiAgICAgIGtleTogX1N5bWJvbCRpdGVyYXRvcixcbiAgICAgIHZhbHVlOlxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgcmVnZW5lcmF0b3IubWFyayhmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvciwgX3N0ZXAsIF9zdGVwJHZhbHVlLCBpZCwgaXRlbTtcblxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3Iud3JhcChmdW5jdGlvbiB2YWx1ZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIkMih0aGlzLl9wYWlycyk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE7XG5cbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IucygpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfc3RlcCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwLnZhbHVlLCAyKSwgaWQgPSBfc3RlcCR2YWx1ZVswXSwgaXRlbSA9IF9zdGVwJHZhbHVlWzFdO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3O1xuICAgICAgICAgICAgICAgIHJldHVybiBbaWQsIGl0ZW1dO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDExO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbXCJjYXRjaFwiXSgxKTtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5lKF9jb250ZXh0LnQwKTtcblxuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNDtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE0KTtcblxuICAgICAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHZhbHVlLCB0aGlzLCBbWzEsIDExLCAxNCwgMTddXSk7XG4gICAgICB9KVxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHVybiBhbiBpdGVyYWJsZSBvZiBrZXksIHZhbHVlIHBhaXJzIGZvciBldmVyeSBlbnRyeSBpbiB0aGUgc3RyZWFtLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJlbnRyaWVzXCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIHJlZ2VuZXJhdG9yLm1hcmsoZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjIsIF9zdGVwMiwgX3N0ZXAyJHZhbHVlLCBpZCwgaXRlbTtcblxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3Iud3JhcChmdW5jdGlvbiBlbnRyaWVzJChfY29udGV4dDIpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIkMih0aGlzLl9wYWlycyk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxO1xuXG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5zKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmICgoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9zdGVwMiR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwMi52YWx1ZSwgMiksIGlkID0gX3N0ZXAyJHZhbHVlWzBdLCBpdGVtID0gX3N0ZXAyJHZhbHVlWzFdO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICByZXR1cm4gW2lkLCBpdGVtXTtcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbXCJjYXRjaFwiXSgxKTtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIuZShfY29udGV4dDIudDApO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxNDtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIuZigpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5maW5pc2goMTQpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIGVudHJpZXMsIHRoaXMsIFtbMSwgMTEsIDE0LCAxN11dKTtcbiAgICAgIH0pXG4gICAgICAvKipcclxuICAgICAgICogUmV0dXJuIGFuIGl0ZXJhYmxlIG9mIGtleXMgaW4gdGhlIHN0cmVhbS5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwia2V5c1wiLFxuICAgICAgdmFsdWU6XG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICByZWdlbmVyYXRvci5tYXJrKGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3IzLCBfc3RlcDMsIF9zdGVwMyR2YWx1ZSwgaWQ7XG5cbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yLndyYXAoZnVuY3Rpb24ga2V5cyQoX2NvbnRleHQzKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDIodGhpcy5fcGFpcnMpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucygpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfc3RlcDMkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDMudmFsdWUsIDEpLCBpZCA9IF9zdGVwMyR2YWx1ZVswXTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDExO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1tcImNhdGNoXCJdKDEpO1xuXG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKF9jb250ZXh0My50MCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDE0O1xuXG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5mKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmZpbmlzaCgxNCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwga2V5cywgdGhpcywgW1sxLCAxMSwgMTQsIDE3XV0pO1xuICAgICAgfSlcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gYW4gaXRlcmFibGUgb2YgdmFsdWVzIGluIHRoZSBzdHJlYW0uXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInZhbHVlc1wiLFxuICAgICAgdmFsdWU6XG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICByZWdlbmVyYXRvci5tYXJrKGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjQsIF9zdGVwNCwgX3N0ZXA0JHZhbHVlLCBpdGVtO1xuXG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvci53cmFwKGZ1bmN0aW9uIHZhbHVlcyQoX2NvbnRleHQ0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDIodGhpcy5fcGFpcnMpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMTtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucygpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfc3RlcDQkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDQudmFsdWUsIDIpLCBpdGVtID0gX3N0ZXA0JHZhbHVlWzFdO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxMTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbXCJjYXRjaFwiXSgxKTtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQuZShfY29udGV4dDQudDApO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxNDtcblxuICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQuZigpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5maW5pc2goMTQpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHZhbHVlcywgdGhpcywgW1sxLCAxMSwgMTQsIDE3XV0pO1xuICAgICAgfSlcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGlkcyBpbiB0aGlzIHN0cmVhbS5cclxuICAgICAgICpcclxuICAgICAgICogQHJlbWFya3NcclxuICAgICAgICogVGhlIGFycmF5IG1heSBjb250YWluIGR1cGxpY2l0aWVzLlxyXG4gICAgICAgKiBAcmV0dXJucyBUaGUgYXJyYXkgd2l0aCBhbGwgaWRzIGZyb20gdGhpcyBzdHJlYW0uXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInRvSWRBcnJheVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSWRBcnJheSgpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0NTtcblxuICAgICAgICByZXR1cm4gbWFwJDMoX2NvbnRleHQ1ID0gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuX3BhaXJzKSkuY2FsbChfY29udGV4dDUsIGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgcmV0dXJuIHBhaXJbMF07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHVybiBhbiBhcnJheSBjb250YWluaW5nIGFsbCB0aGUgaXRlbXMgaW4gdGhpcyBzdHJlYW0uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZW1hcmtzXHJcbiAgICAgICAqIFRoZSBhcnJheSBtYXkgY29udGFpbiBkdXBsaWNpdGllcy5cclxuICAgICAgICogQHJldHVybnMgVGhlIGFycmF5IHdpdGggYWxsIGl0ZW1zIGZyb20gdGhpcyBzdHJlYW0uXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInRvSXRlbUFycmF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9JdGVtQXJyYXkoKSB7XG4gICAgICAgIHZhciBfY29udGV4dDY7XG5cbiAgICAgICAgcmV0dXJuIG1hcCQzKF9jb250ZXh0NiA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9wYWlycykpLmNhbGwoX2NvbnRleHQ2LCBmdW5jdGlvbiAocGFpcikge1xuICAgICAgICAgIHJldHVybiBwYWlyWzFdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGVudHJpZXMgaW4gdGhpcyBzdHJlYW0uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZW1hcmtzXHJcbiAgICAgICAqIFRoZSBhcnJheSBtYXkgY29udGFpbiBkdXBsaWNpdGllcy5cclxuICAgICAgICogQHJldHVybnMgVGhlIGFycmF5IHdpdGggYWxsIGVudHJpZXMgZnJvbSB0aGlzIHN0cmVhbS5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9FbnRyeUFycmF5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9FbnRyeUFycmF5KCkge1xuICAgICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuX3BhaXJzKTtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gYW4gb2JqZWN0IG1hcCBjb250YWluaW5nIGFsbCB0aGUgaXRlbXMgaW4gdGhpcyBzdHJlYW0gYWNjZXNzaWJsZSBieSBpZHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZW1hcmtzXHJcbiAgICAgICAqIEluIGNhc2Ugb2YgZHVwbGljYXRlIGlkcyAoY29lcmNlZCB0byBzdHJpbmcgc28gYDcgPT0gJzcnYCkgdGhlIGxhc3QgZW5jb3V0ZXJlZCBhcHBlYXJzIGluIHRoZSByZXR1cm5lZCBvYmplY3QuXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSBvYmplY3QgbWFwIG9mIGFsbCBpZCDihpIgaXRlbSBwYWlycyBmcm9tIHRoaXMgc3RyZWFtLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b09iamVjdE1hcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvT2JqZWN0TWFwKCkge1xuICAgICAgICB2YXIgbWFwID0gY3JlYXRlJDUobnVsbCk7XG5cbiAgICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQyKHRoaXMuX3BhaXJzKSxcbiAgICAgICAgICAgIF9zdGVwNTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgX3N0ZXA1JHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXA1LnZhbHVlLCAyKSxcbiAgICAgICAgICAgICAgICBpZCA9IF9zdGVwNSR2YWx1ZVswXSxcbiAgICAgICAgICAgICAgICBpdGVtID0gX3N0ZXA1JHZhbHVlWzFdO1xuXG4gICAgICAgICAgICBtYXBbaWRdID0gaXRlbTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjUuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjUuZigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXR1cm4gYSBtYXAgY29udGFpbmluZyBhbGwgdGhlIGl0ZW1zIGluIHRoaXMgc3RyZWFtIGFjY2Vzc2libGUgYnkgaWRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyBUaGUgbWFwIG9mIGFsbCBpZCDihpIgaXRlbSBwYWlycyBmcm9tIHRoaXMgc3RyZWFtLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b01hcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvTWFwKCkge1xuICAgICAgICByZXR1cm4gbmV3IG1hcCh0aGlzLl9wYWlycyk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogUmV0dXJuIGEgc2V0IGNvbnRhaW5pbmcgYWxsIHRoZSAodW5pcXVlKSBpZHMgaW4gdGhpcyBzdHJlYW0uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSBzZXQgb2YgYWxsIGlkcyBmcm9tIHRoaXMgc3RyZWFtLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b0lkU2V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9JZFNldCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzZXQodGhpcy50b0lkQXJyYXkoKSk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogUmV0dXJuIGEgc2V0IGNvbnRhaW5pbmcgYWxsIHRoZSAodW5pcXVlKSBpdGVtcyBpbiB0aGlzIHN0cmVhbS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybnMgVGhlIHNldCBvZiBhbGwgaXRlbXMgZnJvbSB0aGlzIHN0cmVhbS5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9JdGVtU2V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9JdGVtU2V0KCkge1xuICAgICAgICByZXR1cm4gbmV3IHNldCh0aGlzLnRvSXRlbUFycmF5KCkpO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIENhY2hlIHRoZSBpdGVtcyBmcm9tIHRoaXMgc3RyZWFtLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmVtYXJrc1xyXG4gICAgICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgZm9yIGl0ZW1zIHRvIGJlIGZldGNoZWQgaW1tZWRpYXRlbGx5IGFuZCB1c2VkIChwb3NzaWJseSBtdWx0aXBsZSB0aW1lcykgbGF0ZXIuXHJcbiAgICAgICAqIEl0IGNhbiBhbHNvIGJlIHVzZWQgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgYXMgW1tEYXRhU3RyZWFtXV0gd291bGQgb3RoZXJ3aXNlIHJlZXZhbHVhdGUgZXZlcnl0aGluZyB1cG9uIGVhY2ggaXRlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAjIyBFeGFtcGxlXHJcbiAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAgICogY29uc3QgZHMgPSBuZXcgRGF0YVNldChb4oCmXSlcclxuICAgICAgICpcclxuICAgICAgICogY29uc3QgY2FjaGVkU3RyZWFtID0gZHMuc3RyZWFtKClcclxuICAgICAgICogICAuZmlsdGVyKOKApilcclxuICAgICAgICogICAuc29ydCjigKYpXHJcbiAgICAgICAqICAgLm1hcCjigKYpXHJcbiAgICAgICAqICAgLmNhY2hlZCjigKYpIC8vIERhdGEgYXJlIGZldGNoZWQsIHByb2Nlc3NlZCBhbmQgY2FjaGVkIGhlcmUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIGRzLmNsZWFyKClcclxuICAgICAgICogY2hhY2hlZFN0cmVhbSAvLyBTdGlsbCBoYXMgYWxsIHRoZSBpdGVtcy5cclxuICAgICAgICogYGBgXHJcbiAgICAgICAqIEByZXR1cm5zIEEgbmV3IFtbRGF0YVN0cmVhbV1dIHdpdGggY2FjaGVkIGl0ZW1zIChkZXRhY2hlZCBmcm9tIHRoZSBvcmlnaW5hbCBbW0RhdGFTZXRdXSkuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImNhY2hlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2FjaGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YVN0cmVhbShfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fcGFpcnMpKTtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXQgdGhlIGRpc3RpbmN0IHZhbHVlcyBvZiBnaXZlbiBwcm9wZXJ0eS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGZ1bmN0aW9uIHRoYXQgcGlja3MgYW5kIHBvc3NpYmx5IGNvbnZlcnRzIHRoZSBwcm9wZXJ0eS5cclxuICAgICAgICogQHR5cGVQYXJhbSBUIC0gVGhlIHR5cGUgb2YgdGhlIGRpc3RpbmN0IHZhbHVlLlxyXG4gICAgICAgKiBAcmV0dXJucyBBIHNldCBvZiBhbGwgZGlzdGluY3QgcHJvcGVydGllcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGlzdGluY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXN0aW5jdChjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2V0JDEgPSBuZXcgc2V0KCk7XG5cbiAgICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQyKHRoaXMuX3BhaXJzKSxcbiAgICAgICAgICAgIF9zdGVwNjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNi5zKCk7ICEoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgX3N0ZXA2JHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXA2LnZhbHVlLCAyKSxcbiAgICAgICAgICAgICAgICBpZCA9IF9zdGVwNiR2YWx1ZVswXSxcbiAgICAgICAgICAgICAgICBpdGVtID0gX3N0ZXA2JHZhbHVlWzFdO1xuXG4gICAgICAgICAgICBzZXQkMS5hZGQoY2FsbGJhY2soaXRlbSwgaWQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjYuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjYuZigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNldCQxO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIEZpbHRlciB0aGUgaXRlbXMgb2YgdGhlIHN0cmVhbS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGZ1bmN0aW9uIHRoYXQgZGVjaWRlcyB3aGV0aGVyIGFuIGl0ZW0gd2lsbCBiZSBpbmNsdWRlZC5cclxuICAgICAgICogQHJldHVybnMgQSBuZXcgZGF0YSBzdHJlYW0gd2l0aCB0aGUgZmlsdGVyZWQgaXRlbXMuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImZpbHRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICAgICAgICB2YXIgcGFpcnMgPSB0aGlzLl9wYWlycztcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhU3RyZWFtKF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXRlcmF0b3IsIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvci5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjcsIF9zdGVwNywgX3N0ZXA3JHZhbHVlLCBpZCwgaXRlbTtcblxuICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvci53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0Nykge1xuICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDIocGFpcnMpO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LnMoKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIGlmICgoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIF9zdGVwNyR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwNy52YWx1ZSwgMiksIGlkID0gX3N0ZXA3JHZhbHVlWzBdLCBpdGVtID0gX3N0ZXA3JHZhbHVlWzFdO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrKGl0ZW0sIGlkKSkge1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gW2lkLCBpdGVtXTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDEyO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3LnQwID0gX2NvbnRleHQ3W1wiY2F0Y2hcIl0oMSk7XG5cbiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjcuZShfY29udGV4dDcudDApO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5wcmV2ID0gMTU7XG5cbiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjcuZigpO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmZpbmlzaCgxNSk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxLCAxMiwgMTUsIDE4XV0pO1xuICAgICAgICB9KSkpO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZWFjaCBpdGVtIG9mIHRoZSBzdHJlYW0uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBmb3IgZWFjaCBpdGVtLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmb3JFYWNoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDIodGhpcy5fcGFpcnMpLFxuICAgICAgICAgICAgX3N0ZXA4O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I4LnMoKTsgIShfc3RlcDggPSBfaXRlcmF0b3I4Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBfc3RlcDgkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDgudmFsdWUsIDIpLFxuICAgICAgICAgICAgICAgIGlkID0gX3N0ZXA4JHZhbHVlWzBdLFxuICAgICAgICAgICAgICAgIGl0ZW0gPSBfc3RlcDgkdmFsdWVbMV07XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGl0ZW0sIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjguZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjguZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogTWFwIHRoZSBpdGVtcyBpbnRvIGEgZGlmZmVyZW50IHR5cGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIGNvbnZlcnNpb24uXHJcbiAgICAgICAqIEB0eXBlUGFyYW0gTWFwcGVkIC0gVGhlIHR5cGUgb2YgdGhlIGl0ZW0gYWZ0ZXIgbWFwcGluZy5cclxuICAgICAgICogQHJldHVybnMgQSBuZXcgZGF0YSBzdHJlYW0gd2l0aCB0aGUgbWFwcGVkIGl0ZW1zLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHBhaXJzID0gdGhpcy5fcGFpcnM7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YVN0cmVhbShfZGVmaW5lUHJvcGVydHkoe30sIGl0ZXJhdG9yLCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3IubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHtcbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yOSwgX3N0ZXA5LCBfc3RlcDkkdmFsdWUsIGlkLCBpdGVtO1xuXG4gICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0OCkge1xuICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyJDIocGFpcnMpO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAxO1xuXG4gICAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LnMoKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIGlmICgoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgX3N0ZXA5JHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXA5LnZhbHVlLCAyKSwgaWQgPSBfc3RlcDkkdmFsdWVbMF0sIGl0ZW0gPSBfc3RlcDkkdmFsdWVbMV07XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDc7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gW2lkLCBjYWxsYmFjayhpdGVtLCBpZCldO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDE0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAxMTtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC50MCA9IF9jb250ZXh0OFtcImNhdGNoXCJdKDEpO1xuXG4gICAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LmUoX2NvbnRleHQ4LnQwKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDgucHJldiA9IDE0O1xuXG4gICAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LmYoKTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5maW5pc2goMTQpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzEsIDExLCAxNCwgMTddXSk7XG4gICAgICAgIH0pKSk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogR2V0IHRoZSBpdGVtIHdpdGggdGhlIG1heGltdW0gdmFsdWUgb2YgZ2l2ZW4gcHJvcGVydHkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0aGF0IHBpY2tzIGFuZCBwb3NzaWJseSBjb252ZXJ0cyB0aGUgcHJvcGVydHkuXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSBpdGVtIHdpdGggdGhlIG1heGltdW0gaWYgZm91bmQgb3RoZXJ3aXNlIG51bGwuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1heFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1heChjYWxsYmFjaykge1xuICAgICAgICB2YXIgaXRlciA9IGdldEl0ZXJhdG9yKHRoaXMuX3BhaXJzKTtcblxuICAgICAgICB2YXIgY3VyciA9IGl0ZXIubmV4dCgpO1xuXG4gICAgICAgIGlmIChjdXJyLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXhJdGVtID0gY3Vyci52YWx1ZVsxXTtcbiAgICAgICAgdmFyIG1heFZhbHVlID0gY2FsbGJhY2soY3Vyci52YWx1ZVsxXSwgY3Vyci52YWx1ZVswXSk7XG5cbiAgICAgICAgd2hpbGUgKCEoY3VyciA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIF9jdXJyJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoY3Vyci52YWx1ZSwgMiksXG4gICAgICAgICAgICAgIGlkID0gX2N1cnIkdmFsdWVbMF0sXG4gICAgICAgICAgICAgIGl0ZW0gPSBfY3VyciR2YWx1ZVsxXTtcblxuICAgICAgICAgIHZhciBfdmFsdWUgPSBjYWxsYmFjayhpdGVtLCBpZCk7XG5cbiAgICAgICAgICBpZiAoX3ZhbHVlID4gbWF4VmFsdWUpIHtcbiAgICAgICAgICAgIG1heFZhbHVlID0gX3ZhbHVlO1xuICAgICAgICAgICAgbWF4SXRlbSA9IGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heEl0ZW07XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogR2V0IHRoZSBpdGVtIHdpdGggdGhlIG1pbmltdW0gdmFsdWUgb2YgZ2l2ZW4gcHJvcGVydHkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0aGF0IHBpY2tzIGFuZCBwb3NzaWJseSBjb252ZXJ0cyB0aGUgcHJvcGVydHkuXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSBpdGVtIHdpdGggdGhlIG1pbmltdW0gaWYgZm91bmQgb3RoZXJ3aXNlIG51bGwuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1pblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1pbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgaXRlciA9IGdldEl0ZXJhdG9yKHRoaXMuX3BhaXJzKTtcblxuICAgICAgICB2YXIgY3VyciA9IGl0ZXIubmV4dCgpO1xuXG4gICAgICAgIGlmIChjdXJyLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5JdGVtID0gY3Vyci52YWx1ZVsxXTtcbiAgICAgICAgdmFyIG1pblZhbHVlID0gY2FsbGJhY2soY3Vyci52YWx1ZVsxXSwgY3Vyci52YWx1ZVswXSk7XG5cbiAgICAgICAgd2hpbGUgKCEoY3VyciA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIF9jdXJyJHZhbHVlMiA9IF9zbGljZWRUb0FycmF5KGN1cnIudmFsdWUsIDIpLFxuICAgICAgICAgICAgICBpZCA9IF9jdXJyJHZhbHVlMlswXSxcbiAgICAgICAgICAgICAgaXRlbSA9IF9jdXJyJHZhbHVlMlsxXTtcblxuICAgICAgICAgIHZhciBfdmFsdWUyID0gY2FsbGJhY2soaXRlbSwgaWQpO1xuXG4gICAgICAgICAgaWYgKF92YWx1ZTIgPCBtaW5WYWx1ZSkge1xuICAgICAgICAgICAgbWluVmFsdWUgPSBfdmFsdWUyO1xuICAgICAgICAgICAgbWluSXRlbSA9IGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1pbkl0ZW07XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogUmVkdWNlIHRoZSBpdGVtcyBpbnRvIGEgc2luZ2xlIHZhbHVlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gdGhhdCBkb2VzIHRoZSByZWR1Y3Rpb24uXHJcbiAgICAgICAqIEBwYXJhbSBhY2N1bXVsYXRvciAtIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBhY2N1bXVsYXRvci5cclxuICAgICAgICogQHR5cGVQYXJhbSBUIC0gVGhlIHR5cGUgb2YgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxyXG4gICAgICAgKiBAcmV0dXJucyBUaGUgcmVkdWNlZCB2YWx1ZS5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVkdWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrLCBhY2N1bXVsYXRvcikge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMTAgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQyKHRoaXMuX3BhaXJzKSxcbiAgICAgICAgICAgIF9zdGVwMTA7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjEwLnMoKTsgIShfc3RlcDEwID0gX2l0ZXJhdG9yMTAubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIF9zdGVwMTAkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDEwLnZhbHVlLCAyKSxcbiAgICAgICAgICAgICAgICBpZCA9IF9zdGVwMTAkdmFsdWVbMF0sXG4gICAgICAgICAgICAgICAgaXRlbSA9IF9zdGVwMTAkdmFsdWVbMV07XG5cbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gY2FsbGJhY2soYWNjdW11bGF0b3IsIGl0ZW0sIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjEwLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IxMC5mKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogU29ydCB0aGUgaXRlbXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIEl0ZW0gY29tcGFyYXRvci5cclxuICAgICAgICogQHJldHVybnMgQSBuZXcgc3RyZWFtIHdpdGggc29ydGVkIGl0ZW1zLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzb3J0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc29ydCQxKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhU3RyZWFtKF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgX2NvbnRleHQ5O1xuXG4gICAgICAgICAgcmV0dXJuIGdldEl0ZXJhdG9yKHNvcnQoX2NvbnRleHQ5ID0gX3RvQ29uc3VtYWJsZUFycmF5KF90aGlzLl9wYWlycykpLmNhbGwoX2NvbnRleHQ5LCBmdW5jdGlvbiAoX3JlZiwgX3JlZjIpIHtcbiAgICAgICAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgICAgICAgIGlkQSA9IF9yZWYzWzBdLFxuICAgICAgICAgICAgICAgIGl0ZW1BID0gX3JlZjNbMV07XG5cbiAgICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSxcbiAgICAgICAgICAgICAgICBpZEIgPSBfcmVmNFswXSxcbiAgICAgICAgICAgICAgICBpdGVtQiA9IF9yZWY0WzFdO1xuXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soaXRlbUEsIGl0ZW1CLCBpZEEsIGlkQik7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERhdGFTdHJlYW07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBrZXlzJDQob2JqZWN0KTsgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IGZpbHRlcihzeW1ib2xzKS5jYWxsKHN5bWJvbHMsIGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgX2NvbnRleHQxMCwgX2NvbnRleHQxMTsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gZm9yRWFjaCQxKF9jb250ZXh0MTAgPSBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkpLmNhbGwoX2NvbnRleHQxMCwgZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBmb3JFYWNoJDEoX2NvbnRleHQxMSA9IG93bktleXMoT2JqZWN0KHNvdXJjZSkpKS5jYWxsKF9jb250ZXh0MTEsIGZ1bmN0aW9uIChrZXkpIHsgZGVmaW5lUHJvcGVydHkkNCh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuICBmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQxKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBzeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2V0SXRlcmF0b3JNZXRob2QkMShvKSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoaXNBcnJheSQxKG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSQxKG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuICBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkkMShvLCBtaW5MZW4pIHsgdmFyIF9jb250ZXh0OTsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5JDEobywgbWluTGVuKTsgdmFyIG4gPSBzbGljZShfY29udGV4dDkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpLmNhbGwoX2NvbnRleHQ5LCA4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBmcm9tJDMobyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkkMShvLCBtaW5MZW4pOyB9XG5cbiAgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkkMShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuICBmdW5jdGlvbiBfY3JlYXRlU3VwZXIkMShEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IGNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbiAgZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCQxKCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIWNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKGNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cbiAgLyoqXHJcbiAgICogQWRkIGFuIGlkIHRvIGdpdmVuIGl0ZW0gaWYgaXQgZG9lc24ndCBoYXZlIG9uZSBhbHJlYWR5LlxyXG4gICAqXHJcbiAgICogQHJlbWFya3NcclxuICAgKiBUaGUgaXRlbSB3aWxsIGJlIG1vZGlmaWVkLlxyXG4gICAqIEBwYXJhbSBpdGVtIC0gVGhlIGl0ZW0gdGhhdCB3aWxsIGhhdmUgYW4gaWQgYWZ0ZXIgYSBjYWxsIHRvIHRoaXMgZnVuY3Rpb24uXHJcbiAgICogQHBhcmFtIGlkUHJvcCAtIFRoZSBrZXkgb2YgdGhlIGlkIHByb3BlcnR5LlxyXG4gICAqIEB0eXBlUGFyYW0gSXRlbSAtIEl0ZW0gdHlwZSB0aGF0IG1heSBvciBtYXkgbm90IGhhdmUgYW4gaWQuXHJcbiAgICogQHR5cGVQYXJhbSBJZFByb3AgLSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSBpZC5cclxuICAgKiBAcmV0dXJucyB0cnVlXHJcbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlRnVsbEl0ZW0oaXRlbSwgaWRQcm9wKSB7XG4gICAgaWYgKGl0ZW1baWRQcm9wXSA9PSBudWxsKSB7XG4gICAgICAvLyBnZW5lcmF0ZSBhbiBpZFxuICAgICAgaXRlbVtpZFByb3BdID0gdjQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuICAvKipcclxuICAgKiAjIERhdGFTZXRcclxuICAgKlxyXG4gICAqIFZpcy5qcyBjb21lcyB3aXRoIGEgZmxleGlibGUgRGF0YVNldCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gaG9sZCBhbmRcclxuICAgKiBtYW5pcHVsYXRlIHVuc3RydWN0dXJlZCBkYXRhIGFuZCBsaXN0ZW4gZm9yIGNoYW5nZXMgaW4gdGhlIGRhdGEuIFRoZSBEYXRhU2V0XHJcbiAgICogaXMga2V5L3ZhbHVlIGJhc2VkLiBEYXRhIGl0ZW1zIGNhbiBiZSBhZGRlZCwgdXBkYXRlZCBhbmQgcmVtb3ZlZCBmcm9tIHRoZVxyXG4gICAqIERhdGFTZXQsIGFuZCBvbmUgY2FuIHN1YnNjcmliZSB0byBjaGFuZ2VzIGluIHRoZSBEYXRhU2V0LiBUaGUgZGF0YSBpbiB0aGVcclxuICAgKiBEYXRhU2V0IGNhbiBiZSBmaWx0ZXJlZCBhbmQgb3JkZXJlZC4gRGF0YSBjYW4gYmUgbm9ybWFsaXplZCB3aGVuIGFwcGVuZGluZyBpdFxyXG4gICAqIHRvIHRoZSBEYXRhU2V0IGFzIHdlbGwuXHJcbiAgICpcclxuICAgKiAjIyBFeGFtcGxlXHJcbiAgICpcclxuICAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBhIERhdGFTZXQuXHJcbiAgICpcclxuICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICogLy8gY3JlYXRlIGEgRGF0YVNldFxyXG4gICAqIHZhciBvcHRpb25zID0ge307XHJcbiAgICogdmFyIGRhdGEgPSBuZXcgdmlzLkRhdGFTZXQob3B0aW9ucyk7XHJcbiAgICpcclxuICAgKiAvLyBhZGQgaXRlbXNcclxuICAgKiAvLyBub3RlIHRoYXQgdGhlIGRhdGEgaXRlbXMgY2FuIGNvbnRhaW4gZGlmZmVyZW50IHByb3BlcnRpZXMgYW5kIGRhdGEgZm9ybWF0c1xyXG4gICAqIGRhdGEuYWRkKFtcclxuICAgKiAgIHtpZDogMSwgdGV4dDogJ2l0ZW0gMScsIGRhdGU6IG5ldyBEYXRlKDIwMTMsIDYsIDIwKSwgZ3JvdXA6IDEsIGZpcnN0OiB0cnVlfSxcclxuICAgKiAgIHtpZDogMiwgdGV4dDogJ2l0ZW0gMicsIGRhdGU6ICcyMDEzLTA2LTIzJywgZ3JvdXA6IDJ9LFxyXG4gICAqICAge2lkOiAzLCB0ZXh0OiAnaXRlbSAzJywgZGF0ZTogJzIwMTMtMDYtMjUnLCBncm91cDogMn0sXHJcbiAgICogICB7aWQ6IDQsIHRleHQ6ICdpdGVtIDQnfVxyXG4gICAqIF0pO1xyXG4gICAqXHJcbiAgICogLy8gc3Vic2NyaWJlIHRvIGFueSBjaGFuZ2UgaW4gdGhlIERhdGFTZXRcclxuICAgKiBkYXRhLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50LCBwcm9wZXJ0aWVzLCBzZW5kZXJJZCkge1xyXG4gICAqICAgY29uc29sZS5sb2coJ2V2ZW50JywgZXZlbnQsIHByb3BlcnRpZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogLy8gdXBkYXRlIGFuIGV4aXN0aW5nIGl0ZW1cclxuICAgKiBkYXRhLnVwZGF0ZSh7aWQ6IDIsIGdyb3VwOiAxfSk7XHJcbiAgICpcclxuICAgKiAvLyByZW1vdmUgYW4gaXRlbVxyXG4gICAqIGRhdGEucmVtb3ZlKDQpO1xyXG4gICAqXHJcbiAgICogLy8gZ2V0IGFsbCBpZHNcclxuICAgKiB2YXIgaWRzID0gZGF0YS5nZXRJZHMoKTtcclxuICAgKiBjb25zb2xlLmxvZygnaWRzJywgaWRzKTtcclxuICAgKlxyXG4gICAqIC8vIGdldCBhIHNwZWNpZmljIGl0ZW1cclxuICAgKiB2YXIgaXRlbTEgPSBkYXRhLmdldCgxKTtcclxuICAgKiBjb25zb2xlLmxvZygnaXRlbTEnLCBpdGVtMSk7XHJcbiAgICpcclxuICAgKiAvLyByZXRyaWV2ZSBhIGZpbHRlcmVkIHN1YnNldCBvZiB0aGUgZGF0YVxyXG4gICAqIHZhciBpdGVtcyA9IGRhdGEuZ2V0KHtcclxuICAgKiAgIGZpbHRlcjogZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgKiAgICAgcmV0dXJuIGl0ZW0uZ3JvdXAgPT0gMTtcclxuICAgKiAgIH1cclxuICAgKiB9KTtcclxuICAgKiBjb25zb2xlLmxvZygnZmlsdGVyZWQgaXRlbXMnLCBpdGVtcyk7XHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBAdHlwZVBhcmFtIEl0ZW0gLSBJdGVtIHR5cGUgdGhhdCBtYXkgb3IgbWF5IG5vdCBoYXZlIGFuIGlkLlxyXG4gICAqIEB0eXBlUGFyYW0gSWRQcm9wIC0gTmFtZSBvZiB0aGUgcHJvcGVydHkgdGhhdCBjb250YWlucyB0aGUgaWQuXHJcbiAgICovXG5cblxuICB2YXIgRGF0YVNldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0RhdGFTZXRQYXJ0KSB7XG4gICAgX2luaGVyaXRzKERhdGFTZXQsIF9EYXRhU2V0UGFydCk7XG5cbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyJDEoRGF0YVNldCk7XG5cbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBhIG5ldyBEYXRhU2V0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gSW5pdGlhbCBkYXRhIG9yIG9wdGlvbnMuXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgKHR5cGUgZXJyb3IgaWYgZGF0YSBpcyBhbHNvIG9wdGlvbnMpLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gRGF0YVNldChkYXRhLCBvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRhU2V0KTtcblxuICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsgLy8gY29ycmVjdGx5IHJlYWQgb3B0aW9uYWwgYXJndW1lbnRzXG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJmbHVzaFwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibGVuZ3RoXCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfb3B0aW9uc1wiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX2RhdGFcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIl9pZFByb3BcIiwgdm9pZCAwKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIl9xdWV1ZVwiLCBudWxsKTtcblxuICAgICAgaWYgKGRhdGEgJiYgIWlzQXJyYXkkMShkYXRhKSkge1xuICAgICAgICBvcHRpb25zID0gZGF0YTtcbiAgICAgICAgZGF0YSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBfdGhpcy5fZGF0YSA9IG5ldyBtYXAoKTsgLy8gbWFwIHdpdGggZGF0YSBpbmRleGVkIGJ5IGlkXG5cbiAgICAgIF90aGlzLmxlbmd0aCA9IDA7IC8vIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgRGF0YVNldFxuXG4gICAgICBfdGhpcy5faWRQcm9wID0gX3RoaXMuX29wdGlvbnMuZmllbGRJZCB8fCBcImlkXCI7IC8vIG5hbWUgb2YgdGhlIGZpZWxkIGNvbnRhaW5pbmcgaWRcbiAgICAgIC8vIGFkZCBpbml0aWFsIGRhdGEgd2hlbiBwcm92aWRlZFxuXG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgICBfdGhpcy5hZGQoZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBTZXQgbmV3IG9wdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgbmV3IG9wdGlvbnMuXHJcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKERhdGFTZXQsIFt7XG4gICAgICBrZXk6IFwiaWRQcm9wXCIsXG4gICAgICBnZXQ6XG4gICAgICAvKiogRmx1c2ggYWxsIHF1ZXVlZCBjYWxscy4gKi9cblxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWRQcm9wO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRPcHRpb25zXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucXVldWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChvcHRpb25zLnF1ZXVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gZGVsZXRlIHF1ZXVlIGlmIGxvYWRlZFxuICAgICAgICAgICAgaWYgKHRoaXMuX3F1ZXVlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3F1ZXVlLmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgICB0aGlzLl9xdWV1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBxdWV1ZSBhbmQgdXBkYXRlIGl0cyBvcHRpb25zXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3F1ZXVlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3F1ZXVlID0gUXVldWUuZXh0ZW5kKHRoaXMsIHtcbiAgICAgICAgICAgICAgICByZXBsYWNlOiBbXCJhZGRcIiwgXCJ1cGRhdGVcIiwgXCJyZW1vdmVcIl1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnF1ZXVlICYmIF90eXBlb2Yob3B0aW9ucy5xdWV1ZSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcXVldWUuc2V0T3B0aW9ucyhvcHRpb25zLnF1ZXVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBBZGQgYSBkYXRhIGl0ZW0gb3IgYW4gYXJyYXkgd2l0aCBpdGVtcy5cclxuICAgICAgICpcclxuICAgICAgICogQWZ0ZXIgdGhlIGl0ZW1zIGFyZSBhZGRlZCB0byB0aGUgRGF0YVNldCwgdGhlIERhdGFTZXQgd2lsbCB0cmlnZ2VyIGFuIGV2ZW50IGBhZGRgLiBXaGVuIGEgYHNlbmRlcklkYCBpcyBwcm92aWRlZCwgdGhpcyBpZCB3aWxsIGJlIHBhc3NlZCB3aXRoIHRoZSB0cmlnZ2VyZWQgZXZlbnQgdG8gYWxsIHN1YnNjcmliZXJzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAjIyBFeGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAgICogLy8gY3JlYXRlIGEgRGF0YVNldFxyXG4gICAgICAgKiBjb25zdCBkYXRhID0gbmV3IHZpcy5EYXRhU2V0KClcclxuICAgICAgICpcclxuICAgICAgICogLy8gYWRkIGl0ZW1zXHJcbiAgICAgICAqIGNvbnN0IGlkcyA9IGRhdGEuYWRkKFtcclxuICAgICAgICogICB7IGlkOiAxLCB0ZXh0OiAnaXRlbSAxJyB9LFxyXG4gICAgICAgKiAgIHsgaWQ6IDIsIHRleHQ6ICdpdGVtIDInIH0sXHJcbiAgICAgICAqICAgeyB0ZXh0OiAnaXRlbSB3aXRob3V0IGFuIGlkJyB9XHJcbiAgICAgICAqIF0pXHJcbiAgICAgICAqXHJcbiAgICAgICAqIGNvbnNvbGUubG9nKGlkcykgLy8gWzEsIDIsICc8VVVJRHY0PiddXHJcbiAgICAgICAqIGBgYFxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gZGF0YSAtIEl0ZW1zIHRvIGJlIGFkZGVkIChpZHMgd2lsbCBiZSBnZW5lcmF0ZWQgaWYgbWlzc2luZykuXHJcbiAgICAgICAqIEBwYXJhbSBzZW5kZXJJZCAtIFNlbmRlciBpZC5cclxuICAgICAgICogQHJldHVybnMgYWRkZWRJZHMgLSBBcnJheSB3aXRoIHRoZSBpZHMgKGdlbmVyYXRlZCBpZiBub3QgcHJlc2VudCkgb2YgdGhlIGFkZGVkIGl0ZW1zLlxyXG4gICAgICAgKiBAdGhyb3dzIFdoZW4gYW4gaXRlbSB3aXRoIHRoZSBzYW1lIGlkIGFzIGFueSBvZiB0aGUgYWRkZWQgaXRlbXMgYWxyZWFkeSBleGlzdHMuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImFkZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChkYXRhLCBzZW5kZXJJZCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgYWRkZWRJZHMgPSBbXTtcbiAgICAgICAgdmFyIGlkO1xuXG4gICAgICAgIGlmIChpc0FycmF5JDEoZGF0YSkpIHtcbiAgICAgICAgICAvLyBBcnJheVxuICAgICAgICAgIHZhciBpZHNUb0FkZCA9IG1hcCQzKGRhdGEpLmNhbGwoZGF0YSwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkW190aGlzMi5faWRQcm9wXTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChzb21lKGlkc1RvQWRkKS5jYWxsKGlkc1RvQWRkLCBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX2RhdGEuaGFzKGlkKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBkdXBsaWNhdGUgaWQgd2FzIGZvdW5kIGluIHRoZSBwYXJhbWV0ZXIgYXJyYXkuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZCA9IHRoaXMuX2FkZEl0ZW0oZGF0YVtpXSk7XG4gICAgICAgICAgICBhZGRlZElkcy5wdXNoKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSAmJiBfdHlwZW9mKGRhdGEpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgLy8gU2luZ2xlIGl0ZW1cbiAgICAgICAgICBpZCA9IHRoaXMuX2FkZEl0ZW0oZGF0YSk7XG4gICAgICAgICAgYWRkZWRJZHMucHVzaChpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhVHlwZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhZGRlZElkcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwiYWRkXCIsIHtcbiAgICAgICAgICAgIGl0ZW1zOiBhZGRlZElkc1xuICAgICAgICAgIH0sIHNlbmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhZGRlZElkcztcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBVcGRhdGUgZXhpc3RpbmcgaXRlbXMuIFdoZW4gYW4gaXRlbSBkb2VzIG5vdCBleGlzdCwgaXQgd2lsbCBiZSBjcmVhdGVkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmVtYXJrc1xyXG4gICAgICAgKiBUaGUgcHJvdmlkZWQgcHJvcGVydGllcyB3aWxsIGJlIG1lcmdlZCBpbiB0aGUgZXhpc3RpbmcgaXRlbS4gV2hlbiBhbiBpdGVtIGRvZXMgbm90IGV4aXN0LCBpdCB3aWxsIGJlIGNyZWF0ZWQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEFmdGVyIHRoZSBpdGVtcyBhcmUgdXBkYXRlZCwgdGhlIERhdGFTZXQgd2lsbCB0cmlnZ2VyIGFuIGV2ZW50IGBhZGRgIGZvciB0aGUgYWRkZWQgaXRlbXMsIGFuZCBhbiBldmVudCBgdXBkYXRlYC4gV2hlbiBhIGBzZW5kZXJJZGAgaXMgcHJvdmlkZWQsIHRoaXMgaWQgd2lsbCBiZSBwYXNzZWQgd2l0aCB0aGUgdHJpZ2dlcmVkIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVycy5cclxuICAgICAgICpcclxuICAgICAgICogIyMgRXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgICAqIC8vIGNyZWF0ZSBhIERhdGFTZXRcclxuICAgICAgICogY29uc3QgZGF0YSA9IG5ldyB2aXMuRGF0YVNldChbXHJcbiAgICAgICAqICAgeyBpZDogMSwgdGV4dDogJ2l0ZW0gMScgfSxcclxuICAgICAgICogICB7IGlkOiAyLCB0ZXh0OiAnaXRlbSAyJyB9LFxyXG4gICAgICAgKiAgIHsgaWQ6IDMsIHRleHQ6ICdpdGVtIDMnIH1cclxuICAgICAgICogXSlcclxuICAgICAgICpcclxuICAgICAgICogLy8gdXBkYXRlIGl0ZW1zXHJcbiAgICAgICAqIGNvbnN0IGlkcyA9IGRhdGEudXBkYXRlKFtcclxuICAgICAgICogICB7IGlkOiAyLCB0ZXh0OiAnaXRlbSAyICh1cGRhdGVkKScgfSxcclxuICAgICAgICogICB7IGlkOiA0LCB0ZXh0OiAnaXRlbSA0IChuZXcpJyB9XHJcbiAgICAgICAqIF0pXHJcbiAgICAgICAqXHJcbiAgICAgICAqIGNvbnNvbGUubG9nKGlkcykgLy8gWzIsIDRdXHJcbiAgICAgICAqIGBgYFxyXG4gICAgICAgKlxyXG4gICAgICAgKiAjIyBXYXJuaW5nIGZvciBUeXBlU2NyaXB0IHVzZXJzXHJcbiAgICAgICAqIFRoaXMgbWV0aG9kIG1heSBpbnRyb2R1Y2UgcGFydGlhbCBpdGVtcyBpbnRvIHRoZSBkYXRhIHNldC4gVXNlIGFkZCBvciB1cGRhdGVPbmx5IGluc3RlYWQgZm9yIGJldHRlciB0eXBlIHNhZmV0eS5cclxuICAgICAgICogQHBhcmFtIGRhdGEgLSBJdGVtcyB0byBiZSB1cGRhdGVkIChpZiB0aGUgaWQgaXMgYWxyZWFkeSBwcmVzZW50KSBvciBhZGRlZCAoaWYgdGhlIGlkIGlzIG1pc3NpbmcpLlxyXG4gICAgICAgKiBAcGFyYW0gc2VuZGVySWQgLSBTZW5kZXIgaWQuXHJcbiAgICAgICAqIEByZXR1cm5zIHVwZGF0ZWRJZHMgLSBUaGUgaWRzIG9mIHRoZSBhZGRlZCAodGhlc2UgbWF5IGJlIG5ld2x5IGdlbmVyYXRlZCBpZiB0aGVyZSB3YXMgbm8gaWQgaW4gdGhlIGl0ZW0gZnJvbSB0aGUgZGF0YSkgb3IgdXBkYXRlZCBpdGVtcy5cclxuICAgICAgICogQHRocm93cyBXaGVuIHRoZSBzdXBwbGllZCBkYXRhIGlzIG5laXRoZXIgYW4gaXRlbSBub3IgYW4gYXJyYXkgb2YgaXRlbXMuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInVwZGF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkYXRhLCBzZW5kZXJJZCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgYWRkZWRJZHMgPSBbXTtcbiAgICAgICAgdmFyIHVwZGF0ZWRJZHMgPSBbXTtcbiAgICAgICAgdmFyIG9sZERhdGEgPSBbXTtcbiAgICAgICAgdmFyIHVwZGF0ZWREYXRhID0gW107XG4gICAgICAgIHZhciBpZFByb3AgPSB0aGlzLl9pZFByb3A7XG5cbiAgICAgICAgdmFyIGFkZE9yVXBkYXRlID0gZnVuY3Rpb24gYWRkT3JVcGRhdGUoaXRlbSkge1xuICAgICAgICAgIHZhciBvcmlnSWQgPSBpdGVtW2lkUHJvcF07XG5cbiAgICAgICAgICBpZiAob3JpZ0lkICE9IG51bGwgJiYgX3RoaXMzLl9kYXRhLmhhcyhvcmlnSWQpKSB7XG4gICAgICAgICAgICB2YXIgZnVsbEl0ZW0gPSBpdGVtOyAvLyBpdCBoYXMgYW4gaWQsIHRoZXJlZm9yZSBpdCBpcyBhIGZ1bGxpdGVtXG5cbiAgICAgICAgICAgIHZhciBvbGRJdGVtID0gYXNzaWduJDIoe30sIF90aGlzMy5fZGF0YS5nZXQob3JpZ0lkKSk7IC8vIHVwZGF0ZSBpdGVtXG5cblxuICAgICAgICAgICAgdmFyIGlkID0gX3RoaXMzLl91cGRhdGVJdGVtKGZ1bGxJdGVtKTtcblxuICAgICAgICAgICAgdXBkYXRlZElkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIHVwZGF0ZWREYXRhLnB1c2goZnVsbEl0ZW0pO1xuICAgICAgICAgICAgb2xkRGF0YS5wdXNoKG9sZEl0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhZGQgbmV3IGl0ZW1cbiAgICAgICAgICAgIHZhciBfaWQgPSBfdGhpczMuX2FkZEl0ZW0oaXRlbSk7XG5cbiAgICAgICAgICAgIGFkZGVkSWRzLnB1c2goX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkkMShkYXRhKSkge1xuICAgICAgICAgIC8vIEFycmF5XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2ldICYmIF90eXBlb2YoZGF0YVtpXSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgYWRkT3JVcGRhdGUoZGF0YVtpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJZ25vcmluZyBpbnB1dCBpdGVtLCB3aGljaCBpcyBub3QgYW4gb2JqZWN0IGF0IGluZGV4IFwiICsgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgJiYgX3R5cGVvZihkYXRhKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIC8vIFNpbmdsZSBpdGVtXG4gICAgICAgICAgYWRkT3JVcGRhdGUoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhVHlwZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhZGRlZElkcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwiYWRkXCIsIHtcbiAgICAgICAgICAgIGl0ZW1zOiBhZGRlZElkc1xuICAgICAgICAgIH0sIHNlbmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cGRhdGVkSWRzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgICAgIGl0ZW1zOiB1cGRhdGVkSWRzLFxuICAgICAgICAgICAgb2xkRGF0YTogb2xkRGF0YSxcbiAgICAgICAgICAgIGRhdGE6IHVwZGF0ZWREYXRhXG4gICAgICAgICAgfTsgLy8gVE9ETzogcmVtb3ZlIGRlcHJlY2F0ZWQgcHJvcGVydHkgJ2RhdGEnIHNvbWUgZGF5XG4gICAgICAgICAgLy9PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdkYXRhJywge1xuICAgICAgICAgIC8vICAnZ2V0JzogKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vICAgIGNvbnNvbGUud2FybignUHJvcGVydHkgZGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgRGF0YVNldC5nZXQoaWRzKSB0byByZXRyaWV2ZSB0aGUgbmV3IGRhdGEsIHVzZSB0aGUgb2xkRGF0YSBwcm9wZXJ0eSBvbiB0aGlzIG9iamVjdCB0byBnZXQgdGhlIG9sZCBkYXRhJyk7XG4gICAgICAgICAgLy8gICAgcmV0dXJuIHVwZGF0ZWREYXRhO1xuICAgICAgICAgIC8vICB9KS5iaW5kKHRoaXMpXG4gICAgICAgICAgLy99KTtcblxuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJ1cGRhdGVcIiwgcHJvcHMsIHNlbmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25jYXQkMShhZGRlZElkcykuY2FsbChhZGRlZElkcywgdXBkYXRlZElkcyk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogVXBkYXRlIGV4aXN0aW5nIGl0ZW1zLiBXaGVuIGFuIGl0ZW0gZG9lcyBub3QgZXhpc3QsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmVtYXJrc1xyXG4gICAgICAgKiBUaGUgcHJvdmlkZWQgcHJvcGVydGllcyB3aWxsIGJlIGRlZXBseSBtZXJnZWQgaW50byB0aGUgZXhpc3RpbmcgaXRlbS5cclxuICAgICAgICogV2hlbiBhbiBpdGVtIGRvZXMgbm90IGV4aXN0IChpZCBub3QgcHJlc2VudCBpbiB0aGUgZGF0YSBzZXQgb3IgYWJzZW50KSwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gYW5kIG5vdGhpbmcgd2lsbCBiZSBjaGFuZ2VkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBBZnRlciB0aGUgaXRlbXMgYXJlIHVwZGF0ZWQsIHRoZSBEYXRhU2V0IHdpbGwgdHJpZ2dlciBhbiBldmVudCBgdXBkYXRlYC5cclxuICAgICAgICogV2hlbiBhIGBzZW5kZXJJZGAgaXMgcHJvdmlkZWQsIHRoaXMgaWQgd2lsbCBiZSBwYXNzZWQgd2l0aCB0aGUgdHJpZ2dlcmVkIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVycy5cclxuICAgICAgICpcclxuICAgICAgICogIyMgRXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgICAqIC8vIGNyZWF0ZSBhIERhdGFTZXRcclxuICAgICAgICogY29uc3QgZGF0YSA9IG5ldyB2aXMuRGF0YVNldChbXHJcbiAgICAgICAqICAgeyBpZDogMSwgdGV4dDogJ2l0ZW0gMScgfSxcclxuICAgICAgICogICB7IGlkOiAyLCB0ZXh0OiAnaXRlbSAyJyB9LFxyXG4gICAgICAgKiAgIHsgaWQ6IDMsIHRleHQ6ICdpdGVtIDMnIH0sXHJcbiAgICAgICAqIF0pXHJcbiAgICAgICAqXHJcbiAgICAgICAqIC8vIHVwZGF0ZSBpdGVtc1xyXG4gICAgICAgKiBjb25zdCBpZHMgPSBkYXRhLnVwZGF0ZShbXHJcbiAgICAgICAqICAgeyBpZDogMiwgdGV4dDogJ2l0ZW0gMiAodXBkYXRlZCknIH0sIC8vIHdvcmtzXHJcbiAgICAgICAqICAgLy8geyBpZDogNCwgdGV4dDogJ2l0ZW0gNCAobmV3KScgfSwgLy8gd291bGQgdGhyb3dcclxuICAgICAgICogICAvLyB7IHRleHQ6ICdpdGVtIDQgKG5ldyknIH0sIC8vIHdvdWxkIGFsc28gdGhyb3dcclxuICAgICAgICogXSlcclxuICAgICAgICpcclxuICAgICAgICogY29uc29sZS5sb2coaWRzKSAvLyBbMl1cclxuICAgICAgICogYGBgXHJcbiAgICAgICAqIEBwYXJhbSBkYXRhIC0gVXBkYXRlcyAodGhlIGlkIGFuZCBvcHRpb25hbGx5IG90aGVyIHByb3BzKSB0byB0aGUgaXRlbXMgaW4gdGhpcyBkYXRhIHNldC5cclxuICAgICAgICogQHBhcmFtIHNlbmRlcklkIC0gU2VuZGVyIGlkLlxyXG4gICAgICAgKiBAcmV0dXJucyB1cGRhdGVkSWRzIC0gVGhlIGlkcyBvZiB0aGUgdXBkYXRlZCBpdGVtcy5cclxuICAgICAgICogQHRocm93cyBXaGVuIHRoZSBzdXBwbGllZCBkYXRhIGlzIG5laXRoZXIgYW4gaXRlbSBub3IgYW4gYXJyYXkgb2YgaXRlbXMsIHdoZW4gdGhlIGlkcyBhcmUgbWlzc2luZy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXBkYXRlT25seVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU9ubHkoZGF0YSwgc2VuZGVySWQpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0LFxuICAgICAgICAgICAgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICBpZiAoIWlzQXJyYXkkMShkYXRhKSkge1xuICAgICAgICAgIGRhdGEgPSBbZGF0YV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdXBkYXRlRXZlbnREYXRhID0gbWFwJDMoX2NvbnRleHQgPSBtYXAkMyhkYXRhKS5jYWxsKGRhdGEsIGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgICB2YXIgb2xkRGF0YSA9IF90aGlzNC5fZGF0YS5nZXQodXBkYXRlW190aGlzNC5faWRQcm9wXSk7XG5cbiAgICAgICAgICBpZiAob2xkRGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVcGRhdGluZyBub24tZXhpc3RlbnQgaXRlbXMgaXMgbm90IGFsbG93ZWQuXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvbGREYXRhOiBvbGREYXRhLFxuICAgICAgICAgICAgdXBkYXRlOiB1cGRhdGVcbiAgICAgICAgICB9O1xuICAgICAgICB9KSkuY2FsbChfY29udGV4dCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgb2xkRGF0YSA9IF9yZWYub2xkRGF0YSxcbiAgICAgICAgICAgICAgdXBkYXRlID0gX3JlZi51cGRhdGU7XG4gICAgICAgICAgdmFyIGlkID0gb2xkRGF0YVtfdGhpczQuX2lkUHJvcF07XG4gICAgICAgICAgdmFyIHVwZGF0ZWREYXRhID0gcHVyZURlZXBPYmplY3RBc3NpZ24ob2xkRGF0YSwgdXBkYXRlKTtcblxuICAgICAgICAgIF90aGlzNC5fZGF0YS5zZXQoaWQsIHVwZGF0ZWREYXRhKTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBvbGREYXRhOiBvbGREYXRhLFxuICAgICAgICAgICAgdXBkYXRlZERhdGE6IHVwZGF0ZWREYXRhXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZUV2ZW50RGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgICAgICBpdGVtczogbWFwJDModXBkYXRlRXZlbnREYXRhKS5jYWxsKHVwZGF0ZUV2ZW50RGF0YSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5pZDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgb2xkRGF0YTogbWFwJDModXBkYXRlRXZlbnREYXRhKS5jYWxsKHVwZGF0ZUV2ZW50RGF0YSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5vbGREYXRhO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkYXRhOiBtYXAkMyh1cGRhdGVFdmVudERhdGEpLmNhbGwodXBkYXRlRXZlbnREYXRhLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnVwZGF0ZWREYXRhO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9OyAvLyBUT0RPOiByZW1vdmUgZGVwcmVjYXRlZCBwcm9wZXJ0eSAnZGF0YScgc29tZSBkYXlcbiAgICAgICAgICAvL09iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2RhdGEnLCB7XG4gICAgICAgICAgLy8gICdnZXQnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gICAgY29uc29sZS53YXJuKCdQcm9wZXJ0eSBkYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBEYXRhU2V0LmdldChpZHMpIHRvIHJldHJpZXZlIHRoZSBuZXcgZGF0YSwgdXNlIHRoZSBvbGREYXRhIHByb3BlcnR5IG9uIHRoaXMgb2JqZWN0IHRvIGdldCB0aGUgb2xkIGRhdGEnKTtcbiAgICAgICAgICAvLyAgICByZXR1cm4gdXBkYXRlZERhdGE7XG4gICAgICAgICAgLy8gIH0pLmJpbmQodGhpcylcbiAgICAgICAgICAvL30pO1xuXG4gICAgICAgICAgdGhpcy5fdHJpZ2dlcihcInVwZGF0ZVwiLCBwcm9wcywgc2VuZGVySWQpO1xuXG4gICAgICAgICAgcmV0dXJuIHByb3BzLml0ZW1zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGZpcnN0LCBzZWNvbmQpIHtcbiAgICAgICAgLy8gQFRPRE86IFdvdWRuJ3QgaXQgYmUgYmV0dGVyIHRvIHNwbGl0IHRoaXMgaW50byBtdWx0aXBsZSBtZXRob2RzP1xuICAgICAgICAvLyBwYXJzZSB0aGUgYXJndW1lbnRzXG4gICAgICAgIHZhciBpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGlkcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGlzSWQoZmlyc3QpKSB7XG4gICAgICAgICAgLy8gZ2V0KGlkIFssIG9wdGlvbnNdKVxuICAgICAgICAgIGlkID0gZmlyc3Q7XG4gICAgICAgICAgb3B0aW9ucyA9IHNlY29uZDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5JDEoZmlyc3QpKSB7XG4gICAgICAgICAgLy8gZ2V0KGlkcyBbLCBvcHRpb25zXSlcbiAgICAgICAgICBpZHMgPSBmaXJzdDtcbiAgICAgICAgICBvcHRpb25zID0gc2Vjb25kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGdldChbLCBvcHRpb25zXSlcbiAgICAgICAgICBvcHRpb25zID0gZmlyc3Q7XG4gICAgICAgIH0gLy8gZGV0ZXJtaW5lIHRoZSByZXR1cm4gdHlwZVxuXG5cbiAgICAgICAgdmFyIHJldHVyblR5cGUgPSBvcHRpb25zICYmIG9wdGlvbnMucmV0dXJuVHlwZSA9PT0gXCJPYmplY3RcIiA/IFwiT2JqZWN0XCIgOiBcIkFycmF5XCI7IC8vIEBUT0RPOiBXVEYgaXMgdGhpcz8gT3IgYW0gSSBtaXNzaW5nIHNvbWV0aGluZz9cbiAgICAgICAgLy8gdmFyIHJldHVyblR5cGVcbiAgICAgICAgLy8gaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZXR1cm5UeXBlKSB7XG4gICAgICAgIC8vICAgdmFyIGFsbG93ZWRWYWx1ZXMgPSBbJ0FycmF5JywgJ09iamVjdCddXG4gICAgICAgIC8vICAgcmV0dXJuVHlwZSA9XG4gICAgICAgIC8vICAgICBhbGxvd2VkVmFsdWVzLmluZGV4T2Yob3B0aW9ucy5yZXR1cm5UeXBlKSA9PSAtMVxuICAgICAgICAvLyAgICAgICA/ICdBcnJheSdcbiAgICAgICAgLy8gICAgICAgOiBvcHRpb25zLnJldHVyblR5cGVcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICByZXR1cm5UeXBlID0gJ0FycmF5J1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGJ1aWxkIG9wdGlvbnNcblxuICAgICAgICB2YXIgZmlsdGVyJDEgPSBvcHRpb25zICYmIGZpbHRlcihvcHRpb25zKTtcblxuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIGl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpdGVtSWRzID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXRlbUlkID0gdW5kZWZpbmVkOyAvLyBjb252ZXJ0IGl0ZW1zXG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAvLyByZXR1cm4gYSBzaW5nbGUgaXRlbVxuICAgICAgICAgIGl0ZW0gPSB0aGlzLl9kYXRhLmdldChpZCk7XG5cbiAgICAgICAgICBpZiAoaXRlbSAmJiBmaWx0ZXIkMSAmJiAhZmlsdGVyJDEoaXRlbSkpIHtcbiAgICAgICAgICAgIGl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlkcyAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gcmV0dXJuIGEgc3Vic2V0IG9mIGl0ZW1zXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaXRlbSA9IHRoaXMuX2RhdGEuZ2V0KGlkc1tpXSk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgKCFmaWx0ZXIkMSB8fCBmaWx0ZXIkMShpdGVtKSkpIHtcbiAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9jb250ZXh0MjtcblxuICAgICAgICAgIC8vIHJldHVybiBhbGwgaXRlbXNcbiAgICAgICAgICBpdGVtSWRzID0gX3RvQ29uc3VtYWJsZUFycmF5KGtleXMoX2NvbnRleHQyID0gdGhpcy5fZGF0YSkuY2FsbChfY29udGV4dDIpKTtcblxuICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2xlbiA9IGl0ZW1JZHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgIGl0ZW1JZCA9IGl0ZW1JZHNbX2ldO1xuICAgICAgICAgICAgaXRlbSA9IHRoaXMuX2RhdGEuZ2V0KGl0ZW1JZCk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgKCFmaWx0ZXIkMSB8fCBmaWx0ZXIkMShpdGVtKSkpIHtcbiAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gb3JkZXIgdGhlIHJlc3VsdHNcblxuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub3JkZXIgJiYgaWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fc29ydChpdGVtcywgb3B0aW9ucy5vcmRlcik7XG4gICAgICAgIH0gLy8gZmlsdGVyIGZpZWxkcyBvZiB0aGUgaXRlbXNcblxuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZmllbGRzKSB7XG4gICAgICAgICAgdmFyIGZpZWxkcyA9IG9wdGlvbnMuZmllbGRzO1xuXG4gICAgICAgICAgaWYgKGlkICE9IHVuZGVmaW5lZCAmJiBpdGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0aGlzLl9maWx0ZXJGaWVsZHMoaXRlbSwgZmllbGRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX2xlbjIgPSBpdGVtcy5sZW5ndGg7IF9pMiA8IF9sZW4yOyBfaTIrKykge1xuICAgICAgICAgICAgICBpdGVtc1tfaTJdID0gdGhpcy5fZmlsdGVyRmllbGRzKGl0ZW1zW19pMl0sIGZpZWxkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHJldHVybiB0aGUgcmVzdWx0c1xuXG5cbiAgICAgICAgaWYgKHJldHVyblR5cGUgPT0gXCJPYmplY3RcIikge1xuICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIF9pMyA9IDAsIF9sZW4zID0gaXRlbXMubGVuZ3RoOyBfaTMgPCBfbGVuMzsgX2kzKyspIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRhbnQgPSBpdGVtc1tfaTNdOyAvLyBAVE9ETzogU2hvdWRuJ3QgdGhpcyBiZSB0aGlzLl9maWVsZElkP1xuICAgICAgICAgICAgLy8gcmVzdWx0W3Jlc3VsdGFudC5pZF0gPSByZXN1bHRhbnRcblxuICAgICAgICAgICAgdmFyIF9pZDIgPSByZXN1bHRhbnRbdGhpcy5faWRQcm9wXTtcbiAgICAgICAgICAgIHJlc3VsdFtfaWQyXSA9IHJlc3VsdGFudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZW07XG5cbiAgICAgICAgICAgIC8vIGEgc2luZ2xlIGl0ZW1cbiAgICAgICAgICAgIHJldHVybiAoX2l0ZW0gPSBpdGVtKSAhPT0gbnVsbCAmJiBfaXRlbSAhPT0gdm9pZCAwID8gX2l0ZW0gOiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBqdXN0IHJldHVybiBvdXIgYXJyYXlcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImdldElkc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkcyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB2YXIgZmlsdGVyJDEgPSBvcHRpb25zICYmIGZpbHRlcihvcHRpb25zKTtcblxuICAgICAgICB2YXIgb3JkZXIgPSBvcHRpb25zICYmIG9wdGlvbnMub3JkZXI7XG5cbiAgICAgICAgdmFyIGl0ZW1JZHMgPSBfdG9Db25zdW1hYmxlQXJyYXkoa2V5cyhkYXRhKS5jYWxsKGRhdGEpKTtcblxuICAgICAgICB2YXIgaWRzID0gW107XG5cbiAgICAgICAgaWYgKGZpbHRlciQxKSB7XG4gICAgICAgICAgLy8gZ2V0IGZpbHRlcmVkIGl0ZW1zXG4gICAgICAgICAgaWYgKG9yZGVyKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgb3JkZXJlZCBsaXN0XG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGl0ZW1JZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIGlkID0gaXRlbUlkc1tpXTtcblxuICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX2RhdGEuZ2V0KGlkKTtcblxuICAgICAgICAgICAgICBpZiAoaXRlbSAhPSBudWxsICYmIGZpbHRlciQxKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9zb3J0KGl0ZW1zLCBvcmRlcik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF9sZW40ID0gaXRlbXMubGVuZ3RoOyBfaTQgPCBfbGVuNDsgX2k0KyspIHtcbiAgICAgICAgICAgICAgaWRzLnB1c2goaXRlbXNbX2k0XVt0aGlzLl9pZFByb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY3JlYXRlIHVub3JkZXJlZCBsaXN0XG4gICAgICAgICAgICBmb3IgKHZhciBfaTUgPSAwLCBfbGVuNSA9IGl0ZW1JZHMubGVuZ3RoOyBfaTUgPCBfbGVuNTsgX2k1KyspIHtcbiAgICAgICAgICAgICAgdmFyIF9pZDMgPSBpdGVtSWRzW19pNV07XG5cbiAgICAgICAgICAgICAgdmFyIF9pdGVtMiA9IHRoaXMuX2RhdGEuZ2V0KF9pZDMpO1xuXG4gICAgICAgICAgICAgIGlmIChfaXRlbTIgIT0gbnVsbCAmJiBmaWx0ZXIkMShfaXRlbTIpKSB7XG4gICAgICAgICAgICAgICAgaWRzLnB1c2goX2l0ZW0yW3RoaXMuX2lkUHJvcF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGdldCBhbGwgaXRlbXNcbiAgICAgICAgICBpZiAob3JkZXIpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBvcmRlcmVkIGxpc3RcbiAgICAgICAgICAgIHZhciBfaXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgX2k2ID0gMCwgX2xlbjYgPSBpdGVtSWRzLmxlbmd0aDsgX2k2IDwgX2xlbjY7IF9pNisrKSB7XG4gICAgICAgICAgICAgIHZhciBfaWQ0ID0gaXRlbUlkc1tfaTZdO1xuXG4gICAgICAgICAgICAgIF9pdGVtcy5wdXNoKGRhdGEuZ2V0KF9pZDQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc29ydChfaXRlbXMsIG9yZGVyKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgX2k3ID0gMCwgX2xlbjcgPSBfaXRlbXMubGVuZ3RoOyBfaTcgPCBfbGVuNzsgX2k3KyspIHtcbiAgICAgICAgICAgICAgaWRzLnB1c2goX2l0ZW1zW19pN11bdGhpcy5faWRQcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB1bm9yZGVyZWQgbGlzdFxuICAgICAgICAgICAgZm9yICh2YXIgX2k4ID0gMCwgX2xlbjggPSBpdGVtSWRzLmxlbmd0aDsgX2k4IDwgX2xlbjg7IF9pOCsrKSB7XG4gICAgICAgICAgICAgIHZhciBfaWQ1ID0gaXRlbUlkc1tfaThdO1xuXG4gICAgICAgICAgICAgIHZhciBfaXRlbTMgPSBkYXRhLmdldChfaWQ1KTtcblxuICAgICAgICAgICAgICBpZiAoX2l0ZW0zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZHMucHVzaChfaXRlbTNbdGhpcy5faWRQcm9wXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaWRzO1xuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0RGF0YVNldFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFTZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZm9yRWFjaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGZpbHRlciQxID0gb3B0aW9ucyAmJiBmaWx0ZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHZhciBpdGVtSWRzID0gX3RvQ29uc3VtYWJsZUFycmF5KGtleXMoZGF0YSkuY2FsbChkYXRhKSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vcmRlcikge1xuICAgICAgICAgIC8vIGV4ZWN1dGUgZm9yRWFjaCBvbiBvcmRlcmVkIGxpc3RcbiAgICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLmdldChvcHRpb25zKTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgIHZhciBpZCA9IGl0ZW1bdGhpcy5faWRQcm9wXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGl0ZW0sIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdW5vcmRlcmVkXG4gICAgICAgICAgZm9yICh2YXIgX2k5ID0gMCwgX2xlbjkgPSBpdGVtSWRzLmxlbmd0aDsgX2k5IDwgX2xlbjk7IF9pOSsrKSB7XG4gICAgICAgICAgICB2YXIgX2lkNiA9IGl0ZW1JZHNbX2k5XTtcblxuICAgICAgICAgICAgdmFyIF9pdGVtNCA9IHRoaXMuX2RhdGEuZ2V0KF9pZDYpO1xuXG4gICAgICAgICAgICBpZiAoX2l0ZW00ICE9IG51bGwgJiYgKCFmaWx0ZXIkMSB8fCBmaWx0ZXIkMShfaXRlbTQpKSkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhfaXRlbTQsIF9pZDYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWFwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbWFwKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBmaWx0ZXIkMSA9IG9wdGlvbnMgJiYgZmlsdGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHZhciBtYXBwZWRJdGVtcyA9IFtdO1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdmFyIGl0ZW1JZHMgPSBfdG9Db25zdW1hYmxlQXJyYXkoa2V5cyhkYXRhKS5jYWxsKGRhdGEpKTsgLy8gY29udmVydCBhbmQgZmlsdGVyIGl0ZW1zXG5cblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaXRlbUlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBpZCA9IGl0ZW1JZHNbaV07XG5cbiAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX2RhdGEuZ2V0KGlkKTtcblxuICAgICAgICAgIGlmIChpdGVtICE9IG51bGwgJiYgKCFmaWx0ZXIkMSB8fCBmaWx0ZXIkMShpdGVtKSkpIHtcbiAgICAgICAgICAgIG1hcHBlZEl0ZW1zLnB1c2goY2FsbGJhY2soaXRlbSwgaWQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gb3JkZXIgaXRlbXNcblxuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub3JkZXIpIHtcbiAgICAgICAgICB0aGlzLl9zb3J0KG1hcHBlZEl0ZW1zLCBvcHRpb25zLm9yZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXBwZWRJdGVtcztcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBGaWx0ZXIgdGhlIGZpZWxkcyBvZiBhbiBpdGVtLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gaXRlbSAtIFRoZSBpdGVtIHdob3NlIGZpZWxkcyBzaG91bGQgYmUgZmlsdGVyZWQuXHJcbiAgICAgICAqIEBwYXJhbSBmaWVsZHMgLSBUaGUgbmFtZXMgb2YgdGhlIGZpZWxkcyB0aGF0IHdpbGwgYmUga2VwdC5cclxuICAgICAgICogQHR5cGVQYXJhbSBLIC0gRmllbGQgbmFtZSB0eXBlLlxyXG4gICAgICAgKiBAcmV0dXJucyBUaGUgaXRlbSB3aXRob3V0IGFueSBhZGRpdGlvbmFsIGZpZWxkcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2ZpbHRlckZpZWxkc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maWx0ZXJGaWVsZHMoaXRlbSwgZmllbGRzKSB7XG4gICAgICAgIHZhciBfY29udGV4dDM7XG5cbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgLy8gaXRlbSBpcyBudWxsXG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVkdWNlKF9jb250ZXh0MyA9IGlzQXJyYXkkMShmaWVsZHMpID8gLy8gVXNlIHRoZSBzdXBwbGllZCBhcnJheVxuICAgICAgICBmaWVsZHMgOiAvLyBVc2UgdGhlIGtleXMgb2YgdGhlIHN1cHBsaWVkIG9iamVjdFxuICAgICAgICBrZXlzJDQoZmllbGRzKSkuY2FsbChfY29udGV4dDMsIGZ1bmN0aW9uIChmaWx0ZXJlZEl0ZW0sIGZpZWxkKSB7XG4gICAgICAgICAgZmlsdGVyZWRJdGVtW2ZpZWxkXSA9IGl0ZW1bZmllbGRdO1xuICAgICAgICAgIHJldHVybiBmaWx0ZXJlZEl0ZW07XG4gICAgICAgIH0sIHt9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBTb3J0IHRoZSBwcm92aWRlZCBhcnJheSB3aXRoIGl0ZW1zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gaXRlbXMgLSBJdGVtcyB0byBiZSBzb3J0ZWQgaW4gcGxhY2UuXHJcbiAgICAgICAqIEBwYXJhbSBvcmRlciAtIEEgZmllbGQgbmFtZSBvciBjdXN0b20gc29ydCBmdW5jdGlvbi5cclxuICAgICAgICogQHR5cGVQYXJhbSBUIC0gVGhlIHR5cGUgb2YgdGhlIGl0ZW1zIGluIHRoZSBpdGVtcyBhcnJheS5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NvcnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc29ydChpdGVtcywgb3JkZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcmRlciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIC8vIG9yZGVyIGJ5IHByb3ZpZGVkIGZpZWxkIG5hbWVcbiAgICAgICAgICB2YXIgbmFtZSA9IG9yZGVyOyAvLyBmaWVsZCBuYW1lXG5cbiAgICAgICAgICBzb3J0KGl0ZW1zKS5jYWxsKGl0ZW1zLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgLy8gQFRPRE86IEhvdyB0byB0cmVhdCBtaXNzaW5nIHByb3BlcnRpZXM/XG4gICAgICAgICAgICB2YXIgYXYgPSBhW25hbWVdO1xuICAgICAgICAgICAgdmFyIGJ2ID0gYltuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBhdiA+IGJ2ID8gMSA6IGF2IDwgYnYgPyAtMSA6IDA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9yZGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBvcmRlciBieSBzb3J0IGZ1bmN0aW9uXG4gICAgICAgICAgc29ydChpdGVtcykuY2FsbChpdGVtcywgb3JkZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRPRE86IGV4dGVuZCBvcmRlciBieSBhbiBPYmplY3Qge2ZpZWxkOnN0cmluZywgZGlyZWN0aW9uOnN0cmluZ31cbiAgICAgICAgICAvLyAgICAgICB3aGVyZSBkaXJlY3Rpb24gY2FuIGJlICdhc2MnIG9yICdkZXNjJ1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPcmRlciBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmUgYW4gaXRlbSBvciBtdWx0aXBsZSBpdGVtcyBieSDigJxyZWZlcmVuY2XigJ0gKG9ubHkgdGhlIGlkIGlzIHVzZWQpIG9yIGJ5IGlkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBUaGUgbWV0aG9kIGlnbm9yZXMgcmVtb3ZhbCBvZiBub24tZXhpc3RpbmcgaXRlbXMsIGFuZCByZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGlkcyBvZiB0aGUgaXRlbXMgd2hpY2ggYXJlIGFjdHVhbGx5IHJlbW92ZWQgZnJvbSB0aGUgRGF0YVNldC5cclxuICAgICAgICpcclxuICAgICAgICogQWZ0ZXIgdGhlIGl0ZW1zIGFyZSByZW1vdmVkLCB0aGUgRGF0YVNldCB3aWxsIHRyaWdnZXIgYW4gZXZlbnQgYHJlbW92ZWAgZm9yIHRoZSByZW1vdmVkIGl0ZW1zLiBXaGVuIGEgYHNlbmRlcklkYCBpcyBwcm92aWRlZCwgdGhpcyBpZCB3aWxsIGJlIHBhc3NlZCB3aXRoIHRoZSB0cmlnZ2VyZWQgZXZlbnQgdG8gYWxsIHN1YnNjcmliZXJzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAjIyBFeGFtcGxlXHJcbiAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuICAgICAgICogLy8gY3JlYXRlIGEgRGF0YVNldFxyXG4gICAgICAgKiBjb25zdCBkYXRhID0gbmV3IHZpcy5EYXRhU2V0KFtcclxuICAgICAgICogICB7IGlkOiAxLCB0ZXh0OiAnaXRlbSAxJyB9LFxyXG4gICAgICAgKiAgIHsgaWQ6IDIsIHRleHQ6ICdpdGVtIDInIH0sXHJcbiAgICAgICAqICAgeyBpZDogMywgdGV4dDogJ2l0ZW0gMycgfVxyXG4gICAgICAgKiBdKVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAvLyByZW1vdmUgaXRlbXNcclxuICAgICAgICogY29uc3QgaWRzID0gZGF0YS5yZW1vdmUoWzIsIHsgaWQ6IDMgfSwgNF0pXHJcbiAgICAgICAqXHJcbiAgICAgICAqIGNvbnNvbGUubG9nKGlkcykgLy8gWzIsIDNdXHJcbiAgICAgICAqIGBgYFxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gaWQgLSBPbmUgb3IgbW9yZSBpdGVtcyBvciBpZHMgb2YgaXRlbXMgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAgICogQHBhcmFtIHNlbmRlcklkIC0gU2VuZGVyIGlkLlxyXG4gICAgICAgKiBAcmV0dXJucyBUaGUgaWRzIG9mIHRoZSByZW1vdmVkIGl0ZW1zLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW1vdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoaWQsIHNlbmRlcklkKSB7XG4gICAgICAgIHZhciByZW1vdmVkSWRzID0gW107XG4gICAgICAgIHZhciByZW1vdmVkSXRlbXMgPSBbXTsgLy8gZm9yY2UgZXZlcnl0aGluZyB0byBiZSBhbiBhcnJheSBmb3Igc2ltcGxpY2l0eVxuXG4gICAgICAgIHZhciBpZHMgPSBpc0FycmF5JDEoaWQpID8gaWQgOiBbaWRdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuX3JlbW92ZShpZHNbaV0pO1xuXG4gICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBpdGVtSWQgPSBpdGVtW3RoaXMuX2lkUHJvcF07XG5cbiAgICAgICAgICAgIGlmIChpdGVtSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICByZW1vdmVkSWRzLnB1c2goaXRlbUlkKTtcbiAgICAgICAgICAgICAgcmVtb3ZlZEl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbW92ZWRJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlcihcInJlbW92ZVwiLCB7XG4gICAgICAgICAgICBpdGVtczogcmVtb3ZlZElkcyxcbiAgICAgICAgICAgIG9sZERhdGE6IHJlbW92ZWRJdGVtc1xuICAgICAgICAgIH0sIHNlbmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW1vdmVkSWRzO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlbW92ZSBhbiBpdGVtIGJ5IGl0cyBpZCBvciByZWZlcmVuY2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBpZCAtIElkIG9mIGFuIGl0ZW0gb3IgdGhlIGl0ZW0gaXRzZWxmLlxyXG4gICAgICAgKiBAcmV0dXJucyBUaGUgcmVtb3ZlZCBpdGVtIGlmIHJlbW92ZWQsIG51bGwgb3RoZXJ3aXNlLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcmVtb3ZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZShpZCkge1xuICAgICAgICAvLyBAVE9ETzogSXQgb3JpZ2lhbmxseSByZXR1cm5lZCB0aGUgaXRlbSBhbHRob3VnaCB0aGUgZG9jcyBzYXkgaWQuXG4gICAgICAgIC8vIFRoZSBjb2RlIGV4cGVjdHMgdGhlIGl0ZW0sIHNvIHByb2JhYmx5IGFuIGVycm9yIGluIHRoZSBkb2NzLlxuICAgICAgICB2YXIgaWRlbnQ7IC8vIGNvbmZpcm0gdGhlIGlkIHRvIHVzZSBiYXNlZCBvbiB0aGUgYXJncyB0eXBlXG5cbiAgICAgICAgaWYgKGlzSWQoaWQpKSB7XG4gICAgICAgICAgaWRlbnQgPSBpZDtcbiAgICAgICAgfSBlbHNlIGlmIChpZCAmJiBfdHlwZW9mKGlkKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGlkZW50ID0gaWRbdGhpcy5faWRQcm9wXTsgLy8gbG9vayBmb3IgdGhlIGlkZW50aWZpZXIgZmllbGQgdXNpbmcgLl9pZFByb3BcbiAgICAgICAgfSAvLyBkbyB0aGUgcmVtb3ZpbmcgaWYgdGhlIGl0ZW0gaXMgZm91bmRcblxuXG4gICAgICAgIGlmIChpZGVudCAhPSBudWxsICYmIHRoaXMuX2RhdGEuaGFzKGlkZW50KSkge1xuICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5fZGF0YS5nZXQoaWRlbnQpIHx8IG51bGw7XG5cbiAgICAgICAgICB0aGlzLl9kYXRhLmRlbGV0ZShpZGVudCk7XG5cbiAgICAgICAgICAtLXRoaXMubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogQ2xlYXIgdGhlIGVudGlyZSBkYXRhIHNldC5cclxuICAgICAgICpcclxuICAgICAgICogQWZ0ZXIgdGhlIGl0ZW1zIGFyZSByZW1vdmVkLCB0aGUgW1tEYXRhU2V0XV0gd2lsbCB0cmlnZ2VyIGFuIGV2ZW50IGByZW1vdmVgIGZvciBhbGwgcmVtb3ZlZCBpdGVtcy4gV2hlbiBhIGBzZW5kZXJJZGAgaXMgcHJvdmlkZWQsIHRoaXMgaWQgd2lsbCBiZSBwYXNzZWQgd2l0aCB0aGUgdHJpZ2dlcmVkIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVycy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHNlbmRlcklkIC0gU2VuZGVyIGlkLlxyXG4gICAgICAgKiBAcmV0dXJucyByZW1vdmVkSWRzIC0gVGhlIGlkcyBvZiBhbGwgcmVtb3ZlZCBpdGVtcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xlYXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcihzZW5kZXJJZCkge1xuICAgICAgICB2YXIgX2NvbnRleHQ0O1xuXG4gICAgICAgIHZhciBpZHMgPSBfdG9Db25zdW1hYmxlQXJyYXkoa2V5cyhfY29udGV4dDQgPSB0aGlzLl9kYXRhKS5jYWxsKF9jb250ZXh0NCkpO1xuXG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpdGVtcy5wdXNoKHRoaXMuX2RhdGEuZ2V0KGlkc1tpXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGF0YS5jbGVhcigpO1xuXG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgICAgICB0aGlzLl90cmlnZ2VyKFwicmVtb3ZlXCIsIHtcbiAgICAgICAgICBpdGVtczogaWRzLFxuICAgICAgICAgIG9sZERhdGE6IGl0ZW1zXG4gICAgICAgIH0sIHNlbmRlcklkKTtcblxuICAgICAgICByZXR1cm4gaWRzO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIEZpbmQgdGhlIGl0ZW0gd2l0aCBtYXhpbXVtIHZhbHVlIG9mIGEgc3BlY2lmaWVkIGZpZWxkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gZmllbGQgLSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSBzZWFyY2hlZCBmb3IgbWF4IHZhbHVlLlxyXG4gICAgICAgKiBAcmV0dXJucyBJdGVtIGNvbnRhaW5pbmcgbWF4IHZhbHVlLCBvciBudWxsIGlmIG5vIGl0ZW1zLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJtYXhcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXgoZmllbGQpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0NTtcblxuICAgICAgICB2YXIgbWF4ID0gbnVsbDtcbiAgICAgICAgdmFyIG1heEZpZWxkID0gbnVsbDtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIkMSh2YWx1ZXMoX2NvbnRleHQ1ID0gdGhpcy5fZGF0YSkuY2FsbChfY29udGV4dDUpKSxcbiAgICAgICAgICAgIF9zdGVwO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICB2YXIgaXRlbUZpZWxkID0gaXRlbVtmaWVsZF07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbUZpZWxkID09PSBcIm51bWJlclwiICYmIChtYXhGaWVsZCA9PSBudWxsIHx8IGl0ZW1GaWVsZCA+IG1heEZpZWxkKSkge1xuICAgICAgICAgICAgICBtYXggPSBpdGVtO1xuICAgICAgICAgICAgICBtYXhGaWVsZCA9IGl0ZW1GaWVsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXggfHwgbnVsbDtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBGaW5kIHRoZSBpdGVtIHdpdGggbWluaW11bSB2YWx1ZSBvZiBhIHNwZWNpZmllZCBmaWVsZC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIGZpZWxkIC0gTmFtZSBvZiB0aGUgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgc2VhcmNoZWQgZm9yIG1pbiB2YWx1ZS5cclxuICAgICAgICogQHJldHVybnMgSXRlbSBjb250YWluaW5nIG1pbiB2YWx1ZSwgb3IgbnVsbCBpZiBubyBpdGVtcy5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWluXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbWluKGZpZWxkKSB7XG4gICAgICAgIHZhciBfY29udGV4dDY7XG5cbiAgICAgICAgdmFyIG1pbiA9IG51bGw7XG4gICAgICAgIHZhciBtaW5GaWVsZCA9IG51bGw7XG5cbiAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQxKHZhbHVlcyhfY29udGV4dDYgPSB0aGlzLl9kYXRhKS5jYWxsKF9jb250ZXh0NikpLFxuICAgICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgICAgdmFyIGl0ZW1GaWVsZCA9IGl0ZW1bZmllbGRdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW1GaWVsZCA9PT0gXCJudW1iZXJcIiAmJiAobWluRmllbGQgPT0gbnVsbCB8fCBpdGVtRmllbGQgPCBtaW5GaWVsZCkpIHtcbiAgICAgICAgICAgICAgbWluID0gaXRlbTtcbiAgICAgICAgICAgICAgbWluRmllbGQgPSBpdGVtRmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtaW4gfHwgbnVsbDtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBGaW5kIGFsbCBkaXN0aW5jdCB2YWx1ZXMgb2YgYSBzcGVjaWZpZWQgZmllbGRcclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHByb3AgLSBUaGUgcHJvcGVydHkgbmFtZSB3aG9zZSBkaXN0aW5jdCB2YWx1ZXMgc2hvdWxkIGJlIHJldHVybmVkLlxyXG4gICAgICAgKiBAcmV0dXJucyBVbm9yZGVyZWQgYXJyYXkgY29udGFpbmluZyBhbGwgZGlzdGluY3QgdmFsdWVzLiBJdGVtcyB3aXRob3V0IHNwZWNpZmllZCBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGlzdGluY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXN0aW5jdChwcm9wKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB2YXIgaXRlbUlkcyA9IF90b0NvbnN1bWFibGVBcnJheShrZXlzKGRhdGEpLmNhbGwoZGF0YSkpO1xuXG4gICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaXRlbUlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBpZCA9IGl0ZW1JZHNbaV07XG4gICAgICAgICAgdmFyIGl0ZW0gPSBkYXRhLmdldChpZCk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gaXRlbVtwcm9wXTtcbiAgICAgICAgICB2YXIgZXhpc3RzID0gZmFsc2U7XG5cbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbal0gPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFleGlzdHMgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsdWVzW2NvdW50XSA9IHZhbHVlO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIEFkZCBhIHNpbmdsZSBpdGVtLiBXaWxsIGZhaWwgd2hlbiBhbiBpdGVtIHdpdGggdGhlIHNhbWUgaWQgYWxyZWFkeSBleGlzdHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSBpdGVtIC0gQSBuZXcgaXRlbSB0byBiZSBhZGRlZC5cclxuICAgICAgICogQHJldHVybnMgQWRkZWQgaXRlbSdzIGlkLiBBbiBpZCBpcyBnZW5lcmF0ZWQgd2hlbiBpdCBpcyBub3QgcHJlc2VudCBpbiB0aGUgaXRlbS5cclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2FkZEl0ZW1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkSXRlbShpdGVtKSB7XG4gICAgICAgIHZhciBmdWxsSXRlbSA9IGVuc3VyZUZ1bGxJdGVtKGl0ZW0sIHRoaXMuX2lkUHJvcCk7XG4gICAgICAgIHZhciBpZCA9IGZ1bGxJdGVtW3RoaXMuX2lkUHJvcF07IC8vIGNoZWNrIHdoZXRoZXIgdGhpcyBpZCBpcyBhbHJlYWR5IHRha2VuXG5cbiAgICAgICAgaWYgKHRoaXMuX2RhdGEuaGFzKGlkKSkge1xuICAgICAgICAgIC8vIGl0ZW0gYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIGl0ZW06IGl0ZW0gd2l0aCBpZCBcIiArIGlkICsgXCIgYWxyZWFkeSBleGlzdHNcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kYXRhLnNldChpZCwgZnVsbEl0ZW0pO1xuXG4gICAgICAgICsrdGhpcy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH1cbiAgICAgIC8qKlxyXG4gICAgICAgKiBVcGRhdGUgYSBzaW5nbGUgaXRlbTogbWVyZ2Ugd2l0aCBleGlzdGluZyBpdGVtLlxyXG4gICAgICAgKiBXaWxsIGZhaWwgd2hlbiB0aGUgaXRlbSBoYXMgbm8gaWQsIG9yIHdoZW4gdGhlcmUgZG9lcyBub3QgZXhpc3QgYW4gaXRlbSB3aXRoIHRoZSBzYW1lIGlkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gdXBkYXRlIC0gVGhlIG5ldyBpdGVtXHJcbiAgICAgICAqIEByZXR1cm5zIFRoZSBpZCBvZiB0aGUgdXBkYXRlZCBpdGVtLlxyXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfdXBkYXRlSXRlbVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVJdGVtKHVwZGF0ZSkge1xuICAgICAgICB2YXIgaWQgPSB1cGRhdGVbdGhpcy5faWRQcm9wXTtcblxuICAgICAgICBpZiAoaWQgPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1cGRhdGUgaXRlbTogaXRlbSBoYXMgbm8gaWQgKGl0ZW06IFwiICsgc3RyaW5naWZ5JDEodXBkYXRlKSArIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVtID0gdGhpcy5fZGF0YS5nZXQoaWQpO1xuXG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgIC8vIGl0ZW0gZG9lc24ndCBleGlzdFxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1cGRhdGUgaXRlbTogbm8gaXRlbSB3aXRoIGlkIFwiICsgaWQgKyBcIiBmb3VuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RhdGEuc2V0KGlkLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGl0ZW0pLCB1cGRhdGUpKTtcblxuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9XG4gICAgICAvKiogQGluaGVyaXREb2MgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzdHJlYW1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdHJlYW0oaWRzKSB7XG4gICAgICAgIGlmIChpZHMpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEYXRhU3RyZWFtKF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXRlcmF0b3IsIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvci5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yMywgX3N0ZXAzLCBpZCwgaXRlbTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQ3KSB7XG4gICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciQxKGlkcyk7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5wcmV2ID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnMoKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAoKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlkID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpdGVtID0gZGF0YS5nZXQoaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGl0ZW0gIT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbaWQsIGl0ZW1dO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDEzO1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcudDAgPSBfY29udGV4dDdbXCJjYXRjaFwiXSgxKTtcblxuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmUoX2NvbnRleHQ3LnQwKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAxNjtcblxuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmZpbmlzaCgxNik7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxLCAxMywgMTYsIDE5XV0pO1xuICAgICAgICAgIH0pKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9jb250ZXh0ODtcblxuICAgICAgICAgIHJldHVybiBuZXcgRGF0YVN0cmVhbShfZGVmaW5lUHJvcGVydHkoe30sIGl0ZXJhdG9yLCBiaW5kJDYoX2NvbnRleHQ4ID0gZW50cmllcyh0aGlzLl9kYXRhKSkuY2FsbChfY29udGV4dDgsIHRoaXMuX2RhdGEpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGF0YVNldDtcbiAgfShEYXRhU2V0UGFydCk7XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIHN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnZXRJdGVyYXRvck1ldGhvZCQxKG8pIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoIWl0KSB7IGlmIChpc0FycmF5JDEobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuICBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IHZhciBfY29udGV4dDU7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IHNsaWNlKF9jb250ZXh0NSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSkuY2FsbChfY29udGV4dDUsIDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIGZyb20kMyhvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbiAgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IGNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbiAgZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFjb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKGNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChjb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG4gIC8qKlxyXG4gICAqIERhdGFWaWV3XHJcbiAgICpcclxuICAgKiBBIERhdGFWaWV3IG9mZmVycyBhIGZpbHRlcmVkIGFuZC9vciBmb3JtYXR0ZWQgdmlldyBvbiBhIERhdGFTZXQuIE9uZSBjYW4gc3Vic2NyaWJlIHRvIGNoYW5nZXMgaW4gYSBEYXRhVmlldywgYW5kIGVhc2lseSBnZXQgZmlsdGVyZWQgb3IgZm9ybWF0dGVkIGRhdGEgd2l0aG91dCBoYXZpbmcgdG8gc3BlY2lmeSBmaWx0ZXJzIGFuZCBmaWVsZCB0eXBlcyBhbGwgdGhlIHRpbWUuXHJcbiAgICpcclxuICAgKiAjIyBFeGFtcGxlXHJcbiAgICogYGBgamF2YXNjcmlwdFxyXG4gICAqIC8vIGNyZWF0ZSBhIERhdGFTZXRcclxuICAgKiB2YXIgZGF0YSA9IG5ldyB2aXMuRGF0YVNldCgpO1xyXG4gICAqIGRhdGEuYWRkKFtcclxuICAgKiAgIHtpZDogMSwgdGV4dDogJ2l0ZW0gMScsIGRhdGU6IG5ldyBEYXRlKDIwMTMsIDYsIDIwKSwgZ3JvdXA6IDEsIGZpcnN0OiB0cnVlfSxcclxuICAgKiAgIHtpZDogMiwgdGV4dDogJ2l0ZW0gMicsIGRhdGU6ICcyMDEzLTA2LTIzJywgZ3JvdXA6IDJ9LFxyXG4gICAqICAge2lkOiAzLCB0ZXh0OiAnaXRlbSAzJywgZGF0ZTogJzIwMTMtMDYtMjUnLCBncm91cDogMn0sXHJcbiAgICogICB7aWQ6IDQsIHRleHQ6ICdpdGVtIDQnfVxyXG4gICAqIF0pO1xyXG4gICAqXHJcbiAgICogLy8gY3JlYXRlIGEgRGF0YVZpZXdcclxuICAgKiAvLyB0aGUgdmlldyB3aWxsIG9ubHkgY29udGFpbiBpdGVtcyBoYXZpbmcgYSBwcm9wZXJ0eSBncm91cCB3aXRoIHZhbHVlIDEsXHJcbiAgICogLy8gYW5kIHdpbGwgb25seSBvdXRwdXQgZmllbGRzIGlkLCB0ZXh0LCBhbmQgZGF0ZS5cclxuICAgKiB2YXIgdmlldyA9IG5ldyB2aXMuRGF0YVZpZXcoZGF0YSwge1xyXG4gICAqICAgZmlsdGVyOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAqICAgICByZXR1cm4gKGl0ZW0uZ3JvdXAgPT0gMSk7XHJcbiAgICogICB9LFxyXG4gICAqICAgZmllbGRzOiBbJ2lkJywgJ3RleHQnLCAnZGF0ZSddXHJcbiAgICogfSk7XHJcbiAgICpcclxuICAgKiAvLyBzdWJzY3JpYmUgdG8gYW55IGNoYW5nZSBpbiB0aGUgRGF0YVZpZXdcclxuICAgKiB2aWV3Lm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50LCBwcm9wZXJ0aWVzLCBzZW5kZXJJZCkge1xyXG4gICAqICAgY29uc29sZS5sb2coJ2V2ZW50JywgZXZlbnQsIHByb3BlcnRpZXMpO1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogLy8gdXBkYXRlIGFuIGl0ZW0gaW4gdGhlIGRhdGEgc2V0XHJcbiAgICogZGF0YS51cGRhdGUoe2lkOiAyLCBncm91cDogMX0pO1xyXG4gICAqXHJcbiAgICogLy8gZ2V0IGFsbCBpZHMgaW4gdGhlIHZpZXdcclxuICAgKiB2YXIgaWRzID0gdmlldy5nZXRJZHMoKTtcclxuICAgKiBjb25zb2xlLmxvZygnaWRzJywgaWRzKTsgLy8gd2lsbCBvdXRwdXQgWzEsIDJdXHJcbiAgICpcclxuICAgKiAvLyBnZXQgYWxsIGl0ZW1zIGluIHRoZSB2aWV3XHJcbiAgICogdmFyIGl0ZW1zID0gdmlldy5nZXQoKTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIEB0eXBlUGFyYW0gSXRlbSAtIEl0ZW0gdHlwZSB0aGF0IG1heSBvciBtYXkgbm90IGhhdmUgYW4gaWQuXHJcbiAgICogQHR5cGVQYXJhbSBJZFByb3AgLSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSBpZC5cclxuICAgKi9cblxuICB2YXIgRGF0YVZpZXcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9EYXRhU2V0UGFydCkge1xuICAgIF9pbmhlcml0cyhEYXRhVmlldywgX0RhdGFTZXRQYXJ0KTtcblxuICAgIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRGF0YVZpZXcpO1xuXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBEYXRhVmlldy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBpbnN0YW5jZSBjb250YWluaW5nIGRhdGEgKGRpcmVjdGx5IG9yIGluZGlyZWN0bHkpLlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGlzIGRhdGEgdmlldy5cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERhdGFWaWV3KGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBfY29udGV4dDtcblxuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0YVZpZXcpO1xuXG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibGVuZ3RoXCIsIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX2xpc3RlbmVyXCIsIHZvaWQgMCk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfZGF0YVwiLCB2b2lkIDApO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX2lkc1wiLCBuZXcgc2V0KCkpO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiX29wdGlvbnNcIiwgdm9pZCAwKTtcblxuICAgICAgX3RoaXMuX29wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgX3RoaXMuX2xpc3RlbmVyID0gYmluZCQ2KF9jb250ZXh0ID0gX3RoaXMuX29uRXZlbnQpLmNhbGwoX2NvbnRleHQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcblxuICAgICAgX3RoaXMuc2V0RGF0YShkYXRhKTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH0gLy8gVE9ETzogaW1wbGVtZW50IGEgZnVuY3Rpb24gLmNvbmZpZygpIHRvIGR5bmFtaWNhbGx5IHVwZGF0ZSB0aGluZ3MgbGlrZSBjb25maWd1cmVkIGZpbHRlclxuICAgIC8vIGFuZCB0cmlnZ2VyIGNoYW5nZXMgYWNjb3JkaW5nbHlcblxuICAgIC8qKlxyXG4gICAgICogU2V0IGEgZGF0YSBzb3VyY2UgZm9yIHRoZSB2aWV3LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGluc3RhbmNlIGNvbnRhaW5pbmcgZGF0YSAoZGlyZWN0bHkgb3IgaW5kaXJlY3RseSkuXHJcbiAgICAgKiBAcmVtYXJrc1xyXG4gICAgICogTm90ZSB0aGF0IHdoZW4gdGhlIGRhdGEgdmlldyBpcyBib3VuZCB0byBhIGRhdGEgc2V0IGl0IHdvbid0IGJlIGdhcmJhZ2VcclxuICAgICAqIGNvbGxlY3RlZCB1bmxlc3MgdGhlIGRhdGEgc2V0IGlzIHRvby4gVXNlIGBkYXRhVmlldy5zZXREYXRhKG51bGwpYCBvclxyXG4gICAgICogYGRhdGFWaWV3LmRpc3Bvc2UoKWAgdG8gZW5hYmxlIGdhcmJhZ2UgY29sbGVjdGlvbiBiZWZvcmUgeW91IGxvc2UgdGhlIGxhc3RcclxuICAgICAqIHJlZmVyZW5jZS5cclxuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoRGF0YVZpZXcsIFt7XG4gICAgICBrZXk6IFwiaWRQcm9wXCIsXG4gICAgICBnZXQ6XG4gICAgICAvKiogQGluaGVyaXREb2MgKi9cblxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGFTZXQoKS5pZFByb3A7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNldERhdGFcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREYXRhKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAvLyB1bnN1YnNjcmliZSBmcm9tIGN1cnJlbnQgZGF0YXNldFxuICAgICAgICAgIGlmICh0aGlzLl9kYXRhLm9mZikge1xuICAgICAgICAgICAgdGhpcy5fZGF0YS5vZmYoXCIqXCIsIHRoaXMuX2xpc3RlbmVyKTtcbiAgICAgICAgICB9IC8vIHRyaWdnZXIgYSByZW1vdmUgb2YgYWxsIGl0ZW1zIGluIG1lbW9yeVxuXG5cbiAgICAgICAgICB2YXIgaWRzID0gdGhpcy5fZGF0YS5nZXRJZHMoe1xuICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXIodGhpcy5fb3B0aW9ucylcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuX2RhdGEuZ2V0KGlkcyk7XG5cbiAgICAgICAgICB0aGlzLl9pZHMuY2xlYXIoKTtcblxuICAgICAgICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJyZW1vdmVcIiwge1xuICAgICAgICAgICAgaXRlbXM6IGlkcyxcbiAgICAgICAgICAgIG9sZERhdGE6IGl0ZW1zXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7IC8vIHRyaWdnZXIgYW4gYWRkIG9mIGFsbCBhZGRlZCBpdGVtc1xuXG4gICAgICAgICAgdmFyIF9pZHMgPSB0aGlzLl9kYXRhLmdldElkcyh7XG4gICAgICAgICAgICBmaWx0ZXI6IGZpbHRlcih0aGlzLl9vcHRpb25zKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IF9pZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpZCA9IF9pZHNbaV07XG5cbiAgICAgICAgICAgIHRoaXMuX2lkcy5hZGQoaWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubGVuZ3RoID0gX2lkcy5sZW5ndGg7XG5cbiAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwiYWRkXCIsIHtcbiAgICAgICAgICAgIGl0ZW1zOiBfaWRzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBEYXRhU2V0KCk7XG4gICAgICAgIH0gLy8gc3Vic2NyaWJlIHRvIG5ldyBkYXRhc2V0XG5cblxuICAgICAgICBpZiAodGhpcy5fZGF0YS5vbikge1xuICAgICAgICAgIHRoaXMuX2RhdGEub24oXCIqXCIsIHRoaXMuX2xpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlZnJlc2ggdGhlIERhdGFWaWV3LlxyXG4gICAgICAgKiBVc2VmdWwgd2hlbiB0aGUgRGF0YVZpZXcgaGFzIGEgZmlsdGVyIGZ1bmN0aW9uIGNvbnRhaW5pbmcgYSB2YXJpYWJsZSBwYXJhbWV0ZXIuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInJlZnJlc2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgICB2YXIgaWRzID0gdGhpcy5fZGF0YS5nZXRJZHMoe1xuICAgICAgICAgIGZpbHRlcjogZmlsdGVyKHRoaXMuX29wdGlvbnMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBvbGRJZHMgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5faWRzKTtcblxuICAgICAgICB2YXIgbmV3SWRzID0ge307XG4gICAgICAgIHZhciBhZGRlZElkcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZElkcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZEl0ZW1zID0gW107IC8vIGNoZWNrIGZvciBhZGRpdGlvbnNcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaWRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGlkID0gaWRzW2ldO1xuICAgICAgICAgIG5ld0lkc1tpZF0gPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLl9pZHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgYWRkZWRJZHMucHVzaChpZCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lkcy5hZGQoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBjaGVjayBmb3IgcmVtb3ZhbHNcblxuXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2xlbiA9IG9sZElkcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgIHZhciBfaWQgPSBvbGRJZHNbX2ldO1xuXG4gICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9kYXRhLmdldChfaWQpO1xuXG4gICAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQFRPRE86IEludmVzdGlnYXRlLlxuICAgICAgICAgICAgLy8gRG9lc24ndCBoYXBwZW4gZHVyaW5nIHRlc3RzIG9yIGV4YW1wbGVzLlxuICAgICAgICAgICAgLy8gSXMgaXQgcmVhbGx5IGltcG9zc2libGUgb3IgY291bGQgaXQgZXZlbnR1YWxseSBoYXBwZW4/XG4gICAgICAgICAgICAvLyBIb3cgdG8gaGFuZGxlIGl0IGlmIGl0IGRvZXM/IFRoZSB0eXBlcyBndWFyYW50ZWUgbm9uLW51bGxhYmxlIGl0ZW1zLlxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIklmIHlvdSBzZWUgdGhpcywgcmVwb3J0IGl0IHBsZWFzZS5cIik7XG4gICAgICAgICAgfSBlbHNlIGlmICghbmV3SWRzW19pZF0pIHtcbiAgICAgICAgICAgIHJlbW92ZWRJZHMucHVzaChfaWQpO1xuICAgICAgICAgICAgcmVtb3ZlZEl0ZW1zLnB1c2goaXRlbSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lkcy5kZWxldGUoX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxlbmd0aCArPSBhZGRlZElkcy5sZW5ndGggLSByZW1vdmVkSWRzLmxlbmd0aDsgLy8gdHJpZ2dlciBldmVudHNcblxuICAgICAgICBpZiAoYWRkZWRJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlcihcImFkZFwiLCB7XG4gICAgICAgICAgICBpdGVtczogYWRkZWRJZHNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW1vdmVkSWRzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJyZW1vdmVcIiwge1xuICAgICAgICAgICAgaXRlbXM6IHJlbW92ZWRJZHMsXG4gICAgICAgICAgICBvbGREYXRhOiByZW1vdmVkSXRlbXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGZpcnN0LCBzZWNvbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IC8vIHBhcnNlIHRoZSBhcmd1bWVudHNcblxuXG4gICAgICAgIHZhciBpZHMgPSBudWxsO1xuICAgICAgICB2YXIgb3B0aW9ucztcblxuICAgICAgICBpZiAoaXNJZChmaXJzdCkgfHwgaXNBcnJheSQxKGZpcnN0KSkge1xuICAgICAgICAgIGlkcyA9IGZpcnN0O1xuICAgICAgICAgIG9wdGlvbnMgPSBzZWNvbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGZpcnN0O1xuICAgICAgICB9IC8vIGV4dGVuZCB0aGUgb3B0aW9ucyB3aXRoIHRoZSBkZWZhdWx0IG9wdGlvbnMgYW5kIHByb3ZpZGVkIG9wdGlvbnNcblxuXG4gICAgICAgIHZhciB2aWV3T3B0aW9ucyA9IGFzc2lnbiQyKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTsgLy8gY3JlYXRlIGEgY29tYmluZWQgZmlsdGVyIG1ldGhvZCB3aGVuIG5lZWRlZFxuXG5cbiAgICAgICAgdmFyIHRoaXNGaWx0ZXIgPSBmaWx0ZXIodGhpcy5fb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIG9wdGlvbnNGaWx0ZXIgPSBvcHRpb25zICYmIGZpbHRlcihvcHRpb25zKTtcblxuICAgICAgICBpZiAodGhpc0ZpbHRlciAmJiBvcHRpb25zRmlsdGVyKSB7XG4gICAgICAgICAgdmlld09wdGlvbnMuZmlsdGVyID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzRmlsdGVyKGl0ZW0pICYmIG9wdGlvbnNGaWx0ZXIoaXRlbSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZHMgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldCh2aWV3T3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0KGlkcywgdmlld09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiogQGluaGVyaXREb2MgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRJZHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZHMob3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5fZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGVmYXVsdEZpbHRlciA9IGZpbHRlcih0aGlzLl9vcHRpb25zKTtcblxuICAgICAgICAgIHZhciBvcHRpb25zRmlsdGVyID0gb3B0aW9ucyAhPSBudWxsID8gZmlsdGVyKG9wdGlvbnMpIDogbnVsbDtcbiAgICAgICAgICB2YXIgZmlsdGVyJDE7XG5cbiAgICAgICAgICBpZiAob3B0aW9uc0ZpbHRlcikge1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgZmlsdGVyJDEgPSBmdW5jdGlvbiBmaWx0ZXIoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RmlsdGVyKGl0ZW0pICYmIG9wdGlvbnNGaWx0ZXIoaXRlbSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmaWx0ZXIkMSA9IG9wdGlvbnNGaWx0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlciQxID0gZGVmYXVsdEZpbHRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5nZXRJZHMoe1xuICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXIkMSxcbiAgICAgICAgICAgIG9yZGVyOiBvcHRpb25zICYmIG9wdGlvbnMub3JkZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImZvckVhY2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLl9kYXRhKSB7XG4gICAgICAgICAgdmFyIF9jb250ZXh0MjtcblxuICAgICAgICAgIHZhciBkZWZhdWx0RmlsdGVyID0gZmlsdGVyKHRoaXMuX29wdGlvbnMpO1xuXG4gICAgICAgICAgdmFyIG9wdGlvbnNGaWx0ZXIgPSBvcHRpb25zICYmIGZpbHRlcihvcHRpb25zKTtcblxuICAgICAgICAgIHZhciBmaWx0ZXIkMTtcblxuICAgICAgICAgIGlmIChvcHRpb25zRmlsdGVyKSB7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdEZpbHRlcikge1xuICAgICAgICAgICAgICBmaWx0ZXIkMSA9IGZ1bmN0aW9uIGZpbHRlcihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRGaWx0ZXIoaXRlbSkgJiYgb3B0aW9uc0ZpbHRlcihpdGVtKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZpbHRlciQxID0gb3B0aW9uc0ZpbHRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsdGVyJDEgPSBkZWZhdWx0RmlsdGVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2gkMShfY29udGV4dDIgPSB0aGlzLl9kYXRhKS5jYWxsKF9jb250ZXh0MiwgY2FsbGJhY2ssIHtcbiAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyJDEsXG4gICAgICAgICAgICBvcmRlcjogb3B0aW9ucyAmJiBvcHRpb25zLm9yZGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIm1hcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hcChjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5fZGF0YSkge1xuICAgICAgICAgIHZhciBfY29udGV4dDM7XG5cbiAgICAgICAgICB2YXIgZGVmYXVsdEZpbHRlciA9IGZpbHRlcih0aGlzLl9vcHRpb25zKTtcblxuICAgICAgICAgIHZhciBvcHRpb25zRmlsdGVyID0gb3B0aW9ucyAmJiBmaWx0ZXIob3B0aW9ucyk7XG5cbiAgICAgICAgICB2YXIgZmlsdGVyJDE7XG5cbiAgICAgICAgICBpZiAob3B0aW9uc0ZpbHRlcikge1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgZmlsdGVyJDEgPSBmdW5jdGlvbiBmaWx0ZXIoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RmlsdGVyKGl0ZW0pICYmIG9wdGlvbnNGaWx0ZXIoaXRlbSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmaWx0ZXIkMSA9IG9wdGlvbnNGaWx0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlciQxID0gZGVmYXVsdEZpbHRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbWFwJDMoX2NvbnRleHQzID0gdGhpcy5fZGF0YSkuY2FsbChfY29udGV4dDMsIGNhbGxiYWNrLCB7XG4gICAgICAgICAgICBmaWx0ZXI6IGZpbHRlciQxLFxuICAgICAgICAgICAgb3JkZXI6IG9wdGlvbnMgJiYgb3B0aW9ucy5vcmRlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqIEBpbmhlcml0RG9jICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0RGF0YVNldFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFTZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldERhdGFTZXQoKTtcbiAgICAgIH1cbiAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcInN0cmVhbVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0cmVhbShpZHMpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0NDtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5zdHJlYW0oaWRzIHx8IF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXRlcmF0b3IsIGJpbmQkNihfY29udGV4dDQgPSBrZXlzKHRoaXMuX2lkcykpLmNhbGwoX2NvbnRleHQ0LCB0aGlzLl9pZHMpKSk7XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogUmVuZGVyIHRoZSBpbnN0YW5jZSB1bnVzYWJsZSBwcmlvciB0byBnYXJiYWdlIGNvbGxlY3Rpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZW1hcmtzXHJcbiAgICAgICAqIFRoZSBpbnRlbnRpb24gb2YgdGhpcyBtZXRob2QgaXMgdG8gaGVscCBkaXNjb3ZlciBzY2VuYXJpb3Mgd2hlcmUgdGhlIGRhdGFcclxuICAgICAgICogdmlldyBpcyBiZWluZyB1c2VkIHdoZW4gdGhlIHByb2dyYW1tZXIgdGhpbmtzIGl0IGhhcyBiZWVuIGdhcmJhZ2UgY29sbGVjdGVkXHJcbiAgICAgICAqIGFscmVhZHkuIEl0J3Mgc3RyaWN0ZXIgdmVyc2lvbiBvZiBgZGF0YVZpZXcuc2V0RGF0YShudWxsKWAuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcImRpc3Bvc2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICB2YXIgX3RoaXMkX2RhdGE7XG5cbiAgICAgICAgaWYgKChfdGhpcyRfZGF0YSA9IHRoaXMuX2RhdGEpICE9PSBudWxsICYmIF90aGlzJF9kYXRhICE9PSB2b2lkIDAgJiYgX3RoaXMkX2RhdGEub2ZmKSB7XG4gICAgICAgICAgdGhpcy5fZGF0YS5vZmYoXCIqXCIsIHRoaXMuX2xpc3RlbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJUaGlzIGRhdGEgdmlldyBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkIG9mLlwiO1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIob3duS2V5cyQxKERhdGFWaWV3LnByb3RvdHlwZSkpLFxuICAgICAgICAgICAgX3N0ZXA7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGtleSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSQ0KHRoaXMsIGtleSwgcmVwbGFjZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcclxuICAgICAgICogRXZlbnQgbGlzdGVuZXIuIFdpbGwgcHJvcGFnYXRlIGFsbCBldmVudHMgZnJvbSB0aGUgY29ubmVjdGVkIGRhdGEgc2V0IHRvIHRoZSBzdWJzY3JpYmVycyBvZiB0aGUgRGF0YVZpZXcsIGJ1dCB3aWxsIGZpbHRlciB0aGUgaXRlbXMgYW5kIG9ubHkgdHJpZ2dlciB3aGVuIHRoZXJlIGFyZSBjaGFuZ2VzIGluIHRoZSBmaWx0ZXJlZCBkYXRhIHNldC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxyXG4gICAgICAgKiBAcGFyYW0gcGFyYW1zIC0gUGFyYW1ldGVycyBvZiB0aGUgZXZlbnQuXHJcbiAgICAgICAqIEBwYXJhbSBzZW5kZXJJZCAtIElkIHN1cHBsaWVkIGJ5IHRoZSBzZW5kZXIuXHJcbiAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9vbkV2ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX29uRXZlbnQoZXZlbnQsIHBhcmFtcywgc2VuZGVySWQpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy5pdGVtcyB8fCAhdGhpcy5fZGF0YSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZHMgPSBwYXJhbXMuaXRlbXM7XG4gICAgICAgIHZhciBhZGRlZElkcyA9IFtdO1xuICAgICAgICB2YXIgdXBkYXRlZElkcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZElkcyA9IFtdO1xuICAgICAgICB2YXIgb2xkSXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIHVwZGF0ZWRJdGVtcyA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZEl0ZW1zID0gW107XG5cbiAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgIGNhc2UgXCJhZGRcIjpcbiAgICAgICAgICAgIC8vIGZpbHRlciB0aGUgaWRzIG9mIHRoZSBhZGRlZCBpdGVtc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICB2YXIgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5nZXQoaWQpO1xuXG4gICAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWRzLmFkZChpZCk7XG5cbiAgICAgICAgICAgICAgICBhZGRlZElkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJ1cGRhdGVcIjpcbiAgICAgICAgICAgIC8vIGRldGVybWluZSB0aGUgZXZlbnQgZnJvbSB0aGUgdmlld3Mgdmlld3BvaW50OiBhbiB1cGRhdGVkXG4gICAgICAgICAgICAvLyBpdGVtIGNhbiBiZSBhZGRlZCwgdXBkYXRlZCwgb3IgcmVtb3ZlZCBmcm9tIHRoaXMgdmlldy5cbiAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9sZW4yID0gaWRzLmxlbmd0aDsgX2kyIDwgX2xlbjI7IF9pMisrKSB7XG4gICAgICAgICAgICAgIHZhciBfaWQyID0gaWRzW19pMl07XG5cbiAgICAgICAgICAgICAgdmFyIF9pdGVtID0gdGhpcy5nZXQoX2lkMik7XG5cbiAgICAgICAgICAgICAgaWYgKF9pdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lkcy5oYXMoX2lkMikpIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZWRJZHMucHVzaChfaWQyKTtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZWRJdGVtcy5wdXNoKHBhcmFtcy5kYXRhW19pMl0pO1xuICAgICAgICAgICAgICAgICAgb2xkSXRlbXMucHVzaChwYXJhbXMub2xkRGF0YVtfaTJdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5faWRzLmFkZChfaWQyKTtcblxuICAgICAgICAgICAgICAgICAgYWRkZWRJZHMucHVzaChfaWQyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lkcy5oYXMoX2lkMikpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2lkcy5kZWxldGUoX2lkMik7XG5cbiAgICAgICAgICAgICAgICAgIHJlbW92ZWRJZHMucHVzaChfaWQyKTtcbiAgICAgICAgICAgICAgICAgIHJlbW92ZWRJdGVtcy5wdXNoKHBhcmFtcy5vbGREYXRhW19pMl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcbiAgICAgICAgICAgIC8vIGZpbHRlciB0aGUgaWRzIG9mIHRoZSByZW1vdmVkIGl0ZW1zXG4gICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBfbGVuMyA9IGlkcy5sZW5ndGg7IF9pMyA8IF9sZW4zOyBfaTMrKykge1xuICAgICAgICAgICAgICB2YXIgX2lkMyA9IGlkc1tfaTNdO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pZHMuaGFzKF9pZDMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWRzLmRlbGV0ZShfaWQzKTtcblxuICAgICAgICAgICAgICAgIHJlbW92ZWRJZHMucHVzaChfaWQzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVkSXRlbXMucHVzaChwYXJhbXMub2xkRGF0YVtfaTNdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGVuZ3RoICs9IGFkZGVkSWRzLmxlbmd0aCAtIHJlbW92ZWRJZHMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChhZGRlZElkcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwiYWRkXCIsIHtcbiAgICAgICAgICAgIGl0ZW1zOiBhZGRlZElkc1xuICAgICAgICAgIH0sIHNlbmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cGRhdGVkSWRzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJ1cGRhdGVcIiwge1xuICAgICAgICAgICAgaXRlbXM6IHVwZGF0ZWRJZHMsXG4gICAgICAgICAgICBvbGREYXRhOiBvbGRJdGVtcyxcbiAgICAgICAgICAgIGRhdGE6IHVwZGF0ZWRJdGVtc1xuICAgICAgICAgIH0sIHNlbmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW1vdmVkSWRzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJyZW1vdmVcIiwge1xuICAgICAgICAgICAgaXRlbXM6IHJlbW92ZWRJZHMsXG4gICAgICAgICAgICBvbGREYXRhOiByZW1vdmVkSXRlbXNcbiAgICAgICAgICB9LCBzZW5kZXJJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRGF0YVZpZXc7XG4gIH0oRGF0YVNldFBhcnQpO1xuXG4gIC8qKlxyXG4gICAqIENoZWNrIHRoYXQgZ2l2ZW4gdmFsdWUgaXMgY29tcGF0aWJsZSB3aXRoIFZpcyBEYXRhIFNldCBpbnRlcmZhY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaWRQcm9wIC0gVGhlIGV4cGVjdGVkIHByb3BlcnR5IHRvIGNvbnRhaW4gaXRlbSBpZC5cclxuICAgKiBAcGFyYW0gdiAtIFRoZSB2YWx1ZSB0byBiZSB0ZXN0ZWQuXHJcbiAgICogQHJldHVybnMgVHJ1ZSBpZiBhbGwgZXhwZWN0ZWQgdmFsdWVzIGFuZCBtZXRob2RzIG1hdGNoLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICovXG4gIGZ1bmN0aW9uIGlzRGF0YVNldExpa2UoaWRQcm9wLCB2KSB7XG4gICAgcmV0dXJuIF90eXBlb2YodikgPT09IFwib2JqZWN0XCIgJiYgdiAhPT0gbnVsbCAmJiBpZFByb3AgPT09IHYuaWRQcm9wICYmIHR5cGVvZiB2LmFkZCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2LmNsZWFyID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHYuZGlzdGluY3QgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZm9yRWFjaCQxKHYpID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHYuZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHYuZ2V0RGF0YVNldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2LmdldElkcyA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2Lmxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgbWFwJDModikgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5tYXggPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5taW4gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5vZmYgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5vbiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2LnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2LnNldE9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5zdHJlYW0gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi51cGRhdGUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi51cGRhdGVPbmx5ID09PSBcImZ1bmN0aW9uXCI7XG4gIH1cblxuICAvKipcclxuICAgKiBDaGVjayB0aGF0IGdpdmVuIHZhbHVlIGlzIGNvbXBhdGlibGUgd2l0aCBWaXMgRGF0YSBWaWV3IGludGVyZmFjZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBpZFByb3AgLSBUaGUgZXhwZWN0ZWQgcHJvcGVydHkgdG8gY29udGFpbiBpdGVtIGlkLlxyXG4gICAqIEBwYXJhbSB2IC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cclxuICAgKiBAcmV0dXJucyBUcnVlIGlmIGFsbCBleHBlY3RlZCB2YWx1ZXMgYW5kIG1ldGhvZHMgbWF0Y2gsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgKi9cblxuICBmdW5jdGlvbiBpc0RhdGFWaWV3TGlrZShpZFByb3AsIHYpIHtcbiAgICByZXR1cm4gX3R5cGVvZih2KSA9PT0gXCJvYmplY3RcIiAmJiB2ICE9PSBudWxsICYmIGlkUHJvcCA9PT0gdi5pZFByb3AgJiYgdHlwZW9mIGZvckVhY2gkMSh2KSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2LmdldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2LmdldERhdGFTZXQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5nZXRJZHMgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5sZW5ndGggPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG1hcCQzKHYpID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHYub2ZmID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHYub24gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygdi5zdHJlYW0gPT09IFwiZnVuY3Rpb25cIiAmJiBpc0RhdGFTZXRMaWtlKGlkUHJvcCwgdi5nZXREYXRhU2V0KCkpO1xuICB9XG5cbiAgZXhwb3J0cy5ERUxFVEUgPSBERUxFVEU7XG4gIGV4cG9ydHMuRGF0YVNldCA9IERhdGFTZXQ7XG4gIGV4cG9ydHMuRGF0YVN0cmVhbSA9IERhdGFTdHJlYW07XG4gIGV4cG9ydHMuRGF0YVZpZXcgPSBEYXRhVmlldztcbiAgZXhwb3J0cy5RdWV1ZSA9IFF1ZXVlO1xuICBleHBvcnRzLmNyZWF0ZU5ld0RhdGFQaXBlRnJvbSA9IGNyZWF0ZU5ld0RhdGFQaXBlRnJvbTtcbiAgZXhwb3J0cy5pc0RhdGFTZXRMaWtlID0gaXNEYXRhU2V0TGlrZTtcbiAgZXhwb3J0cy5pc0RhdGFWaWV3TGlrZSA9IGlzRGF0YVZpZXdMaWtlO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpcy1kYXRhLmpzLm1hcFxuIiwiLyoqXG4gKiB2aXMtbmV0d29ya1xuICogaHR0cHM6Ly92aXNqcy5naXRodWIuaW8vdmlzLW5ldHdvcmsvXG4gKlxuICogQSBkeW5hbWljLCBicm93c2VyLWJhc2VkIHZpc3VhbGl6YXRpb24gbGlicmFyeS5cbiAqXG4gKiBAdmVyc2lvbiA5LjEuMlxuICogQGRhdGUgICAgMjAyMi0wMy0yOFQyMDoxMzo1MS4wNDZaXG4gKlxuICogQGNvcHlyaWdodCAoYykgMjAxMS0yMDE3IEFsbWVuZGUgQi5WLCBodHRwOi8vYWxtZW5kZS5jb21cbiAqIEBjb3B5cmlnaHQgKGMpIDIwMTctMjAxOSB2aXNqcyBjb250cmlidXRvcnMsIGh0dHBzOi8vZ2l0aHViLmNvbS92aXNqc1xuICpcbiAqIEBsaWNlbnNlXG4gKiB2aXMuanMgaXMgZHVhbCBsaWNlbnNlZCB1bmRlciBib3RoXG4gKlxuICogICAxLiBUaGUgQXBhY2hlIDIuMCBMaWNlbnNlXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICAgYW5kXG4gKlxuICogICAyLiBUaGUgTUlUIExpY2Vuc2VcbiAqICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICpcbiAqIHZpcy5qcyBtYXkgYmUgZGlzdHJpYnV0ZWQgdW5kZXIgZWl0aGVyIGxpY2Vuc2UuXG4gKi9cbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP2UoZXhwb3J0cyxyZXF1aXJlKFwidmlzLWRhdGEvcGVlci91bWQvdmlzLWRhdGEuanNcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiLFwidmlzLWRhdGEvcGVlci91bWQvdmlzLWRhdGEuanNcIl0sZSk6ZSgodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLnZpcz10LnZpc3x8e30sdC52aXMpfSh0aGlzLChmdW5jdGlvbih0LGUpe3ZhciBpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp7fSxvPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lk1hdGg9PU1hdGgmJnR9LG49byhcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyl8fG8oXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93KXx8byhcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZil8fG8oXCJvYmplY3RcIj09dHlwZW9mIGkmJmkpfHxmdW5jdGlvbigpe3JldHVybiB0aGlzfSgpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkscj1mdW5jdGlvbih0KXt0cnl7cmV0dXJuISF0KCl9Y2F0Y2godCl7cmV0dXJuITB9fSxzPSFyKChmdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKCl7fS5iaW5kKCk7cmV0dXJuXCJmdW5jdGlvblwiIT10eXBlb2YgdHx8dC5oYXNPd25Qcm9wZXJ0eShcInByb3RvdHlwZVwiKX0pKSxhPXMsaD1GdW5jdGlvbi5wcm90b3R5cGUsZD1oLmFwcGx5LGw9aC5jYWxsLGM9XCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuYXBwbHl8fChhP2wuYmluZChkKTpmdW5jdGlvbigpe3JldHVybiBsLmFwcGx5KGQsYXJndW1lbnRzKX0pLHU9cyxmPUZ1bmN0aW9uLnByb3RvdHlwZSxwPWYuYmluZCx2PWYuY2FsbCxnPXUmJnAuYmluZCh2LHYpLHk9dT9mdW5jdGlvbih0KXtyZXR1cm4gdCYmZyh0KX06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJmZ1bmN0aW9uKCl7cmV0dXJuIHYuYXBwbHkodCxhcmd1bWVudHMpfX0sbT1mdW5jdGlvbih0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fSxiPXt9LHc9IXIoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwxLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KVsxXX0pKSxrPXMsXz1GdW5jdGlvbi5wcm90b3R5cGUuY2FsbCx4PWs/Xy5iaW5kKF8pOmZ1bmN0aW9uKCl7cmV0dXJuIF8uYXBwbHkoXyxhcmd1bWVudHMpfSxFPXt9LE89e30ucHJvcGVydHlJc0VudW1lcmFibGUsQz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFM9QyYmIU8uY2FsbCh7MToyfSwxKTtFLmY9Uz9mdW5jdGlvbih0KXt2YXIgZT1DKHRoaXMsdCk7cmV0dXJuISFlJiZlLmVudW1lcmFibGV9Ok87dmFyIFQsTSxQPWZ1bmN0aW9uKHQsZSl7cmV0dXJue2VudW1lcmFibGU6ISgxJnQpLGNvbmZpZ3VyYWJsZTohKDImdCksd3JpdGFibGU6ISg0JnQpLHZhbHVlOmV9fSxEPXksQj1EKHt9LnRvU3RyaW5nKSxJPUQoXCJcIi5zbGljZSksej1mdW5jdGlvbih0KXtyZXR1cm4gSShCKHQpLDgsLTEpfSxGPXksTj1yLEE9eixSPW4uT2JqZWN0LGo9RihcIlwiLnNwbGl0KSxMPU4oKGZ1bmN0aW9uKCl7cmV0dXJuIVIoXCJ6XCIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApfSkpP2Z1bmN0aW9uKHQpe3JldHVyblwiU3RyaW5nXCI9PUEodCk/aih0LFwiXCIpOlIodCl9OlIsSD1uLlR5cGVFcnJvcixXPWZ1bmN0aW9uKHQpe2lmKG51bGw9PXQpdGhyb3cgSChcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiK3QpO3JldHVybiB0fSxWPUwscT1XLFU9ZnVuY3Rpb24odCl7cmV0dXJuIFYocSh0KSl9LFk9bSxYPWZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0P251bGwhPT10OlkodCl9LEc9e30sSz1HLCQ9bixaPW0sUT1mdW5jdGlvbih0KXtyZXR1cm4gWih0KT90OnZvaWQgMH0sSj1mdW5jdGlvbih0LGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDI/UShLW3RdKXx8USgkW3RdKTpLW3RdJiZLW3RdW2VdfHwkW3RdJiYkW3RdW2VdfSx0dD15KHt9LmlzUHJvdG90eXBlT2YpLGV0PUooXCJuYXZpZ2F0b3JcIixcInVzZXJBZ2VudFwiKXx8XCJcIixpdD1uLG90PWV0LG50PWl0LnByb2Nlc3MscnQ9aXQuRGVubyxzdD1udCYmbnQudmVyc2lvbnN8fHJ0JiZydC52ZXJzaW9uLGF0PXN0JiZzdC52ODthdCYmKE09KFQ9YXQuc3BsaXQoXCIuXCIpKVswXT4wJiZUWzBdPDQ/MTorKFRbMF0rVFsxXSkpLCFNJiZvdCYmKCEoVD1vdC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pKXx8VFsxXT49NzQpJiYoVD1vdC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLykpJiYoTT0rVFsxXSk7dmFyIGh0PU0sZHQ9aHQsbHQ9cixjdD0hIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJiFsdCgoZnVuY3Rpb24oKXt2YXIgdD1TeW1ib2woKTtyZXR1cm4hU3RyaW5nKHQpfHwhKE9iamVjdCh0KWluc3RhbmNlb2YgU3ltYm9sKXx8IVN5bWJvbC5zaGFtJiZkdCYmZHQ8NDF9KSksdXQ9Y3QmJiFTeW1ib2wuc2hhbSYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcixmdD1KLHB0PW0sdnQ9dHQsZ3Q9dXQseXQ9bi5PYmplY3QsbXQ9Z3Q/ZnVuY3Rpb24odCl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3ZhciBlPWZ0KFwiU3ltYm9sXCIpO3JldHVybiBwdChlKSYmdnQoZS5wcm90b3R5cGUseXQodCkpfSxidD1uLlN0cmluZyx3dD1mdW5jdGlvbih0KXt0cnl7cmV0dXJuIGJ0KHQpfWNhdGNoKHQpe3JldHVyblwiT2JqZWN0XCJ9fSxrdD1tLF90PXd0LHh0PW4uVHlwZUVycm9yLEV0PWZ1bmN0aW9uKHQpe2lmKGt0KHQpKXJldHVybiB0O3Rocm93IHh0KF90KHQpK1wiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpfSxPdD1FdCxDdD1mdW5jdGlvbih0LGUpe3ZhciBpPXRbZV07cmV0dXJuIG51bGw9PWk/dm9pZCAwOk90KGkpfSxTdD14LFR0PW0sTXQ9WCxQdD1uLlR5cGVFcnJvcixEdD17ZXhwb3J0czp7fX0sQnQ9bixJdD1PYmplY3QuZGVmaW5lUHJvcGVydHksenQ9ZnVuY3Rpb24odCxlKXt0cnl7SXQoQnQsdCx7dmFsdWU6ZSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KX1jYXRjaChpKXtCdFt0XT1lfXJldHVybiBlfSxGdD1cIl9fY29yZS1qc19zaGFyZWRfX1wiLE50PW5bRnRdfHx6dChGdCx7fSksQXQ9TnQ7KER0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gQXRbdF18fChBdFt0XT12b2lkIDAhPT1lP2U6e30pfSkoXCJ2ZXJzaW9uc1wiLFtdKS5wdXNoKHt2ZXJzaW9uOlwiMy4yMS4xXCIsbW9kZTpcInB1cmVcIixjb3B5cmlnaHQ6XCLCqSAyMDE0LTIwMjIgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSlcIixsaWNlbnNlOlwiaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvYmxvYi92My4yMS4xL0xJQ0VOU0VcIixzb3VyY2U6XCJodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qc1wifSk7dmFyIFJ0PVcsanQ9bi5PYmplY3QsTHQ9ZnVuY3Rpb24odCl7cmV0dXJuIGp0KFJ0KHQpKX0sSHQ9THQsV3Q9eSh7fS5oYXNPd25Qcm9wZXJ0eSksVnQ9T2JqZWN0Lmhhc093bnx8ZnVuY3Rpb24odCxlKXtyZXR1cm4gV3QoSHQodCksZSl9LHF0PXksVXQ9MCxZdD1NYXRoLnJhbmRvbSgpLFh0PXF0KDEuLnRvU3RyaW5nKSxHdD1mdW5jdGlvbih0KXtyZXR1cm5cIlN5bWJvbChcIisodm9pZCAwPT09dD9cIlwiOnQpK1wiKV9cIitYdCgrK1V0K1l0LDM2KX0sS3Q9biwkdD1EdC5leHBvcnRzLFp0PVZ0LFF0PUd0LEp0PWN0LHRlPXV0LGVlPSR0KFwid2tzXCIpLGllPUt0LlN5bWJvbCxvZT1pZSYmaWUuZm9yLG5lPXRlP2llOmllJiZpZS53aXRob3V0U2V0dGVyfHxRdCxyZT1mdW5jdGlvbih0KXtpZighWnQoZWUsdCl8fCFKdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGVlW3RdKXt2YXIgZT1cIlN5bWJvbC5cIit0O0p0JiZadChpZSx0KT9lZVt0XT1pZVt0XTplZVt0XT10ZSYmb2U/b2UoZSk6bmUoZSl9cmV0dXJuIGVlW3RdfSxzZT14LGFlPVgsaGU9bXQsZGU9Q3QsbGU9ZnVuY3Rpb24odCxlKXt2YXIgaSxvO2lmKFwic3RyaW5nXCI9PT1lJiZUdChpPXQudG9TdHJpbmcpJiYhTXQobz1TdChpLHQpKSlyZXR1cm4gbztpZihUdChpPXQudmFsdWVPZikmJiFNdChvPVN0KGksdCkpKXJldHVybiBvO2lmKFwic3RyaW5nXCIhPT1lJiZUdChpPXQudG9TdHJpbmcpJiYhTXQobz1TdChpLHQpKSlyZXR1cm4gbzt0aHJvdyBQdChcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX0sY2U9cmUsdWU9bi5UeXBlRXJyb3IsZmU9Y2UoXCJ0b1ByaW1pdGl2ZVwiKSxwZT1mdW5jdGlvbih0LGUpe2lmKCFhZSh0KXx8aGUodCkpcmV0dXJuIHQ7dmFyIGksbz1kZSh0LGZlKTtpZihvKXtpZih2b2lkIDA9PT1lJiYoZT1cImRlZmF1bHRcIiksaT1zZShvLHQsZSksIWFlKGkpfHxoZShpKSlyZXR1cm4gaTt0aHJvdyB1ZShcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX1yZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJudW1iZXJcIiksbGUodCxlKX0sdmU9bXQsZ2U9ZnVuY3Rpb24odCl7dmFyIGU9cGUodCxcInN0cmluZ1wiKTtyZXR1cm4gdmUoZSk/ZTplK1wiXCJ9LHllPVgsbWU9bi5kb2N1bWVudCxiZT15ZShtZSkmJnllKG1lLmNyZWF0ZUVsZW1lbnQpLHdlPWZ1bmN0aW9uKHQpe3JldHVybiBiZT9tZS5jcmVhdGVFbGVtZW50KHQpOnt9fSxrZT13ZSxfZT0hdyYmIXIoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShrZShcImRpdlwiKSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pKSx4ZT13LEVlPXgsT2U9RSxDZT1QLFNlPVUsVGU9Z2UsTWU9VnQsUGU9X2UsRGU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtiLmY9eGU/RGU6ZnVuY3Rpb24odCxlKXtpZih0PVNlKHQpLGU9VGUoZSksUGUpdHJ5e3JldHVybiBEZSh0LGUpfWNhdGNoKHQpe31pZihNZSh0LGUpKXJldHVybiBDZSghRWUoT2UuZix0LGUpLHRbZV0pfTt2YXIgQmU9cixJZT1tLHplPS8jfFxcLnByb3RvdHlwZVxcLi8sRmU9ZnVuY3Rpb24odCxlKXt2YXIgaT1BZVtOZSh0KV07cmV0dXJuIGk9PWplfHxpIT1SZSYmKEllKGUpP0JlKGUpOiEhZSl9LE5lPUZlLm5vcm1hbGl6ZT1mdW5jdGlvbih0KXtyZXR1cm4gU3RyaW5nKHQpLnJlcGxhY2UoemUsXCIuXCIpLnRvTG93ZXJDYXNlKCl9LEFlPUZlLmRhdGE9e30sUmU9RmUuTkFUSVZFPVwiTlwiLGplPUZlLlBPTFlGSUxMPVwiUFwiLExlPUZlLEhlPUV0LFdlPXMsVmU9eSh5LmJpbmQpLHFlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhlKHQpLHZvaWQgMD09PWU/dDpXZT9WZSh0LGUpOmZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX0sVWU9e30sWWU9dyYmcigoZnVuY3Rpb24oKXtyZXR1cm4gNDIhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSgoZnVuY3Rpb24oKXt9KSxcInByb3RvdHlwZVwiLHt2YWx1ZTo0Mix3cml0YWJsZTohMX0pLnByb3RvdHlwZX0pKSxYZT1uLEdlPVgsS2U9WGUuU3RyaW5nLCRlPVhlLlR5cGVFcnJvcixaZT1mdW5jdGlvbih0KXtpZihHZSh0KSlyZXR1cm4gdDt0aHJvdyAkZShLZSh0KStcIiBpcyBub3QgYW4gb2JqZWN0XCIpfSxRZT13LEplPV9lLHRpPVllLGVpPVplLGlpPWdlLG9pPW4uVHlwZUVycm9yLG5pPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxyaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLHNpPVwiZW51bWVyYWJsZVwiLGFpPVwiY29uZmlndXJhYmxlXCIsaGk9XCJ3cml0YWJsZVwiO1VlLmY9UWU/dGk/ZnVuY3Rpb24odCxlLGkpe2lmKGVpKHQpLGU9aWkoZSksZWkoaSksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmXCJwcm90b3R5cGVcIj09PWUmJlwidmFsdWVcImluIGkmJmhpIGluIGkmJiFpLndyaXRhYmxlKXt2YXIgbz1yaSh0LGUpO28mJm8ud3JpdGFibGUmJih0W2VdPWkudmFsdWUsaT17Y29uZmlndXJhYmxlOmFpIGluIGk/aS5jb25maWd1cmFibGU6by5jb25maWd1cmFibGUsZW51bWVyYWJsZTpzaSBpbiBpP2kuZW51bWVyYWJsZTpvLmVudW1lcmFibGUsd3JpdGFibGU6ITF9KX1yZXR1cm4gbmkodCxlLGkpfTpuaTpmdW5jdGlvbih0LGUsaSl7aWYoZWkodCksZT1paShlKSxlaShpKSxKZSl0cnl7cmV0dXJuIG5pKHQsZSxpKX1jYXRjaCh0KXt9aWYoXCJnZXRcImluIGl8fFwic2V0XCJpbiBpKXRocm93IG9pKFwiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWRcIik7cmV0dXJuXCJ2YWx1ZVwiaW4gaSYmKHRbZV09aS52YWx1ZSksdH07dmFyIGRpPVVlLGxpPVAsY2k9dz9mdW5jdGlvbih0LGUsaSl7cmV0dXJuIGRpLmYodCxlLGxpKDEsaSkpfTpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHRbZV09aSx0fSx1aT1uLGZpPWMscGk9eSx2aT1tLGdpPWIuZix5aT1MZSxtaT1HLGJpPXFlLHdpPWNpLGtpPVZ0LF9pPWZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKGksbyxuKXtpZih0aGlzIGluc3RhbmNlb2YgZSl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IHQ7Y2FzZSAxOnJldHVybiBuZXcgdChpKTtjYXNlIDI6cmV0dXJuIG5ldyB0KGksbyl9cmV0dXJuIG5ldyB0KGksbyxuKX1yZXR1cm4gZmkodCx0aGlzLGFyZ3VtZW50cyl9O3JldHVybiBlLnByb3RvdHlwZT10LnByb3RvdHlwZSxlfSx4aT1mdW5jdGlvbih0LGUpe3ZhciBpLG8sbixyLHMsYSxoLGQsbD10LnRhcmdldCxjPXQuZ2xvYmFsLHU9dC5zdGF0LGY9dC5wcm90byxwPWM/dWk6dT91aVtsXToodWlbbF18fHt9KS5wcm90b3R5cGUsdj1jP21pOm1pW2xdfHx3aShtaSxsLHt9KVtsXSxnPXYucHJvdG90eXBlO2ZvcihuIGluIGUpaT0heWkoYz9uOmwrKHU/XCIuXCI6XCIjXCIpK24sdC5mb3JjZWQpJiZwJiZraShwLG4pLHM9dltuXSxpJiYoYT10Lm5vVGFyZ2V0R2V0PyhkPWdpKHAsbikpJiZkLnZhbHVlOnBbbl0pLHI9aSYmYT9hOmVbbl0saSYmdHlwZW9mIHM9PXR5cGVvZiByfHwoaD10LmJpbmQmJmk/Ymkocix1aSk6dC53cmFwJiZpP19pKHIpOmYmJnZpKHIpP3BpKHIpOnIsKHQuc2hhbXx8ciYmci5zaGFtfHxzJiZzLnNoYW0pJiZ3aShoLFwic2hhbVwiLCEwKSx3aSh2LG4saCksZiYmKGtpKG1pLG89bCtcIlByb3RvdHlwZVwiKXx8d2kobWksbyx7fSksd2kobWlbb10sbixyKSx0LnJlYWwmJmcmJiFnW25dJiZ3aShnLG4scikpKX0sRWk9TWF0aC5jZWlsLE9pPU1hdGguZmxvb3IsQ2k9ZnVuY3Rpb24odCl7dmFyIGU9K3Q7cmV0dXJuIGUhPWV8fDA9PT1lPzA6KGU+MD9PaTpFaSkoZSl9LFNpPUNpLFRpPU1hdGgubWF4LE1pPU1hdGgubWluLFBpPWZ1bmN0aW9uKHQsZSl7dmFyIGk9U2kodCk7cmV0dXJuIGk8MD9UaShpK2UsMCk6TWkoaSxlKX0sRGk9Q2ksQmk9TWF0aC5taW4sSWk9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+MD9CaShEaSh0KSw5MDA3MTk5MjU0NzQwOTkxKTowfSx6aT1mdW5jdGlvbih0KXtyZXR1cm4gSWkodC5sZW5ndGgpfSxGaT1VLE5pPVBpLEFpPXppLFJpPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLGksbyl7dmFyIG4scj1GaShlKSxzPUFpKHIpLGE9TmkobyxzKTtpZih0JiZpIT1pKXtmb3IoO3M+YTspaWYoKG49clthKytdKSE9bilyZXR1cm4hMH1lbHNlIGZvcig7cz5hO2ErKylpZigodHx8YSBpbiByKSYmclthXT09PWkpcmV0dXJuIHR8fGF8fDA7cmV0dXJuIXQmJi0xfX0samk9e2luY2x1ZGVzOlJpKCEwKSxpbmRleE9mOlJpKCExKX0sTGk9e30sSGk9VnQsV2k9VSxWaT1qaS5pbmRleE9mLHFpPUxpLFVpPXkoW10ucHVzaCksWWk9ZnVuY3Rpb24odCxlKXt2YXIgaSxvPVdpKHQpLG49MCxyPVtdO2ZvcihpIGluIG8pIUhpKHFpLGkpJiZIaShvLGkpJiZVaShyLGkpO2Zvcig7ZS5sZW5ndGg+bjspSGkobyxpPWVbbisrXSkmJih+VmkocixpKXx8VWkocixpKSk7cmV0dXJuIHJ9LFhpPVtcImNvbnN0cnVjdG9yXCIsXCJoYXNPd25Qcm9wZXJ0eVwiLFwiaXNQcm90b3R5cGVPZlwiLFwicHJvcGVydHlJc0VudW1lcmFibGVcIixcInRvTG9jYWxlU3RyaW5nXCIsXCJ0b1N0cmluZ1wiLFwidmFsdWVPZlwiXSxHaT1ZaSxLaT1YaSwkaT1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7cmV0dXJuIEdpKHQsS2kpfSxaaT17fTtaaS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7dmFyIFFpPXcsSmk9eSx0bz14LGVvPXIsaW89JGksb289Wmksbm89RSxybz1MdCxzbz1MLGFvPU9iamVjdC5hc3NpZ24saG89T2JqZWN0LmRlZmluZVByb3BlcnR5LGxvPUppKFtdLmNvbmNhdCksY289IWFvfHxlbygoZnVuY3Rpb24oKXtpZihRaSYmMSE9PWFvKHtiOjF9LGFvKGhvKHt9LFwiYVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2hvKHRoaXMsXCJiXCIse3ZhbHVlOjMsZW51bWVyYWJsZTohMX0pfX0pLHtiOjJ9KSkuYilyZXR1cm4hMDt2YXIgdD17fSxlPXt9LGk9U3ltYm9sKCksbz1cImFiY2RlZmdoaWprbG1ub3BxcnN0XCI7cmV0dXJuIHRbaV09NyxvLnNwbGl0KFwiXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdF09dH0pKSw3IT1hbyh7fSx0KVtpXXx8aW8oYW8oe30sZSkpLmpvaW4oXCJcIikhPW99KSk/ZnVuY3Rpb24odCxlKXtmb3IodmFyIGk9cm8odCksbz1hcmd1bWVudHMubGVuZ3RoLG49MSxyPW9vLmYscz1uby5mO28+bjspZm9yKHZhciBhLGg9c28oYXJndW1lbnRzW24rK10pLGQ9cj9sbyhpbyhoKSxyKGgpKTppbyhoKSxsPWQubGVuZ3RoLGM9MDtsPmM7KWE9ZFtjKytdLFFpJiYhdG8ocyxoLGEpfHwoaVthXT1oW2FdKTtyZXR1cm4gaX06YW8sdW89Y287eGkoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOk9iamVjdC5hc3NpZ24hPT11b30se2Fzc2lnbjp1b30pO3ZhciBmbz1HLk9iamVjdC5hc3NpZ24scG89eShbXS5zbGljZSksdm89eSxnbz1FdCx5bz1YLG1vPVZ0LGJvPXBvLHdvPXMsa289bi5GdW5jdGlvbixfbz12byhbXS5jb25jYXQpLHhvPXZvKFtdLmpvaW4pLEVvPXt9LE9vPWZ1bmN0aW9uKHQsZSxpKXtpZighbW8oRW8sZSkpe2Zvcih2YXIgbz1bXSxuPTA7bjxlO24rKylvW25dPVwiYVtcIituK1wiXVwiO0VvW2VdPWtvKFwiQyxhXCIsXCJyZXR1cm4gbmV3IEMoXCIreG8obyxcIixcIikrXCIpXCIpfXJldHVybiBFb1tlXSh0LGkpfSxDbz13bz9rby5iaW5kOmZ1bmN0aW9uKHQpe3ZhciBlPWdvKHRoaXMpLGk9ZS5wcm90b3R5cGUsbz1ibyhhcmd1bWVudHMsMSksbj1mdW5jdGlvbigpe3ZhciBpPV9vKG8sYm8oYXJndW1lbnRzKSk7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBuP09vKGUsaS5sZW5ndGgsaSk6ZS5hcHBseSh0LGkpfTtyZXR1cm4geW8oaSkmJihuLnByb3RvdHlwZT1pKSxufSxTbz1Dbzt4aSh7dGFyZ2V0OlwiRnVuY3Rpb25cIixwcm90bzohMCxmb3JjZWQ6RnVuY3Rpb24uYmluZCE9PVNvfSx7YmluZDpTb30pO3ZhciBUbz1HLE1vPWZ1bmN0aW9uKHQpe3JldHVybiBUb1t0K1wiUHJvdG90eXBlXCJdfSxQbz1NbyhcIkZ1bmN0aW9uXCIpLmJpbmQsRG89dHQsQm89UG8sSW89RnVuY3Rpb24ucHJvdG90eXBlLHpvPWZ1bmN0aW9uKHQpe3ZhciBlPXQuYmluZDtyZXR1cm4gdD09PUlvfHxEbyhJbyx0KSYmZT09PUlvLmJpbmQ/Qm86ZX0sRm89em87ZnVuY3Rpb24gTm8odCxlLGksbyl7dC5iZWdpblBhdGgoKSx0LmFyYyhlLGksbywwLDIqTWF0aC5QSSwhMSksdC5jbG9zZVBhdGgoKX1mdW5jdGlvbiBBbyh0LGUsaSxvLG4scil7dmFyIHM9TWF0aC5QSS8xODA7by0yKnI8MCYmKHI9by8yKSxuLTIqcjwwJiYocj1uLzIpLHQuYmVnaW5QYXRoKCksdC5tb3ZlVG8oZStyLGkpLHQubGluZVRvKGUrby1yLGkpLHQuYXJjKGUrby1yLGkrcixyLDI3MCpzLDM2MCpzLCExKSx0LmxpbmVUbyhlK28saStuLXIpLHQuYXJjKGUrby1yLGkrbi1yLHIsMCw5MCpzLCExKSx0LmxpbmVUbyhlK3IsaStuKSx0LmFyYyhlK3IsaStuLXIsciw5MCpzLDE4MCpzLCExKSx0LmxpbmVUbyhlLGkrciksdC5hcmMoZStyLGkrcixyLDE4MCpzLDI3MCpzLCExKSx0LmNsb3NlUGF0aCgpfWZ1bmN0aW9uIFJvKHQsZSxpLG8sbil7dmFyIHI9LjU1MjI4NDgscz1vLzIqcixhPW4vMipyLGg9ZStvLGQ9aStuLGw9ZStvLzIsYz1pK24vMjt0LmJlZ2luUGF0aCgpLHQubW92ZVRvKGUsYyksdC5iZXppZXJDdXJ2ZVRvKGUsYy1hLGwtcyxpLGwsaSksdC5iZXppZXJDdXJ2ZVRvKGwrcyxpLGgsYy1hLGgsYyksdC5iZXppZXJDdXJ2ZVRvKGgsYythLGwrcyxkLGwsZCksdC5iZXppZXJDdXJ2ZVRvKGwtcyxkLGUsYythLGUsYyksdC5jbG9zZVBhdGgoKX1mdW5jdGlvbiBqbyh0LGUsaSxvLG4pe3ZhciByPW4qKDEvMykscz0uNTUyMjg0OCxhPW8vMipzLGg9ci8yKnMsZD1lK28sbD1pK3IsYz1lK28vMix1PWkrci8yLGY9aSsobi1yLzIpLHA9aStuO3QuYmVnaW5QYXRoKCksdC5tb3ZlVG8oZCx1KSx0LmJlemllckN1cnZlVG8oZCx1K2gsYythLGwsYyxsKSx0LmJlemllckN1cnZlVG8oYy1hLGwsZSx1K2gsZSx1KSx0LmJlemllckN1cnZlVG8oZSx1LWgsYy1hLGksYyxpKSx0LmJlemllckN1cnZlVG8oYythLGksZCx1LWgsZCx1KSx0LmxpbmVUbyhkLGYpLHQuYmV6aWVyQ3VydmVUbyhkLGYraCxjK2EscCxjLHApLHQuYmV6aWVyQ3VydmVUbyhjLWEscCxlLGYraCxlLGYpLHQubGluZVRvKGUsdSl9ZnVuY3Rpb24gTG8odCxlLGksbyxuLHIpe3QuYmVnaW5QYXRoKCksdC5tb3ZlVG8oZSxpKTtmb3IodmFyIHM9ci5sZW5ndGgsYT1vLWUsaD1uLWksZD1oL2EsbD1NYXRoLnNxcnQoYSphK2gqaCksYz0wLHU9ITAsZj0wLHA9K3JbMF07bD49LjE7KShwPStyW2MrKyVzXSk+bCYmKHA9bCksZj1NYXRoLnNxcnQocCpwLygxK2QqZCkpLGUrPWY9YTwwPy1mOmYsaSs9ZCpmLCEwPT09dT90LmxpbmVUbyhlLGkpOnQubW92ZVRvKGUsaSksbC09cCx1PSF1fXZhciBIbz17Y2lyY2xlOk5vLGRhc2hlZExpbmU6TG8sZGF0YWJhc2U6am8sZGlhbW9uZDpmdW5jdGlvbih0LGUsaSxvKXt0LmJlZ2luUGF0aCgpLHQubGluZVRvKGUsaStvKSx0LmxpbmVUbyhlK28saSksdC5saW5lVG8oZSxpLW8pLHQubGluZVRvKGUtbyxpKSx0LmNsb3NlUGF0aCgpfSxlbGxpcHNlOlJvLGVsbGlwc2VfdmlzOlJvLGhleGFnb246ZnVuY3Rpb24odCxlLGksbyl7dC5iZWdpblBhdGgoKTt2YXIgbj0yKk1hdGguUEkvNjt0Lm1vdmVUbyhlK28saSk7Zm9yKHZhciByPTE7cjw2O3IrKyl0LmxpbmVUbyhlK28qTWF0aC5jb3MobipyKSxpK28qTWF0aC5zaW4obipyKSk7dC5jbG9zZVBhdGgoKX0scm91bmRSZWN0OkFvLHNxdWFyZTpmdW5jdGlvbih0LGUsaSxvKXt0LmJlZ2luUGF0aCgpLHQucmVjdChlLW8saS1vLDIqbywyKm8pLHQuY2xvc2VQYXRoKCl9LHN0YXI6ZnVuY3Rpb24odCxlLGksbyl7dC5iZWdpblBhdGgoKSxpKz0uMSoobyo9LjgyKTtmb3IodmFyIG49MDtuPDEwO24rKyl7dmFyIHI9biUyPT0wPzEuMypvOi41Km87dC5saW5lVG8oZStyKk1hdGguc2luKDIqbipNYXRoLlBJLzEwKSxpLXIqTWF0aC5jb3MoMipuKk1hdGguUEkvMTApKX10LmNsb3NlUGF0aCgpfSx0cmlhbmdsZTpmdW5jdGlvbih0LGUsaSxvKXt0LmJlZ2luUGF0aCgpLGkrPS4yNzUqKG8qPTEuMTUpO3ZhciBuPTIqbyxyPW4vMixzPU1hdGguc3FydCgzKS82Km4sYT1NYXRoLnNxcnQobipuLXIqcik7dC5tb3ZlVG8oZSxpLShhLXMpKSx0LmxpbmVUbyhlK3IsaStzKSx0LmxpbmVUbyhlLXIsaStzKSx0LmxpbmVUbyhlLGktKGEtcykpLHQuY2xvc2VQYXRoKCl9LHRyaWFuZ2xlRG93bjpmdW5jdGlvbih0LGUsaSxvKXt0LmJlZ2luUGF0aCgpLGktPS4yNzUqKG8qPTEuMTUpO3ZhciBuPTIqbyxyPW4vMixzPU1hdGguc3FydCgzKS82Km4sYT1NYXRoLnNxcnQobipuLXIqcik7dC5tb3ZlVG8oZSxpKyhhLXMpKSx0LmxpbmVUbyhlK3IsaS1zKSx0LmxpbmVUbyhlLXIsaS1zKSx0LmxpbmVUbyhlLGkrKGEtcykpLHQuY2xvc2VQYXRoKCl9fTt2YXIgV289e2V4cG9ydHM6e319OyFmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe2lmKHQpcmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgaSBpbiBlLnByb3RvdHlwZSl0W2ldPWUucHJvdG90eXBlW2ldO3JldHVybiB0fSh0KX10LmV4cG9ydHM9ZSxlLnByb3RvdHlwZS5vbj1lLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9LCh0aGlzLl9jYWxsYmFja3NbXCIkXCIrdF09dGhpcy5fY2FsbGJhY2tzW1wiJFwiK3RdfHxbXSkucHVzaChlKSx0aGlzfSxlLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gaSgpe3RoaXMub2ZmKHQsaSksZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGkuZm49ZSx0aGlzLm9uKHQsaSksdGhpc30sZS5wcm90b3R5cGUub2ZmPWUucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1lLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fY2FsbGJhY2tzPXRoaXMuX2NhbGxiYWNrc3x8e30sMD09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5fY2FsbGJhY2tzPXt9LHRoaXM7dmFyIGksbz10aGlzLl9jYWxsYmFja3NbXCIkXCIrdF07aWYoIW8pcmV0dXJuIHRoaXM7aWYoMT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tcIiRcIit0XSx0aGlzO2Zvcih2YXIgbj0wO248by5sZW5ndGg7bisrKWlmKChpPW9bbl0pPT09ZXx8aS5mbj09PWUpe28uc3BsaWNlKG4sMSk7YnJlYWt9cmV0dXJuIDA9PT1vLmxlbmd0aCYmZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tcIiRcIit0XSx0aGlzfSxlLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKHQpe3RoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9O2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKSxpPXRoaXMuX2NhbGxiYWNrc1tcIiRcIit0XSxvPTE7bzxhcmd1bWVudHMubGVuZ3RoO28rKyllW28tMV09YXJndW1lbnRzW29dO2lmKGkpe289MDtmb3IodmFyIG49KGk9aS5zbGljZSgwKSkubGVuZ3RoO288bjsrK28paVtvXS5hcHBseSh0aGlzLGUpfXJldHVybiB0aGlzfSxlLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2NhbGxiYWNrcz10aGlzLl9jYWxsYmFja3N8fHt9LHRoaXMuX2NhbGxiYWNrc1tcIiRcIit0XXx8W119LGUucHJvdG90eXBlLmhhc0xpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm4hIXRoaXMubGlzdGVuZXJzKHQpLmxlbmd0aH19KFdvKTt2YXIgVm89V28uZXhwb3J0cyxxbz17fTtxb1tyZShcInRvU3RyaW5nVGFnXCIpXT1cInpcIjt2YXIgVW89XCJbb2JqZWN0IHpdXCI9PT1TdHJpbmcocW8pLFlvPW4sWG89VW8sR289bSxLbz16LCRvPXJlKFwidG9TdHJpbmdUYWdcIiksWm89WW8uT2JqZWN0LFFvPVwiQXJndW1lbnRzXCI9PUtvKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSksSm89WG8/S286ZnVuY3Rpb24odCl7dmFyIGUsaSxvO3JldHVybiB2b2lkIDA9PT10P1wiVW5kZWZpbmVkXCI6bnVsbD09PXQ/XCJOdWxsXCI6XCJzdHJpbmdcIj09dHlwZW9mKGk9ZnVuY3Rpb24odCxlKXt0cnl7cmV0dXJuIHRbZV19Y2F0Y2godCl7fX0oZT1abyh0KSwkbykpP2k6UW8/S28oZSk6XCJPYmplY3RcIj09KG89S28oZSkpJiZHbyhlLmNhbGxlZSk/XCJBcmd1bWVudHNcIjpvfSx0bj1Kbyxlbj1uLlN0cmluZyxvbj1mdW5jdGlvbih0KXtpZihcIlN5bWJvbFwiPT09dG4odCkpdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmdcIik7cmV0dXJuIGVuKHQpfSxubj15LHJuPUNpLHNuPW9uLGFuPVcsaG49bm4oXCJcIi5jaGFyQXQpLGRuPW5uKFwiXCIuY2hhckNvZGVBdCksbG49bm4oXCJcIi5zbGljZSksY249ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsaSl7dmFyIG8sbixyPXNuKGFuKGUpKSxzPXJuKGkpLGE9ci5sZW5ndGg7cmV0dXJuIHM8MHx8cz49YT90P1wiXCI6dm9pZCAwOihvPWRuKHIscykpPDU1Mjk2fHxvPjU2MzE5fHxzKzE9PT1hfHwobj1kbihyLHMrMSkpPDU2MzIwfHxuPjU3MzQzP3Q/aG4ocixzKTpvOnQ/bG4ocixzLHMrMik6bi01NjMyMCsoby01NTI5Njw8MTApKzY1NTM2fX0sdW49e2NvZGVBdDpjbighMSksY2hhckF0OmNuKCEwKX0sZm49bSxwbj1OdCx2bj15KEZ1bmN0aW9uLnRvU3RyaW5nKTtmbihwbi5pbnNwZWN0U291cmNlKXx8KHBuLmluc3BlY3RTb3VyY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHZuKHQpfSk7dmFyIGduLHluLG1uLGJuPXBuLmluc3BlY3RTb3VyY2Usd249bSxrbj1ibixfbj1uLldlYWtNYXAseG49d24oX24pJiYvbmF0aXZlIGNvZGUvLnRlc3Qoa24oX24pKSxFbj1EdC5leHBvcnRzLE9uPUd0LENuPUVuKFwia2V5c1wiKSxTbj1mdW5jdGlvbih0KXtyZXR1cm4gQ25bdF18fChDblt0XT1Pbih0KSl9LFRuPXhuLE1uPW4sUG49eSxEbj1YLEJuPWNpLEluPVZ0LHpuPU50LEZuPVNuLE5uPUxpLEFuPVwiT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWRcIixSbj1Nbi5UeXBlRXJyb3Isam49TW4uV2Vha01hcDtpZihUbnx8em4uc3RhdGUpe3ZhciBMbj16bi5zdGF0ZXx8KHpuLnN0YXRlPW5ldyBqbiksSG49UG4oTG4uZ2V0KSxXbj1QbihMbi5oYXMpLFZuPVBuKExuLnNldCk7Z249ZnVuY3Rpb24odCxlKXtpZihXbihMbix0KSl0aHJvdyBuZXcgUm4oQW4pO3JldHVybiBlLmZhY2FkZT10LFZuKExuLHQsZSksZX0seW49ZnVuY3Rpb24odCl7cmV0dXJuIEhuKExuLHQpfHx7fX0sbW49ZnVuY3Rpb24odCl7cmV0dXJuIFduKExuLHQpfX1lbHNle3ZhciBxbj1GbihcInN0YXRlXCIpO05uW3FuXT0hMCxnbj1mdW5jdGlvbih0LGUpe2lmKEluKHQscW4pKXRocm93IG5ldyBSbihBbik7cmV0dXJuIGUuZmFjYWRlPXQsQm4odCxxbixlKSxlfSx5bj1mdW5jdGlvbih0KXtyZXR1cm4gSW4odCxxbik/dFtxbl06e319LG1uPWZ1bmN0aW9uKHQpe3JldHVybiBJbih0LHFuKX19dmFyIFVuPXtzZXQ6Z24sZ2V0OnluLGhhczptbixlbmZvcmNlOmZ1bmN0aW9uKHQpe3JldHVybiBtbih0KT95bih0KTpnbih0LHt9KX0sZ2V0dGVyRm9yOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgaTtpZighRG4oZSl8fChpPXluKGUpKS50eXBlIT09dCl0aHJvdyBSbihcIkluY29tcGF0aWJsZSByZWNlaXZlciwgXCIrdCtcIiByZXF1aXJlZFwiKTtyZXR1cm4gaX19fSxZbj13LFhuPVZ0LEduPUZ1bmN0aW9uLnByb3RvdHlwZSxLbj1ZbiYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwkbj1YbihHbixcIm5hbWVcIiksWm49e0VYSVNUUzokbixQUk9QRVI6JG4mJlwic29tZXRoaW5nXCI9PT1mdW5jdGlvbigpe30ubmFtZSxDT05GSUdVUkFCTEU6JG4mJighWW58fFluJiZLbihHbixcIm5hbWVcIikuY29uZmlndXJhYmxlKX0sUW49e30sSm49dyx0cj1ZZSxlcj1VZSxpcj1aZSxvcj1VLG5yPSRpO1FuLmY9Sm4mJiF0cj9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbih0LGUpe2lyKHQpO2Zvcih2YXIgaSxvPW9yKGUpLG49bnIoZSkscj1uLmxlbmd0aCxzPTA7cj5zOyllci5mKHQsaT1uW3MrK10sb1tpXSk7cmV0dXJuIHR9O3ZhciBycixzcj1KKFwiZG9jdW1lbnRcIixcImRvY3VtZW50RWxlbWVudFwiKSxhcj1aZSxocj1Rbixkcj1YaSxscj1MaSxjcj1zcix1cj13ZSxmcj1TbihcIklFX1BST1RPXCIpLHByPWZ1bmN0aW9uKCl7fSx2cj1mdW5jdGlvbih0KXtyZXR1cm5cIjxzY3JpcHQ+XCIrdCtcIjwvXCIrXCJzY3JpcHQ+XCJ9LGdyPWZ1bmN0aW9uKHQpe3Qud3JpdGUodnIoXCJcIikpLHQuY2xvc2UoKTt2YXIgZT10LnBhcmVudFdpbmRvdy5PYmplY3Q7cmV0dXJuIHQ9bnVsbCxlfSx5cj1mdW5jdGlvbigpe3RyeXtycj1uZXcgQWN0aXZlWE9iamVjdChcImh0bWxmaWxlXCIpfWNhdGNoKHQpe312YXIgdCxlO3lyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudC5kb21haW4mJnJyP2dyKHJyKTooKGU9dXIoXCJpZnJhbWVcIikpLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsY3IuYXBwZW5kQ2hpbGQoZSksZS5zcmM9U3RyaW5nKFwiamF2YXNjcmlwdDpcIiksKHQ9ZS5jb250ZW50V2luZG93LmRvY3VtZW50KS5vcGVuKCksdC53cml0ZSh2cihcImRvY3VtZW50LkY9T2JqZWN0XCIpKSx0LmNsb3NlKCksdC5GKTpncihycik7Zm9yKHZhciBpPWRyLmxlbmd0aDtpLS07KWRlbGV0ZSB5ci5wcm90b3R5cGVbZHJbaV1dO3JldHVybiB5cigpfTtscltmcl09ITA7dmFyIG1yLGJyLHdyLGtyPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKHQsZSl7dmFyIGk7cmV0dXJuIG51bGwhPT10Pyhwci5wcm90b3R5cGU9YXIodCksaT1uZXcgcHIscHIucHJvdG90eXBlPW51bGwsaVtmcl09dCk6aT15cigpLHZvaWQgMD09PWU/aTpoci5mKGksZSl9LF9yPSFyKChmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPW51bGwsT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyB0KSE9PXQucHJvdG90eXBlfSkpLHhyPW4sRXI9VnQsT3I9bSxDcj1MdCxTcj1fcixUcj1TbihcIklFX1BST1RPXCIpLE1yPXhyLk9iamVjdCxQcj1Nci5wcm90b3R5cGUsRHI9U3I/TXIuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7dmFyIGU9Q3IodCk7aWYoRXIoZSxUcikpcmV0dXJuIGVbVHJdO3ZhciBpPWUuY29uc3RydWN0b3I7cmV0dXJuIE9yKGkpJiZlIGluc3RhbmNlb2YgaT9pLnByb3RvdHlwZTplIGluc3RhbmNlb2YgTXI/UHI6bnVsbH0sQnI9Y2ksSXI9ZnVuY3Rpb24odCxlLGksbyl7byYmby5lbnVtZXJhYmxlP3RbZV09aTpCcih0LGUsaSl9LHpyPXIsRnI9bSxOcj1rcixBcj1EcixScj1Jcixqcj1yZShcIml0ZXJhdG9yXCIpLExyPSExO1tdLmtleXMmJihcIm5leHRcImluKHdyPVtdLmtleXMoKSk/KGJyPUFyKEFyKHdyKSkpIT09T2JqZWN0LnByb3RvdHlwZSYmKG1yPWJyKTpMcj0hMCk7dmFyIEhyPW51bGw9PW1yfHx6cigoZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gbXJbanJdLmNhbGwodCkhPT10fSkpO0ZyKChtcj1Icj97fTpOcihtcikpW2pyXSl8fFJyKG1yLGpyLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpO3ZhciBXcj17SXRlcmF0b3JQcm90b3R5cGU6bXIsQlVHR1lfU0FGQVJJX0lURVJBVE9SUzpMcn0sVnI9Sm8scXI9VW8/e30udG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgXCIrVnIodGhpcykrXCJdXCJ9LFVyPVVvLFlyPVVlLmYsWHI9Y2ksR3I9VnQsS3I9cXIsJHI9cmUoXCJ0b1N0cmluZ1RhZ1wiKSxacj1mdW5jdGlvbih0LGUsaSxvKXtpZih0KXt2YXIgbj1pP3Q6dC5wcm90b3R5cGU7R3Iobiwkcil8fFlyKG4sJHIse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTplfSksbyYmIVVyJiZYcihuLFwidG9TdHJpbmdcIixLcil9fSxRcj17fSxKcj1Xci5JdGVyYXRvclByb3RvdHlwZSx0cz1rcixlcz1QLGlzPVpyLG9zPVFyLG5zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHJzPW4sc3M9bSxhcz1ycy5TdHJpbmcsaHM9cnMuVHlwZUVycm9yLGRzPXksbHM9WmUsY3M9ZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIHR8fHNzKHQpKXJldHVybiB0O3Rocm93IGhzKFwiQ2FuJ3Qgc2V0IFwiK2FzKHQpK1wiIGFzIGEgcHJvdG90eXBlXCIpfSx1cz1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fChcIl9fcHJvdG9fX1wiaW57fT9mdW5jdGlvbigpe3ZhciB0LGU9ITEsaT17fTt0cnl7KHQ9ZHMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLFwiX19wcm90b19fXCIpLnNldCkpKGksW10pLGU9aSBpbnN0YW5jZW9mIEFycmF5fWNhdGNoKHQpe31yZXR1cm4gZnVuY3Rpb24oaSxvKXtyZXR1cm4gbHMoaSksY3MobyksZT90KGksbyk6aS5fX3Byb3RvX189byxpfX0oKTp2b2lkIDApLGZzPXhpLHBzPXgsdnM9ZnVuY3Rpb24odCxlLGksbyl7dmFyIG49ZStcIiBJdGVyYXRvclwiO3JldHVybiB0LnByb3RvdHlwZT10cyhKcix7bmV4dDplcygrIW8saSl9KSxpcyh0LG4sITEsITApLG9zW25dPW5zLHR9LGdzPURyLHlzPVpyLG1zPUlyLGJzPVFyLHdzPVpuLlBST1BFUixrcz1Xci5CVUdHWV9TQUZBUklfSVRFUkFUT1JTLF9zPXJlKFwiaXRlcmF0b3JcIikseHM9XCJrZXlzXCIsRXM9XCJ2YWx1ZXNcIixPcz1cImVudHJpZXNcIixDcz1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxTcz1mdW5jdGlvbih0LGUsaSxvLG4scixzKXt2cyhpLGUsbyk7dmFyIGEsaCxkLGw9ZnVuY3Rpb24odCl7aWYodD09PW4mJnYpcmV0dXJuIHY7aWYoIWtzJiZ0IGluIGYpcmV0dXJuIGZbdF07c3dpdGNoKHQpe2Nhc2UgeHM6Y2FzZSBFczpjYXNlIE9zOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgaSh0aGlzLHQpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGkodGhpcyl9fSxjPWUrXCIgSXRlcmF0b3JcIix1PSExLGY9dC5wcm90b3R5cGUscD1mW19zXXx8ZltcIkBAaXRlcmF0b3JcIl18fG4mJmZbbl0sdj0ha3MmJnB8fGwobiksZz1cIkFycmF5XCI9PWUmJmYuZW50cmllc3x8cDtpZihnJiYoYT1ncyhnLmNhbGwobmV3IHQpKSkhPT1PYmplY3QucHJvdG90eXBlJiZhLm5leHQmJih5cyhhLGMsITAsITApLGJzW2NdPUNzKSx3cyYmbj09RXMmJnAmJnAubmFtZSE9PUVzJiYodT0hMCx2PWZ1bmN0aW9uKCl7cmV0dXJuIHBzKHAsdGhpcyl9KSxuKWlmKGg9e3ZhbHVlczpsKEVzKSxrZXlzOnI/djpsKHhzKSxlbnRyaWVzOmwoT3MpfSxzKWZvcihkIGluIGgpKGtzfHx1fHwhKGQgaW4gZikpJiZtcyhmLGQsaFtkXSk7ZWxzZSBmcyh7dGFyZ2V0OmUscHJvdG86ITAsZm9yY2VkOmtzfHx1fSxoKTtyZXR1cm4gcyYmZltfc10hPT12JiZtcyhmLF9zLHYse25hbWU6bn0pLGJzW2VdPXYsaH0sVHM9dW4uY2hhckF0LE1zPW9uLFBzPVVuLERzPVNzLEJzPVwiU3RyaW5nIEl0ZXJhdG9yXCIsSXM9UHMuc2V0LHpzPVBzLmdldHRlckZvcihCcyk7RHMoU3RyaW5nLFwiU3RyaW5nXCIsKGZ1bmN0aW9uKHQpe0lzKHRoaXMse3R5cGU6QnMsc3RyaW5nOk1zKHQpLGluZGV4OjB9KX0pLChmdW5jdGlvbigpe3ZhciB0LGU9enModGhpcyksaT1lLnN0cmluZyxvPWUuaW5kZXg7cmV0dXJuIG8+PWkubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9VHMoaSxvKSxlLmluZGV4Kz10Lmxlbmd0aCx7dmFsdWU6dCxkb25lOiExfSl9KSk7dmFyIEZzPXgsTnM9WmUsQXM9Q3QsUnM9ZnVuY3Rpb24odCxlLGkpe3ZhciBvLG47TnModCk7dHJ5e2lmKCEobz1Bcyh0LFwicmV0dXJuXCIpKSl7aWYoXCJ0aHJvd1wiPT09ZSl0aHJvdyBpO3JldHVybiBpfW89RnMobyx0KX1jYXRjaCh0KXtuPSEwLG89dH1pZihcInRocm93XCI9PT1lKXRocm93IGk7aWYobil0aHJvdyBvO3JldHVybiBOcyhvKSxpfSxqcz1aZSxMcz1ScyxIcz1RcixXcz1yZShcIml0ZXJhdG9yXCIpLFZzPUFycmF5LnByb3RvdHlwZSxxcz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmKEhzLkFycmF5PT09dHx8VnNbV3NdPT09dCl9LFVzPXksWXM9cixYcz1tLEdzPUpvLEtzPWJuLCRzPWZ1bmN0aW9uKCl7fSxacz1bXSxRcz1KKFwiUmVmbGVjdFwiLFwiY29uc3RydWN0XCIpLEpzPS9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi8sdGE9VXMoSnMuZXhlYyksZWE9IUpzLmV4ZWMoJHMpLGlhPWZ1bmN0aW9uKHQpe2lmKCFYcyh0KSlyZXR1cm4hMTt0cnl7cmV0dXJuIFFzKCRzLFpzLHQpLCEwfWNhdGNoKHQpe3JldHVybiExfX0sb2E9ZnVuY3Rpb24odCl7aWYoIVhzKHQpKXJldHVybiExO3N3aXRjaChHcyh0KSl7Y2FzZVwiQXN5bmNGdW5jdGlvblwiOmNhc2VcIkdlbmVyYXRvckZ1bmN0aW9uXCI6Y2FzZVwiQXN5bmNHZW5lcmF0b3JGdW5jdGlvblwiOnJldHVybiExfXRyeXtyZXR1cm4gZWF8fCEhdGEoSnMsS3ModCkpfWNhdGNoKHQpe3JldHVybiEwfX07b2Euc2hhbT0hMDt2YXIgbmE9IVFzfHxZcygoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gaWEoaWEuY2FsbCl8fCFpYShPYmplY3QpfHwhaWEoKGZ1bmN0aW9uKCl7dD0hMH0pKXx8dH0pKT9vYTppYSxyYT1nZSxzYT1VZSxhYT1QLGhhPWZ1bmN0aW9uKHQsZSxpKXt2YXIgbz1yYShlKTtvIGluIHQ/c2EuZih0LG8sYWEoMCxpKSk6dFtvXT1pfSxkYT1KbyxsYT1DdCxjYT1Rcix1YT1yZShcIml0ZXJhdG9yXCIpLGZhPWZ1bmN0aW9uKHQpe2lmKG51bGwhPXQpcmV0dXJuIGxhKHQsdWEpfHxsYSh0LFwiQEBpdGVyYXRvclwiKXx8Y2FbZGEodCldfSxwYT14LHZhPUV0LGdhPVplLHlhPXd0LG1hPWZhLGJhPW4uVHlwZUVycm9yLHdhPWZ1bmN0aW9uKHQsZSl7dmFyIGk9YXJndW1lbnRzLmxlbmd0aDwyP21hKHQpOmU7aWYodmEoaSkpcmV0dXJuIGdhKHBhKGksdCkpO3Rocm93IGJhKHlhKHQpK1wiIGlzIG5vdCBpdGVyYWJsZVwiKX0sa2E9cWUsX2E9eCx4YT1MdCxFYT1mdW5jdGlvbih0LGUsaSxvKXt0cnl7cmV0dXJuIG8/ZShqcyhpKVswXSxpWzFdKTplKGkpfWNhdGNoKGUpe0xzKHQsXCJ0aHJvd1wiLGUpfX0sT2E9cXMsQ2E9bmEsU2E9emksVGE9aGEsTWE9d2EsUGE9ZmEsRGE9bi5BcnJheSxCYT1yZShcIml0ZXJhdG9yXCIpLElhPSExO3RyeXt2YXIgemE9MCxGYT17bmV4dDpmdW5jdGlvbigpe3JldHVybntkb25lOiEhemErK319LHJldHVybjpmdW5jdGlvbigpe0lhPSEwfX07RmFbQmFdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LEFycmF5LmZyb20oRmEsKGZ1bmN0aW9uKCl7dGhyb3cgMn0pKX1jYXRjaCh0KXt9dmFyIE5hPWZ1bmN0aW9uKHQpe3ZhciBlPXhhKHQpLGk9Q2EodGhpcyksbz1hcmd1bWVudHMubGVuZ3RoLG49bz4xP2FyZ3VtZW50c1sxXTp2b2lkIDAscj12b2lkIDAhPT1uO3ImJihuPWthKG4sbz4yP2FyZ3VtZW50c1syXTp2b2lkIDApKTt2YXIgcyxhLGgsZCxsLGMsdT1QYShlKSxmPTA7aWYoIXV8fHRoaXM9PURhJiZPYSh1KSlmb3Iocz1TYShlKSxhPWk/bmV3IHRoaXMocyk6RGEocyk7cz5mO2YrKyljPXI/bihlW2ZdLGYpOmVbZl0sVGEoYSxmLGMpO2Vsc2UgZm9yKGw9KGQ9TWEoZSx1KSkubmV4dCxhPWk/bmV3IHRoaXM6W107IShoPV9hKGwsZCkpLmRvbmU7ZisrKWM9cj9FYShkLG4sW2gudmFsdWUsZl0sITApOmgudmFsdWUsVGEoYSxmLGMpO3JldHVybiBhLmxlbmd0aD1mLGF9LEFhPWZ1bmN0aW9uKHQsZSl7aWYoIWUmJiFJYSlyZXR1cm4hMTt2YXIgaT0hMTt0cnl7dmFyIG89e307b1tCYV09ZnVuY3Rpb24oKXtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybntkb25lOmk9ITB9fX19LHQobyl9Y2F0Y2godCl7fXJldHVybiBpfTt4aSh7dGFyZ2V0OlwiQXJyYXlcIixzdGF0OiEwLGZvcmNlZDohQWEoKGZ1bmN0aW9uKHQpe0FycmF5LmZyb20odCl9KSl9LHtmcm9tOk5hfSk7dmFyIFJhPUcuQXJyYXkuZnJvbSxqYT1SYSxMYT1VLEhhPVFyLFdhPVVuO1VlLmY7dmFyIFZhPVNzLHFhPVwiQXJyYXkgSXRlcmF0b3JcIixVYT1XYS5zZXQsWWE9V2EuZ2V0dGVyRm9yKHFhKTtWYShBcnJheSxcIkFycmF5XCIsKGZ1bmN0aW9uKHQsZSl7VWEodGhpcyx7dHlwZTpxYSx0YXJnZXQ6TGEodCksaW5kZXg6MCxraW5kOmV9KX0pLChmdW5jdGlvbigpe3ZhciB0PVlhKHRoaXMpLGU9dC50YXJnZXQsaT10LmtpbmQsbz10LmluZGV4Kys7cmV0dXJuIWV8fG8+PWUubGVuZ3RoPyh0LnRhcmdldD12b2lkIDAse3ZhbHVlOnZvaWQgMCxkb25lOiEwfSk6XCJrZXlzXCI9PWk/e3ZhbHVlOm8sZG9uZTohMX06XCJ2YWx1ZXNcIj09aT97dmFsdWU6ZVtvXSxkb25lOiExfTp7dmFsdWU6W28sZVtvXV0sZG9uZTohMX19KSxcInZhbHVlc1wiKSxIYS5Bcmd1bWVudHM9SGEuQXJyYXk7dmFyIFhhPWZhLEdhPXtDU1NSdWxlTGlzdDowLENTU1N0eWxlRGVjbGFyYXRpb246MCxDU1NWYWx1ZUxpc3Q6MCxDbGllbnRSZWN0TGlzdDowLERPTVJlY3RMaXN0OjAsRE9NU3RyaW5nTGlzdDowLERPTVRva2VuTGlzdDoxLERhdGFUcmFuc2Zlckl0ZW1MaXN0OjAsRmlsZUxpc3Q6MCxIVE1MQWxsQ29sbGVjdGlvbjowLEhUTUxDb2xsZWN0aW9uOjAsSFRNTEZvcm1FbGVtZW50OjAsSFRNTFNlbGVjdEVsZW1lbnQ6MCxNZWRpYUxpc3Q6MCxNaW1lVHlwZUFycmF5OjAsTmFtZWROb2RlTWFwOjAsTm9kZUxpc3Q6MSxQYWludFJlcXVlc3RMaXN0OjAsUGx1Z2luOjAsUGx1Z2luQXJyYXk6MCxTVkdMZW5ndGhMaXN0OjAsU1ZHTnVtYmVyTGlzdDowLFNWR1BhdGhTZWdMaXN0OjAsU1ZHUG9pbnRMaXN0OjAsU1ZHU3RyaW5nTGlzdDowLFNWR1RyYW5zZm9ybUxpc3Q6MCxTb3VyY2VCdWZmZXJMaXN0OjAsU3R5bGVTaGVldExpc3Q6MCxUZXh0VHJhY2tDdWVMaXN0OjAsVGV4dFRyYWNrTGlzdDowLFRvdWNoTGlzdDowfSxLYT1uLCRhPUpvLFphPWNpLFFhPVFyLEphPXJlKFwidG9TdHJpbmdUYWdcIik7Zm9yKHZhciB0aCBpbiBHYSl7dmFyIGVoPUthW3RoXSxpaD1laCYmZWgucHJvdG90eXBlO2loJiYkYShpaCkhPT1KYSYmWmEoaWgsSmEsdGgpLFFhW3RoXT1RYS5BcnJheX12YXIgb2g9WGEsbmg9eixyaD1BcnJheS5pc0FycmF5fHxmdW5jdGlvbih0KXtyZXR1cm5cIkFycmF5XCI9PW5oKHQpfSxzaD17fSxhaD1ZaSxoaD1YaS5jb25jYXQoXCJsZW5ndGhcIixcInByb3RvdHlwZVwiKTtzaC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbih0KXtyZXR1cm4gYWgodCxoaCl9O3ZhciBkaD17fSxsaD1QaSxjaD16aSx1aD1oYSxmaD1uLkFycmF5LHBoPU1hdGgubWF4LHZoPWZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIG89Y2godCksbj1saChlLG8pLHI9bGgodm9pZCAwPT09aT9vOmksbykscz1maChwaChyLW4sMCkpLGE9MDtuPHI7bisrLGErKyl1aChzLGEsdFtuXSk7cmV0dXJuIHMubGVuZ3RoPWEsc30sZ2g9eix5aD1VLG1oPXNoLmYsYmg9dmgsd2g9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdO2RoLmY9ZnVuY3Rpb24odCl7cmV0dXJuIHdoJiZcIldpbmRvd1wiPT1naCh0KT9mdW5jdGlvbih0KXt0cnl7cmV0dXJuIG1oKHQpfWNhdGNoKHQpe3JldHVybiBiaCh3aCl9fSh0KTptaCh5aCh0KSl9O3ZhciBraD17fSxfaD1yZTtraC5mPV9oO3ZhciB4aD1HLEVoPVZ0LE9oPWtoLENoPVVlLmYsU2g9ZnVuY3Rpb24odCl7dmFyIGU9eGguU3ltYm9sfHwoeGguU3ltYm9sPXt9KTtFaChlLHQpfHxDaChlLHQse3ZhbHVlOk9oLmYodCl9KX0sVGg9bixNaD1yaCxQaD1uYSxEaD1YLEJoPXJlKFwic3BlY2llc1wiKSxJaD1UaC5BcnJheSx6aD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gTWgodCkmJihlPXQuY29uc3RydWN0b3IsKFBoKGUpJiYoZT09PUlofHxNaChlLnByb3RvdHlwZSkpfHxEaChlKSYmbnVsbD09PShlPWVbQmhdKSkmJihlPXZvaWQgMCkpLHZvaWQgMD09PWU/SWg6ZX0sRmg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3KHpoKHQpKSgwPT09ZT8wOmUpfSxOaD1xZSxBaD1MLFJoPUx0LGpoPXppLExoPUZoLEhoPXkoW10ucHVzaCksV2g9ZnVuY3Rpb24odCl7dmFyIGU9MT09dCxpPTI9PXQsbz0zPT10LG49ND09dCxyPTY9PXQscz03PT10LGE9NT09dHx8cjtyZXR1cm4gZnVuY3Rpb24oaCxkLGwsYyl7Zm9yKHZhciB1LGYscD1SaChoKSx2PUFoKHApLGc9TmgoZCxsKSx5PWpoKHYpLG09MCxiPWN8fExoLHc9ZT9iKGgseSk6aXx8cz9iKGgsMCk6dm9pZCAwO3k+bTttKyspaWYoKGF8fG0gaW4gdikmJihmPWcodT12W21dLG0scCksdCkpaWYoZSl3W21dPWY7ZWxzZSBpZihmKXN3aXRjaCh0KXtjYXNlIDM6cmV0dXJuITA7Y2FzZSA1OnJldHVybiB1O2Nhc2UgNjpyZXR1cm4gbTtjYXNlIDI6SGgodyx1KX1lbHNlIHN3aXRjaCh0KXtjYXNlIDQ6cmV0dXJuITE7Y2FzZSA3OkhoKHcsdSl9cmV0dXJuIHI/LTE6b3x8bj9uOnd9fSxWaD17Zm9yRWFjaDpXaCgwKSxtYXA6V2goMSksZmlsdGVyOldoKDIpLHNvbWU6V2goMyksZXZlcnk6V2goNCksZmluZDpXaCg1KSxmaW5kSW5kZXg6V2goNiksZmlsdGVyUmVqZWN0OldoKDcpfSxxaD14aSxVaD1uLFloPUosWGg9YyxHaD14LEtoPXksJGg9dyxaaD1jdCxRaD1yLEpoPVZ0LHRkPXJoLGVkPW0saWQ9WCxvZD10dCxuZD1tdCxyZD1aZSxzZD1MdCxhZD1VLGhkPWdlLGRkPW9uLGxkPVAsY2Q9a3IsdWQ9JGksZmQ9c2gscGQ9ZGgsdmQ9WmksZ2Q9Yix5ZD1VZSxtZD1RbixiZD1FLHdkPXBvLGtkPUlyLF9kPUR0LmV4cG9ydHMseGQ9TGksRWQ9R3QsT2Q9cmUsQ2Q9a2gsU2Q9U2gsVGQ9WnIsTWQ9VW4sUGQ9VmguZm9yRWFjaCxEZD1TbihcImhpZGRlblwiKSxCZD1cIlN5bWJvbFwiLElkPU9kKFwidG9QcmltaXRpdmVcIiksemQ9TWQuc2V0LEZkPU1kLmdldHRlckZvcihCZCksTmQ9T2JqZWN0LnByb3RvdHlwZSxBZD1VaC5TeW1ib2wsUmQ9QWQmJkFkLnByb3RvdHlwZSxqZD1VaC5UeXBlRXJyb3IsTGQ9VWguUU9iamVjdCxIZD1ZaChcIkpTT05cIixcInN0cmluZ2lmeVwiKSxXZD1nZC5mLFZkPXlkLmYscWQ9cGQuZixVZD1iZC5mLFlkPUtoKFtdLnB1c2gpLFhkPV9kKFwic3ltYm9sc1wiKSxHZD1fZChcIm9wLXN5bWJvbHNcIiksS2Q9X2QoXCJzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5XCIpLCRkPV9kKFwic3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeVwiKSxaZD1fZChcIndrc1wiKSxRZD0hTGR8fCFMZC5wcm90b3R5cGV8fCFMZC5wcm90b3R5cGUuZmluZENoaWxkLEpkPSRoJiZRaCgoZnVuY3Rpb24oKXtyZXR1cm4gNyE9Y2QoVmQoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBWZCh0aGlzLFwiYVwiLHt2YWx1ZTo3fSkuYX19KSkuYX0pKT9mdW5jdGlvbih0LGUsaSl7dmFyIG89V2QoTmQsZSk7byYmZGVsZXRlIE5kW2VdLFZkKHQsZSxpKSxvJiZ0IT09TmQmJlZkKE5kLGUsbyl9OlZkLHRsPWZ1bmN0aW9uKHQsZSl7dmFyIGk9WGRbdF09Y2QoUmQpO3JldHVybiB6ZChpLHt0eXBlOkJkLHRhZzp0LGRlc2NyaXB0aW9uOmV9KSwkaHx8KGkuZGVzY3JpcHRpb249ZSksaX0sZWw9ZnVuY3Rpb24odCxlLGkpe3Q9PT1OZCYmZWwoR2QsZSxpKSxyZCh0KTt2YXIgbz1oZChlKTtyZXR1cm4gcmQoaSksSmgoWGQsbyk/KGkuZW51bWVyYWJsZT8oSmgodCxEZCkmJnRbRGRdW29dJiYodFtEZF1bb109ITEpLGk9Y2QoaSx7ZW51bWVyYWJsZTpsZCgwLCExKX0pKTooSmgodCxEZCl8fFZkKHQsRGQsbGQoMSx7fSkpLHRbRGRdW29dPSEwKSxKZCh0LG8saSkpOlZkKHQsbyxpKX0saWw9ZnVuY3Rpb24odCxlKXtyZCh0KTt2YXIgaT1hZChlKSxvPXVkKGkpLmNvbmNhdChzbChpKSk7cmV0dXJuIFBkKG8sKGZ1bmN0aW9uKGUpeyRoJiYhR2gob2wsaSxlKXx8ZWwodCxlLGlbZV0pfSkpLHR9LG9sPWZ1bmN0aW9uKHQpe3ZhciBlPWhkKHQpLGk9R2goVWQsdGhpcyxlKTtyZXR1cm4hKHRoaXM9PT1OZCYmSmgoWGQsZSkmJiFKaChHZCxlKSkmJighKGl8fCFKaCh0aGlzLGUpfHwhSmgoWGQsZSl8fEpoKHRoaXMsRGQpJiZ0aGlzW0RkXVtlXSl8fGkpfSxubD1mdW5jdGlvbih0LGUpe3ZhciBpPWFkKHQpLG89aGQoZSk7aWYoaSE9PU5kfHwhSmgoWGQsbyl8fEpoKEdkLG8pKXt2YXIgbj1XZChpLG8pO3JldHVybiFufHwhSmgoWGQsbyl8fEpoKGksRGQpJiZpW0RkXVtvXXx8KG4uZW51bWVyYWJsZT0hMCksbn19LHJsPWZ1bmN0aW9uKHQpe3ZhciBlPXFkKGFkKHQpKSxpPVtdO3JldHVybiBQZChlLChmdW5jdGlvbih0KXtKaChYZCx0KXx8SmgoeGQsdCl8fFlkKGksdCl9KSksaX0sc2w9ZnVuY3Rpb24odCl7dmFyIGU9dD09PU5kLGk9cWQoZT9HZDphZCh0KSksbz1bXTtyZXR1cm4gUGQoaSwoZnVuY3Rpb24odCl7IUpoKFhkLHQpfHxlJiYhSmgoTmQsdCl8fFlkKG8sWGRbdF0pfSkpLG99O2lmKFpofHwoQWQ9ZnVuY3Rpb24oKXtpZihvZChSZCx0aGlzKSl0aHJvdyBqZChcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTt2YXIgdD1hcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/ZGQoYXJndW1lbnRzWzBdKTp2b2lkIDAsZT1FZCh0KSxpPWZ1bmN0aW9uKHQpe3RoaXM9PT1OZCYmR2goaSxHZCx0KSxKaCh0aGlzLERkKSYmSmgodGhpc1tEZF0sZSkmJih0aGlzW0RkXVtlXT0hMSksSmQodGhpcyxlLGxkKDEsdCkpfTtyZXR1cm4gJGgmJlFkJiZKZChOZCxlLHtjb25maWd1cmFibGU6ITAsc2V0Oml9KSx0bChlLHQpfSxrZChSZD1BZC5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3JldHVybiBGZCh0aGlzKS50YWd9KSksa2QoQWQsXCJ3aXRob3V0U2V0dGVyXCIsKGZ1bmN0aW9uKHQpe3JldHVybiB0bChFZCh0KSx0KX0pKSxiZC5mPW9sLHlkLmY9ZWwsbWQuZj1pbCxnZC5mPW5sLGZkLmY9cGQuZj1ybCx2ZC5mPXNsLENkLmY9ZnVuY3Rpb24odCl7cmV0dXJuIHRsKE9kKHQpLHQpfSwkaCYmVmQoUmQsXCJkZXNjcmlwdGlvblwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZkKHRoaXMpLmRlc2NyaXB0aW9ufX0pKSxxaCh7Z2xvYmFsOiEwLHdyYXA6ITAsZm9yY2VkOiFaaCxzaGFtOiFaaH0se1N5bWJvbDpBZH0pLFBkKHVkKFpkKSwoZnVuY3Rpb24odCl7U2QodCl9KSkscWgoe3RhcmdldDpCZCxzdGF0OiEwLGZvcmNlZDohWmh9LHtmb3I6ZnVuY3Rpb24odCl7dmFyIGU9ZGQodCk7aWYoSmgoS2QsZSkpcmV0dXJuIEtkW2VdO3ZhciBpPUFkKGUpO3JldHVybiBLZFtlXT1pLCRkW2ldPWUsaX0sa2V5Rm9yOmZ1bmN0aW9uKHQpe2lmKCFuZCh0KSl0aHJvdyBqZCh0K1wiIGlzIG5vdCBhIHN5bWJvbFwiKTtpZihKaCgkZCx0KSlyZXR1cm4gJGRbdF19LHVzZVNldHRlcjpmdW5jdGlvbigpe1FkPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtRZD0hMX19KSxxaCh7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6IVpoLHNoYW06ISRofSx7Y3JlYXRlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWU/Y2QodCk6aWwoY2QodCksZSl9LGRlZmluZVByb3BlcnR5OmVsLGRlZmluZVByb3BlcnRpZXM6aWwsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOm5sfSkscWgoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOiFaaH0se2dldE93blByb3BlcnR5TmFtZXM6cmwsZ2V0T3duUHJvcGVydHlTeW1ib2xzOnNsfSkscWgoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOlFoKChmdW5jdGlvbigpe3ZkLmYoMSl9KSl9LHtnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ZnVuY3Rpb24odCl7cmV0dXJuIHZkLmYoc2QodCkpfX0pLEhkKXt2YXIgYWw9IVpofHxRaCgoZnVuY3Rpb24oKXt2YXIgdD1BZCgpO3JldHVyblwiW251bGxdXCIhPUhkKFt0XSl8fFwie31cIiE9SGQoe2E6dH0pfHxcInt9XCIhPUhkKE9iamVjdCh0KSl9KSk7cWgoe3RhcmdldDpcIkpTT05cIixzdGF0OiEwLGZvcmNlZDphbH0se3N0cmluZ2lmeTpmdW5jdGlvbih0LGUsaSl7dmFyIG89d2QoYXJndW1lbnRzKSxuPWU7aWYoKGlkKGUpfHx2b2lkIDAhPT10KSYmIW5kKHQpKXJldHVybiB0ZChlKXx8KGU9ZnVuY3Rpb24odCxlKXtpZihlZChuKSYmKGU9R2gobix0aGlzLHQsZSkpLCFuZChlKSlyZXR1cm4gZX0pLG9bMV09ZSxYaChIZCxudWxsLG8pfX0pfWlmKCFSZFtJZF0pe3ZhciBobD1SZC52YWx1ZU9mO2tkKFJkLElkLChmdW5jdGlvbih0KXtyZXR1cm4gR2goaGwsdGhpcyl9KSl9VGQoQWQsQmQpLHhkW0RkXT0hMDt2YXIgZGw9Ry5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLGxsPXtleHBvcnRzOnt9fSxjbD14aSx1bD1yLGZsPVUscGw9Yi5mLHZsPXcsZ2w9dWwoKGZ1bmN0aW9uKCl7cGwoMSl9KSk7Y2woe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOiF2bHx8Z2wsc2hhbTohdmx9LHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ZnVuY3Rpb24odCxlKXtyZXR1cm4gcGwoZmwodCksZSl9fSk7dmFyIHlsPUcuT2JqZWN0LG1sPWxsLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4geWwuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSl9O3lsLmdldE93blByb3BlcnR5RGVzY3JpcHRvci5zaGFtJiYobWwuc2hhbT0hMCk7dmFyIGJsPWxsLmV4cG9ydHMsd2w9Ymwsa2w9SixfbD1zaCx4bD1aaSxFbD1aZSxPbD15KFtdLmNvbmNhdCksQ2w9a2woXCJSZWZsZWN0XCIsXCJvd25LZXlzXCIpfHxmdW5jdGlvbih0KXt2YXIgZT1fbC5mKEVsKHQpKSxpPXhsLmY7cmV0dXJuIGk/T2woZSxpKHQpKTplfSxTbD1DbCxUbD1VLE1sPWIsUGw9aGE7eGkoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsc2hhbTohd30se2dldE93blByb3BlcnR5RGVzY3JpcHRvcnM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlLGksbz1UbCh0KSxuPU1sLmYscj1TbChvKSxzPXt9LGE9MDtyLmxlbmd0aD5hOyl2b2lkIDAhPT0oaT1uKG8sZT1yW2ErK10pKSYmUGwocyxlLGkpO3JldHVybiBzfX0pO3ZhciBEbD1HLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzLEJsPXtleHBvcnRzOnt9fSxJbD14aSx6bD13LEZsPVFuLmY7SWwoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIT09Rmwsc2hhbTohemx9LHtkZWZpbmVQcm9wZXJ0aWVzOkZsfSk7dmFyIE5sPUcuT2JqZWN0LEFsPUJsLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTmwuZGVmaW5lUHJvcGVydGllcyh0LGUpfTtObC5kZWZpbmVQcm9wZXJ0aWVzLnNoYW0mJihBbC5zaGFtPSEwKTt2YXIgUmw9QmwuZXhwb3J0cyxqbD17ZXhwb3J0czp7fX0sTGw9eGksSGw9dyxXbD1VZS5mO0xsKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDpPYmplY3QuZGVmaW5lUHJvcGVydHkhPT1XbCxzaGFtOiFIbH0se2RlZmluZVByb3BlcnR5OldsfSk7dmFyIFZsPUcuT2JqZWN0LHFsPWpsLmV4cG9ydHM9ZnVuY3Rpb24odCxlLGkpe3JldHVybiBWbC5kZWZpbmVQcm9wZXJ0eSh0LGUsaSl9O1ZsLmRlZmluZVByb3BlcnR5LnNoYW0mJihxbC5zaGFtPSEwKTt2YXIgVWw9amwuZXhwb3J0cyxZbD1VbDtmdW5jdGlvbiBYbCh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dmFyIEdsPVVsO2Z1bmN0aW9uIEtsKHQsZSl7Zm9yKHZhciBpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBvPWVbaV07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLEdsKHQsby5rZXksbyl9fWZ1bmN0aW9uICRsKHQsZSxpKXtyZXR1cm4gZSYmS2wodC5wcm90b3R5cGUsZSksaSYmS2wodCxpKSxHbCh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdH1mdW5jdGlvbiBabCh0LGUsaSl7cmV0dXJuIGUgaW4gdD9HbCh0LGUse3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPWksdH14aSh7dGFyZ2V0OlwiQXJyYXlcIixzdGF0OiEwfSx7aXNBcnJheTpyaH0pO3ZhciBRbD1HLkFycmF5LmlzQXJyYXksSmw9UWw7dmFyIHRjPXIsZWM9aHQsaWM9cmUoXCJzcGVjaWVzXCIpLG9jPWZ1bmN0aW9uKHQpe3JldHVybiBlYz49NTF8fCF0YygoZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4oZS5jb25zdHJ1Y3Rvcj17fSlbaWNdPWZ1bmN0aW9uKCl7cmV0dXJue2ZvbzoxfX0sMSE9PWVbdF0oQm9vbGVhbikuZm9vfSkpfSxuYz14aSxyYz1uLHNjPXIsYWM9cmgsaGM9WCxkYz1MdCxsYz16aSxjYz1oYSx1Yz1GaCxmYz1vYyxwYz1odCx2Yz1yZShcImlzQ29uY2F0U3ByZWFkYWJsZVwiKSxnYz05MDA3MTk5MjU0NzQwOTkxLHljPVwiTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkXCIsbWM9cmMuVHlwZUVycm9yLGJjPXBjPj01MXx8IXNjKChmdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiB0W3ZjXT0hMSx0LmNvbmNhdCgpWzBdIT09dH0pKSx3Yz1mYyhcImNvbmNhdFwiKSxrYz1mdW5jdGlvbih0KXtpZighaGModCkpcmV0dXJuITE7dmFyIGU9dFt2Y107cmV0dXJuIHZvaWQgMCE9PWU/ISFlOmFjKHQpfTtuYyh7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IWJjfHwhd2N9LHtjb25jYXQ6ZnVuY3Rpb24odCl7dmFyIGUsaSxvLG4scixzPWRjKHRoaXMpLGE9dWMocywwKSxoPTA7Zm9yKGU9LTEsbz1hcmd1bWVudHMubGVuZ3RoO2U8bztlKyspaWYoa2Mocj0tMT09PWU/czphcmd1bWVudHNbZV0pKXtpZihoKyhuPWxjKHIpKT5nYyl0aHJvdyBtYyh5Yyk7Zm9yKGk9MDtpPG47aSsrLGgrKylpIGluIHImJmNjKGEsaCxyW2ldKX1lbHNle2lmKGg+PWdjKXRocm93IG1jKHljKTtjYyhhLGgrKyxyKX1yZXR1cm4gYS5sZW5ndGg9aCxhfX0pLFNoKFwiYXN5bmNJdGVyYXRvclwiKSxTaChcImhhc0luc3RhbmNlXCIpLFNoKFwiaXNDb25jYXRTcHJlYWRhYmxlXCIpLFNoKFwiaXRlcmF0b3JcIiksU2goXCJtYXRjaFwiKSxTaChcIm1hdGNoQWxsXCIpLFNoKFwicmVwbGFjZVwiKSxTaChcInNlYXJjaFwiKSxTaChcInNwZWNpZXNcIiksU2goXCJzcGxpdFwiKSxTaChcInRvUHJpbWl0aXZlXCIpLFNoKFwidG9TdHJpbmdUYWdcIiksU2goXCJ1bnNjb3BhYmxlc1wiKSxacihuLkpTT04sXCJKU09OXCIsITApO3ZhciBfYz1HLlN5bWJvbCx4Yz1fYztTaChcImFzeW5jRGlzcG9zZVwiKSxTaChcImRpc3Bvc2VcIiksU2goXCJtYXRjaGVyXCIpLFNoKFwibWV0YWRhdGFcIiksU2goXCJvYnNlcnZhYmxlXCIpLFNoKFwicGF0dGVybk1hdGNoXCIpLFNoKFwicmVwbGFjZUFsbFwiKTt2YXIgRWM9eGM7dmFyIE9jPXhpLENjPW4sU2M9cmgsVGM9bmEsTWM9WCxQYz1QaSxEYz16aSxCYz1VLEljPWhhLHpjPXJlLEZjPXBvLE5jPW9jKFwic2xpY2VcIiksQWM9emMoXCJzcGVjaWVzXCIpLFJjPUNjLkFycmF5LGpjPU1hdGgubWF4O09jKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohTmN9LHtzbGljZTpmdW5jdGlvbih0LGUpe3ZhciBpLG8sbixyPUJjKHRoaXMpLHM9RGMociksYT1QYyh0LHMpLGg9UGModm9pZCAwPT09ZT9zOmUscyk7aWYoU2MocikmJihpPXIuY29uc3RydWN0b3IsKFRjKGkpJiYoaT09PVJjfHxTYyhpLnByb3RvdHlwZSkpfHxNYyhpKSYmbnVsbD09PShpPWlbQWNdKSkmJihpPXZvaWQgMCksaT09PVJjfHx2b2lkIDA9PT1pKSlyZXR1cm4gRmMocixhLGgpO2ZvcihvPW5ldyh2b2lkIDA9PT1pP1JjOmkpKGpjKGgtYSwwKSksbj0wO2E8aDthKyssbisrKWEgaW4gciYmSWMobyxuLHJbYV0pO3JldHVybiBvLmxlbmd0aD1uLG99fSk7dmFyIExjPU1vKFwiQXJyYXlcIikuc2xpY2UsSGM9dHQsV2M9TGMsVmM9QXJyYXkucHJvdG90eXBlLHFjPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc2xpY2U7cmV0dXJuIHQ9PT1WY3x8SGMoVmMsdCkmJmU9PT1WYy5zbGljZT9XYzplfSxVYz1xYyxZYz1VYyxYYz1SYTtmdW5jdGlvbiBHYyh0LGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO2Zvcih2YXIgaT0wLG89bmV3IEFycmF5KGUpO2k8ZTtpKyspb1tpXT10W2ldO3JldHVybiBvfWZ1bmN0aW9uIEtjKHQsZSl7dmFyIGk7aWYodCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpcmV0dXJuIEdjKHQsZSk7dmFyIG89WWMoaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpLmNhbGwoaSw4LC0xKTtyZXR1cm5cIk9iamVjdFwiPT09byYmdC5jb25zdHJ1Y3RvciYmKG89dC5jb25zdHJ1Y3Rvci5uYW1lKSxcIk1hcFwiPT09b3x8XCJTZXRcIj09PW8/WGModCk6XCJBcmd1bWVudHNcIj09PW98fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG8pP0djKHQsZSk6dm9pZCAwfX1mdW5jdGlvbiAkYyh0LGUpe3JldHVybiBmdW5jdGlvbih0KXtpZihKbCh0KSlyZXR1cm4gdH0odCl8fGZ1bmN0aW9uKHQsZSl7dmFyIGk9bnVsbD09dD9udWxsOnZvaWQgMCE9PUVjJiZvaCh0KXx8dFtcIkBAaXRlcmF0b3JcIl07aWYobnVsbCE9aSl7dmFyIG8sbixyPVtdLHM9ITAsYT0hMTt0cnl7Zm9yKGk9aS5jYWxsKHQpOyEocz0obz1pLm5leHQoKSkuZG9uZSkmJihyLnB1c2goby52YWx1ZSksIWV8fHIubGVuZ3RoIT09ZSk7cz0hMCk7fWNhdGNoKHQpe2E9ITAsbj10fWZpbmFsbHl7dHJ5e3N8fG51bGw9PWkucmV0dXJufHxpLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyBufX1yZXR1cm4gcn19KHQsZSl8fEtjKHQsZSl8fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKX12YXIgWmM9a2guZihcIml0ZXJhdG9yXCIpO2Z1bmN0aW9uIFFjKHQpe3JldHVybiBRYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBFYyYmXCJzeW1ib2xcIj09dHlwZW9mIFpjP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEVjJiZ0LmNvbnN0cnVjdG9yPT09RWMmJnQhPT1FYy5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgdH0sUWModCl9ZnVuY3Rpb24gSmModCl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKEpsKHQpKXJldHVybiBHYyh0KX0odCl8fGZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PUVjJiZudWxsIT1vaCh0KXx8bnVsbCE9dFtcIkBAaXRlcmF0b3JcIl0pcmV0dXJuIFhjKHQpfSh0KXx8S2ModCl8fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9KCl9dmFyIHR1PV9jLGV1PU1vKFwiQXJyYXlcIikuY29uY2F0LGl1PXR0LG91PWV1LG51PUFycmF5LnByb3RvdHlwZSxydT1mdW5jdGlvbih0KXt2YXIgZT10LmNvbmNhdDtyZXR1cm4gdD09PW51fHxpdShudSx0KSYmZT09PW51LmNvbmNhdD9vdTplfSxzdT1ydSxhdT1VYzt4aSh7dGFyZ2V0OlwiUmVmbGVjdFwiLHN0YXQ6ITB9LHtvd25LZXlzOkNsfSksRy5SZWZsZWN0Lm93bktleXM7dmFyIGh1PVFsLGR1PVZoLm1hcDt4aSh7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IW9jKFwibWFwXCIpfSx7bWFwOmZ1bmN0aW9uKHQpe3JldHVybiBkdSh0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pO3ZhciBsdT1NbyhcIkFycmF5XCIpLm1hcCxjdT10dCx1dT1sdSxmdT1BcnJheS5wcm90b3R5cGUscHU9ZnVuY3Rpb24odCl7dmFyIGU9dC5tYXA7cmV0dXJuIHQ9PT1mdXx8Y3UoZnUsdCkmJmU9PT1mdS5tYXA/dXU6ZX0sdnU9cHUsZ3U9THQseXU9JGk7eGkoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOnIoKGZ1bmN0aW9uKCl7eXUoMSl9KSl9LHtrZXlzOmZ1bmN0aW9uKHQpe3JldHVybiB5dShndSh0KSl9fSk7dmFyIG11PUcuT2JqZWN0LmtleXMsYnU9eGksd3U9eSxrdT1uLkRhdGUsX3U9d3Uoa3UucHJvdG90eXBlLmdldFRpbWUpO2J1KHt0YXJnZXQ6XCJEYXRlXCIsc3RhdDohMH0se25vdzpmdW5jdGlvbigpe3JldHVybiBfdShuZXcga3UpfX0pO3ZhciB4dT1HLkRhdGUubm93LEV1PXIsT3U9ZnVuY3Rpb24odCxlKXt2YXIgaT1bXVt0XTtyZXR1cm4hIWkmJkV1KChmdW5jdGlvbigpe2kuY2FsbChudWxsLGV8fGZ1bmN0aW9uKCl7cmV0dXJuIDF9LDEpfSkpfSxDdT1WaC5mb3JFYWNoLFN1PU91KFwiZm9yRWFjaFwiKT9bXS5mb3JFYWNoOmZ1bmN0aW9uKHQpe3JldHVybiBDdSh0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfTt4aSh7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6W10uZm9yRWFjaCE9U3V9LHtmb3JFYWNoOlN1fSk7dmFyIFR1PU1vKFwiQXJyYXlcIikuZm9yRWFjaCxNdT1KbyxQdT1WdCxEdT10dCxCdT1UdSxJdT1BcnJheS5wcm90b3R5cGUsenU9e0RPTVRva2VuTGlzdDohMCxOb2RlTGlzdDohMH0sRnU9ZnVuY3Rpb24odCl7dmFyIGU9dC5mb3JFYWNoO3JldHVybiB0PT09SXV8fER1KEl1LHQpJiZlPT09SXUuZm9yRWFjaHx8UHUoenUsTXUodCkpP0J1OmV9LE51PXhpLEF1PXJoLFJ1PXkoW10ucmV2ZXJzZSksanU9WzEsMl07TnUoe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOlN0cmluZyhqdSk9PT1TdHJpbmcoanUucmV2ZXJzZSgpKX0se3JldmVyc2U6ZnVuY3Rpb24oKXtyZXR1cm4gQXUodGhpcykmJih0aGlzLmxlbmd0aD10aGlzLmxlbmd0aCksUnUodGhpcyl9fSk7dmFyIEx1PU1vKFwiQXJyYXlcIikucmV2ZXJzZSxIdT10dCxXdT1MdSxWdT1BcnJheS5wcm90b3R5cGUscXU9ZnVuY3Rpb24odCl7dmFyIGU9dC5yZXZlcnNlO3JldHVybiB0PT09VnV8fEh1KFZ1LHQpJiZlPT09VnUucmV2ZXJzZT9XdTplfSxVdT1xdSxZdT14aSxYdT1uLEd1PVBpLEt1PUNpLCR1PXppLFp1PUx0LFF1PUZoLEp1PWhhLHRmPW9jKFwic3BsaWNlXCIpLGVmPVh1LlR5cGVFcnJvcixvZj1NYXRoLm1heCxuZj1NYXRoLm1pbixyZj05MDA3MTk5MjU0NzQwOTkxLHNmPVwiTWF4aW11bSBhbGxvd2VkIGxlbmd0aCBleGNlZWRlZFwiO1l1KHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohdGZ9LHtzcGxpY2U6ZnVuY3Rpb24odCxlKXt2YXIgaSxvLG4scixzLGEsaD1adSh0aGlzKSxkPSR1KGgpLGw9R3UodCxkKSxjPWFyZ3VtZW50cy5sZW5ndGg7aWYoMD09PWM/aT1vPTA6MT09PWM/KGk9MCxvPWQtbCk6KGk9Yy0yLG89bmYob2YoS3UoZSksMCksZC1sKSksZCtpLW8+cmYpdGhyb3cgZWYoc2YpO2ZvcihuPVF1KGgsbykscj0wO3I8bztyKyspKHM9bCtyKWluIGgmJkp1KG4scixoW3NdKTtpZihuLmxlbmd0aD1vLGk8byl7Zm9yKHI9bDtyPGQtbztyKyspYT1yK2ksKHM9citvKWluIGg/aFthXT1oW3NdOmRlbGV0ZSBoW2FdO2ZvcihyPWQ7cj5kLW8raTtyLS0pZGVsZXRlIGhbci0xXX1lbHNlIGlmKGk+bylmb3Iocj1kLW87cj5sO3ItLSlhPXIraS0xLChzPXIrby0xKWluIGg/aFthXT1oW3NdOmRlbGV0ZSBoW2FdO2ZvcihyPTA7cjxpO3IrKyloW3IrbF09YXJndW1lbnRzW3IrMl07cmV0dXJuIGgubGVuZ3RoPWQtbytpLG59fSk7dmFyIGFmPU1vKFwiQXJyYXlcIikuc3BsaWNlLGhmPXR0LGRmPWFmLGxmPUFycmF5LnByb3RvdHlwZSxjZj1mdW5jdGlvbih0KXt2YXIgZT10LnNwbGljZTtyZXR1cm4gdD09PWxmfHxoZihsZix0KSYmZT09PWxmLnNwbGljZT9kZjplfSx1Zj1jZixmZj1qaS5pbmNsdWRlczt4aSh7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMH0se2luY2x1ZGVzOmZ1bmN0aW9uKHQpe3JldHVybiBmZih0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pO3ZhciBwZj1NbyhcIkFycmF5XCIpLmluY2x1ZGVzLHZmPVgsZ2Y9eix5Zj1yZShcIm1hdGNoXCIpLG1mPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiB2Zih0KSYmKHZvaWQgMCE9PShlPXRbeWZdKT8hIWU6XCJSZWdFeHBcIj09Z2YodCkpfSxiZj1uLlR5cGVFcnJvcix3Zj1yZShcIm1hdGNoXCIpLGtmPXhpLF9mPWZ1bmN0aW9uKHQpe2lmKG1mKHQpKXRocm93IGJmKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO3JldHVybiB0fSx4Zj1XLEVmPW9uLE9mPWZ1bmN0aW9uKHQpe3ZhciBlPS8uLzt0cnl7XCIvLi9cIlt0XShlKX1jYXRjaChpKXt0cnl7cmV0dXJuIGVbd2ZdPSExLFwiLy4vXCJbdF0oZSl9Y2F0Y2godCl7fX1yZXR1cm4hMX0sQ2Y9eShcIlwiLmluZGV4T2YpO2tmKHt0YXJnZXQ6XCJTdHJpbmdcIixwcm90bzohMCxmb3JjZWQ6IU9mKFwiaW5jbHVkZXNcIil9LHtpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4hIX5DZihFZih4Zih0aGlzKSksRWYoX2YodCkpLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KTt2YXIgU2Y9TW8oXCJTdHJpbmdcIikuaW5jbHVkZXMsVGY9dHQsTWY9cGYsUGY9U2YsRGY9QXJyYXkucHJvdG90eXBlLEJmPVN0cmluZy5wcm90b3R5cGUsSWY9ZnVuY3Rpb24odCl7dmFyIGU9dC5pbmNsdWRlcztyZXR1cm4gdD09PURmfHxUZihEZix0KSYmZT09PURmLmluY2x1ZGVzP01mOlwic3RyaW5nXCI9PXR5cGVvZiB0fHx0PT09QmZ8fFRmKEJmLHQpJiZlPT09QmYuaW5jbHVkZXM/UGY6ZX0semY9SWYsRmY9THQsTmY9RHIsQWY9X3I7eGkoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOnIoKGZ1bmN0aW9uKCl7TmYoMSl9KSksc2hhbTohQWZ9LHtnZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gTmYoRmYodCkpfX0pO3ZhciBSZj1HLk9iamVjdC5nZXRQcm90b3R5cGVPZixqZj1SZixMZj1WaC5maWx0ZXI7eGkoe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFvYyhcImZpbHRlclwiKX0se2ZpbHRlcjpmdW5jdGlvbih0KXtyZXR1cm4gTGYodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KTt2YXIgSGY9TW8oXCJBcnJheVwiKS5maWx0ZXIsV2Y9dHQsVmY9SGYscWY9QXJyYXkucHJvdG90eXBlLFVmPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZmlsdGVyO3JldHVybiB0PT09cWZ8fFdmKHFmLHQpJiZlPT09cWYuZmlsdGVyP1ZmOmV9LFlmPVVmLFhmPXcsR2Y9eSxLZj0kaSwkZj1VLFpmPUdmKEUuZiksUWY9R2YoW10ucHVzaCksSmY9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgaSxvPSRmKGUpLG49S2Yobykscj1uLmxlbmd0aCxzPTAsYT1bXTtyPnM7KWk9bltzKytdLFhmJiYhWmYobyxpKXx8UWYoYSx0P1tpLG9baV1dOm9baV0pO3JldHVybiBhfX0sdHA9e2VudHJpZXM6SmYoITApLHZhbHVlczpKZighMSl9LnZhbHVlczt4aSh7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMH0se3ZhbHVlczpmdW5jdGlvbih0KXtyZXR1cm4gdHAodCl9fSksRy5PYmplY3QudmFsdWVzO3ZhciBlcD1cIlxcdFxcblxcdlxcZlxcciDCoOGagOKAgOKAgeKAguKAg+KAhOKAheKAhuKAh+KAiOKAieKAiuKAr+KBn+OAgFxcdTIwMjhcXHUyMDI5XFx1ZmVmZlwiLGlwPVcsb3A9b24sbnA9eShcIlwiLnJlcGxhY2UpLHJwPVwiW1xcdFxcblxcdlxcZlxcciDCoOGagOKAgOKAgeKAguKAg+KAhOKAheKAhuKAh+KAiOKAieKAiuKAr+KBn+OAgFxcdTIwMjhcXHUyMDI5XFx1ZmVmZl1cIixzcD1SZWdFeHAoXCJeXCIrcnArcnArXCIqXCIpLGFwPVJlZ0V4cChycCtycCtcIiokXCIpLGhwPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgaT1vcChpcChlKSk7cmV0dXJuIDEmdCYmKGk9bnAoaSxzcCxcIlwiKSksMiZ0JiYoaT1ucChpLGFwLFwiXCIpKSxpfX0sZHA9e3N0YXJ0OmhwKDEpLGVuZDpocCgyKSx0cmltOmhwKDMpfSxscD1uLGNwPXIsdXA9eSxmcD1vbixwcD1kcC50cmltLHZwPWVwLGdwPWxwLnBhcnNlSW50LHlwPWxwLlN5bWJvbCxtcD15cCYmeXAuaXRlcmF0b3IsYnA9L15bKy1dPzB4L2ksd3A9dXAoYnAuZXhlYyksa3A9OCE9PWdwKHZwK1wiMDhcIil8fDIyIT09Z3AodnArXCIweDE2XCIpfHxtcCYmIWNwKChmdW5jdGlvbigpe2dwKE9iamVjdChtcCkpfSkpP2Z1bmN0aW9uKHQsZSl7dmFyIGk9cHAoZnAodCkpO3JldHVybiBncChpLGU+Pj4wfHwod3AoYnAsaSk/MTY6MTApKX06Z3A7eGkoe2dsb2JhbDohMCxmb3JjZWQ6cGFyc2VJbnQhPWtwfSx7cGFyc2VJbnQ6a3B9KTt2YXIgX3A9Ry5wYXJzZUludCx4cD14aSxFcD1qaS5pbmRleE9mLE9wPU91LENwPXkoW10uaW5kZXhPZiksU3A9ISFDcCYmMS9DcChbMV0sMSwtMCk8MCxUcD1PcChcImluZGV4T2ZcIik7eHAoe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOlNwfHwhVHB9LHtpbmRleE9mOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwO3JldHVybiBTcD9DcCh0aGlzLHQsZSl8fDA6RXAodGhpcyx0LGUpfX0pO3ZhciBNcD1NbyhcIkFycmF5XCIpLmluZGV4T2YsUHA9dHQsRHA9TXAsQnA9QXJyYXkucHJvdG90eXBlLElwPWZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5kZXhPZjtyZXR1cm4gdD09PUJwfHxQcChCcCx0KSYmZT09PUJwLmluZGV4T2Y/RHA6ZX0senA9SXAsRnA9Wm4uUFJPUEVSLE5wPXIsQXA9ZXAsUnA9ZHAudHJpbTt4aSh7dGFyZ2V0OlwiU3RyaW5nXCIscHJvdG86ITAsZm9yY2VkOmZ1bmN0aW9uKHQpe3JldHVybiBOcCgoZnVuY3Rpb24oKXtyZXR1cm4hIUFwW3RdKCl8fFwi4oCLwoXhoI5cIiE9PVwi4oCLwoXhoI5cIlt0XSgpfHxGcCYmQXBbdF0ubmFtZSE9PXR9KSl9KFwidHJpbVwiKX0se3RyaW06ZnVuY3Rpb24oKXtyZXR1cm4gUnAodGhpcyl9fSksTW8oXCJTdHJpbmdcIikudHJpbSx4aSh7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxzaGFtOiF3fSx7Y3JlYXRlOmtyfSk7dmFyIGpwPUcuT2JqZWN0LExwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGpwLmNyZWF0ZSh0LGUpfSxIcD1McCxXcD14aSxWcD1KLHFwPWMsVXA9eSxZcD1yLFhwPW4uQXJyYXksR3A9VnAoXCJKU09OXCIsXCJzdHJpbmdpZnlcIiksS3A9VXAoLy4vLmV4ZWMpLCRwPVVwKFwiXCIuY2hhckF0KSxacD1VcChcIlwiLmNoYXJDb2RlQXQpLFFwPVVwKFwiXCIucmVwbGFjZSksSnA9VXAoMS4udG9TdHJpbmcpLHR2PS9bXFx1RDgwMC1cXHVERkZGXS9nLGV2PS9eW1xcdUQ4MDAtXFx1REJGRl0kLyxpdj0vXltcXHVEQzAwLVxcdURGRkZdJC8sb3Y9ZnVuY3Rpb24odCxlLGkpe3ZhciBvPSRwKGksZS0xKSxuPSRwKGksZSsxKTtyZXR1cm4gS3AoZXYsdCkmJiFLcChpdixuKXx8S3AoaXYsdCkmJiFLcChldixvKT9cIlxcXFx1XCIrSnAoWnAodCwwKSwxNik6dH0sbnY9WXAoKGZ1bmN0aW9uKCl7cmV0dXJuJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInIT09R3AoXCJcXHVkZjA2XFx1ZDgzNFwiKXx8J1wiXFxcXHVkZWFkXCInIT09R3AoXCJcXHVkZWFkXCIpfSkpO0dwJiZXcCh7dGFyZ2V0OlwiSlNPTlwiLHN0YXQ6ITAsZm9yY2VkOm52fSx7c3RyaW5naWZ5OmZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIG89MCxuPWFyZ3VtZW50cy5sZW5ndGgscj1YcChuKTtvPG47bysrKXJbb109YXJndW1lbnRzW29dO3ZhciBzPXFwKEdwLG51bGwscik7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHM/UXAocyx0dixvdik6c319KTt2YXIgcnY9Ryxzdj1jO3J2LkpTT058fChydi5KU09OPXtzdHJpbmdpZnk6SlNPTi5zdHJpbmdpZnl9KTt2YXIgYXY9ZnVuY3Rpb24odCxlLGkpe3JldHVybiBzdihydi5KU09OLnN0cmluZ2lmeSxudWxsLGFyZ3VtZW50cyl9LGh2PWF2LGR2PW4uVHlwZUVycm9yLGx2PXhpLGN2PW4sdXY9Yyxmdj1tLHB2PXBvLHZ2PWZ1bmN0aW9uKHQsZSl7aWYodDxlKXRocm93IGR2KFwiTm90IGVub3VnaCBhcmd1bWVudHNcIik7cmV0dXJuIHR9LGd2PS9NU0lFIC5cXC4vLnRlc3QoZXQpLHl2PWN2LkZ1bmN0aW9uLG12PWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLGkpe3ZhciBvPXZ2KGFyZ3VtZW50cy5sZW5ndGgsMSk+MixuPWZ2KGUpP2U6eXYoZSkscj1vP3B2KGFyZ3VtZW50cywyKTp2b2lkIDA7cmV0dXJuIHQobz9mdW5jdGlvbigpe3V2KG4sdGhpcyxyKX06bixpKX19O2x2KHtnbG9iYWw6ITAsYmluZDohMCxmb3JjZWQ6Z3Z9LHtzZXRUaW1lb3V0Om12KGN2LnNldFRpbWVvdXQpLHNldEludGVydmFsOm12KGN2LnNldEludGVydmFsKX0pO3ZhciBidj1HLnNldFRpbWVvdXQsd3Y9THQsa3Y9UGksX3Y9emkseHY9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXd2KHRoaXMpLGk9X3YoZSksbz1hcmd1bWVudHMubGVuZ3RoLG49a3Yobz4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsaSkscj1vPjI/YXJndW1lbnRzWzJdOnZvaWQgMCxzPXZvaWQgMD09PXI/aTprdihyLGkpO3M+bjspZVtuKytdPXQ7cmV0dXJuIGV9O3hpKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwfSx7ZmlsbDp4dn0pO3ZhciBFdixPdj1NbyhcIkFycmF5XCIpLmZpbGwsQ3Y9dHQsU3Y9T3YsVHY9QXJyYXkucHJvdG90eXBlLE12PWZ1bmN0aW9uKHQpe3ZhciBlPXQuZmlsbDtyZXR1cm4gdD09PVR2fHxDdihUdix0KSYmZT09PVR2LmZpbGw/U3Y6ZX0sUHY9TXY7XG4vKiEgSGFtbWVyLkpTIC0gdjIuMC4xNy1yYyAtIDIwMTktMTItMTZcblx0ICogaHR0cDovL25hdmVyLmdpdGh1Yi5pby9lZ2pzXG5cdCAqXG5cdCAqIEZvcmtlZCBCeSBOYXZlciBlZ2pzXG5cdCAqIENvcHlyaWdodCAoYykgaGFtbWVyanNcblx0ICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlICovXG5mdW5jdGlvbiBEdigpe3JldHVybiBEdj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgaT1hcmd1bWVudHNbZV07Zm9yKHZhciBvIGluIGkpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGksbykmJih0W29dPWlbb10pfXJldHVybiB0fSxEdi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gQnYodCxlKXt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LHQuX19wcm90b19fPWV9ZnVuY3Rpb24gSXYodCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9RXY9XCJmdW5jdGlvblwiIT10eXBlb2YgT2JqZWN0LmFzc2lnbj9mdW5jdGlvbih0KXtpZihudWxsPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3RcIik7Zm9yKHZhciBlPU9iamVjdCh0KSxpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIG89YXJndW1lbnRzW2ldO2lmKG51bGwhPW8pZm9yKHZhciBuIGluIG8pby5oYXNPd25Qcm9wZXJ0eShuKSYmKGVbbl09b1tuXSl9cmV0dXJuIGV9Ok9iamVjdC5hc3NpZ247dmFyIHp2LEZ2PUV2LE52PVtcIlwiLFwid2Via2l0XCIsXCJNb3pcIixcIk1TXCIsXCJtc1wiLFwib1wiXSxBdj1cInVuZGVmaW5lZFwiPT10eXBlb2YgZG9jdW1lbnQ/e3N0eWxlOnt9fTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFJ2PU1hdGgucm91bmQsanY9TWF0aC5hYnMsTHY9RGF0ZS5ub3c7ZnVuY3Rpb24gSHYodCxlKXtmb3IodmFyIGksbyxuPWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLHI9MDtyPE52Lmxlbmd0aDspe2lmKChvPShpPU52W3JdKT9pK246ZSlpbiB0KXJldHVybiBvO3IrK319enY9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz97fTp3aW5kb3c7dmFyIFd2PUh2KEF2LnN0eWxlLFwidG91Y2hBY3Rpb25cIiksVnY9dm9pZCAwIT09V3Y7dmFyIHF2PVwiY29tcHV0ZVwiLFV2PVwiYXV0b1wiLFl2PVwibWFuaXB1bGF0aW9uXCIsWHY9XCJub25lXCIsR3Y9XCJwYW4teFwiLEt2PVwicGFuLXlcIiwkdj1mdW5jdGlvbigpe2lmKCFWdilyZXR1cm4hMTt2YXIgdD17fSxlPXp2LkNTUyYmenYuQ1NTLnN1cHBvcnRzO3JldHVybltcImF1dG9cIixcIm1hbmlwdWxhdGlvblwiLFwicGFuLXlcIixcInBhbi14XCIsXCJwYW4teCBwYW4teVwiLFwibm9uZVwiXS5mb3JFYWNoKChmdW5jdGlvbihpKXtyZXR1cm4gdFtpXT0hZXx8enYuQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsaSl9KSksdH0oKSxadj1cIm9udG91Y2hzdGFydFwiaW4genYsUXY9dm9pZCAwIT09SHYoenYsXCJQb2ludGVyRXZlbnRcIiksSnY9WnYmJi9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHRnPVwidG91Y2hcIixlZz1cIm1vdXNlXCIsaWc9MTYsb2c9MjQsbmc9W1wieFwiLFwieVwiXSxyZz1bXCJjbGllbnRYXCIsXCJjbGllbnRZXCJdO2Z1bmN0aW9uIHNnKHQsZSxpKXt2YXIgbztpZih0KWlmKHQuZm9yRWFjaCl0LmZvckVhY2goZSxpKTtlbHNlIGlmKHZvaWQgMCE9PXQubGVuZ3RoKWZvcihvPTA7bzx0Lmxlbmd0aDspZS5jYWxsKGksdFtvXSxvLHQpLG8rKztlbHNlIGZvcihvIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShvKSYmZS5jYWxsKGksdFtvXSxvLHQpfWZ1bmN0aW9uIGFnKHQsZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90LmFwcGx5KGUmJmVbMF18fHZvaWQgMCxlKTp0fWZ1bmN0aW9uIGhnKHQsZSl7cmV0dXJuIHQuaW5kZXhPZihlKT4tMX12YXIgZGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5tYW5hZ2VyPXQsdGhpcy5zZXQoZSl9dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUuc2V0PWZ1bmN0aW9uKHQpe3Q9PT1xdiYmKHQ9dGhpcy5jb21wdXRlKCkpLFZ2JiZ0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZSYmJHZbdF0mJih0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZVtXdl09dCksdGhpcy5hY3Rpb25zPXQudG9Mb3dlckNhc2UoKS50cmltKCl9LGUudXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5zZXQodGhpcy5tYW5hZ2VyLm9wdGlvbnMudG91Y2hBY3Rpb24pfSxlLmNvbXB1dGU9ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gc2codGhpcy5tYW5hZ2VyLnJlY29nbml6ZXJzLChmdW5jdGlvbihlKXthZyhlLm9wdGlvbnMuZW5hYmxlLFtlXSkmJih0PXQuY29uY2F0KGUuZ2V0VG91Y2hBY3Rpb24oKSkpfSkpLGZ1bmN0aW9uKHQpe2lmKGhnKHQsWHYpKXJldHVybiBYdjt2YXIgZT1oZyh0LEd2KSxpPWhnKHQsS3YpO3JldHVybiBlJiZpP1h2OmV8fGk/ZT9HdjpLdjpoZyh0LFl2KT9ZdjpVdn0odC5qb2luKFwiIFwiKSl9LGUucHJldmVudERlZmF1bHRzPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc3JjRXZlbnQsaT10Lm9mZnNldERpcmVjdGlvbjtpZih0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQpZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2V7dmFyIG89dGhpcy5hY3Rpb25zLG49aGcobyxYdikmJiEkdi5ub25lLHI9aGcobyxLdikmJiEkdltcInBhbi15XCJdLHM9aGcobyxHdikmJiEkdltcInBhbi14XCJdO2lmKG4pe3ZhciBhPTE9PT10LnBvaW50ZXJzLmxlbmd0aCxoPXQuZGlzdGFuY2U8MixkPXQuZGVsdGFUaW1lPDI1MDtpZihhJiZoJiZkKXJldHVybn1pZighc3x8IXIpcmV0dXJuIG58fHImJjYmaXx8cyYmaSZvZz90aGlzLnByZXZlbnRTcmMoZSk6dm9pZCAwfX0sZS5wcmV2ZW50U3JjPWZ1bmN0aW9uKHQpe3RoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZD0hMCx0LnByZXZlbnREZWZhdWx0KCl9LHR9KCk7ZnVuY3Rpb24gbGcodCxlKXtmb3IoO3Q7KXtpZih0PT09ZSlyZXR1cm4hMDt0PXQucGFyZW50Tm9kZX1yZXR1cm4hMX1mdW5jdGlvbiBjZyh0KXt2YXIgZT10Lmxlbmd0aDtpZigxPT09ZSlyZXR1cm57eDpSdih0WzBdLmNsaWVudFgpLHk6UnYodFswXS5jbGllbnRZKX07Zm9yKHZhciBpPTAsbz0wLG49MDtuPGU7KWkrPXRbbl0uY2xpZW50WCxvKz10W25dLmNsaWVudFksbisrO3JldHVybnt4OlJ2KGkvZSkseTpSdihvL2UpfX1mdW5jdGlvbiB1Zyh0KXtmb3IodmFyIGU9W10saT0wO2k8dC5wb2ludGVycy5sZW5ndGg7KWVbaV09e2NsaWVudFg6UnYodC5wb2ludGVyc1tpXS5jbGllbnRYKSxjbGllbnRZOlJ2KHQucG9pbnRlcnNbaV0uY2xpZW50WSl9LGkrKztyZXR1cm57dGltZVN0YW1wOkx2KCkscG9pbnRlcnM6ZSxjZW50ZXI6Y2coZSksZGVsdGFYOnQuZGVsdGFYLGRlbHRhWTp0LmRlbHRhWX19ZnVuY3Rpb24gZmcodCxlLGkpe2l8fChpPW5nKTt2YXIgbz1lW2lbMF1dLXRbaVswXV0sbj1lW2lbMV1dLXRbaVsxXV07cmV0dXJuIE1hdGguc3FydChvKm8rbipuKX1mdW5jdGlvbiBwZyh0LGUsaSl7aXx8KGk9bmcpO3ZhciBvPWVbaVswXV0tdFtpWzBdXSxuPWVbaVsxXV0tdFtpWzFdXTtyZXR1cm4gMTgwKk1hdGguYXRhbjIobixvKS9NYXRoLlBJfWZ1bmN0aW9uIHZnKHQsZSl7cmV0dXJuIHQ9PT1lPzE6anYodCk+PWp2KGUpP3Q8MD8yOjQ6ZTwwPzg6aWd9ZnVuY3Rpb24gZ2codCxlLGkpe3JldHVybnt4OmUvdHx8MCx5OmkvdHx8MH19ZnVuY3Rpb24geWcodCxlKXt2YXIgaT10LnNlc3Npb24sbz1lLnBvaW50ZXJzLG49by5sZW5ndGg7aS5maXJzdElucHV0fHwoaS5maXJzdElucHV0PXVnKGUpKSxuPjEmJiFpLmZpcnN0TXVsdGlwbGU/aS5maXJzdE11bHRpcGxlPXVnKGUpOjE9PT1uJiYoaS5maXJzdE11bHRpcGxlPSExKTt2YXIgcj1pLmZpcnN0SW5wdXQscz1pLmZpcnN0TXVsdGlwbGUsYT1zP3MuY2VudGVyOnIuY2VudGVyLGg9ZS5jZW50ZXI9Y2cobyk7ZS50aW1lU3RhbXA9THYoKSxlLmRlbHRhVGltZT1lLnRpbWVTdGFtcC1yLnRpbWVTdGFtcCxlLmFuZ2xlPXBnKGEsaCksZS5kaXN0YW5jZT1mZyhhLGgpLGZ1bmN0aW9uKHQsZSl7dmFyIGk9ZS5jZW50ZXIsbz10Lm9mZnNldERlbHRhfHx7fSxuPXQucHJldkRlbHRhfHx7fSxyPXQucHJldklucHV0fHx7fTsxIT09ZS5ldmVudFR5cGUmJjQhPT1yLmV2ZW50VHlwZXx8KG49dC5wcmV2RGVsdGE9e3g6ci5kZWx0YVh8fDAseTpyLmRlbHRhWXx8MH0sbz10Lm9mZnNldERlbHRhPXt4OmkueCx5OmkueX0pLGUuZGVsdGFYPW4ueCsoaS54LW8ueCksZS5kZWx0YVk9bi55KyhpLnktby55KX0oaSxlKSxlLm9mZnNldERpcmVjdGlvbj12ZyhlLmRlbHRhWCxlLmRlbHRhWSk7dmFyIGQsbCxjPWdnKGUuZGVsdGFUaW1lLGUuZGVsdGFYLGUuZGVsdGFZKTtlLm92ZXJhbGxWZWxvY2l0eVg9Yy54LGUub3ZlcmFsbFZlbG9jaXR5WT1jLnksZS5vdmVyYWxsVmVsb2NpdHk9anYoYy54KT5qdihjLnkpP2MueDpjLnksZS5zY2FsZT1zPyhkPXMucG9pbnRlcnMsZmcoKGw9bylbMF0sbFsxXSxyZykvZmcoZFswXSxkWzFdLHJnKSk6MSxlLnJvdGF0aW9uPXM/ZnVuY3Rpb24odCxlKXtyZXR1cm4gcGcoZVsxXSxlWzBdLHJnKStwZyh0WzFdLHRbMF0scmcpfShzLnBvaW50ZXJzLG8pOjAsZS5tYXhQb2ludGVycz1pLnByZXZJbnB1dD9lLnBvaW50ZXJzLmxlbmd0aD5pLnByZXZJbnB1dC5tYXhQb2ludGVycz9lLnBvaW50ZXJzLmxlbmd0aDppLnByZXZJbnB1dC5tYXhQb2ludGVyczplLnBvaW50ZXJzLmxlbmd0aCxmdW5jdGlvbih0LGUpe3ZhciBpLG8sbixyLHM9dC5sYXN0SW50ZXJ2YWx8fGUsYT1lLnRpbWVTdGFtcC1zLnRpbWVTdGFtcDtpZig4IT09ZS5ldmVudFR5cGUmJihhPjI1fHx2b2lkIDA9PT1zLnZlbG9jaXR5KSl7dmFyIGg9ZS5kZWx0YVgtcy5kZWx0YVgsZD1lLmRlbHRhWS1zLmRlbHRhWSxsPWdnKGEsaCxkKTtvPWwueCxuPWwueSxpPWp2KGwueCk+anYobC55KT9sLng6bC55LHI9dmcoaCxkKSx0Lmxhc3RJbnRlcnZhbD1lfWVsc2UgaT1zLnZlbG9jaXR5LG89cy52ZWxvY2l0eVgsbj1zLnZlbG9jaXR5WSxyPXMuZGlyZWN0aW9uO2UudmVsb2NpdHk9aSxlLnZlbG9jaXR5WD1vLGUudmVsb2NpdHlZPW4sZS5kaXJlY3Rpb249cn0oaSxlKTt2YXIgdSxmPXQuZWxlbWVudCxwPWUuc3JjRXZlbnQ7bGcodT1wLmNvbXBvc2VkUGF0aD9wLmNvbXBvc2VkUGF0aCgpWzBdOnAucGF0aD9wLnBhdGhbMF06cC50YXJnZXQsZikmJihmPXUpLGUudGFyZ2V0PWZ9ZnVuY3Rpb24gbWcodCxlLGkpe3ZhciBvPWkucG9pbnRlcnMubGVuZ3RoLG49aS5jaGFuZ2VkUG9pbnRlcnMubGVuZ3RoLHI9MSZlJiZvLW49PTAscz0xMiZlJiZvLW49PTA7aS5pc0ZpcnN0PSEhcixpLmlzRmluYWw9ISFzLHImJih0LnNlc3Npb249e30pLGkuZXZlbnRUeXBlPWUseWcodCxpKSx0LmVtaXQoXCJoYW1tZXIuaW5wdXRcIixpKSx0LnJlY29nbml6ZShpKSx0LnNlc3Npb24ucHJldklucHV0PWl9ZnVuY3Rpb24gYmcodCl7cmV0dXJuIHQudHJpbSgpLnNwbGl0KC9cXHMrL2cpfWZ1bmN0aW9uIHdnKHQsZSxpKXtzZyhiZyhlKSwoZnVuY3Rpb24oZSl7dC5hZGRFdmVudExpc3RlbmVyKGUsaSwhMSl9KSl9ZnVuY3Rpb24ga2codCxlLGkpe3NnKGJnKGUpLChmdW5jdGlvbihlKXt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxpLCExKX0pKX1mdW5jdGlvbiBfZyh0KXt2YXIgZT10Lm93bmVyRG9jdW1lbnR8fHQ7cmV0dXJuIGUuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93fHx3aW5kb3d9dmFyIHhnPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBpPXRoaXM7dGhpcy5tYW5hZ2VyPXQsdGhpcy5jYWxsYmFjaz1lLHRoaXMuZWxlbWVudD10LmVsZW1lbnQsdGhpcy50YXJnZXQ9dC5vcHRpb25zLmlucHV0VGFyZ2V0LHRoaXMuZG9tSGFuZGxlcj1mdW5jdGlvbihlKXthZyh0Lm9wdGlvbnMuZW5hYmxlLFt0XSkmJmkuaGFuZGxlcihlKX0sdGhpcy5pbml0KCl9dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUuaGFuZGxlcj1mdW5jdGlvbigpe30sZS5pbml0PWZ1bmN0aW9uKCl7dGhpcy5ldkVsJiZ3Zyh0aGlzLmVsZW1lbnQsdGhpcy5ldkVsLHRoaXMuZG9tSGFuZGxlciksdGhpcy5ldlRhcmdldCYmd2codGhpcy50YXJnZXQsdGhpcy5ldlRhcmdldCx0aGlzLmRvbUhhbmRsZXIpLHRoaXMuZXZXaW4mJndnKF9nKHRoaXMuZWxlbWVudCksdGhpcy5ldldpbix0aGlzLmRvbUhhbmRsZXIpfSxlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLmV2RWwmJmtnKHRoaXMuZWxlbWVudCx0aGlzLmV2RWwsdGhpcy5kb21IYW5kbGVyKSx0aGlzLmV2VGFyZ2V0JiZrZyh0aGlzLnRhcmdldCx0aGlzLmV2VGFyZ2V0LHRoaXMuZG9tSGFuZGxlciksdGhpcy5ldldpbiYma2coX2codGhpcy5lbGVtZW50KSx0aGlzLmV2V2luLHRoaXMuZG9tSGFuZGxlcil9LHR9KCk7ZnVuY3Rpb24gRWcodCxlLGkpe2lmKHQuaW5kZXhPZiYmIWkpcmV0dXJuIHQuaW5kZXhPZihlKTtmb3IodmFyIG89MDtvPHQubGVuZ3RoOyl7aWYoaSYmdFtvXVtpXT09ZXx8IWkmJnRbb109PT1lKXJldHVybiBvO28rK31yZXR1cm4tMX12YXIgT2c9e3BvaW50ZXJkb3duOjEscG9pbnRlcm1vdmU6Mixwb2ludGVydXA6NCxwb2ludGVyY2FuY2VsOjgscG9pbnRlcm91dDo4fSxDZz17Mjp0ZywzOlwicGVuXCIsNDplZyw1Olwia2luZWN0XCJ9LFNnPVwicG9pbnRlcmRvd25cIixUZz1cInBvaW50ZXJtb3ZlIHBvaW50ZXJ1cCBwb2ludGVyY2FuY2VsXCI7enYuTVNQb2ludGVyRXZlbnQmJiF6di5Qb2ludGVyRXZlbnQmJihTZz1cIk1TUG9pbnRlckRvd25cIixUZz1cIk1TUG9pbnRlck1vdmUgTVNQb2ludGVyVXAgTVNQb2ludGVyQ2FuY2VsXCIpO3ZhciBNZz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGksbz1lLnByb3RvdHlwZTtyZXR1cm4gby5ldkVsPVNnLG8uZXZXaW49VGcsKGk9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXMpLnN0b3JlPWkubWFuYWdlci5zZXNzaW9uLnBvaW50ZXJFdmVudHM9W10saX1yZXR1cm4gQnYoZSx0KSxlLnByb3RvdHlwZS5oYW5kbGVyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc3RvcmUsaT0hMSxvPXQudHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoXCJtc1wiLFwiXCIpLG49T2dbb10scj1DZ1t0LnBvaW50ZXJUeXBlXXx8dC5wb2ludGVyVHlwZSxzPXI9PT10ZyxhPUVnKGUsdC5wb2ludGVySWQsXCJwb2ludGVySWRcIik7MSZuJiYoMD09PXQuYnV0dG9ufHxzKT9hPDAmJihlLnB1c2godCksYT1lLmxlbmd0aC0xKToxMiZuJiYoaT0hMCksYTwwfHwoZVthXT10LHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLG4se3BvaW50ZXJzOmUsY2hhbmdlZFBvaW50ZXJzOlt0XSxwb2ludGVyVHlwZTpyLHNyY0V2ZW50OnR9KSxpJiZlLnNwbGljZShhLDEpKX0sZX0oeGcpO2Z1bmN0aW9uIFBnKHQpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0LDApfWZ1bmN0aW9uIERnKHQsZSxpKXtmb3IodmFyIG89W10sbj1bXSxyPTA7cjx0Lmxlbmd0aDspe3ZhciBzPWU/dFtyXVtlXTp0W3JdO0VnKG4scyk8MCYmby5wdXNoKHRbcl0pLG5bcl09cyxyKyt9cmV0dXJuIGkmJihvPWU/by5zb3J0KChmdW5jdGlvbih0LGkpe3JldHVybiB0W2VdPmlbZV19KSk6by5zb3J0KCkpLG99dmFyIEJnPXt0b3VjaHN0YXJ0OjEsdG91Y2htb3ZlOjIsdG91Y2hlbmQ6NCx0b3VjaGNhbmNlbDo4fSxJZz1cInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXCIsemc9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciBpO3JldHVybiBlLnByb3RvdHlwZS5ldlRhcmdldD1JZywoaT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpcykudGFyZ2V0SWRzPXt9LGl9cmV0dXJuIEJ2KGUsdCksZS5wcm90b3R5cGUuaGFuZGxlcj1mdW5jdGlvbih0KXt2YXIgZT1CZ1t0LnR5cGVdLGk9RmcuY2FsbCh0aGlzLHQsZSk7aSYmdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsZSx7cG9pbnRlcnM6aVswXSxjaGFuZ2VkUG9pbnRlcnM6aVsxXSxwb2ludGVyVHlwZTp0ZyxzcmNFdmVudDp0fSl9LGV9KHhnKTtmdW5jdGlvbiBGZyh0LGUpe3ZhciBpLG8sbj1QZyh0LnRvdWNoZXMpLHI9dGhpcy50YXJnZXRJZHM7aWYoMyZlJiYxPT09bi5sZW5ndGgpcmV0dXJuIHJbblswXS5pZGVudGlmaWVyXT0hMCxbbixuXTt2YXIgcz1QZyh0LmNoYW5nZWRUb3VjaGVzKSxhPVtdLGg9dGhpcy50YXJnZXQ7aWYobz1uLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIGxnKHQudGFyZ2V0LGgpfSkpLDE9PT1lKWZvcihpPTA7aTxvLmxlbmd0aDspcltvW2ldLmlkZW50aWZpZXJdPSEwLGkrKztmb3IoaT0wO2k8cy5sZW5ndGg7KXJbc1tpXS5pZGVudGlmaWVyXSYmYS5wdXNoKHNbaV0pLDEyJmUmJmRlbGV0ZSByW3NbaV0uaWRlbnRpZmllcl0saSsrO3JldHVybiBhLmxlbmd0aD9bRGcoby5jb25jYXQoYSksXCJpZGVudGlmaWVyXCIsITApLGFdOnZvaWQgMH12YXIgTmc9e21vdXNlZG93bjoxLG1vdXNlbW92ZToyLG1vdXNldXA6NH0sQWc9XCJtb3VzZWRvd25cIixSZz1cIm1vdXNlbW92ZSBtb3VzZXVwXCIsamc9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciBpLG89ZS5wcm90b3R5cGU7cmV0dXJuIG8uZXZFbD1BZyxvLmV2V2luPVJnLChpPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzKS5wcmVzc2VkPSExLGl9cmV0dXJuIEJ2KGUsdCksZS5wcm90b3R5cGUuaGFuZGxlcj1mdW5jdGlvbih0KXt2YXIgZT1OZ1t0LnR5cGVdOzEmZSYmMD09PXQuYnV0dG9uJiYodGhpcy5wcmVzc2VkPSEwKSwyJmUmJjEhPT10LndoaWNoJiYoZT00KSx0aGlzLnByZXNzZWQmJig0JmUmJih0aGlzLnByZXNzZWQ9ITEpLHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLGUse3BvaW50ZXJzOlt0XSxjaGFuZ2VkUG9pbnRlcnM6W3RdLHBvaW50ZXJUeXBlOmVnLHNyY0V2ZW50OnR9KSl9LGV9KHhnKTtmdW5jdGlvbiBMZyh0KXt2YXIgZT10LmNoYW5nZWRQb2ludGVyc1swXTtpZihlLmlkZW50aWZpZXI9PT10aGlzLnByaW1hcnlUb3VjaCl7dmFyIGk9e3g6ZS5jbGllbnRYLHk6ZS5jbGllbnRZfSxvPXRoaXMubGFzdFRvdWNoZXM7dGhpcy5sYXN0VG91Y2hlcy5wdXNoKGkpO3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dmFyIHQ9by5pbmRleE9mKGkpO3Q+LTEmJm8uc3BsaWNlKHQsMSl9KSwyNTAwKX19ZnVuY3Rpb24gSGcodCxlKXsxJnQ/KHRoaXMucHJpbWFyeVRvdWNoPWUuY2hhbmdlZFBvaW50ZXJzWzBdLmlkZW50aWZpZXIsTGcuY2FsbCh0aGlzLGUpKToxMiZ0JiZMZy5jYWxsKHRoaXMsZSl9ZnVuY3Rpb24gV2codCl7Zm9yKHZhciBlPXQuc3JjRXZlbnQuY2xpZW50WCxpPXQuc3JjRXZlbnQuY2xpZW50WSxvPTA7bzx0aGlzLmxhc3RUb3VjaGVzLmxlbmd0aDtvKyspe3ZhciBuPXRoaXMubGFzdFRvdWNoZXNbb10scj1NYXRoLmFicyhlLW4ueCkscz1NYXRoLmFicyhpLW4ueSk7aWYocjw9MjUmJnM8PTI1KXJldHVybiEwfXJldHVybiExfXZhciBWZz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsaSl7dmFyIG87cmV0dXJuKG89dC5jYWxsKHRoaXMsZSxpKXx8dGhpcykuaGFuZGxlcj1mdW5jdGlvbih0LGUsaSl7dmFyIG49aS5wb2ludGVyVHlwZT09PXRnLHI9aS5wb2ludGVyVHlwZT09PWVnO2lmKCEociYmaS5zb3VyY2VDYXBhYmlsaXRpZXMmJmkuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpKXtpZihuKUhnLmNhbGwoSXYoSXYobykpLGUsaSk7ZWxzZSBpZihyJiZXZy5jYWxsKEl2KEl2KG8pKSxpKSlyZXR1cm47by5jYWxsYmFjayh0LGUsaSl9fSxvLnRvdWNoPW5ldyB6ZyhvLm1hbmFnZXIsby5oYW5kbGVyKSxvLm1vdXNlPW5ldyBqZyhvLm1hbmFnZXIsby5oYW5kbGVyKSxvLnByaW1hcnlUb3VjaD1udWxsLG8ubGFzdFRvdWNoZXM9W10sb31yZXR1cm4gQnYoZSx0KSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy50b3VjaC5kZXN0cm95KCksdGhpcy5tb3VzZS5kZXN0cm95KCl9LGV9KHhnKX0oKTtmdW5jdGlvbiBxZyh0LGUsaSl7cmV0dXJuISFBcnJheS5pc0FycmF5KHQpJiYoc2codCxpW2VdLGkpLCEwKX12YXIgVWc9MzIsWWc9MTtmdW5jdGlvbiBYZyh0LGUpe3ZhciBpPWUubWFuYWdlcjtyZXR1cm4gaT9pLmdldCh0KTp0fWZ1bmN0aW9uIEdnKHQpe3JldHVybiAxNiZ0P1wiY2FuY2VsXCI6OCZ0P1wiZW5kXCI6NCZ0P1wibW92ZVwiOjImdD9cInN0YXJ0XCI6XCJcIn12YXIgS2c9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3ZvaWQgMD09PXQmJih0PXt9KSx0aGlzLm9wdGlvbnM9RHYoe2VuYWJsZTohMH0sdCksdGhpcy5pZD1ZZysrLHRoaXMubWFuYWdlcj1udWxsLHRoaXMuc3RhdGU9MSx0aGlzLnNpbXVsdGFuZW91cz17fSx0aGlzLnJlcXVpcmVGYWlsPVtdfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLnNldD1mdW5jdGlvbih0KXtyZXR1cm4gRnYodGhpcy5vcHRpb25zLHQpLHRoaXMubWFuYWdlciYmdGhpcy5tYW5hZ2VyLnRvdWNoQWN0aW9uLnVwZGF0ZSgpLHRoaXN9LGUucmVjb2duaXplV2l0aD1mdW5jdGlvbih0KXtpZihxZyh0LFwicmVjb2duaXplV2l0aFwiLHRoaXMpKXJldHVybiB0aGlzO3ZhciBlPXRoaXMuc2ltdWx0YW5lb3VzO3JldHVybiBlWyh0PVhnKHQsdGhpcykpLmlkXXx8KGVbdC5pZF09dCx0LnJlY29nbml6ZVdpdGgodGhpcykpLHRoaXN9LGUuZHJvcFJlY29nbml6ZVdpdGg9ZnVuY3Rpb24odCl7cmV0dXJuIHFnKHQsXCJkcm9wUmVjb2duaXplV2l0aFwiLHRoaXMpfHwodD1YZyh0LHRoaXMpLGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1t0LmlkXSksdGhpc30sZS5yZXF1aXJlRmFpbHVyZT1mdW5jdGlvbih0KXtpZihxZyh0LFwicmVxdWlyZUZhaWx1cmVcIix0aGlzKSlyZXR1cm4gdGhpczt2YXIgZT10aGlzLnJlcXVpcmVGYWlsO3JldHVybi0xPT09RWcoZSx0PVhnKHQsdGhpcykpJiYoZS5wdXNoKHQpLHQucmVxdWlyZUZhaWx1cmUodGhpcykpLHRoaXN9LGUuZHJvcFJlcXVpcmVGYWlsdXJlPWZ1bmN0aW9uKHQpe2lmKHFnKHQsXCJkcm9wUmVxdWlyZUZhaWx1cmVcIix0aGlzKSlyZXR1cm4gdGhpczt0PVhnKHQsdGhpcyk7dmFyIGU9RWcodGhpcy5yZXF1aXJlRmFpbCx0KTtyZXR1cm4gZT4tMSYmdGhpcy5yZXF1aXJlRmFpbC5zcGxpY2UoZSwxKSx0aGlzfSxlLmhhc1JlcXVpcmVGYWlsdXJlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aD4wfSxlLmNhblJlY29nbml6ZVdpdGg9ZnVuY3Rpb24odCl7cmV0dXJuISF0aGlzLnNpbXVsdGFuZW91c1t0LmlkXX0sZS5lbWl0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsaT10aGlzLnN0YXRlO2Z1bmN0aW9uIG8oaSl7ZS5tYW5hZ2VyLmVtaXQoaSx0KX1pPDgmJm8oZS5vcHRpb25zLmV2ZW50K0dnKGkpKSxvKGUub3B0aW9ucy5ldmVudCksdC5hZGRpdGlvbmFsRXZlbnQmJm8odC5hZGRpdGlvbmFsRXZlbnQpLGk+PTgmJm8oZS5vcHRpb25zLmV2ZW50K0dnKGkpKX0sZS50cnlFbWl0PWZ1bmN0aW9uKHQpe2lmKHRoaXMuY2FuRW1pdCgpKXJldHVybiB0aGlzLmVtaXQodCk7dGhpcy5zdGF0ZT1VZ30sZS5jYW5FbWl0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aDspe2lmKCEoMzMmdGhpcy5yZXF1aXJlRmFpbFt0XS5zdGF0ZSkpcmV0dXJuITE7dCsrfXJldHVybiEwfSxlLnJlY29nbml6ZT1mdW5jdGlvbih0KXt2YXIgZT1Gdih7fSx0KTtpZighYWcodGhpcy5vcHRpb25zLmVuYWJsZSxbdGhpcyxlXSkpcmV0dXJuIHRoaXMucmVzZXQoKSx2b2lkKHRoaXMuc3RhdGU9VWcpOzU2JnRoaXMuc3RhdGUmJih0aGlzLnN0YXRlPTEpLHRoaXMuc3RhdGU9dGhpcy5wcm9jZXNzKGUpLDMwJnRoaXMuc3RhdGUmJnRoaXMudHJ5RW1pdChlKX0sZS5wcm9jZXNzPWZ1bmN0aW9uKHQpe30sZS5nZXRUb3VjaEFjdGlvbj1mdW5jdGlvbigpe30sZS5yZXNldD1mdW5jdGlvbigpe30sdH0oKSwkZz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBpO3JldHVybiB2b2lkIDA9PT1lJiYoZT17fSksKGk9dC5jYWxsKHRoaXMsRHYoe2V2ZW50OlwidGFwXCIscG9pbnRlcnM6MSx0YXBzOjEsaW50ZXJ2YWw6MzAwLHRpbWU6MjUwLHRocmVzaG9sZDo5LHBvc1RocmVzaG9sZDoxMH0sZSkpfHx0aGlzKS5wVGltZT0hMSxpLnBDZW50ZXI9ITEsaS5fdGltZXI9bnVsbCxpLl9pbnB1dD1udWxsLGkuY291bnQ9MCxpfUJ2KGUsdCk7dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuZ2V0VG91Y2hBY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm5bWXZdfSxpLnByb2Nlc3M9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxpPXRoaXMub3B0aW9ucyxvPXQucG9pbnRlcnMubGVuZ3RoPT09aS5wb2ludGVycyxuPXQuZGlzdGFuY2U8aS50aHJlc2hvbGQscj10LmRlbHRhVGltZTxpLnRpbWU7aWYodGhpcy5yZXNldCgpLDEmdC5ldmVudFR5cGUmJjA9PT10aGlzLmNvdW50KXJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7aWYobiYmciYmbyl7aWYoNCE9PXQuZXZlbnRUeXBlKXJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7dmFyIHM9IXRoaXMucFRpbWV8fHQudGltZVN0YW1wLXRoaXMucFRpbWU8aS5pbnRlcnZhbCxhPSF0aGlzLnBDZW50ZXJ8fGZnKHRoaXMucENlbnRlcix0LmNlbnRlcik8aS5wb3NUaHJlc2hvbGQ7aWYodGhpcy5wVGltZT10LnRpbWVTdGFtcCx0aGlzLnBDZW50ZXI9dC5jZW50ZXIsYSYmcz90aGlzLmNvdW50Kz0xOnRoaXMuY291bnQ9MSx0aGlzLl9pbnB1dD10LDA9PT10aGlzLmNvdW50JWkudGFwcylyZXR1cm4gdGhpcy5oYXNSZXF1aXJlRmFpbHVyZXMoKT8odGhpcy5fdGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLnN0YXRlPTgsZS50cnlFbWl0KCl9KSxpLmludGVydmFsKSwyKTo4fXJldHVybiBVZ30saS5mYWlsVGltZW91dD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuX3RpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5zdGF0ZT1VZ30pLHRoaXMub3B0aW9ucy5pbnRlcnZhbCksVWd9LGkucmVzZXQ9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpfSxpLmVtaXQ9ZnVuY3Rpb24oKXs4PT09dGhpcy5zdGF0ZSYmKHRoaXMuX2lucHV0LnRhcENvdW50PXRoaXMuY291bnQsdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LHRoaXMuX2lucHV0KSl9LGV9KEtnKSxaZz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT17fSksdC5jYWxsKHRoaXMsRHYoe3BvaW50ZXJzOjF9LGUpKXx8dGhpc31CdihlLHQpO3ZhciBpPWUucHJvdG90eXBlO3JldHVybiBpLmF0dHJUZXN0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0aW9ucy5wb2ludGVycztyZXR1cm4gMD09PWV8fHQucG9pbnRlcnMubGVuZ3RoPT09ZX0saS5wcm9jZXNzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc3RhdGUsaT10LmV2ZW50VHlwZSxvPTYmZSxuPXRoaXMuYXR0clRlc3QodCk7cmV0dXJuIG8mJig4Jml8fCFuKT8xNnxlOm98fG4/NCZpPzh8ZToyJmU/NHxlOjI6VWd9LGV9KEtnKTtmdW5jdGlvbiBRZyh0KXtyZXR1cm4gdD09PWlnP1wiZG93blwiOjg9PT10P1widXBcIjoyPT09dD9cImxlZnRcIjo0PT09dD9cInJpZ2h0XCI6XCJcIn12YXIgSmc9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgaTtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9e30pLChpPXQuY2FsbCh0aGlzLER2KHtldmVudDpcInBhblwiLHRocmVzaG9sZDoxMCxwb2ludGVyczoxLGRpcmVjdGlvbjozMH0sZSkpfHx0aGlzKS5wWD1udWxsLGkucFk9bnVsbCxpfUJ2KGUsdCk7dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuZ2V0VG91Y2hBY3Rpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMuZGlyZWN0aW9uLGU9W107cmV0dXJuIDYmdCYmZS5wdXNoKEt2KSx0Jm9nJiZlLnB1c2goR3YpLGV9LGkuZGlyZWN0aW9uVGVzdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLm9wdGlvbnMsaT0hMCxvPXQuZGlzdGFuY2Usbj10LmRpcmVjdGlvbixyPXQuZGVsdGFYLHM9dC5kZWx0YVk7cmV0dXJuIG4mZS5kaXJlY3Rpb258fCg2JmUuZGlyZWN0aW9uPyhuPTA9PT1yPzE6cjwwPzI6NCxpPXIhPT10aGlzLnBYLG89TWF0aC5hYnModC5kZWx0YVgpKToobj0wPT09cz8xOnM8MD84OmlnLGk9cyE9PXRoaXMucFksbz1NYXRoLmFicyh0LmRlbHRhWSkpKSx0LmRpcmVjdGlvbj1uLGkmJm8+ZS50aHJlc2hvbGQmJm4mZS5kaXJlY3Rpb259LGkuYXR0clRlc3Q9ZnVuY3Rpb24odCl7cmV0dXJuIFpnLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsdCkmJigyJnRoaXMuc3RhdGV8fCEoMiZ0aGlzLnN0YXRlKSYmdGhpcy5kaXJlY3Rpb25UZXN0KHQpKX0saS5lbWl0PWZ1bmN0aW9uKGUpe3RoaXMucFg9ZS5kZWx0YVgsdGhpcy5wWT1lLmRlbHRhWTt2YXIgaT1RZyhlLmRpcmVjdGlvbik7aSYmKGUuYWRkaXRpb25hbEV2ZW50PXRoaXMub3B0aW9ucy5ldmVudCtpKSx0LnByb3RvdHlwZS5lbWl0LmNhbGwodGhpcyxlKX0sZX0oWmcpLHR5PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXt9KSx0LmNhbGwodGhpcyxEdih7ZXZlbnQ6XCJzd2lwZVwiLHRocmVzaG9sZDoxMCx2ZWxvY2l0eTouMyxkaXJlY3Rpb246MzAscG9pbnRlcnM6MX0sZSkpfHx0aGlzfUJ2KGUsdCk7dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuZ2V0VG91Y2hBY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm4gSmcucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyl9LGkuYXR0clRlc3Q9ZnVuY3Rpb24oZSl7dmFyIGksbz10aGlzLm9wdGlvbnMuZGlyZWN0aW9uO3JldHVybiAzMCZvP2k9ZS5vdmVyYWxsVmVsb2NpdHk6NiZvP2k9ZS5vdmVyYWxsVmVsb2NpdHlYOm8mb2cmJihpPWUub3ZlcmFsbFZlbG9jaXR5WSksdC5wcm90b3R5cGUuYXR0clRlc3QuY2FsbCh0aGlzLGUpJiZvJmUub2Zmc2V0RGlyZWN0aW9uJiZlLmRpc3RhbmNlPnRoaXMub3B0aW9ucy50aHJlc2hvbGQmJmUubWF4UG9pbnRlcnM9PT10aGlzLm9wdGlvbnMucG9pbnRlcnMmJmp2KGkpPnRoaXMub3B0aW9ucy52ZWxvY2l0eSYmNCZlLmV2ZW50VHlwZX0saS5lbWl0PWZ1bmN0aW9uKHQpe3ZhciBlPVFnKHQub2Zmc2V0RGlyZWN0aW9uKTtlJiZ0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQrZSx0KSx0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsdCl9LGV9KFpnKSxleT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT17fSksdC5jYWxsKHRoaXMsRHYoe2V2ZW50OlwicGluY2hcIix0aHJlc2hvbGQ6MCxwb2ludGVyczoyfSxlKSl8fHRoaXN9QnYoZSx0KTt2YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5nZXRUb3VjaEFjdGlvbj1mdW5jdGlvbigpe3JldHVybltYdl19LGkuYXR0clRlc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHQucHJvdG90eXBlLmF0dHJUZXN0LmNhbGwodGhpcyxlKSYmKE1hdGguYWJzKGUuc2NhbGUtMSk+dGhpcy5vcHRpb25zLnRocmVzaG9sZHx8MiZ0aGlzLnN0YXRlKX0saS5lbWl0PWZ1bmN0aW9uKGUpe2lmKDEhPT1lLnNjYWxlKXt2YXIgaT1lLnNjYWxlPDE/XCJpblwiOlwib3V0XCI7ZS5hZGRpdGlvbmFsRXZlbnQ9dGhpcy5vcHRpb25zLmV2ZW50K2l9dC5wcm90b3R5cGUuZW1pdC5jYWxsKHRoaXMsZSl9LGV9KFpnKSxpeT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT17fSksdC5jYWxsKHRoaXMsRHYoe2V2ZW50Olwicm90YXRlXCIsdGhyZXNob2xkOjAscG9pbnRlcnM6Mn0sZSkpfHx0aGlzfUJ2KGUsdCk7dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuZ2V0VG91Y2hBY3Rpb249ZnVuY3Rpb24oKXtyZXR1cm5bWHZdfSxpLmF0dHJUZXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0LnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsZSkmJihNYXRoLmFicyhlLnJvdGF0aW9uKT50aGlzLm9wdGlvbnMudGhyZXNob2xkfHwyJnRoaXMuc3RhdGUpfSxlfShaZyksb3k9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgaTtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9e30pLChpPXQuY2FsbCh0aGlzLER2KHtldmVudDpcInByZXNzXCIscG9pbnRlcnM6MSx0aW1lOjI1MSx0aHJlc2hvbGQ6OX0sZSkpfHx0aGlzKS5fdGltZXI9bnVsbCxpLl9pbnB1dD1udWxsLGl9QnYoZSx0KTt2YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5nZXRUb3VjaEFjdGlvbj1mdW5jdGlvbigpe3JldHVybltVdl19LGkucHJvY2Vzcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLGk9dGhpcy5vcHRpb25zLG89dC5wb2ludGVycy5sZW5ndGg9PT1pLnBvaW50ZXJzLG49dC5kaXN0YW5jZTxpLnRocmVzaG9sZCxyPXQuZGVsdGFUaW1lPmkudGltZTtpZih0aGlzLl9pbnB1dD10LCFufHwhb3x8MTImdC5ldmVudFR5cGUmJiFyKXRoaXMucmVzZXQoKTtlbHNlIGlmKDEmdC5ldmVudFR5cGUpdGhpcy5yZXNldCgpLHRoaXMuX3RpbWVyPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5zdGF0ZT04LGUudHJ5RW1pdCgpfSksaS50aW1lKTtlbHNlIGlmKDQmdC5ldmVudFR5cGUpcmV0dXJuIDg7cmV0dXJuIFVnfSxpLnJlc2V0PWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKX0saS5lbWl0PWZ1bmN0aW9uKHQpezg9PT10aGlzLnN0YXRlJiYodCYmNCZ0LmV2ZW50VHlwZT90aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQrXCJ1cFwiLHQpOih0aGlzLl9pbnB1dC50aW1lU3RhbXA9THYoKSx0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsdGhpcy5faW5wdXQpKSl9LGV9KEtnKSxueT17ZG9tRXZlbnRzOiExLHRvdWNoQWN0aW9uOnF2LGVuYWJsZTohMCxpbnB1dFRhcmdldDpudWxsLGlucHV0Q2xhc3M6bnVsbCxjc3NQcm9wczp7dXNlclNlbGVjdDpcIm5vbmVcIix0b3VjaFNlbGVjdDpcIm5vbmVcIix0b3VjaENhbGxvdXQ6XCJub25lXCIsY29udGVudFpvb21pbmc6XCJub25lXCIsdXNlckRyYWc6XCJub25lXCIsdGFwSGlnaGxpZ2h0Q29sb3I6XCJyZ2JhKDAsMCwwLDApXCJ9fSxyeT1bW2l5LHtlbmFibGU6ITF9XSxbZXkse2VuYWJsZTohMX0sW1wicm90YXRlXCJdXSxbdHkse2RpcmVjdGlvbjo2fV0sW0pnLHtkaXJlY3Rpb246Nn0sW1wic3dpcGVcIl1dLFskZ10sWyRnLHtldmVudDpcImRvdWJsZXRhcFwiLHRhcHM6Mn0sW1widGFwXCJdXSxbb3ldXTtmdW5jdGlvbiBzeSh0LGUpe3ZhciBpLG89dC5lbGVtZW50O28uc3R5bGUmJihzZyh0Lm9wdGlvbnMuY3NzUHJvcHMsKGZ1bmN0aW9uKG4scil7aT1IdihvLnN0eWxlLHIpLGU/KHQub2xkQ3NzUHJvcHNbaV09by5zdHlsZVtpXSxvLnN0eWxlW2ldPW4pOm8uc3R5bGVbaV09dC5vbGRDc3NQcm9wc1tpXXx8XCJcIn0pKSxlfHwodC5vbGRDc3NQcm9wcz17fSkpfXZhciBheT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt2YXIgaSxvPXRoaXM7dGhpcy5vcHRpb25zPUZ2KHt9LG55LGV8fHt9KSx0aGlzLm9wdGlvbnMuaW5wdXRUYXJnZXQ9dGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0fHx0LHRoaXMuaGFuZGxlcnM9e30sdGhpcy5zZXNzaW9uPXt9LHRoaXMucmVjb2duaXplcnM9W10sdGhpcy5vbGRDc3NQcm9wcz17fSx0aGlzLmVsZW1lbnQ9dCx0aGlzLmlucHV0PW5ldygoaT10aGlzKS5vcHRpb25zLmlucHV0Q2xhc3N8fChRdj9NZzpKdj96Zzpadj9WZzpqZykpKGksbWcpLHRoaXMudG91Y2hBY3Rpb249bmV3IGRnKHRoaXMsdGhpcy5vcHRpb25zLnRvdWNoQWN0aW9uKSxzeSh0aGlzLCEwKSxzZyh0aGlzLm9wdGlvbnMucmVjb2duaXplcnMsKGZ1bmN0aW9uKHQpe3ZhciBlPW8uYWRkKG5ldyB0WzBdKHRbMV0pKTt0WzJdJiZlLnJlY29nbml6ZVdpdGgodFsyXSksdFszXSYmZS5yZXF1aXJlRmFpbHVyZSh0WzNdKX0pLHRoaXMpfXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLnNldD1mdW5jdGlvbih0KXtyZXR1cm4gRnYodGhpcy5vcHRpb25zLHQpLHQudG91Y2hBY3Rpb24mJnRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCksdC5pbnB1dFRhcmdldCYmKHRoaXMuaW5wdXQuZGVzdHJveSgpLHRoaXMuaW5wdXQudGFyZ2V0PXQuaW5wdXRUYXJnZXQsdGhpcy5pbnB1dC5pbml0KCkpLHRoaXN9LGUuc3RvcD1mdW5jdGlvbih0KXt0aGlzLnNlc3Npb24uc3RvcHBlZD10PzI6MX0sZS5yZWNvZ25pemU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zZXNzaW9uO2lmKCFlLnN0b3BwZWQpe3ZhciBpO3RoaXMudG91Y2hBY3Rpb24ucHJldmVudERlZmF1bHRzKHQpO3ZhciBvPXRoaXMucmVjb2duaXplcnMsbj1lLmN1clJlY29nbml6ZXI7KCFufHxuJiY4Jm4uc3RhdGUpJiYoZS5jdXJSZWNvZ25pemVyPW51bGwsbj1udWxsKTtmb3IodmFyIHI9MDtyPG8ubGVuZ3RoOylpPW9bcl0sMj09PWUuc3RvcHBlZHx8biYmaSE9PW4mJiFpLmNhblJlY29nbml6ZVdpdGgobik/aS5yZXNldCgpOmkucmVjb2duaXplKHQpLCFuJiYxNCZpLnN0YXRlJiYoZS5jdXJSZWNvZ25pemVyPWksbj1pKSxyKyt9fSxlLmdldD1mdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgS2cpcmV0dXJuIHQ7Zm9yKHZhciBlPXRoaXMucmVjb2duaXplcnMsaT0wO2k8ZS5sZW5ndGg7aSsrKWlmKGVbaV0ub3B0aW9ucy5ldmVudD09PXQpcmV0dXJuIGVbaV07cmV0dXJuIG51bGx9LGUuYWRkPWZ1bmN0aW9uKHQpe2lmKHFnKHQsXCJhZGRcIix0aGlzKSlyZXR1cm4gdGhpczt2YXIgZT10aGlzLmdldCh0Lm9wdGlvbnMuZXZlbnQpO3JldHVybiBlJiZ0aGlzLnJlbW92ZShlKSx0aGlzLnJlY29nbml6ZXJzLnB1c2godCksdC5tYW5hZ2VyPXRoaXMsdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKSx0fSxlLnJlbW92ZT1mdW5jdGlvbih0KXtpZihxZyh0LFwicmVtb3ZlXCIsdGhpcykpcmV0dXJuIHRoaXM7dmFyIGU9dGhpcy5nZXQodCk7aWYodCl7dmFyIGk9dGhpcy5yZWNvZ25pemVycyxvPUVnKGksZSk7LTEhPT1vJiYoaS5zcGxpY2UobywxKSx0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpKX1yZXR1cm4gdGhpc30sZS5vbj1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXR8fHZvaWQgMD09PWUpcmV0dXJuIHRoaXM7dmFyIGk9dGhpcy5oYW5kbGVycztyZXR1cm4gc2coYmcodCksKGZ1bmN0aW9uKHQpe2lbdF09aVt0XXx8W10saVt0XS5wdXNoKGUpfSkpLHRoaXN9LGUub2ZmPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dClyZXR1cm4gdGhpczt2YXIgaT10aGlzLmhhbmRsZXJzO3JldHVybiBzZyhiZyh0KSwoZnVuY3Rpb24odCl7ZT9pW3RdJiZpW3RdLnNwbGljZShFZyhpW3RdLGUpLDEpOmRlbGV0ZSBpW3RdfSkpLHRoaXN9LGUuZW1pdD1mdW5jdGlvbih0LGUpe3RoaXMub3B0aW9ucy5kb21FdmVudHMmJmZ1bmN0aW9uKHQsZSl7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtpLmluaXRFdmVudCh0LCEwLCEwKSxpLmdlc3R1cmU9ZSxlLnRhcmdldC5kaXNwYXRjaEV2ZW50KGkpfSh0LGUpO3ZhciBpPXRoaXMuaGFuZGxlcnNbdF0mJnRoaXMuaGFuZGxlcnNbdF0uc2xpY2UoKTtpZihpJiZpLmxlbmd0aCl7ZS50eXBlPXQsZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe2Uuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKX07Zm9yKHZhciBvPTA7bzxpLmxlbmd0aDspaVtvXShlKSxvKyt9fSxlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQmJnN5KHRoaXMsITEpLHRoaXMuaGFuZGxlcnM9e30sdGhpcy5zZXNzaW9uPXt9LHRoaXMuaW5wdXQuZGVzdHJveSgpLHRoaXMuZWxlbWVudD1udWxsfSx0fSgpLGh5PXt0b3VjaHN0YXJ0OjEsdG91Y2htb3ZlOjIsdG91Y2hlbmQ6NCx0b3VjaGNhbmNlbDo4fSxkeT1cInRvdWNoc3RhcnRcIixseT1cInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXCIsY3k9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciBpLG89ZS5wcm90b3R5cGU7cmV0dXJuIG8uZXZUYXJnZXQ9ZHksby5ldldpbj1seSwoaT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpcykuc3RhcnRlZD0hMSxpfXJldHVybiBCdihlLHQpLGUucHJvdG90eXBlLmhhbmRsZXI9ZnVuY3Rpb24odCl7dmFyIGU9aHlbdC50eXBlXTtpZigxPT09ZSYmKHRoaXMuc3RhcnRlZD0hMCksdGhpcy5zdGFydGVkKXt2YXIgaT11eS5jYWxsKHRoaXMsdCxlKTsxMiZlJiZpWzBdLmxlbmd0aC1pWzFdLmxlbmd0aD09MCYmKHRoaXMuc3RhcnRlZD0hMSksdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsZSx7cG9pbnRlcnM6aVswXSxjaGFuZ2VkUG9pbnRlcnM6aVsxXSxwb2ludGVyVHlwZTp0ZyxzcmNFdmVudDp0fSl9fSxlfSh4Zyk7ZnVuY3Rpb24gdXkodCxlKXt2YXIgaT1QZyh0LnRvdWNoZXMpLG89UGcodC5jaGFuZ2VkVG91Y2hlcyk7cmV0dXJuIDEyJmUmJihpPURnKGkuY29uY2F0KG8pLFwiaWRlbnRpZmllclwiLCEwKSksW2ksb119ZnVuY3Rpb24gZnkodCxlLGkpe3ZhciBvPVwiREVQUkVDQVRFRCBNRVRIT0Q6IFwiK2UrXCJcXG5cIitpK1wiIEFUIFxcblwiO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPW5ldyBFcnJvcihcImdldC1zdGFjay10cmFjZVwiKSxpPWUmJmUuc3RhY2s/ZS5zdGFjay5yZXBsYWNlKC9eW15cXChdKz9bXFxuJF0vZ20sXCJcIikucmVwbGFjZSgvXlxccythdFxccysvZ20sXCJcIikucmVwbGFjZSgvXk9iamVjdC48YW5vbnltb3VzPlxccypcXCgvZ20sXCJ7YW5vbnltb3VzfSgpQFwiKTpcIlVua25vd24gU3RhY2sgVHJhY2VcIixuPXdpbmRvdy5jb25zb2xlJiYod2luZG93LmNvbnNvbGUud2Fybnx8d2luZG93LmNvbnNvbGUubG9nKTtyZXR1cm4gbiYmbi5jYWxsKHdpbmRvdy5jb25zb2xlLG8saSksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fXZhciBweT1meSgoZnVuY3Rpb24odCxlLGkpe2Zvcih2YXIgbz1PYmplY3Qua2V5cyhlKSxuPTA7bjxvLmxlbmd0aDspKCFpfHxpJiZ2b2lkIDA9PT10W29bbl1dKSYmKHRbb1tuXV09ZVtvW25dXSksbisrO3JldHVybiB0fSksXCJleHRlbmRcIixcIlVzZSBgYXNzaWduYC5cIiksdnk9ZnkoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHB5KHQsZSwhMCl9KSxcIm1lcmdlXCIsXCJVc2UgYGFzc2lnbmAuXCIpO2Z1bmN0aW9uIGd5KHQsZSxpKXt2YXIgbyxuPWUucHJvdG90eXBlOyhvPXQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobikpLmNvbnN0cnVjdG9yPXQsby5fc3VwZXI9bixpJiZGdihvLGkpfWZ1bmN0aW9uIHl5KHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX12YXIgbXk9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT17fSksbmV3IGF5KHQsRHYoe3JlY29nbml6ZXJzOnJ5LmNvbmNhdCgpfSxlKSl9O3JldHVybiB0LlZFUlNJT049XCIyLjAuMTctcmNcIix0LkRJUkVDVElPTl9BTEw9MzAsdC5ESVJFQ1RJT05fRE9XTj1pZyx0LkRJUkVDVElPTl9MRUZUPTIsdC5ESVJFQ1RJT05fUklHSFQ9NCx0LkRJUkVDVElPTl9VUD04LHQuRElSRUNUSU9OX0hPUklaT05UQUw9Nix0LkRJUkVDVElPTl9WRVJUSUNBTD1vZyx0LkRJUkVDVElPTl9OT05FPTEsdC5ESVJFQ1RJT05fRE9XTj1pZyx0LklOUFVUX1NUQVJUPTEsdC5JTlBVVF9NT1ZFPTIsdC5JTlBVVF9FTkQ9NCx0LklOUFVUX0NBTkNFTD04LHQuU1RBVEVfUE9TU0lCTEU9MSx0LlNUQVRFX0JFR0FOPTIsdC5TVEFURV9DSEFOR0VEPTQsdC5TVEFURV9FTkRFRD04LHQuU1RBVEVfUkVDT0dOSVpFRD04LHQuU1RBVEVfQ0FOQ0VMTEVEPTE2LHQuU1RBVEVfRkFJTEVEPVVnLHQuTWFuYWdlcj1heSx0LklucHV0PXhnLHQuVG91Y2hBY3Rpb249ZGcsdC5Ub3VjaElucHV0PXpnLHQuTW91c2VJbnB1dD1qZyx0LlBvaW50ZXJFdmVudElucHV0PU1nLHQuVG91Y2hNb3VzZUlucHV0PVZnLHQuU2luZ2xlVG91Y2hJbnB1dD1jeSx0LlJlY29nbml6ZXI9S2csdC5BdHRyUmVjb2duaXplcj1aZyx0LlRhcD0kZyx0LlBhbj1KZyx0LlN3aXBlPXR5LHQuUGluY2g9ZXksdC5Sb3RhdGU9aXksdC5QcmVzcz1veSx0Lm9uPXdnLHQub2ZmPWtnLHQuZWFjaD1zZyx0Lm1lcmdlPXZ5LHQuZXh0ZW5kPXB5LHQuYmluZEZuPXl5LHQuYXNzaWduPUZ2LHQuaW5oZXJpdD1neSx0LmJpbmRGbj15eSx0LnByZWZpeGVkPUh2LHQudG9BcnJheT1QZyx0LmluQXJyYXk9RWcsdC51bmlxdWVBcnJheT1EZyx0LnNwbGl0U3RyPWJnLHQuYm9vbE9yRm49YWcsdC5oYXNQYXJlbnQ9bGcsdC5hZGRFdmVudExpc3RlbmVycz13Zyx0LnJlbW92ZUV2ZW50TGlzdGVuZXJzPWtnLHQuZGVmYXVsdHM9RnYoe30sbnkse3ByZXNldDpyeX0pLHR9KCksYnk9bXk7ZnVuY3Rpb24gd3kodCxlKXt2YXIgaT12b2lkIDAhPT10dSYmb2godCl8fHRbXCJAQGl0ZXJhdG9yXCJdO2lmKCFpKXtpZihodSh0KXx8KGk9ZnVuY3Rpb24odCxlKXt2YXIgaTtpZighdClyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpcmV0dXJuIGt5KHQsZSk7dmFyIG89YXUoaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpLmNhbGwoaSw4LC0xKTtcIk9iamVjdFwiPT09byYmdC5jb25zdHJ1Y3RvciYmKG89dC5jb25zdHJ1Y3Rvci5uYW1lKTtpZihcIk1hcFwiPT09b3x8XCJTZXRcIj09PW8pcmV0dXJuIGphKHQpO2lmKFwiQXJndW1lbnRzXCI9PT1vfHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChvKSlyZXR1cm4ga3kodCxlKX0odCkpfHxlJiZ0JiZcIm51bWJlclwiPT10eXBlb2YgdC5sZW5ndGgpe2kmJih0PWkpO3ZhciBvPTAsbj1mdW5jdGlvbigpe307cmV0dXJue3M6bixuOmZ1bmN0aW9uKCl7cmV0dXJuIG8+PXQubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTp0W28rK119fSxlOmZ1bmN0aW9uKHQpe3Rocm93IHR9LGY6bn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciByLHM9ITAsYT0hMTtyZXR1cm57czpmdW5jdGlvbigpe2k9aS5jYWxsKHQpfSxuOmZ1bmN0aW9uKCl7dmFyIHQ9aS5uZXh0KCk7cmV0dXJuIHM9dC5kb25lLHR9LGU6ZnVuY3Rpb24odCl7YT0hMCxyPXR9LGY6ZnVuY3Rpb24oKXt0cnl7c3x8bnVsbD09aS5yZXR1cm58fGkucmV0dXJuKCl9ZmluYWxseXtpZihhKXRocm93IHJ9fX19ZnVuY3Rpb24ga3kodCxlKXsobnVsbD09ZXx8ZT50Lmxlbmd0aCkmJihlPXQubGVuZ3RoKTtmb3IodmFyIGk9MCxvPW5ldyBBcnJheShlKTtpPGU7aSsrKW9baV09dFtpXTtyZXR1cm4gb31mdW5jdGlvbiBfeSgpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLGk9MDtpPHQ7aSsrKWVbaV09YXJndW1lbnRzW2ldO3JldHVybiB4eShlLmxlbmd0aD9lOlt4dSgpXSl9ZnVuY3Rpb24geHkodCl7dmFyIGU9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9RXkoKSxlPXQoXCIgXCIpLGk9dChcIiBcIiksbz10KFwiIFwiKSxuPTA7bjxhcmd1bWVudHMubGVuZ3RoO24rKykoZS09dChuPDB8fGFyZ3VtZW50cy5sZW5ndGg8PW4/dm9pZCAwOmFyZ3VtZW50c1tuXSkpPDAmJihlKz0xKSwoaS09dChuPDB8fGFyZ3VtZW50cy5sZW5ndGg8PW4/dm9pZCAwOmFyZ3VtZW50c1tuXSkpPDAmJihpKz0xKSwoby09dChuPDB8fGFyZ3VtZW50cy5sZW5ndGg8PW4/dm9pZCAwOmFyZ3VtZW50c1tuXSkpPDAmJihvKz0xKTtyZXR1cm5bZSxpLG9dfSh0KSxpPSRjKGUsMyksbz1pWzBdLG49aVsxXSxyPWlbMl0scz0xLGE9ZnVuY3Rpb24oKXt2YXIgdD0yMDkxNjM5Km8rMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMCpzO3JldHVybiBvPW4sbj1yLHI9dC0ocz0wfHQpfTtyZXR1cm4gYS51aW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gNDI5NDk2NzI5NiphKCl9LGEuZnJhY3Q1Mz1mdW5jdGlvbigpe3JldHVybiBhKCkrMTExMDIyMzAyNDYyNTE1NjVlLTMyKigyMDk3MTUyKmEoKXwwKX0sYS5hbGdvcml0aG09XCJBbGVhXCIsYS5zZWVkPXQsYS52ZXJzaW9uPVwiMC45XCIsYX1mdW5jdGlvbiBFeSgpe3ZhciB0PTQwMjI4NzExOTc7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgaT1lLnRvU3RyaW5nKCksbz0wO288aS5sZW5ndGg7bysrKXt2YXIgbj0uMDI1MTk2MDMyODI0MTY5MzgqKHQrPWkuY2hhckNvZGVBdChvKSk7bi09dD1uPj4+MCx0PShuKj10KT4+PjAsdCs9NDI5NDk2NzI5Nioobi09dCl9cmV0dXJuIDIuMzI4MzA2NDM2NTM4Njk2M2UtMTAqKHQ+Pj4wKX19dHUoXCJERUxFVEVcIik7dmFyIE95PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93LkhhbW1lcnx8Ynk6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbigpe307cmV0dXJue29uOnQsb2ZmOnQsZGVzdHJveTp0LGVtaXQ6dCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57c2V0OnR9fX19KCl9O2Z1bmN0aW9uIEN5KHQpe3ZhciBlLGk9dGhpczt0aGlzLl9jbGVhbnVwUXVldWU9W10sdGhpcy5hY3RpdmU9ITEsdGhpcy5fZG9tPXtjb250YWluZXI6dCxvdmVybGF5OmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIil9LHRoaXMuX2RvbS5vdmVybGF5LmNsYXNzTGlzdC5hZGQoXCJ2aXMtb3ZlcmxheVwiKSx0aGlzLl9kb20uY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2RvbS5vdmVybGF5KSx0aGlzLl9jbGVhbnVwUXVldWUucHVzaCgoZnVuY3Rpb24oKXtpLl9kb20ub3ZlcmxheS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGkuX2RvbS5vdmVybGF5KX0pKTt2YXIgbz1PeSh0aGlzLl9kb20ub3ZlcmxheSk7by5vbihcInRhcFwiLEZvKGU9dGhpcy5fb25UYXBPdmVybGF5KS5jYWxsKGUsdGhpcykpLHRoaXMuX2NsZWFudXBRdWV1ZS5wdXNoKChmdW5jdGlvbigpe28uZGVzdHJveSgpfSkpO3ZhciBuPVtcInRhcFwiLFwiZG91YmxldGFwXCIsXCJwcmVzc1wiLFwicGluY2hcIixcInBhblwiLFwicGFuc3RhcnRcIixcInBhbm1vdmVcIixcInBhbmVuZFwiXTtGdShuKS5jYWxsKG4sKGZ1bmN0aW9uKHQpe28ub24odCwoZnVuY3Rpb24odCl7dC5zcmNFdmVudC5zdG9wUHJvcGFnYXRpb24oKX0pKX0pKSxkb2N1bWVudCYmZG9jdW1lbnQuYm9keSYmKHRoaXMuX29uQ2xpY2s9ZnVuY3Rpb24oZSl7KGZ1bmN0aW9uKHQsZSl7Zm9yKDt0Oyl7aWYodD09PWUpcmV0dXJuITA7dD10LnBhcmVudE5vZGV9cmV0dXJuITF9KShlLnRhcmdldCx0KXx8aS5kZWFjdGl2YXRlKCl9LGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5fb25DbGljayksdGhpcy5fY2xlYW51cFF1ZXVlLnB1c2goKGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIixpLl9vbkNsaWNrKX0pKSksdGhpcy5fZXNjTGlzdGVuZXI9ZnVuY3Rpb24odCl7KFwia2V5XCJpbiB0P1wiRXNjYXBlXCI9PT10LmtleToyNz09PXQua2V5Q29kZSkmJmkuZGVhY3RpdmF0ZSgpfX1WbyhDeS5wcm90b3R5cGUpLEN5LmN1cnJlbnQ9bnVsbCxDeS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciB0LGU7dGhpcy5kZWFjdGl2YXRlKCk7dmFyIGksbz13eShVdSh0PXVmKGU9dGhpcy5fY2xlYW51cFF1ZXVlKS5jYWxsKGUsMCkpLmNhbGwodCkpO3RyeXtmb3Ioby5zKCk7IShpPW8ubigpKS5kb25lOyl7KDAsaS52YWx1ZSkoKX19Y2F0Y2godCl7by5lKHQpfWZpbmFsbHl7by5mKCl9fSxDeS5wcm90b3R5cGUuYWN0aXZhdGU9ZnVuY3Rpb24oKXtDeS5jdXJyZW50JiZDeS5jdXJyZW50LmRlYWN0aXZhdGUoKSxDeS5jdXJyZW50PXRoaXMsdGhpcy5hY3RpdmU9ITAsdGhpcy5fZG9tLm92ZXJsYXkuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLl9kb20uY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ2aXMtYWN0aXZlXCIpLHRoaXMuZW1pdChcImNoYW5nZVwiKSx0aGlzLmVtaXQoXCJhY3RpdmF0ZVwiKSxkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5fZXNjTGlzdGVuZXIpfSxDeS5wcm90b3R5cGUuZGVhY3RpdmF0ZT1mdW5jdGlvbigpe3RoaXMuYWN0aXZlPSExLHRoaXMuX2RvbS5vdmVybGF5LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHRoaXMuX2RvbS5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcInZpcy1hY3RpdmVcIiksZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuX2VzY0xpc3RlbmVyKSx0aGlzLmVtaXQoXCJjaGFuZ2VcIiksdGhpcy5lbWl0KFwiZGVhY3RpdmF0ZVwiKX0sQ3kucHJvdG90eXBlLl9vblRhcE92ZXJsYXk9ZnVuY3Rpb24odCl7dGhpcy5hY3RpdmF0ZSgpLHQuc3JjRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCl9O3ZhciBTeT0vXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLFR5PS9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2ksTXk9L15yZ2JcXCggKigxP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSAqLCAqKDE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pICosICooMT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkgKlxcKSQvaSxQeT0vXnJnYmFcXCggKigxP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSAqLCAqKDE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pICosICooMT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkgKiwgKihbMDFdfDA/XFwuXFxkKykgKlxcKSQvaTtmdW5jdGlvbiBEeSh0KXtpZih0KWZvcig7ITA9PT10Lmhhc0NoaWxkTm9kZXMoKTspe3ZhciBlPXQuZmlyc3RDaGlsZDtlJiYoRHkoZSksdC5yZW1vdmVDaGlsZChlKSl9fWZ1bmN0aW9uIEJ5KHQpe3JldHVybiB0IGluc3RhbmNlb2YgU3RyaW5nfHxcInN0cmluZ1wiPT10eXBlb2YgdH1mdW5jdGlvbiBJeSh0KXtyZXR1cm5cIm9iamVjdFwiPT09UWModCkmJm51bGwhPT10fWZ1bmN0aW9uIHp5KHQsZSxpLG8pe3ZhciBuPSExOyEwPT09byYmKG49bnVsbD09PWVbaV0mJnZvaWQgMCE9PXRbaV0pLG4/ZGVsZXRlIHRbaV06dFtpXT1lW2ldfWZ1bmN0aW9uIEZ5KHQsZSl7dmFyIGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtmb3IodmFyIG8gaW4gdClpZih2b2lkIDAhPT1lW29dKWlmKG51bGw9PT1lW29dfHxcIm9iamVjdFwiIT09UWMoZVtvXSkpenkodCxlLG8saSk7ZWxzZXt2YXIgbj10W29dLHI9ZVtvXTtJeShuKSYmSXkocikmJkZ5KG4scixpKX19ZnVuY3Rpb24gTnkodCxlLGkpe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdJiZhcmd1bWVudHNbM107aWYoaHUoaSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5cyBhcmUgbm90IHN1cHBvcnRlZCBieSBkZWVwRXh0ZW5kXCIpO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpLHIpKWlmKGlbcl0mJmlbcl0uY29uc3RydWN0b3I9PT1PYmplY3Qpdm9pZCAwPT09ZVtyXSYmKGVbcl09e30pLGVbcl0uY29uc3RydWN0b3I9PT1PYmplY3Q/UnkoZVtyXSxpW3JdLCExLG8pOnp5KGUsaSxyLG8pO2Vsc2V7aWYoaHUoaVtyXSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFycmF5cyBhcmUgbm90IHN1cHBvcnRlZCBieSBkZWVwRXh0ZW5kXCIpO3p5KGUsaSxyLG8pfX1yZXR1cm4gZX1mdW5jdGlvbiBBeSh0LGUsaSl7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10mJmFyZ3VtZW50c1szXTtpZihodShpKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IGRlZXBFeHRlbmRcIik7Zm9yKHZhciBuIGluIGkpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGksbikmJiF6Zih0KS5jYWxsKHQsbikpaWYoaVtuXSYmaVtuXS5jb25zdHJ1Y3Rvcj09PU9iamVjdCl2b2lkIDA9PT1lW25dJiYoZVtuXT17fSksZVtuXS5jb25zdHJ1Y3Rvcj09PU9iamVjdD9SeShlW25dLGlbbl0pOnp5KGUsaSxuLG8pO2Vsc2UgaWYoaHUoaVtuXSkpe2Vbbl09W107Zm9yKHZhciByPTA7cjxpW25dLmxlbmd0aDtyKyspZVtuXS5wdXNoKGlbbl1bcl0pfWVsc2UgenkoZSxpLG4sbyk7cmV0dXJuIGV9ZnVuY3Rpb24gUnkodCxlKXt2YXIgaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10mJmFyZ3VtZW50c1szXTtmb3IodmFyIG4gaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKXx8ITA9PT1pKWlmKFwib2JqZWN0XCI9PT1RYyhlW25dKSYmbnVsbCE9PWVbbl0mJmpmKGVbbl0pPT09T2JqZWN0LnByb3RvdHlwZSl2b2lkIDA9PT10W25dP3Rbbl09Unkoe30sZVtuXSxpKTpcIm9iamVjdFwiPT09UWModFtuXSkmJm51bGwhPT10W25dJiZqZih0W25dKT09PU9iamVjdC5wcm90b3R5cGU/UnkodFtuXSxlW25dLGkpOnp5KHQsZSxuLG8pO2Vsc2UgaWYoaHUoZVtuXSkpe3ZhciByO3Rbbl09YXUocj1lW25dKS5jYWxsKHIpfWVsc2UgenkodCxlLG4sbyk7cmV0dXJuIHR9ZnVuY3Rpb24gankodCxlKXt2YXIgaTtyZXR1cm4gc3UoaT1bXSkuY2FsbChpLEpjKHQpLFtlXSl9ZnVuY3Rpb24gTHkodCl7cmV0dXJuIGF1KHQpLmNhbGwodCl9ZnVuY3Rpb24gSHkodCl7cmV0dXJuIHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wfWZ1bmN0aW9uIFd5KHQsZSl7aWYoaHUodCkpZm9yKHZhciBpPXQubGVuZ3RoLG89MDtvPGk7bysrKWUodFtvXSxvLHQpO2Vsc2UgZm9yKHZhciBuIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbikmJmUodFtuXSxuLHQpfWZ1bmN0aW9uIFZ5KHQpe3ZhciBlO3N3aXRjaCh0Lmxlbmd0aCl7Y2FzZSAzOmNhc2UgNDpyZXR1cm4oZT1UeS5leGVjKHQpKT97cjpfcChlWzFdK2VbMV0sMTYpLGc6X3AoZVsyXStlWzJdLDE2KSxiOl9wKGVbM10rZVszXSwxNil9Om51bGw7Y2FzZSA2OmNhc2UgNzpyZXR1cm4oZT1TeS5leGVjKHQpKT97cjpfcChlWzFdLDE2KSxnOl9wKGVbMl0sMTYpLGI6X3AoZVszXSwxNil9Om51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gcXkodCxlKXtpZih6Zih0KS5jYWxsKHQsXCJyZ2JhXCIpKXJldHVybiB0O2lmKHpmKHQpLmNhbGwodCxcInJnYlwiKSl7dmFyIGk9dC5zdWJzdHIoenAodCkuY2FsbCh0LFwiKFwiKSsxKS5yZXBsYWNlKFwiKVwiLFwiXCIpLnNwbGl0KFwiLFwiKTtyZXR1cm5cInJnYmEoXCIraVswXStcIixcIitpWzFdK1wiLFwiK2lbMl0rXCIsXCIrZStcIilcIn12YXIgbz1WeSh0KTtyZXR1cm4gbnVsbD09bz90OlwicmdiYShcIitvLnIrXCIsXCIrby5nK1wiLFwiK28uYitcIixcIitlK1wiKVwifWZ1bmN0aW9uIFV5KHQsZSxpKXt2YXIgbztyZXR1cm5cIiNcIithdShvPSgoMTw8MjQpKyh0PDwxNikrKGU8PDgpK2kpLnRvU3RyaW5nKDE2KSkuY2FsbChvLDEpfWZ1bmN0aW9uIFl5KHQsZSl7aWYoQnkodCkpe3ZhciBpPXQ7aWYoWnkoaSkpe3ZhciBvLG49dnUobz1pLnN1YnN0cig0KS5zdWJzdHIoMCxpLmxlbmd0aC01KS5zcGxpdChcIixcIikpLmNhbGwobywoZnVuY3Rpb24odCl7cmV0dXJuIF9wKHQpfSkpO2k9VXkoblswXSxuWzFdLG5bMl0pfWlmKCEwPT09JHkoaSkpe3ZhciByPWZ1bmN0aW9uKHQpe3ZhciBlPVZ5KHQpO2lmKCFlKXRocm93IG5ldyBUeXBlRXJyb3IoXCInXCIuY29uY2F0KHQsXCInIGlzIG5vdCBhIHZhbGlkIGNvbG9yLlwiKSk7cmV0dXJuIFh5KGUucixlLmcsZS5iKX0oaSkscz17aDpyLmgsczouOCpyLnMsdjpNYXRoLm1pbigxLDEuMDIqci52KX0sYT17aDpyLmgsczpNYXRoLm1pbigxLDEuMjUqci5zKSx2Oi44KnIudn0saD1LeShhLmgsYS5zLGEudiksZD1LeShzLmgscy5zLHMudik7cmV0dXJue2JhY2tncm91bmQ6aSxib3JkZXI6aCxoaWdobGlnaHQ6e2JhY2tncm91bmQ6ZCxib3JkZXI6aH0saG92ZXI6e2JhY2tncm91bmQ6ZCxib3JkZXI6aH19fXJldHVybntiYWNrZ3JvdW5kOmksYm9yZGVyOmksaGlnaGxpZ2h0OntiYWNrZ3JvdW5kOmksYm9yZGVyOml9LGhvdmVyOntiYWNrZ3JvdW5kOmksYm9yZGVyOml9fX1yZXR1cm4gZT97YmFja2dyb3VuZDp0LmJhY2tncm91bmR8fGUuYmFja2dyb3VuZCxib3JkZXI6dC5ib3JkZXJ8fGUuYm9yZGVyLGhpZ2hsaWdodDpCeSh0LmhpZ2hsaWdodCk/e2JvcmRlcjp0LmhpZ2hsaWdodCxiYWNrZ3JvdW5kOnQuaGlnaGxpZ2h0fTp7YmFja2dyb3VuZDp0LmhpZ2hsaWdodCYmdC5oaWdobGlnaHQuYmFja2dyb3VuZHx8ZS5oaWdobGlnaHQuYmFja2dyb3VuZCxib3JkZXI6dC5oaWdobGlnaHQmJnQuaGlnaGxpZ2h0LmJvcmRlcnx8ZS5oaWdobGlnaHQuYm9yZGVyfSxob3ZlcjpCeSh0LmhvdmVyKT97Ym9yZGVyOnQuaG92ZXIsYmFja2dyb3VuZDp0LmhvdmVyfTp7Ym9yZGVyOnQuaG92ZXImJnQuaG92ZXIuYm9yZGVyfHxlLmhvdmVyLmJvcmRlcixiYWNrZ3JvdW5kOnQuaG92ZXImJnQuaG92ZXIuYmFja2dyb3VuZHx8ZS5ob3Zlci5iYWNrZ3JvdW5kfX06e2JhY2tncm91bmQ6dC5iYWNrZ3JvdW5kfHx2b2lkIDAsYm9yZGVyOnQuYm9yZGVyfHx2b2lkIDAsaGlnaGxpZ2h0OkJ5KHQuaGlnaGxpZ2h0KT97Ym9yZGVyOnQuaGlnaGxpZ2h0LGJhY2tncm91bmQ6dC5oaWdobGlnaHR9OntiYWNrZ3JvdW5kOnQuaGlnaGxpZ2h0JiZ0LmhpZ2hsaWdodC5iYWNrZ3JvdW5kfHx2b2lkIDAsYm9yZGVyOnQuaGlnaGxpZ2h0JiZ0LmhpZ2hsaWdodC5ib3JkZXJ8fHZvaWQgMH0saG92ZXI6QnkodC5ob3Zlcik/e2JvcmRlcjp0LmhvdmVyLGJhY2tncm91bmQ6dC5ob3Zlcn06e2JvcmRlcjp0LmhvdmVyJiZ0LmhvdmVyLmJvcmRlcnx8dm9pZCAwLGJhY2tncm91bmQ6dC5ob3ZlciYmdC5ob3Zlci5iYWNrZ3JvdW5kfHx2b2lkIDB9fX1mdW5jdGlvbiBYeSh0LGUsaSl7dC89MjU1LGUvPTI1NSxpLz0yNTU7dmFyIG89TWF0aC5taW4odCxNYXRoLm1pbihlLGkpKSxuPU1hdGgubWF4KHQsTWF0aC5tYXgoZSxpKSk7cmV0dXJuIG89PT1uP3toOjAsczowLHY6b306e2g6NjAqKCh0PT09bz8zOmk9PT1vPzE6NSktKHQ9PT1vP2UtaTppPT09bz90LWU6aS10KS8obi1vKSkvMzYwLHM6KG4tbykvbix2Om59fWZ1bmN0aW9uIEd5KHQsZSxpKXt2YXIgbyxuLHIscz1NYXRoLmZsb29yKDYqdCksYT02KnQtcyxoPWkqKDEtZSksZD1pKigxLWEqZSksbD1pKigxLSgxLWEpKmUpO3N3aXRjaChzJTYpe2Nhc2UgMDpvPWksbj1sLHI9aDticmVhaztjYXNlIDE6bz1kLG49aSxyPWg7YnJlYWs7Y2FzZSAyOm89aCxuPWkscj1sO2JyZWFrO2Nhc2UgMzpvPWgsbj1kLHI9aTticmVhaztjYXNlIDQ6bz1sLG49aCxyPWk7YnJlYWs7Y2FzZSA1Om89aSxuPWgscj1kfXJldHVybntyOk1hdGguZmxvb3IoMjU1Km8pLGc6TWF0aC5mbG9vcigyNTUqbiksYjpNYXRoLmZsb29yKDI1NSpyKX19ZnVuY3Rpb24gS3kodCxlLGkpe3ZhciBvPUd5KHQsZSxpKTtyZXR1cm4gVXkoby5yLG8uZyxvLmIpfWZ1bmN0aW9uICR5KHQpe3JldHVybi8oXiNbMC05QS1GXXs2fSQpfCheI1swLTlBLUZdezN9JCkvaS50ZXN0KHQpfWZ1bmN0aW9uIFp5KHQpe3JldHVybiBNeS50ZXN0KHQpfWZ1bmN0aW9uIFF5KHQpe3JldHVybiBQeS50ZXN0KHQpfWZ1bmN0aW9uIEp5KHQpe2lmKG51bGw9PT10fHxcIm9iamVjdFwiIT09UWModCkpcmV0dXJuIG51bGw7aWYodCBpbnN0YW5jZW9mIEVsZW1lbnQpcmV0dXJuIHQ7dmFyIGU9SHAodCk7Zm9yKHZhciBpIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsaSkmJlwib2JqZWN0XCI9PVFjKHRbaV0pJiYoZVtpXT1KeSh0W2ldKSk7cmV0dXJuIGV9ZnVuY3Rpb24gdG0odCxlLGkpe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTp7fSxuPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10fSxyPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09PVFjKHQpfSxzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiB0KWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpKXJldHVybiExO3JldHVybiEwfTtpZighcih0KSl0aHJvdyBuZXcgRXJyb3IoXCJQYXJhbWV0ZXIgbWVyZ2VUYXJnZXQgbXVzdCBiZSBhbiBvYmplY3RcIik7aWYoIXIoZSkpdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1ldGVyIG9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3RcIik7aWYoIW4oaSkpdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1ldGVyIG9wdGlvbiBtdXN0IGhhdmUgYSB2YWx1ZVwiKTtpZighcihvKSl0aHJvdyBuZXcgRXJyb3IoXCJQYXJhbWV0ZXIgZ2xvYmFsT3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdFwiKTt2YXIgYT1mdW5jdGlvbih0LGUsaSl7cih0W2ldKXx8KHRbaV09e30pO3ZhciBvPWVbaV0sbj10W2ldO2Zvcih2YXIgcyBpbiBvKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLHMpJiYobltzXT1vW3NdKX0saD1lW2ldLGQ9cihvKSYmIXMobyksbD1kP29baV06dm9pZCAwLGM9bD9sLmVuYWJsZWQ6dm9pZCAwO2lmKHZvaWQgMCE9PWgpe2lmKFwiYm9vbGVhblwiPT10eXBlb2YgaClyZXR1cm4gcih0W2ldKXx8KHRbaV09e30pLHZvaWQodFtpXS5lbmFibGVkPWgpO2lmKG51bGw9PT1oJiYhcih0W2ldKSl7aWYoIW4obCkpcmV0dXJuO3RbaV09SHAobCl9aWYocihoKSl7dmFyIHU9ITA7dm9pZCAwIT09aC5lbmFibGVkP3U9aC5lbmFibGVkOnZvaWQgMCE9PWMmJih1PWwuZW5hYmxlZCksYSh0LGUsaSksdFtpXS5lbmFibGVkPXV9fX12YXIgZW09e2xpbmVhcjpmdW5jdGlvbih0KXtyZXR1cm4gdH0sZWFzZUluUXVhZDpmdW5jdGlvbih0KXtyZXR1cm4gdCp0fSxlYXNlT3V0UXVhZDpmdW5jdGlvbih0KXtyZXR1cm4gdCooMi10KX0sZWFzZUluT3V0UXVhZDpmdW5jdGlvbih0KXtyZXR1cm4gdDwuNT8yKnQqdDooNC0yKnQpKnQtMX0sZWFzZUluQ3ViaWM6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCp0fSxlYXNlT3V0Q3ViaWM6ZnVuY3Rpb24odCl7cmV0dXJuLS10KnQqdCsxfSxlYXNlSW5PdXRDdWJpYzpmdW5jdGlvbih0KXtyZXR1cm4gdDwuNT80KnQqdCp0Oih0LTEpKigyKnQtMikqKDIqdC0yKSsxfSxlYXNlSW5RdWFydDpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KnQqdH0sZWFzZU91dFF1YXJ0OmZ1bmN0aW9uKHQpe3JldHVybiAxLSAtLXQqdCp0KnR9LGVhc2VJbk91dFF1YXJ0OmZ1bmN0aW9uKHQpe3JldHVybiB0PC41PzgqdCp0KnQqdDoxLTgqLS10KnQqdCp0fSxlYXNlSW5RdWludDpmdW5jdGlvbih0KXtyZXR1cm4gdCp0KnQqdCp0fSxlYXNlT3V0UXVpbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIDErLS10KnQqdCp0KnR9LGVhc2VJbk91dFF1aW50OmZ1bmN0aW9uKHQpe3JldHVybiB0PC41PzE2KnQqdCp0KnQqdDoxKzE2Ki0tdCp0KnQqdCp0fX07ZnVuY3Rpb24gaW0odCxlKXt2YXIgaTtodShlKXx8KGU9W2VdKTt2YXIgbyxuPXd5KHQpO3RyeXtmb3Iobi5zKCk7IShvPW4ubigpKS5kb25lOyl7dmFyIHI9by52YWx1ZTtpZihyKXtpPXJbZVswXV07Zm9yKHZhciBzPTE7czxlLmxlbmd0aDtzKyspaSYmKGk9aVtlW3NdXSk7aWYodm9pZCAwIT09aSlicmVha319fWNhdGNoKHQpe24uZSh0KX1maW5hbGx5e24uZigpfXJldHVybiBpfXZhciBvbT17YmxhY2s6XCIjMDAwMDAwXCIsbmF2eTpcIiMwMDAwODBcIixkYXJrYmx1ZTpcIiMwMDAwOEJcIixtZWRpdW1ibHVlOlwiIzAwMDBDRFwiLGJsdWU6XCIjMDAwMEZGXCIsZGFya2dyZWVuOlwiIzAwNjQwMFwiLGdyZWVuOlwiIzAwODAwMFwiLHRlYWw6XCIjMDA4MDgwXCIsZGFya2N5YW46XCIjMDA4QjhCXCIsZGVlcHNreWJsdWU6XCIjMDBCRkZGXCIsZGFya3R1cnF1b2lzZTpcIiMwMENFRDFcIixtZWRpdW1zcHJpbmdncmVlbjpcIiMwMEZBOUFcIixsaW1lOlwiIzAwRkYwMFwiLHNwcmluZ2dyZWVuOlwiIzAwRkY3RlwiLGFxdWE6XCIjMDBGRkZGXCIsY3lhbjpcIiMwMEZGRkZcIixtaWRuaWdodGJsdWU6XCIjMTkxOTcwXCIsZG9kZ2VyYmx1ZTpcIiMxRTkwRkZcIixsaWdodHNlYWdyZWVuOlwiIzIwQjJBQVwiLGZvcmVzdGdyZWVuOlwiIzIyOEIyMlwiLHNlYWdyZWVuOlwiIzJFOEI1N1wiLGRhcmtzbGF0ZWdyYXk6XCIjMkY0RjRGXCIsbGltZWdyZWVuOlwiIzMyQ0QzMlwiLG1lZGl1bXNlYWdyZWVuOlwiIzNDQjM3MVwiLHR1cnF1b2lzZTpcIiM0MEUwRDBcIixyb3lhbGJsdWU6XCIjNDE2OUUxXCIsc3RlZWxibHVlOlwiIzQ2ODJCNFwiLGRhcmtzbGF0ZWJsdWU6XCIjNDgzRDhCXCIsbWVkaXVtdHVycXVvaXNlOlwiIzQ4RDFDQ1wiLGluZGlnbzpcIiM0QjAwODJcIixkYXJrb2xpdmVncmVlbjpcIiM1NTZCMkZcIixjYWRldGJsdWU6XCIjNUY5RUEwXCIsY29ybmZsb3dlcmJsdWU6XCIjNjQ5NUVEXCIsbWVkaXVtYXF1YW1hcmluZTpcIiM2NkNEQUFcIixkaW1ncmF5OlwiIzY5Njk2OVwiLHNsYXRlYmx1ZTpcIiM2QTVBQ0RcIixvbGl2ZWRyYWI6XCIjNkI4RTIzXCIsc2xhdGVncmF5OlwiIzcwODA5MFwiLGxpZ2h0c2xhdGVncmF5OlwiIzc3ODg5OVwiLG1lZGl1bXNsYXRlYmx1ZTpcIiM3QjY4RUVcIixsYXduZ3JlZW46XCIjN0NGQzAwXCIsY2hhcnRyZXVzZTpcIiM3RkZGMDBcIixhcXVhbWFyaW5lOlwiIzdGRkZENFwiLG1hcm9vbjpcIiM4MDAwMDBcIixwdXJwbGU6XCIjODAwMDgwXCIsb2xpdmU6XCIjODA4MDAwXCIsZ3JheTpcIiM4MDgwODBcIixza3libHVlOlwiIzg3Q0VFQlwiLGxpZ2h0c2t5Ymx1ZTpcIiM4N0NFRkFcIixibHVldmlvbGV0OlwiIzhBMkJFMlwiLGRhcmtyZWQ6XCIjOEIwMDAwXCIsZGFya21hZ2VudGE6XCIjOEIwMDhCXCIsc2FkZGxlYnJvd246XCIjOEI0NTEzXCIsZGFya3NlYWdyZWVuOlwiIzhGQkM4RlwiLGxpZ2h0Z3JlZW46XCIjOTBFRTkwXCIsbWVkaXVtcHVycGxlOlwiIzkzNzBEOFwiLGRhcmt2aW9sZXQ6XCIjOTQwMEQzXCIscGFsZWdyZWVuOlwiIzk4RkI5OFwiLGRhcmtvcmNoaWQ6XCIjOTkzMkNDXCIseWVsbG93Z3JlZW46XCIjOUFDRDMyXCIsc2llbm5hOlwiI0EwNTIyRFwiLGJyb3duOlwiI0E1MkEyQVwiLGRhcmtncmF5OlwiI0E5QTlBOVwiLGxpZ2h0Ymx1ZTpcIiNBREQ4RTZcIixncmVlbnllbGxvdzpcIiNBREZGMkZcIixwYWxldHVycXVvaXNlOlwiI0FGRUVFRVwiLGxpZ2h0c3RlZWxibHVlOlwiI0IwQzRERVwiLHBvd2RlcmJsdWU6XCIjQjBFMEU2XCIsZmlyZWJyaWNrOlwiI0IyMjIyMlwiLGRhcmtnb2xkZW5yb2Q6XCIjQjg4NjBCXCIsbWVkaXVtb3JjaGlkOlwiI0JBNTVEM1wiLHJvc3licm93bjpcIiNCQzhGOEZcIixkYXJra2hha2k6XCIjQkRCNzZCXCIsc2lsdmVyOlwiI0MwQzBDMFwiLG1lZGl1bXZpb2xldHJlZDpcIiNDNzE1ODVcIixpbmRpYW5yZWQ6XCIjQ0Q1QzVDXCIscGVydTpcIiNDRDg1M0ZcIixjaG9jb2xhdGU6XCIjRDI2OTFFXCIsdGFuOlwiI0QyQjQ4Q1wiLGxpZ2h0Z3JleTpcIiNEM0QzRDNcIixwYWxldmlvbGV0cmVkOlwiI0Q4NzA5M1wiLHRoaXN0bGU6XCIjRDhCRkQ4XCIsb3JjaGlkOlwiI0RBNzBENlwiLGdvbGRlbnJvZDpcIiNEQUE1MjBcIixjcmltc29uOlwiI0RDMTQzQ1wiLGdhaW5zYm9ybzpcIiNEQ0RDRENcIixwbHVtOlwiI0REQTBERFwiLGJ1cmx5d29vZDpcIiNERUI4ODdcIixsaWdodGN5YW46XCIjRTBGRkZGXCIsbGF2ZW5kZXI6XCIjRTZFNkZBXCIsZGFya3NhbG1vbjpcIiNFOTk2N0FcIix2aW9sZXQ6XCIjRUU4MkVFXCIscGFsZWdvbGRlbnJvZDpcIiNFRUU4QUFcIixsaWdodGNvcmFsOlwiI0YwODA4MFwiLGtoYWtpOlwiI0YwRTY4Q1wiLGFsaWNlYmx1ZTpcIiNGMEY4RkZcIixob25leWRldzpcIiNGMEZGRjBcIixhenVyZTpcIiNGMEZGRkZcIixzYW5keWJyb3duOlwiI0Y0QTQ2MFwiLHdoZWF0OlwiI0Y1REVCM1wiLGJlaWdlOlwiI0Y1RjVEQ1wiLHdoaXRlc21va2U6XCIjRjVGNUY1XCIsbWludGNyZWFtOlwiI0Y1RkZGQVwiLGdob3N0d2hpdGU6XCIjRjhGOEZGXCIsc2FsbW9uOlwiI0ZBODA3MlwiLGFudGlxdWV3aGl0ZTpcIiNGQUVCRDdcIixsaW5lbjpcIiNGQUYwRTZcIixsaWdodGdvbGRlbnJvZHllbGxvdzpcIiNGQUZBRDJcIixvbGRsYWNlOlwiI0ZERjVFNlwiLHJlZDpcIiNGRjAwMDBcIixmdWNoc2lhOlwiI0ZGMDBGRlwiLG1hZ2VudGE6XCIjRkYwMEZGXCIsZGVlcHBpbms6XCIjRkYxNDkzXCIsb3JhbmdlcmVkOlwiI0ZGNDUwMFwiLHRvbWF0bzpcIiNGRjYzNDdcIixob3RwaW5rOlwiI0ZGNjlCNFwiLGNvcmFsOlwiI0ZGN0Y1MFwiLGRhcmtvcmFuZ2U6XCIjRkY4QzAwXCIsbGlnaHRzYWxtb246XCIjRkZBMDdBXCIsb3JhbmdlOlwiI0ZGQTUwMFwiLGxpZ2h0cGluazpcIiNGRkI2QzFcIixwaW5rOlwiI0ZGQzBDQlwiLGdvbGQ6XCIjRkZENzAwXCIscGVhY2hwdWZmOlwiI0ZGREFCOVwiLG5hdmFqb3doaXRlOlwiI0ZGREVBRFwiLG1vY2Nhc2luOlwiI0ZGRTRCNVwiLGJpc3F1ZTpcIiNGRkU0QzRcIixtaXN0eXJvc2U6XCIjRkZFNEUxXCIsYmxhbmNoZWRhbG1vbmQ6XCIjRkZFQkNEXCIscGFwYXlhd2hpcDpcIiNGRkVGRDVcIixsYXZlbmRlcmJsdXNoOlwiI0ZGRjBGNVwiLHNlYXNoZWxsOlwiI0ZGRjVFRVwiLGNvcm5zaWxrOlwiI0ZGRjhEQ1wiLGxlbW9uY2hpZmZvbjpcIiNGRkZBQ0RcIixmbG9yYWx3aGl0ZTpcIiNGRkZBRjBcIixzbm93OlwiI0ZGRkFGQVwiLHllbGxvdzpcIiNGRkZGMDBcIixsaWdodHllbGxvdzpcIiNGRkZGRTBcIixpdm9yeTpcIiNGRkZGRjBcIix3aGl0ZTpcIiNGRkZGRkZcIn0sbm09ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjE7WGwodGhpcyx0KSx0aGlzLnBpeGVsUmF0aW89ZSx0aGlzLmdlbmVyYXRlZD0hMSx0aGlzLmNlbnRlckNvb3JkaW5hdGVzPXt4OjE0NC41LHk6MTQ0LjV9LHRoaXMucj0yODkqLjQ5LHRoaXMuY29sb3I9e3I6MjU1LGc6MjU1LGI6MjU1LGE6MX0sdGhpcy5odWVDaXJjbGU9dm9pZCAwLHRoaXMuaW5pdGlhbENvbG9yPXtyOjI1NSxnOjI1NSxiOjI1NSxhOjF9LHRoaXMucHJldmlvdXNDb2xvcj12b2lkIDAsdGhpcy5hcHBsaWVkPSExLHRoaXMudXBkYXRlQ2FsbGJhY2s9ZnVuY3Rpb24oKXt9LHRoaXMuY2xvc2VDYWxsYmFjaz1mdW5jdGlvbigpe30sdGhpcy5fY3JlYXRlKCl9cmV0dXJuICRsKHQsW3trZXk6XCJpbnNlcnRUb1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZvaWQgMCE9PXRoaXMuaGFtbWVyJiYodGhpcy5oYW1tZXIuZGVzdHJveSgpLHRoaXMuaGFtbWVyPXZvaWQgMCksdGhpcy5jb250YWluZXI9dCx0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmZyYW1lKSx0aGlzLl9iaW5kSGFtbWVyKCksdGhpcy5fc2V0U2l6ZSgpfX0se2tleTpcInNldFVwZGF0ZUNhbGxiYWNrXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJGdW5jdGlvbiBhdHRlbXB0ZWQgdG8gc2V0IGFzIGNvbG9yUGlja2VyIHVwZGF0ZSBjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbi5cIik7dGhpcy51cGRhdGVDYWxsYmFjaz10fX0se2tleTpcInNldENsb3NlQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIkZ1bmN0aW9uIGF0dGVtcHRlZCB0byBzZXQgYXMgY29sb3JQaWNrZXIgY2xvc2luZyBjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbi5cIik7dGhpcy5jbG9zZUNhbGxiYWNrPXR9fSx7a2V5OlwiX2lzQ29sb3JTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gb21bdF19fSx7a2V5Olwic2V0Q29sb3JcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdKXx8YXJndW1lbnRzWzFdO2lmKFwibm9uZVwiIT09dCl7dmFyIGksbz10aGlzLl9pc0NvbG9yU3RyaW5nKHQpO2lmKHZvaWQgMCE9PW8mJih0PW8pLCEwPT09QnkodCkpe2lmKCEwPT09WnkodCkpe3ZhciBuPXQuc3Vic3RyKDQpLnN1YnN0cigwLHQubGVuZ3RoLTUpLnNwbGl0KFwiLFwiKTtpPXtyOm5bMF0sZzpuWzFdLGI6blsyXSxhOjF9fWVsc2UgaWYoITA9PT1ReSh0KSl7dmFyIHI9dC5zdWJzdHIoNSkuc3Vic3RyKDAsdC5sZW5ndGgtNikuc3BsaXQoXCIsXCIpO2k9e3I6clswXSxnOnJbMV0sYjpyWzJdLGE6clszXX19ZWxzZSBpZighMD09PSR5KHQpKXt2YXIgcz1WeSh0KTtpPXtyOnMucixnOnMuZyxiOnMuYixhOjF9fX1lbHNlIGlmKHQgaW5zdGFuY2VvZiBPYmplY3QmJnZvaWQgMCE9PXQuciYmdm9pZCAwIT09dC5nJiZ2b2lkIDAhPT10LmIpe3ZhciBhPXZvaWQgMCE9PXQuYT90LmE6XCIxLjBcIjtpPXtyOnQucixnOnQuZyxiOnQuYixhOmF9fWlmKHZvaWQgMD09PWkpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb2xvciBwYXNzZWQgdG8gdGhlIGNvbG9yUGlja2VyLiBTdXBwb3J0ZWQgYXJlIHN0cmluZ3M6IHJnYiwgaGV4LCByZ2JhLiBPYmplY3Q6IHJnYiAoe3I6cixnOmcsYjpiLFthOmFdfSkuIFN1cHBsaWVkOiBcIitodih0KSk7dGhpcy5fc2V0Q29sb3IoaSxlKX19fSx7a2V5Olwic2hvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5jbG9zZUNhbGxiYWNrJiYodGhpcy5jbG9zZUNhbGxiYWNrKCksdGhpcy5jbG9zZUNhbGxiYWNrPXZvaWQgMCksdGhpcy5hcHBsaWVkPSExLHRoaXMuZnJhbWUuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdGhpcy5fZ2VuZXJhdGVIdWVDaXJjbGUoKX19LHtrZXk6XCJfaGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07ITA9PT1lJiYodGhpcy5wcmV2aW91c0NvbG9yPWZvKHt9LHRoaXMuY29sb3IpKSwhMD09PXRoaXMuYXBwbGllZCYmdGhpcy51cGRhdGVDYWxsYmFjayh0aGlzLmluaXRpYWxDb2xvciksdGhpcy5mcmFtZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGJ2KChmdW5jdGlvbigpe3ZvaWQgMCE9PXQuY2xvc2VDYWxsYmFjayYmKHQuY2xvc2VDYWxsYmFjaygpLHQuY2xvc2VDYWxsYmFjaz12b2lkIDApfSksMCl9fSx7a2V5OlwiX3NhdmVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudXBkYXRlQ2FsbGJhY2sodGhpcy5jb2xvciksdGhpcy5hcHBsaWVkPSExLHRoaXMuX2hpZGUoKX19LHtrZXk6XCJfYXBwbHlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYXBwbGllZD0hMCx0aGlzLnVwZGF0ZUNhbGxiYWNrKHRoaXMuY29sb3IpLHRoaXMuX3VwZGF0ZVBpY2tlcih0aGlzLmNvbG9yKX19LHtrZXk6XCJfbG9hZExhc3RcIix2YWx1ZTpmdW5jdGlvbigpe3ZvaWQgMCE9PXRoaXMucHJldmlvdXNDb2xvcj90aGlzLnNldENvbG9yKHRoaXMucHJldmlvdXNDb2xvciwhMSk6YWxlcnQoXCJUaGVyZSBpcyBubyBsYXN0IGNvbG9yIHRvIGxvYWQuLi5cIil9fSx7a2V5OlwiX3NldENvbG9yXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTshMD09PWUmJih0aGlzLmluaXRpYWxDb2xvcj1mbyh7fSx0KSksdGhpcy5jb2xvcj10O3ZhciBpPVh5KHQucix0LmcsdC5iKSxvPTIqTWF0aC5QSSxuPXRoaXMucippLnMscj10aGlzLmNlbnRlckNvb3JkaW5hdGVzLngrbipNYXRoLnNpbihvKmkuaCkscz10aGlzLmNlbnRlckNvb3JkaW5hdGVzLnkrbipNYXRoLmNvcyhvKmkuaCk7dGhpcy5jb2xvclBpY2tlclNlbGVjdG9yLnN0eWxlLmxlZnQ9ci0uNSp0aGlzLmNvbG9yUGlja2VyU2VsZWN0b3IuY2xpZW50V2lkdGgrXCJweFwiLHRoaXMuY29sb3JQaWNrZXJTZWxlY3Rvci5zdHlsZS50b3A9cy0uNSp0aGlzLmNvbG9yUGlja2VyU2VsZWN0b3IuY2xpZW50SGVpZ2h0K1wicHhcIix0aGlzLl91cGRhdGVQaWNrZXIodCl9fSx7a2V5OlwiX3NldE9wYWNpdHlcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmNvbG9yLmE9dC8xMDAsdGhpcy5fdXBkYXRlUGlja2VyKHRoaXMuY29sb3IpfX0se2tleTpcIl9zZXRCcmlnaHRuZXNzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9WHkodGhpcy5jb2xvci5yLHRoaXMuY29sb3IuZyx0aGlzLmNvbG9yLmIpO2Uudj10LzEwMDt2YXIgaT1HeShlLmgsZS5zLGUudik7aS5hPXRoaXMuY29sb3IuYSx0aGlzLmNvbG9yPWksdGhpcy5fdXBkYXRlUGlja2VyKCl9fSx7a2V5OlwiX3VwZGF0ZVBpY2tlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnRoaXMuY29sb3IsZT1YeSh0LnIsdC5nLHQuYiksaT10aGlzLmNvbG9yUGlja2VyQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTt2b2lkIDA9PT10aGlzLnBpeGVsUmF0aW9uJiYodGhpcy5waXhlbFJhdGlvPSh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkvKGkud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8aS5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHxpLm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8aS5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8aS5iYWNraW5nU3RvcmVQaXhlbFJhdGlvfHwxKSksaS5zZXRUcmFuc2Zvcm0odGhpcy5waXhlbFJhdGlvLDAsMCx0aGlzLnBpeGVsUmF0aW8sMCwwKTt2YXIgbz10aGlzLmNvbG9yUGlja2VyQ2FudmFzLmNsaWVudFdpZHRoLG49dGhpcy5jb2xvclBpY2tlckNhbnZhcy5jbGllbnRIZWlnaHQ7aS5jbGVhclJlY3QoMCwwLG8sbiksaS5wdXRJbWFnZURhdGEodGhpcy5odWVDaXJjbGUsMCwwKSxpLmZpbGxTdHlsZT1cInJnYmEoMCwwLDAsXCIrKDEtZS52KStcIilcIixpLmNpcmNsZSh0aGlzLmNlbnRlckNvb3JkaW5hdGVzLngsdGhpcy5jZW50ZXJDb29yZGluYXRlcy55LHRoaXMuciksUHYoaSkuY2FsbChpKSx0aGlzLmJyaWdodG5lc3NSYW5nZS52YWx1ZT0xMDAqZS52LHRoaXMub3BhY2l0eVJhbmdlLnZhbHVlPTEwMCp0LmEsdGhpcy5pbml0aWFsQ29sb3JEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yPVwicmdiYShcIit0aGlzLmluaXRpYWxDb2xvci5yK1wiLFwiK3RoaXMuaW5pdGlhbENvbG9yLmcrXCIsXCIrdGhpcy5pbml0aWFsQ29sb3IuYitcIixcIit0aGlzLmluaXRpYWxDb2xvci5hK1wiKVwiLHRoaXMubmV3Q29sb3JEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yPVwicmdiYShcIit0aGlzLmNvbG9yLnIrXCIsXCIrdGhpcy5jb2xvci5nK1wiLFwiK3RoaXMuY29sb3IuYitcIixcIit0aGlzLmNvbG9yLmErXCIpXCJ9fSx7a2V5OlwiX3NldFNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY29sb3JQaWNrZXJDYW52YXMuc3R5bGUud2lkdGg9XCIxMDAlXCIsdGhpcy5jb2xvclBpY2tlckNhbnZhcy5zdHlsZS5oZWlnaHQ9XCIxMDAlXCIsdGhpcy5jb2xvclBpY2tlckNhbnZhcy53aWR0aD0yODkqdGhpcy5waXhlbFJhdGlvLHRoaXMuY29sb3JQaWNrZXJDYW52YXMuaGVpZ2h0PTI4OSp0aGlzLnBpeGVsUmF0aW99fSx7a2V5OlwiX2NyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZSxpLG87aWYodGhpcy5mcmFtZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuZnJhbWUuY2xhc3NOYW1lPVwidmlzLWNvbG9yLXBpY2tlclwiLHRoaXMuY29sb3JQaWNrZXJEaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmNvbG9yUGlja2VyU2VsZWN0b3I9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmNvbG9yUGlja2VyU2VsZWN0b3IuY2xhc3NOYW1lPVwidmlzLXNlbGVjdG9yXCIsdGhpcy5jb2xvclBpY2tlckRpdi5hcHBlbmRDaGlsZCh0aGlzLmNvbG9yUGlja2VyU2VsZWN0b3IpLHRoaXMuY29sb3JQaWNrZXJDYW52YXM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSx0aGlzLmNvbG9yUGlja2VyRGl2LmFwcGVuZENoaWxkKHRoaXMuY29sb3JQaWNrZXJDYW52YXMpLHRoaXMuY29sb3JQaWNrZXJDYW52YXMuZ2V0Q29udGV4dCl7dmFyIG49dGhpcy5jb2xvclBpY2tlckNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7dGhpcy5waXhlbFJhdGlvPSh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkvKG4ud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8bi5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvfHxuLm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8bi5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8bi5iYWNraW5nU3RvcmVQaXhlbFJhdGlvfHwxKSx0aGlzLmNvbG9yUGlja2VyQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKS5zZXRUcmFuc2Zvcm0odGhpcy5waXhlbFJhdGlvLDAsMCx0aGlzLnBpeGVsUmF0aW8sMCwwKX1lbHNle3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7ci5zdHlsZS5jb2xvcj1cInJlZFwiLHIuc3R5bGUuZm9udFdlaWdodD1cImJvbGRcIixyLnN0eWxlLnBhZGRpbmc9XCIxMHB4XCIsci5pbm5lclRleHQ9XCJFcnJvcjogeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSFRNTCBjYW52YXNcIix0aGlzLmNvbG9yUGlja2VyQ2FudmFzLmFwcGVuZENoaWxkKHIpfXRoaXMuY29sb3JQaWNrZXJEaXYuY2xhc3NOYW1lPVwidmlzLWNvbG9yXCIsdGhpcy5vcGFjaXR5RGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5vcGFjaXR5RGl2LmNsYXNzTmFtZT1cInZpcy1vcGFjaXR5XCIsdGhpcy5icmlnaHRuZXNzRGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5icmlnaHRuZXNzRGl2LmNsYXNzTmFtZT1cInZpcy1icmlnaHRuZXNzXCIsdGhpcy5hcnJvd0Rpdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuYXJyb3dEaXYuY2xhc3NOYW1lPVwidmlzLWFycm93XCIsdGhpcy5vcGFjaXR5UmFuZ2U9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO3RyeXt0aGlzLm9wYWNpdHlSYW5nZS50eXBlPVwicmFuZ2VcIix0aGlzLm9wYWNpdHlSYW5nZS5taW49XCIwXCIsdGhpcy5vcGFjaXR5UmFuZ2UubWF4PVwiMTAwXCJ9Y2F0Y2godCl7fXRoaXMub3BhY2l0eVJhbmdlLnZhbHVlPVwiMTAwXCIsdGhpcy5vcGFjaXR5UmFuZ2UuY2xhc3NOYW1lPVwidmlzLXJhbmdlXCIsdGhpcy5icmlnaHRuZXNzUmFuZ2U9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO3RyeXt0aGlzLmJyaWdodG5lc3NSYW5nZS50eXBlPVwicmFuZ2VcIix0aGlzLmJyaWdodG5lc3NSYW5nZS5taW49XCIwXCIsdGhpcy5icmlnaHRuZXNzUmFuZ2UubWF4PVwiMTAwXCJ9Y2F0Y2godCl7fXRoaXMuYnJpZ2h0bmVzc1JhbmdlLnZhbHVlPVwiMTAwXCIsdGhpcy5icmlnaHRuZXNzUmFuZ2UuY2xhc3NOYW1lPVwidmlzLXJhbmdlXCIsdGhpcy5vcGFjaXR5RGl2LmFwcGVuZENoaWxkKHRoaXMub3BhY2l0eVJhbmdlKSx0aGlzLmJyaWdodG5lc3NEaXYuYXBwZW5kQ2hpbGQodGhpcy5icmlnaHRuZXNzUmFuZ2UpO3ZhciBzPXRoaXM7dGhpcy5vcGFjaXR5UmFuZ2Uub25jaGFuZ2U9ZnVuY3Rpb24oKXtzLl9zZXRPcGFjaXR5KHRoaXMudmFsdWUpfSx0aGlzLm9wYWNpdHlSYW5nZS5vbmlucHV0PWZ1bmN0aW9uKCl7cy5fc2V0T3BhY2l0eSh0aGlzLnZhbHVlKX0sdGhpcy5icmlnaHRuZXNzUmFuZ2Uub25jaGFuZ2U9ZnVuY3Rpb24oKXtzLl9zZXRCcmlnaHRuZXNzKHRoaXMudmFsdWUpfSx0aGlzLmJyaWdodG5lc3NSYW5nZS5vbmlucHV0PWZ1bmN0aW9uKCl7cy5fc2V0QnJpZ2h0bmVzcyh0aGlzLnZhbHVlKX0sdGhpcy5icmlnaHRuZXNzTGFiZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmJyaWdodG5lc3NMYWJlbC5jbGFzc05hbWU9XCJ2aXMtbGFiZWwgdmlzLWJyaWdodG5lc3NcIix0aGlzLmJyaWdodG5lc3NMYWJlbC5pbm5lclRleHQ9XCJicmlnaHRuZXNzOlwiLHRoaXMub3BhY2l0eUxhYmVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5vcGFjaXR5TGFiZWwuY2xhc3NOYW1lPVwidmlzLWxhYmVsIHZpcy1vcGFjaXR5XCIsdGhpcy5vcGFjaXR5TGFiZWwuaW5uZXJUZXh0PVwib3BhY2l0eTpcIix0aGlzLm5ld0NvbG9yRGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5uZXdDb2xvckRpdi5jbGFzc05hbWU9XCJ2aXMtbmV3LWNvbG9yXCIsdGhpcy5uZXdDb2xvckRpdi5pbm5lclRleHQ9XCJuZXdcIix0aGlzLmluaXRpYWxDb2xvckRpdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuaW5pdGlhbENvbG9yRGl2LmNsYXNzTmFtZT1cInZpcy1pbml0aWFsLWNvbG9yXCIsdGhpcy5pbml0aWFsQ29sb3JEaXYuaW5uZXJUZXh0PVwiaW5pdGlhbFwiLHRoaXMuY2FuY2VsQnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5jYW5jZWxCdXR0b24uY2xhc3NOYW1lPVwidmlzLWJ1dHRvbiB2aXMtY2FuY2VsXCIsdGhpcy5jYW5jZWxCdXR0b24uaW5uZXJUZXh0PVwiY2FuY2VsXCIsdGhpcy5jYW5jZWxCdXR0b24ub25jbGljaz1Gbyh0PXRoaXMuX2hpZGUpLmNhbGwodCx0aGlzLCExKSx0aGlzLmFwcGx5QnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5hcHBseUJ1dHRvbi5jbGFzc05hbWU9XCJ2aXMtYnV0dG9uIHZpcy1hcHBseVwiLHRoaXMuYXBwbHlCdXR0b24uaW5uZXJUZXh0PVwiYXBwbHlcIix0aGlzLmFwcGx5QnV0dG9uLm9uY2xpY2s9Rm8oZT10aGlzLl9hcHBseSkuY2FsbChlLHRoaXMpLHRoaXMuc2F2ZUJ1dHRvbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuc2F2ZUJ1dHRvbi5jbGFzc05hbWU9XCJ2aXMtYnV0dG9uIHZpcy1zYXZlXCIsdGhpcy5zYXZlQnV0dG9uLmlubmVyVGV4dD1cInNhdmVcIix0aGlzLnNhdmVCdXR0b24ub25jbGljaz1GbyhpPXRoaXMuX3NhdmUpLmNhbGwoaSx0aGlzKSx0aGlzLmxvYWRCdXR0b249ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmxvYWRCdXR0b24uY2xhc3NOYW1lPVwidmlzLWJ1dHRvbiB2aXMtbG9hZFwiLHRoaXMubG9hZEJ1dHRvbi5pbm5lclRleHQ9XCJsb2FkIGxhc3RcIix0aGlzLmxvYWRCdXR0b24ub25jbGljaz1GbyhvPXRoaXMuX2xvYWRMYXN0KS5jYWxsKG8sdGhpcyksdGhpcy5mcmFtZS5hcHBlbmRDaGlsZCh0aGlzLmNvbG9yUGlja2VyRGl2KSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMuYXJyb3dEaXYpLHRoaXMuZnJhbWUuYXBwZW5kQ2hpbGQodGhpcy5icmlnaHRuZXNzTGFiZWwpLHRoaXMuZnJhbWUuYXBwZW5kQ2hpbGQodGhpcy5icmlnaHRuZXNzRGl2KSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMub3BhY2l0eUxhYmVsKSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMub3BhY2l0eURpdiksdGhpcy5mcmFtZS5hcHBlbmRDaGlsZCh0aGlzLm5ld0NvbG9yRGl2KSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMuaW5pdGlhbENvbG9yRGl2KSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMuY2FuY2VsQnV0dG9uKSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMuYXBwbHlCdXR0b24pLHRoaXMuZnJhbWUuYXBwZW5kQ2hpbGQodGhpcy5zYXZlQnV0dG9uKSx0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMubG9hZEJ1dHRvbil9fSx7a2V5OlwiX2JpbmRIYW1tZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5kcmFnPXt9LHRoaXMucGluY2g9e30sdGhpcy5oYW1tZXI9bmV3IE95KHRoaXMuY29sb3JQaWNrZXJDYW52YXMpLHRoaXMuaGFtbWVyLmdldChcInBpbmNoXCIpLnNldCh7ZW5hYmxlOiEwfSksdGhpcy5oYW1tZXIub24oXCJoYW1tZXIuaW5wdXRcIiwoZnVuY3Rpb24oZSl7ZS5pc0ZpcnN0JiZ0Ll9tb3ZlU2VsZWN0b3IoZSl9KSksdGhpcy5oYW1tZXIub24oXCJ0YXBcIiwoZnVuY3Rpb24oZSl7dC5fbW92ZVNlbGVjdG9yKGUpfSkpLHRoaXMuaGFtbWVyLm9uKFwicGFuc3RhcnRcIiwoZnVuY3Rpb24oZSl7dC5fbW92ZVNlbGVjdG9yKGUpfSkpLHRoaXMuaGFtbWVyLm9uKFwicGFubW92ZVwiLChmdW5jdGlvbihlKXt0Ll9tb3ZlU2VsZWN0b3IoZSl9KSksdGhpcy5oYW1tZXIub24oXCJwYW5lbmRcIiwoZnVuY3Rpb24oZSl7dC5fbW92ZVNlbGVjdG9yKGUpfSkpfX0se2tleTpcIl9nZW5lcmF0ZUh1ZUNpcmNsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoITE9PT10aGlzLmdlbmVyYXRlZCl7dmFyIHQ9dGhpcy5jb2xvclBpY2tlckNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7dm9pZCAwPT09dGhpcy5waXhlbFJhdGlvbiYmKHRoaXMucGl4ZWxSYXRpbz0od2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLyh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQuYmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8MSkpLHQuc2V0VHJhbnNmb3JtKHRoaXMucGl4ZWxSYXRpbywwLDAsdGhpcy5waXhlbFJhdGlvLDAsMCk7dmFyIGUsaSxvLG4scj10aGlzLmNvbG9yUGlja2VyQ2FudmFzLmNsaWVudFdpZHRoLHM9dGhpcy5jb2xvclBpY2tlckNhbnZhcy5jbGllbnRIZWlnaHQ7dC5jbGVhclJlY3QoMCwwLHIscyksdGhpcy5jZW50ZXJDb29yZGluYXRlcz17eDouNSpyLHk6LjUqc30sdGhpcy5yPS40OSpyO3ZhciBhLGg9MipNYXRoLlBJLzM2MCxkPTEvdGhpcy5yO2ZvcihvPTA7bzwzNjA7bysrKWZvcihuPTA7bjx0aGlzLnI7bisrKWU9dGhpcy5jZW50ZXJDb29yZGluYXRlcy54K24qTWF0aC5zaW4oaCpvKSxpPXRoaXMuY2VudGVyQ29vcmRpbmF0ZXMueStuKk1hdGguY29zKGgqbyksYT1HeSguMDAyNzc3Nzc3Nzc3Nzc3Nzc4Km8sbipkLDEpLHQuZmlsbFN0eWxlPVwicmdiKFwiK2EucitcIixcIithLmcrXCIsXCIrYS5iK1wiKVwiLHQuZmlsbFJlY3QoZS0uNSxpLS41LDIsMik7dC5zdHJva2VTdHlsZT1cInJnYmEoMCwwLDAsMSlcIix0LmNpcmNsZSh0aGlzLmNlbnRlckNvb3JkaW5hdGVzLngsdGhpcy5jZW50ZXJDb29yZGluYXRlcy55LHRoaXMuciksdC5zdHJva2UoKSx0aGlzLmh1ZUNpcmNsZT10LmdldEltYWdlRGF0YSgwLDAscixzKX10aGlzLmdlbmVyYXRlZD0hMH19LHtrZXk6XCJfbW92ZVNlbGVjdG9yXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb2xvclBpY2tlckRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpPXQuY2VudGVyLngtZS5sZWZ0LG89dC5jZW50ZXIueS1lLnRvcCxuPS41KnRoaXMuY29sb3JQaWNrZXJEaXYuY2xpZW50SGVpZ2h0LHI9LjUqdGhpcy5jb2xvclBpY2tlckRpdi5jbGllbnRXaWR0aCxzPWktcixhPW8tbixoPU1hdGguYXRhbjIocyxhKSxkPS45OCpNYXRoLm1pbihNYXRoLnNxcnQocypzK2EqYSksciksbD1NYXRoLmNvcyhoKSpkK24sYz1NYXRoLnNpbihoKSpkK3I7dGhpcy5jb2xvclBpY2tlclNlbGVjdG9yLnN0eWxlLnRvcD1sLS41KnRoaXMuY29sb3JQaWNrZXJTZWxlY3Rvci5jbGllbnRIZWlnaHQrXCJweFwiLHRoaXMuY29sb3JQaWNrZXJTZWxlY3Rvci5zdHlsZS5sZWZ0PWMtLjUqdGhpcy5jb2xvclBpY2tlclNlbGVjdG9yLmNsaWVudFdpZHRoK1wicHhcIjt2YXIgdT1oLygyKk1hdGguUEkpO3U9dTwwP3UrMTp1O3ZhciBmPWQvdGhpcy5yLHA9WHkodGhpcy5jb2xvci5yLHRoaXMuY29sb3IuZyx0aGlzLmNvbG9yLmIpO3AuaD11LHAucz1mO3ZhciB2PUd5KHAuaCxwLnMscC52KTt2LmE9dGhpcy5jb2xvci5hLHRoaXMuY29sb3I9dix0aGlzLmluaXRpYWxDb2xvckRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJyZ2JhKFwiK3RoaXMuaW5pdGlhbENvbG9yLnIrXCIsXCIrdGhpcy5pbml0aWFsQ29sb3IuZytcIixcIit0aGlzLmluaXRpYWxDb2xvci5iK1wiLFwiK3RoaXMuaW5pdGlhbENvbG9yLmErXCIpXCIsdGhpcy5uZXdDb2xvckRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJyZ2JhKFwiK3RoaXMuY29sb3IucitcIixcIit0aGlzLmNvbG9yLmcrXCIsXCIrdGhpcy5jb2xvci5iK1wiLFwiK3RoaXMuY29sb3IuYStcIilcIn19XSksdH0oKTtmdW5jdGlvbiBybSgpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLGk9MDtpPHQ7aSsrKWVbaV09YXJndW1lbnRzW2ldO2lmKGUubGVuZ3RoPDEpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXJndW1lbnRzLlwiKTtpZigxPT09ZS5sZW5ndGgpcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVbMF0pO3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZVswXSk7cmV0dXJuIG8uYXBwZW5kQ2hpbGQocm0uYXBwbHkodm9pZCAwLEpjKGF1KGUpLmNhbGwoZSwxKSkpKSxvfXZhciBzbSxhbT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpLG8pe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXToxLHI9YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOmZ1bmN0aW9uKCl7cmV0dXJuITF9O1hsKHRoaXMsdCksdGhpcy5wYXJlbnQ9ZSx0aGlzLmNoYW5nZWRPcHRpb25zPVtdLHRoaXMuY29udGFpbmVyPWksdGhpcy5hbGxvd0NyZWF0aW9uPSExLHRoaXMuaGlkZU9wdGlvbj1yLHRoaXMub3B0aW9ucz17fSx0aGlzLmluaXRpYWxpemVkPSExLHRoaXMucG9wdXBDb3VudGVyPTAsdGhpcy5kZWZhdWx0T3B0aW9ucz17ZW5hYmxlZDohMSxmaWx0ZXI6ITAsY29udGFpbmVyOnZvaWQgMCxzaG93QnV0dG9uOiEwfSxmbyh0aGlzLm9wdGlvbnMsdGhpcy5kZWZhdWx0T3B0aW9ucyksdGhpcy5jb25maWd1cmVPcHRpb25zPW8sdGhpcy5tb2R1bGVPcHRpb25zPXt9LHRoaXMuZG9tRWxlbWVudHM9W10sdGhpcy5wb3B1cERpdj17fSx0aGlzLnBvcHVwTGltaXQ9NSx0aGlzLnBvcHVwSGlzdG9yeT17fSx0aGlzLmNvbG9yUGlja2VyPW5ldyBubShuKSx0aGlzLndyYXBwZXI9dm9pZCAwfXJldHVybiAkbCh0LFt7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXQpe3RoaXMucG9wdXBIaXN0b3J5PXt9LHRoaXMuX3JlbW92ZVBvcHVwKCk7dmFyIGU9ITA7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpdGhpcy5vcHRpb25zLmZpbHRlcj10O2Vsc2UgaWYoaHUodCkpdGhpcy5vcHRpb25zLmZpbHRlcj10LmpvaW4oKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1RYyh0KSl7aWYobnVsbD09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9ucyBjYW5ub3QgYmUgbnVsbFwiKTt2b2lkIDAhPT10LmNvbnRhaW5lciYmKHRoaXMub3B0aW9ucy5jb250YWluZXI9dC5jb250YWluZXIpLHZvaWQgMCE9PVlmKHQpJiYodGhpcy5vcHRpb25zLmZpbHRlcj1ZZih0KSksdm9pZCAwIT09dC5zaG93QnV0dG9uJiYodGhpcy5vcHRpb25zLnNob3dCdXR0b249dC5zaG93QnV0dG9uKSx2b2lkIDAhPT10LmVuYWJsZWQmJihlPXQuZW5hYmxlZCl9ZWxzZVwiYm9vbGVhblwiPT10eXBlb2YgdD8odGhpcy5vcHRpb25zLmZpbHRlcj0hMCxlPXQpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJih0aGlzLm9wdGlvbnMuZmlsdGVyPXQsZT0hMCk7ITE9PT1ZZih0aGlzLm9wdGlvbnMpJiYoZT0hMSksdGhpcy5vcHRpb25zLmVuYWJsZWQ9ZX10aGlzLl9jbGVhbigpfX0se2tleTpcInNldE1vZHVsZU9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLm1vZHVsZU9wdGlvbnM9dCwhMD09PXRoaXMub3B0aW9ucy5lbmFibGVkJiYodGhpcy5fY2xlYW4oKSx2b2lkIDAhPT10aGlzLm9wdGlvbnMuY29udGFpbmVyJiYodGhpcy5jb250YWluZXI9dGhpcy5vcHRpb25zLmNvbnRhaW5lciksdGhpcy5fY3JlYXRlKCkpfX0se2tleTpcIl9jcmVhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2NsZWFuKCksdGhpcy5jaGFuZ2VkT3B0aW9ucz1bXTt2YXIgdD1ZZih0aGlzLm9wdGlvbnMpLGU9MCxpPSExO2Zvcih2YXIgbyBpbiB0aGlzLmNvbmZpZ3VyZU9wdGlvbnMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29uZmlndXJlT3B0aW9ucyxvKSYmKHRoaXMuYWxsb3dDcmVhdGlvbj0hMSxpPSExLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/aT0oaT10KG8sW10pKXx8dGhpcy5faGFuZGxlT2JqZWN0KHRoaXMuY29uZmlndXJlT3B0aW9uc1tvXSxbb10sITApOiEwIT09dCYmLTE9PT16cCh0KS5jYWxsKHQsbyl8fChpPSEwKSwhMSE9PWkmJih0aGlzLmFsbG93Q3JlYXRpb249ITAsZT4wJiZ0aGlzLl9tYWtlSXRlbShbXSksdGhpcy5fbWFrZUhlYWRlcihvKSx0aGlzLl9oYW5kbGVPYmplY3QodGhpcy5jb25maWd1cmVPcHRpb25zW29dLFtvXSkpLGUrKyk7dGhpcy5fbWFrZUJ1dHRvbigpLHRoaXMuX3B1c2goKX19LHtrZXk6XCJfcHVzaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy53cmFwcGVyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy53cmFwcGVyLmNsYXNzTmFtZT1cInZpcy1jb25maWd1cmF0aW9uLXdyYXBwZXJcIix0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLndyYXBwZXIpO2Zvcih2YXIgdD0wO3Q8dGhpcy5kb21FbGVtZW50cy5sZW5ndGg7dCsrKXRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmRvbUVsZW1lbnRzW3RdKTt0aGlzLl9zaG93UG9wdXBJZk5lZWRlZCgpfX0se2tleTpcIl9jbGVhblwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLmRvbUVsZW1lbnRzLmxlbmd0aDt0KyspdGhpcy53cmFwcGVyLnJlbW92ZUNoaWxkKHRoaXMuZG9tRWxlbWVudHNbdF0pO3ZvaWQgMCE9PXRoaXMud3JhcHBlciYmKHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMud3JhcHBlciksdGhpcy53cmFwcGVyPXZvaWQgMCksdGhpcy5kb21FbGVtZW50cz1bXSx0aGlzLl9yZW1vdmVQb3B1cCgpfX0se2tleTpcIl9nZXRWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLm1vZHVsZU9wdGlvbnMsaT0wO2k8dC5sZW5ndGg7aSsrKXtpZih2b2lkIDA9PT1lW3RbaV1dKXtlPXZvaWQgMDticmVha31lPWVbdFtpXV19cmV0dXJuIGV9fSx7a2V5OlwiX21ha2VJdGVtXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoITA9PT10aGlzLmFsbG93Q3JlYXRpb24pe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLWl0ZW0gdmlzLWNvbmZpZy1zXCIrdC5sZW5ndGg7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkoaT4xP2ktMTowKSxuPTE7bjxpO24rKylvW24tMV09YXJndW1lbnRzW25dO3JldHVybiBGdShvKS5jYWxsKG8sKGZ1bmN0aW9uKHQpe2UuYXBwZW5kQ2hpbGQodCl9KSksdGhpcy5kb21FbGVtZW50cy5wdXNoKGUpLHRoaXMuZG9tRWxlbWVudHMubGVuZ3RofXJldHVybiAwfX0se2tleTpcIl9tYWtlSGVhZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLmNsYXNzTmFtZT1cInZpcy1jb25maWd1cmF0aW9uIHZpcy1jb25maWctaGVhZGVyXCIsZS5pbm5lclRleHQ9dCx0aGlzLl9tYWtlSXRlbShbXSxlKX19LHtrZXk6XCJfbWFrZUxhYmVsXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZihvLmNsYXNzTmFtZT1cInZpcy1jb25maWd1cmF0aW9uIHZpcy1jb25maWctbGFiZWwgdmlzLWNvbmZpZy1zXCIrZS5sZW5ndGgsITA9PT1pKXtmb3IoO28uZmlyc3RDaGlsZDspby5yZW1vdmVDaGlsZChvLmZpcnN0Q2hpbGQpO28uYXBwZW5kQ2hpbGQocm0oXCJpXCIsXCJiXCIsdCkpfWVsc2Ugby5pbm5lclRleHQ9dCtcIjpcIjtyZXR1cm4gb319LHtrZXk6XCJfbWFrZURyb3Bkb3duXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7by5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLXNlbGVjdFwiO3ZhciBuPTA7dm9pZCAwIT09ZSYmLTEhPT16cCh0KS5jYWxsKHQsZSkmJihuPXpwKHQpLmNhbGwodCxlKSk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7cy52YWx1ZT10W3JdLHI9PT1uJiYocy5zZWxlY3RlZD1cInNlbGVjdGVkXCIpLHMuaW5uZXJUZXh0PXRbcl0sby5hcHBlbmRDaGlsZChzKX12YXIgYT10aGlzO28ub25jaGFuZ2U9ZnVuY3Rpb24oKXthLl91cGRhdGUodGhpcy52YWx1ZSxpKX07dmFyIGg9dGhpcy5fbWFrZUxhYmVsKGlbaS5sZW5ndGgtMV0saSk7dGhpcy5fbWFrZUl0ZW0oaSxoLG8pfX0se2tleTpcIl9tYWtlUmFuZ2VcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89dFswXSxuPXRbMV0scj10WzJdLHM9dFszXSxhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTthLmNsYXNzTmFtZT1cInZpcy1jb25maWd1cmF0aW9uIHZpcy1jb25maWctcmFuZ2VcIjt0cnl7YS50eXBlPVwicmFuZ2VcIixhLm1pbj1uLGEubWF4PXJ9Y2F0Y2godCl7fWEuc3RlcD1zO3ZhciBoPVwiXCIsZD0wO2lmKHZvaWQgMCE9PWUpe3ZhciBsPTEuMjtlPDAmJmUqbDxuPyhhLm1pbj1NYXRoLmNlaWwoZSpsKSxkPWEubWluLGg9XCJyYW5nZSBpbmNyZWFzZWRcIik6ZS9sPG4mJihhLm1pbj1NYXRoLmNlaWwoZS9sKSxkPWEubWluLGg9XCJyYW5nZSBpbmNyZWFzZWRcIiksZSpsPnImJjEhPT1yJiYoYS5tYXg9TWF0aC5jZWlsKGUqbCksZD1hLm1heCxoPVwicmFuZ2UgaW5jcmVhc2VkXCIpLGEudmFsdWU9ZX1lbHNlIGEudmFsdWU9bzt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yy5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLXJhbmdlaW5wdXRcIixjLnZhbHVlPWEudmFsdWU7dmFyIHU9dGhpczthLm9uY2hhbmdlPWZ1bmN0aW9uKCl7Yy52YWx1ZT10aGlzLnZhbHVlLHUuX3VwZGF0ZShOdW1iZXIodGhpcy52YWx1ZSksaSl9LGEub25pbnB1dD1mdW5jdGlvbigpe2MudmFsdWU9dGhpcy52YWx1ZX07dmFyIGY9dGhpcy5fbWFrZUxhYmVsKGlbaS5sZW5ndGgtMV0saSkscD10aGlzLl9tYWtlSXRlbShpLGYsYSxjKTtcIlwiIT09aCYmdGhpcy5wb3B1cEhpc3RvcnlbcF0hPT1kJiYodGhpcy5wb3B1cEhpc3RvcnlbcF09ZCx0aGlzLl9zZXR1cFBvcHVwKGgscCkpfX0se2tleTpcIl9tYWtlQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCEwPT09dGhpcy5vcHRpb25zLnNob3dCdXR0b24pe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLWJ1dHRvblwiLGUuaW5uZXJUZXh0PVwiZ2VuZXJhdGUgb3B0aW9uc1wiLGUub25jbGljaz1mdW5jdGlvbigpe3QuX3ByaW50T3B0aW9ucygpfSxlLm9ubW91c2VvdmVyPWZ1bmN0aW9uKCl7ZS5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLWJ1dHRvbiBob3ZlclwifSxlLm9ubW91c2VvdXQ9ZnVuY3Rpb24oKXtlLmNsYXNzTmFtZT1cInZpcy1jb25maWd1cmF0aW9uIHZpcy1jb25maWctYnV0dG9uXCJ9LHRoaXMub3B0aW9uc0NvbnRhaW5lcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMub3B0aW9uc0NvbnRhaW5lci5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLW9wdGlvbi1jb250YWluZXJcIix0aGlzLmRvbUVsZW1lbnRzLnB1c2godGhpcy5vcHRpb25zQ29udGFpbmVyKSx0aGlzLmRvbUVsZW1lbnRzLnB1c2goZSl9fX0se2tleTpcIl9zZXR1cFBvcHVwXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzO2lmKCEwPT09dGhpcy5pbml0aWFsaXplZCYmITA9PT10aGlzLmFsbG93Q3JlYXRpb24mJnRoaXMucG9wdXBDb3VudGVyPHRoaXMucG9wdXBMaW1pdCl7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtvLmlkPVwidmlzLWNvbmZpZ3VyYXRpb24tcG9wdXBcIixvLmNsYXNzTmFtZT1cInZpcy1jb25maWd1cmF0aW9uLXBvcHVwXCIsby5pbm5lclRleHQ9dCxvLm9uY2xpY2s9ZnVuY3Rpb24oKXtpLl9yZW1vdmVQb3B1cCgpfSx0aGlzLnBvcHVwQ291bnRlcis9MSx0aGlzLnBvcHVwRGl2PXtodG1sOm8saW5kZXg6ZX19fX0se2tleTpcIl9yZW1vdmVQb3B1cFwiLHZhbHVlOmZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5wb3B1cERpdi5odG1sJiYodGhpcy5wb3B1cERpdi5odG1sLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3B1cERpdi5odG1sKSxjbGVhclRpbWVvdXQodGhpcy5wb3B1cERpdi5oaWRlVGltZW91dCksY2xlYXJUaW1lb3V0KHRoaXMucG9wdXBEaXYuZGVsZXRlVGltZW91dCksdGhpcy5wb3B1cERpdj17fSl9fSx7a2V5OlwiX3Nob3dQb3B1cElmTmVlZGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHZvaWQgMCE9PXRoaXMucG9wdXBEaXYuaHRtbCl7dmFyIGU9dGhpcy5kb21FbGVtZW50c1t0aGlzLnBvcHVwRGl2LmluZGV4XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLnBvcHVwRGl2Lmh0bWwuc3R5bGUubGVmdD1lLmxlZnQrXCJweFwiLHRoaXMucG9wdXBEaXYuaHRtbC5zdHlsZS50b3A9ZS50b3AtMzArXCJweFwiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5wb3B1cERpdi5odG1sKSx0aGlzLnBvcHVwRGl2LmhpZGVUaW1lb3V0PWJ2KChmdW5jdGlvbigpe3QucG9wdXBEaXYuaHRtbC5zdHlsZS5vcGFjaXR5PTB9KSwxNTAwKSx0aGlzLnBvcHVwRGl2LmRlbGV0ZVRpbWVvdXQ9YnYoKGZ1bmN0aW9uKCl7dC5fcmVtb3ZlUG9wdXAoKX0pLDE4MDApfX19LHtrZXk6XCJfbWFrZUNoZWNrYm94XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtvLnR5cGU9XCJjaGVja2JveFwiLG8uY2xhc3NOYW1lPVwidmlzLWNvbmZpZ3VyYXRpb24gdmlzLWNvbmZpZy1jaGVja2JveFwiLG8uY2hlY2tlZD10LHZvaWQgMCE9PWUmJihvLmNoZWNrZWQ9ZSxlIT09dCYmKFwib2JqZWN0XCI9PT1RYyh0KT9lIT09dC5lbmFibGVkJiZ0aGlzLmNoYW5nZWRPcHRpb25zLnB1c2goe3BhdGg6aSx2YWx1ZTplfSk6dGhpcy5jaGFuZ2VkT3B0aW9ucy5wdXNoKHtwYXRoOmksdmFsdWU6ZX0pKSk7dmFyIG49dGhpcztvLm9uY2hhbmdlPWZ1bmN0aW9uKCl7bi5fdXBkYXRlKHRoaXMuY2hlY2tlZCxpKX07dmFyIHI9dGhpcy5fbWFrZUxhYmVsKGlbaS5sZW5ndGgtMV0saSk7dGhpcy5fbWFrZUl0ZW0oaSxyLG8pfX0se2tleTpcIl9tYWtlVGV4dElucHV0XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtvLnR5cGU9XCJ0ZXh0XCIsby5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLXRleHRcIixvLnZhbHVlPWUsZSE9PXQmJnRoaXMuY2hhbmdlZE9wdGlvbnMucHVzaCh7cGF0aDppLHZhbHVlOmV9KTt2YXIgbj10aGlzO28ub25jaGFuZ2U9ZnVuY3Rpb24oKXtuLl91cGRhdGUodGhpcy52YWx1ZSxpKX07dmFyIHI9dGhpcy5fbWFrZUxhYmVsKGlbaS5sZW5ndGgtMV0saSk7dGhpcy5fbWFrZUl0ZW0oaSxyLG8pfX0se2tleTpcIl9tYWtlQ29sb3JGaWVsZFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgbz10aGlzLG49dFsxXSxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XCJub25lXCIhPT0oZT12b2lkIDA9PT1lP246ZSk/KHIuY2xhc3NOYW1lPVwidmlzLWNvbmZpZ3VyYXRpb24gdmlzLWNvbmZpZy1jb2xvckJsb2NrXCIsci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9ZSk6ci5jbGFzc05hbWU9XCJ2aXMtY29uZmlndXJhdGlvbiB2aXMtY29uZmlnLWNvbG9yQmxvY2sgbm9uZVwiLGU9dm9pZCAwPT09ZT9uOmUsci5vbmNsaWNrPWZ1bmN0aW9uKCl7by5fc2hvd0NvbG9yUGlja2VyKGUscixpKX07dmFyIHM9dGhpcy5fbWFrZUxhYmVsKGlbaS5sZW5ndGgtMV0saSk7dGhpcy5fbWFrZUl0ZW0oaSxzLHIpfX0se2tleTpcIl9zaG93Q29sb3JQaWNrZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89dGhpcztlLm9uY2xpY2s9ZnVuY3Rpb24oKXt9LHRoaXMuY29sb3JQaWNrZXIuaW5zZXJ0VG8oZSksdGhpcy5jb2xvclBpY2tlci5zaG93KCksdGhpcy5jb2xvclBpY2tlci5zZXRDb2xvcih0KSx0aGlzLmNvbG9yUGlja2VyLnNldFVwZGF0ZUNhbGxiYWNrKChmdW5jdGlvbih0KXt2YXIgbj1cInJnYmEoXCIrdC5yK1wiLFwiK3QuZytcIixcIit0LmIrXCIsXCIrdC5hK1wiKVwiO2Uuc3R5bGUuYmFja2dyb3VuZENvbG9yPW4sby5fdXBkYXRlKG4saSl9KSksdGhpcy5jb2xvclBpY2tlci5zZXRDbG9zZUNhbGxiYWNrKChmdW5jdGlvbigpe2Uub25jbGljaz1mdW5jdGlvbigpe28uX3Nob3dDb2xvclBpY2tlcih0LGUsaSl9fSkpfX0se2tleTpcIl9oYW5kbGVPYmplY3RcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06W10saT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG89ITEsbj1ZZih0aGlzLm9wdGlvbnMpLHI9ITE7Zm9yKHZhciBzIGluIHQpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscykpe289ITA7dmFyIGE9dFtzXSxoPWp5KGUscyk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmITE9PT0obz1uKHMsZSkpJiYhaHUoYSkmJlwic3RyaW5nXCIhPXR5cGVvZiBhJiZcImJvb2xlYW5cIiE9dHlwZW9mIGEmJmEgaW5zdGFuY2VvZiBPYmplY3QmJih0aGlzLmFsbG93Q3JlYXRpb249ITEsbz10aGlzLl9oYW5kbGVPYmplY3QoYSxoLCEwKSx0aGlzLmFsbG93Q3JlYXRpb249ITE9PT1pKSwhMSE9PW8pe3I9ITA7dmFyIGQ9dGhpcy5fZ2V0VmFsdWUoaCk7aWYoaHUoYSkpdGhpcy5faGFuZGxlQXJyYXkoYSxkLGgpO2Vsc2UgaWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpdGhpcy5fbWFrZVRleHRJbnB1dChhLGQsaCk7ZWxzZSBpZihcImJvb2xlYW5cIj09dHlwZW9mIGEpdGhpcy5fbWFrZUNoZWNrYm94KGEsZCxoKTtlbHNlIGlmKGEgaW5zdGFuY2VvZiBPYmplY3Qpe2lmKCF0aGlzLmhpZGVPcHRpb24oZSxzLHRoaXMubW9kdWxlT3B0aW9ucykpaWYodm9pZCAwIT09YS5lbmFibGVkKXt2YXIgbD1qeShoLFwiZW5hYmxlZFwiKSxjPXRoaXMuX2dldFZhbHVlKGwpO2lmKCEwPT09Yyl7dmFyIHU9dGhpcy5fbWFrZUxhYmVsKHMsaCwhMCk7dGhpcy5fbWFrZUl0ZW0oaCx1KSxyPXRoaXMuX2hhbmRsZU9iamVjdChhLGgpfHxyfWVsc2UgdGhpcy5fbWFrZUNoZWNrYm94KGEsYyxoKX1lbHNle3ZhciBmPXRoaXMuX21ha2VMYWJlbChzLGgsITApO3RoaXMuX21ha2VJdGVtKGgsZikscj10aGlzLl9oYW5kbGVPYmplY3QoYSxoKXx8cn19ZWxzZSBjb25zb2xlLmVycm9yKFwiZG9udCBrbm93IGhvdyB0byBoYW5kbGVcIixhLHMsaCl9fXJldHVybiByfX0se2tleTpcIl9oYW5kbGVBcnJheVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXtcInN0cmluZ1wiPT10eXBlb2YgdFswXSYmXCJjb2xvclwiPT09dFswXT8odGhpcy5fbWFrZUNvbG9yRmllbGQodCxlLGkpLHRbMV0hPT1lJiZ0aGlzLmNoYW5nZWRPcHRpb25zLnB1c2goe3BhdGg6aSx2YWx1ZTplfSkpOlwic3RyaW5nXCI9PXR5cGVvZiB0WzBdPyh0aGlzLl9tYWtlRHJvcGRvd24odCxlLGkpLHRbMF0hPT1lJiZ0aGlzLmNoYW5nZWRPcHRpb25zLnB1c2goe3BhdGg6aSx2YWx1ZTplfSkpOlwibnVtYmVyXCI9PXR5cGVvZiB0WzBdJiYodGhpcy5fbWFrZVJhbmdlKHQsZSxpKSx0WzBdIT09ZSYmdGhpcy5jaGFuZ2VkT3B0aW9ucy5wdXNoKHtwYXRoOmksdmFsdWU6TnVtYmVyKGUpfSkpfX0se2tleTpcIl91cGRhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuX2NvbnN0cnVjdE9wdGlvbnModCxlKTt0aGlzLnBhcmVudC5ib2R5JiZ0aGlzLnBhcmVudC5ib2R5LmVtaXR0ZXImJnRoaXMucGFyZW50LmJvZHkuZW1pdHRlci5lbWl0JiZ0aGlzLnBhcmVudC5ib2R5LmVtaXR0ZXIuZW1pdChcImNvbmZpZ0NoYW5nZVwiLGkpLHRoaXMuaW5pdGlhbGl6ZWQ9ITAsdGhpcy5wYXJlbnQuc2V0T3B0aW9ucyhpKX19LHtrZXk6XCJfY29uc3RydWN0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9LG89aTt0PVwiZmFsc2VcIiE9PSh0PVwidHJ1ZVwiPT09dHx8dCkmJnQ7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspXCJnbG9iYWxcIiE9PWVbbl0mJih2b2lkIDA9PT1vW2Vbbl1dJiYob1tlW25dXT17fSksbiE9PWUubGVuZ3RoLTE/bz1vW2Vbbl1dOm9bZVtuXV09dCk7cmV0dXJuIGl9fSx7a2V5OlwiX3ByaW50T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuZ2V0T3B0aW9ucygpO3RoaXMub3B0aW9uc0NvbnRhaW5lci5maXJzdENoaWxkOyl0aGlzLm9wdGlvbnNDb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5vcHRpb25zQ29udGFpbmVyLmZpcnN0Q2hpbGQpO3RoaXMub3B0aW9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChybShcInByZVwiLFwiY29uc3Qgb3B0aW9ucyA9IFwiK2h2KHQsbnVsbCwyKSkpfX0se2tleTpcImdldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD17fSxlPTA7ZTx0aGlzLmNoYW5nZWRPcHRpb25zLmxlbmd0aDtlKyspdGhpcy5fY29uc3RydWN0T3B0aW9ucyh0aGlzLmNoYW5nZWRPcHRpb25zW2VdLnZhbHVlLHRoaXMuY2hhbmdlZE9wdGlvbnNbZV0ucGF0aCx0KTtyZXR1cm4gdH19XSksdH0oKSxobT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpKXtYbCh0aGlzLHQpLHRoaXMuY29udGFpbmVyPWUsdGhpcy5vdmVyZmxvd01ldGhvZD1pfHxcImNhcFwiLHRoaXMueD0wLHRoaXMueT0wLHRoaXMucGFkZGluZz01LHRoaXMuaGlkZGVuPSExLHRoaXMuZnJhbWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmZyYW1lLmNsYXNzTmFtZT1cInZpcy10b29sdGlwXCIsdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5mcmFtZSl9cmV0dXJuICRsKHQsW3trZXk6XCJzZXRQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy54PV9wKHQpLHRoaXMueT1fcChlKX19LHtrZXk6XCJzZXRUZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodCBpbnN0YW5jZW9mIEVsZW1lbnQpe2Zvcig7dGhpcy5mcmFtZS5maXJzdENoaWxkOyl0aGlzLmZyYW1lLnJlbW92ZUNoaWxkKHRoaXMuZnJhbWUuZmlyc3RDaGlsZCk7dGhpcy5mcmFtZS5hcHBlbmRDaGlsZCh0KX1lbHNlIHRoaXMuZnJhbWUuaW5uZXJUZXh0PXR9fSx7a2V5Olwic2hvd1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQmJih0PSEwKSwhMD09PXQpe3ZhciBlPXRoaXMuZnJhbWUuY2xpZW50SGVpZ2h0LGk9dGhpcy5mcmFtZS5jbGllbnRXaWR0aCxvPXRoaXMuZnJhbWUucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQsbj10aGlzLmZyYW1lLnBhcmVudE5vZGUuY2xpZW50V2lkdGgscj0wLHM9MDtpZihcImZsaXBcIj09dGhpcy5vdmVyZmxvd01ldGhvZCl7dmFyIGE9ITEsaD0hMDt0aGlzLnktZTx0aGlzLnBhZGRpbmcmJihoPSExKSx0aGlzLngraT5uLXRoaXMucGFkZGluZyYmKGE9ITApLHI9YT90aGlzLngtaTp0aGlzLngscz1oP3RoaXMueS1lOnRoaXMueX1lbHNlKHM9dGhpcy55LWUpK2UrdGhpcy5wYWRkaW5nPm8mJihzPW8tZS10aGlzLnBhZGRpbmcpLHM8dGhpcy5wYWRkaW5nJiYocz10aGlzLnBhZGRpbmcpLChyPXRoaXMueCkraSt0aGlzLnBhZGRpbmc+biYmKHI9bi1pLXRoaXMucGFkZGluZykscjx0aGlzLnBhZGRpbmcmJihyPXRoaXMucGFkZGluZyk7dGhpcy5mcmFtZS5zdHlsZS5sZWZ0PXIrXCJweFwiLHRoaXMuZnJhbWUuc3R5bGUudG9wPXMrXCJweFwiLHRoaXMuZnJhbWUuc3R5bGUudmlzaWJpbGl0eT1cInZpc2libGVcIix0aGlzLmhpZGRlbj0hMX1lbHNlIHRoaXMuaGlkZSgpfX0se2tleTpcImhpZGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaGlkZGVuPSEwLHRoaXMuZnJhbWUuc3R5bGUubGVmdD1cIjBcIix0aGlzLmZyYW1lLnN0eWxlLnRvcD1cIjBcIix0aGlzLmZyYW1lLnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIn19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mcmFtZSl9fV0pLHR9KCksZG09ITEsbG09XCJiYWNrZ3JvdW5kOiAjRkZlZWVlOyBjb2xvcjogI2RkMDAwMFwiLGNtPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe1hsKHRoaXMsdCl9cmV0dXJuICRsKHQsbnVsbCxbe2tleTpcInZhbGlkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSxpLG8pe2RtPSExLHNtPWk7dmFyIG49aTtyZXR1cm4gdm9pZCAwIT09byYmKG49aVtvXSksdC5wYXJzZShlLG4sW10pLGRtfX0se2tleTpcInBhcnNlXCIsdmFsdWU6ZnVuY3Rpb24oZSxpLG8pe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiZ0LmNoZWNrKG4sZSxpLG8pfX0se2tleTpcImNoZWNrXCIsdmFsdWU6ZnVuY3Rpb24oZSxpLG8sbil7aWYodm9pZCAwIT09b1tlXXx8dm9pZCAwIT09by5fX2FueV9fKXt2YXIgcj1lLHM9ITA7dm9pZCAwPT09b1tlXSYmdm9pZCAwIT09by5fX2FueV9fJiYocj1cIl9fYW55X19cIixzPVwib2JqZWN0XCI9PT10LmdldFR5cGUoaVtlXSkpO3ZhciBhPW9bcl07cyYmdm9pZCAwIT09YS5fX3R5cGVfXyYmKGE9YS5fX3R5cGVfXyksdC5jaGVja0ZpZWxkcyhlLGksbyxyLGEsbil9ZWxzZSB0LmdldFN1Z2dlc3Rpb24oZSxvLG4pfX0se2tleTpcImNoZWNrRmllbGRzXCIsdmFsdWU6ZnVuY3Rpb24oZSxpLG8sbixyLHMpe3ZhciBhPWZ1bmN0aW9uKGkpe2NvbnNvbGUuZXJyb3IoXCIlY1wiK2krdC5wcmludExvY2F0aW9uKHMsZSksbG0pfSxoPXQuZ2V0VHlwZShpW2VdKSxkPXJbaF07dm9pZCAwIT09ZD9cImFycmF5XCI9PT10LmdldFR5cGUoZCkmJi0xPT09enAoZCkuY2FsbChkLGlbZV0pPyhhKCdJbnZhbGlkIG9wdGlvbiBkZXRlY3RlZCBpbiBcIicrZSsnXCIuIEFsbG93ZWQgdmFsdWVzIGFyZTonK3QucHJpbnQoZCkrJyBub3QgXCInK2lbZV0rJ1wiLiAnKSxkbT0hMCk6XCJvYmplY3RcIj09PWgmJlwiX19hbnlfX1wiIT09biYmKHM9ankocyxlKSx0LnBhcnNlKGlbZV0sb1tuXSxzKSk6dm9pZCAwPT09ci5hbnkmJihhKCdJbnZhbGlkIHR5cGUgcmVjZWl2ZWQgZm9yIFwiJytlKydcIi4gRXhwZWN0ZWQ6ICcrdC5wcmludChtdShyKSkrXCIuIFJlY2VpdmVkIFtcIitoKyddIFwiJytpW2VdKydcIicpLGRtPSEwKX19LHtrZXk6XCJnZXRUeXBlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9UWModCk7cmV0dXJuXCJvYmplY3RcIj09PWU/bnVsbD09PXQ/XCJudWxsXCI6dCBpbnN0YW5jZW9mIEJvb2xlYW4/XCJib29sZWFuXCI6dCBpbnN0YW5jZW9mIE51bWJlcj9cIm51bWJlclwiOnQgaW5zdGFuY2VvZiBTdHJpbmc/XCJzdHJpbmdcIjpodSh0KT9cImFycmF5XCI6dCBpbnN0YW5jZW9mIERhdGU/XCJkYXRlXCI6dm9pZCAwIT09dC5ub2RlVHlwZT9cImRvbVwiOiEwPT09dC5faXNBTW9tZW50T2JqZWN0P1wibW9tZW50XCI6XCJvYmplY3RcIjpcIm51bWJlclwiPT09ZT9cIm51bWJlclwiOlwiYm9vbGVhblwiPT09ZT9cImJvb2xlYW5cIjpcInN0cmluZ1wiPT09ZT9cInN0cmluZ1wiOnZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjplfX0se2tleTpcImdldFN1Z2dlc3Rpb25cIix2YWx1ZTpmdW5jdGlvbihlLGksbyl7dmFyIG4scj10LmZpbmRJbk9wdGlvbnMoZSxpLG8sITEpLHM9dC5maW5kSW5PcHRpb25zKGUsc20sW10sITApO249dm9pZCAwIT09ci5pbmRleE1hdGNoP1wiIGluIFwiK3QucHJpbnRMb2NhdGlvbihyLnBhdGgsZSxcIlwiKSsnUGVyaGFwcyBpdCB3YXMgaW5jb21wbGV0ZT8gRGlkIHlvdSBtZWFuOiBcIicrci5pbmRleE1hdGNoKydcIj9cXG5cXG4nOnMuZGlzdGFuY2U8PTQmJnIuZGlzdGFuY2U+cy5kaXN0YW5jZT9cIiBpbiBcIit0LnByaW50TG9jYXRpb24oci5wYXRoLGUsXCJcIikrXCJQZXJoYXBzIGl0IHdhcyBtaXNwbGFjZWQ/IE1hdGNoaW5nIG9wdGlvbiBmb3VuZCBhdDogXCIrdC5wcmludExvY2F0aW9uKHMucGF0aCxzLmNsb3Nlc3RNYXRjaCxcIlwiKTpyLmRpc3RhbmNlPD04PycuIERpZCB5b3UgbWVhbiBcIicrci5jbG9zZXN0TWF0Y2grJ1wiPycrdC5wcmludExvY2F0aW9uKHIucGF0aCxlKTpcIi4gRGlkIHlvdSBtZWFuIG9uZSBvZiB0aGVzZTogXCIrdC5wcmludChtdShpKSkrdC5wcmludExvY2F0aW9uKG8sZSksY29uc29sZS5lcnJvcignJWNVbmtub3duIG9wdGlvbiBkZXRlY3RlZDogXCInK2UrJ1wiJytuLGxtKSxkbT0hMH19LHtrZXk6XCJmaW5kSW5PcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oZSxpLG8pe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdJiZhcmd1bWVudHNbM10scj0xZTkscz1cIlwiLGE9W10saD1lLnRvTG93ZXJDYXNlKCksZD12b2lkIDA7Zm9yKHZhciBsIGluIGkpe3ZhciBjPXZvaWQgMDtpZih2b2lkIDAhPT1pW2xdLl9fdHlwZV9fJiYhMD09PW4pe3ZhciB1PXQuZmluZEluT3B0aW9ucyhlLGlbbF0sankobyxsKSk7cj51LmRpc3RhbmNlJiYocz11LmNsb3Nlc3RNYXRjaCxhPXUucGF0aCxyPXUuZGlzdGFuY2UsZD11LmluZGV4TWF0Y2gpfWVsc2V7dmFyIGY7LTEhPT16cChmPWwudG9Mb3dlckNhc2UoKSkuY2FsbChmLGgpJiYoZD1sKSxyPihjPXQubGV2ZW5zaHRlaW5EaXN0YW5jZShlLGwpKSYmKHM9bCxhPUx5KG8pLHI9Yyl9fXJldHVybntjbG9zZXN0TWF0Y2g6cyxwYXRoOmEsZGlzdGFuY2U6cixpbmRleE1hdGNoOmR9fX0se2tleTpcInByaW50TG9jYXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCJQcm9ibGVtIHZhbHVlIGZvdW5kIGF0OiBcXG5cIixvPVwiXFxuXFxuXCIraStcIm9wdGlvbnMgPSB7XFxuXCIsbj0wO248dC5sZW5ndGg7bisrKXtmb3IodmFyIHI9MDtyPG4rMTtyKyspbys9XCIgIFwiO28rPXRbbl0rXCI6IHtcXG5cIn1mb3IodmFyIHM9MDtzPHQubGVuZ3RoKzE7cysrKW8rPVwiICBcIjtvKz1lK1wiXFxuXCI7Zm9yKHZhciBhPTA7YTx0Lmxlbmd0aCsxO2ErKyl7Zm9yKHZhciBoPTA7aDx0Lmxlbmd0aC1hO2grKylvKz1cIiAgXCI7bys9XCJ9XFxuXCJ9cmV0dXJuIG8rXCJcXG5cXG5cIn19LHtrZXk6XCJwcmludFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBodih0KS5yZXBsYWNlKC8oXCIpfChcXFspfChcXF0pfCgsXCJfX3R5cGVfX1wiKS9nLFwiXCIpLnJlcGxhY2UoLygsKS9nLFwiLCBcIil9fSx7a2V5OlwibGV2ZW5zaHRlaW5EaXN0YW5jZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoMD09PXQubGVuZ3RoKXJldHVybiBlLmxlbmd0aDtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIHQubGVuZ3RoO3ZhciBpLG8sbj1bXTtmb3IoaT0wO2k8PWUubGVuZ3RoO2krKyluW2ldPVtpXTtmb3Iobz0wO288PXQubGVuZ3RoO28rKyluWzBdW29dPW87Zm9yKGk9MTtpPD1lLmxlbmd0aDtpKyspZm9yKG89MTtvPD10Lmxlbmd0aDtvKyspZS5jaGFyQXQoaS0xKT09dC5jaGFyQXQoby0xKT9uW2ldW29dPW5baS0xXVtvLTFdOm5baV1bb109TWF0aC5taW4obltpLTFdW28tMV0rMSxNYXRoLm1pbihuW2ldW28tMV0rMSxuW2ktMV1bb10rMSkpO3JldHVybiBuW2UubGVuZ3RoXVt0Lmxlbmd0aF19fV0pLHR9KCksdW09Q3ksZm09YW0scG09T3ksdm09aG0sZ209bG0seW09Y207ZnVuY3Rpb24gbW0odCl7cmV0dXJuIENtPXQsZnVuY3Rpb24oKXt2YXIgdD17fTtTbT0wLHZvaWQoVG09Q20uY2hhckF0KDApKSxqbSgpLFwic3RyaWN0XCI9PT1NbSYmKHQuc3RyaWN0PSEwLGptKCkpO1wiZ3JhcGhcIiE9PU1tJiZcImRpZ3JhcGhcIiE9PU1tfHwodC50eXBlPU1tLGptKCkpO1BtPT09eG0mJih0LmlkPU1tLGptKCkpO2lmKFwie1wiIT1NbSl0aHJvdyBVbShcIkFuZ2xlIGJyYWNrZXQgeyBleHBlY3RlZFwiKTtpZihqbSgpLExtKHQpLFwifVwiIT1NbSl0aHJvdyBVbShcIkFuZ2xlIGJyYWNrZXQgfSBleHBlY3RlZFwiKTtpZihqbSgpLFwiXCIhPT1NbSl0aHJvdyBVbShcIkVuZCBvZiBmaWxlIGV4cGVjdGVkXCIpO3JldHVybiBqbSgpLGRlbGV0ZSB0Lm5vZGUsZGVsZXRlIHQuZWRnZSxkZWxldGUgdC5ncmFwaCx0fSgpfXZhciBibT17Zm9udHNpemU6XCJmb250LnNpemVcIixmb250Y29sb3I6XCJmb250LmNvbG9yXCIsbGFiZWxmb250Y29sb3I6XCJmb250LmNvbG9yXCIsZm9udG5hbWU6XCJmb250LmZhY2VcIixjb2xvcjpbXCJjb2xvci5ib3JkZXJcIixcImNvbG9yLmJhY2tncm91bmRcIl0sZmlsbGNvbG9yOlwiY29sb3IuYmFja2dyb3VuZFwiLHRvb2x0aXA6XCJ0aXRsZVwiLGxhYmVsdG9vbHRpcDpcInRpdGxlXCJ9LHdtPUhwKGJtKTt3bS5jb2xvcj1cImNvbG9yLmNvbG9yXCIsd20uc3R5bGU9XCJkYXNoZXNcIjt2YXIga209MCxfbT0xLHhtPTIsRW09MyxPbT17XCJ7XCI6ITAsXCJ9XCI6ITAsXCJbXCI6ITAsXCJdXCI6ITAsXCI7XCI6ITAsXCI9XCI6ITAsXCIsXCI6ITAsXCItPlwiOiEwLFwiLS1cIjohMH0sQ209XCJcIixTbT0wLFRtPVwiXCIsTW09XCJcIixQbT1rbTtmdW5jdGlvbiBEbSgpe1NtKyssVG09Q20uY2hhckF0KFNtKX1mdW5jdGlvbiBCbSgpe3JldHVybiBDbS5jaGFyQXQoU20rMSl9ZnVuY3Rpb24gSW0odCl7dmFyIGU9dC5jaGFyQ29kZUF0KDApO3JldHVybiBlPDQ3PzM1PT09ZXx8NDY9PT1lOmU8NTk/ZT40NzplPDkxP2U+NjQ6ZTw5Nj85NT09PWU6ZTwxMjMmJmU+OTZ9ZnVuY3Rpb24gem0odCxlKXtpZih0fHwodD17fSksZSlmb3IodmFyIGkgaW4gZSllLmhhc093blByb3BlcnR5KGkpJiYodFtpXT1lW2ldKTtyZXR1cm4gdH1mdW5jdGlvbiBGbSh0LGUsaSl7Zm9yKHZhciBvPWUuc3BsaXQoXCIuXCIpLG49dDtvLmxlbmd0aDspe3ZhciByPW8uc2hpZnQoKTtvLmxlbmd0aD8obltyXXx8KG5bcl09e30pLG49bltyXSk6bltyXT1pfX1mdW5jdGlvbiBObSh0LGUpe2Zvcih2YXIgaSxvLG49bnVsbCxyPVt0XSxzPXQ7cy5wYXJlbnQ7KXIucHVzaChzLnBhcmVudCkscz1zLnBhcmVudDtpZihzLm5vZGVzKWZvcihpPTAsbz1zLm5vZGVzLmxlbmd0aDtpPG87aSsrKWlmKGUuaWQ9PT1zLm5vZGVzW2ldLmlkKXtuPXMubm9kZXNbaV07YnJlYWt9Zm9yKG58fChuPXtpZDplLmlkfSx0Lm5vZGUmJihuLmF0dHI9em0obi5hdHRyLHQubm9kZSkpKSxpPXIubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBhLGg9cltpXTtoLm5vZGVzfHwoaC5ub2Rlcz1bXSksLTE9PT16cChhPWgubm9kZXMpLmNhbGwoYSxuKSYmaC5ub2Rlcy5wdXNoKG4pfWUuYXR0ciYmKG4uYXR0cj16bShuLmF0dHIsZS5hdHRyKSl9ZnVuY3Rpb24gQW0odCxlKXtpZih0LmVkZ2VzfHwodC5lZGdlcz1bXSksdC5lZGdlcy5wdXNoKGUpLHQuZWRnZSl7dmFyIGk9em0oe30sdC5lZGdlKTtlLmF0dHI9em0oaSxlLmF0dHIpfX1mdW5jdGlvbiBSbSh0LGUsaSxvLG4pe3ZhciByPXtmcm9tOmUsdG86aSx0eXBlOm99O3JldHVybiB0LmVkZ2UmJihyLmF0dHI9em0oe30sdC5lZGdlKSksci5hdHRyPXptKHIuYXR0cnx8e30sbiksbnVsbCE9biYmbi5oYXNPd25Qcm9wZXJ0eShcImFycm93c1wiKSYmbnVsbCE9bi5hcnJvd3MmJihyLmFycm93cz17dG86e2VuYWJsZWQ6ITAsdHlwZTpuLmFycm93cy50eXBlfX0sbi5hcnJvd3M9bnVsbCkscn1mdW5jdGlvbiBqbSgpe2ZvcihQbT1rbSxNbT1cIlwiO1wiIFwiPT09VG18fFwiXFx0XCI9PT1UbXx8XCJcXG5cIj09PVRtfHxcIlxcclwiPT09VG07KURtKCk7ZG97dmFyIHQ9ITE7aWYoXCIjXCI9PT1UbSl7Zm9yKHZhciBlPVNtLTE7XCIgXCI9PT1DbS5jaGFyQXQoZSl8fFwiXFx0XCI9PT1DbS5jaGFyQXQoZSk7KWUtLTtpZihcIlxcblwiPT09Q20uY2hhckF0KGUpfHxcIlwiPT09Q20uY2hhckF0KGUpKXtmb3IoO1wiXCIhPVRtJiZcIlxcblwiIT1UbTspRG0oKTt0PSEwfX1pZihcIi9cIj09PVRtJiZcIi9cIj09PUJtKCkpe2Zvcig7XCJcIiE9VG0mJlwiXFxuXCIhPVRtOylEbSgpO3Q9ITB9aWYoXCIvXCI9PT1UbSYmXCIqXCI9PT1CbSgpKXtmb3IoO1wiXCIhPVRtOyl7aWYoXCIqXCI9PT1UbSYmXCIvXCI9PT1CbSgpKXtEbSgpLERtKCk7YnJlYWt9RG0oKX10PSEwfWZvcig7XCIgXCI9PT1UbXx8XCJcXHRcIj09PVRtfHxcIlxcblwiPT09VG18fFwiXFxyXCI9PT1UbTspRG0oKX13aGlsZSh0KTtpZihcIlwiIT09VG0pe3ZhciBpPVRtK0JtKCk7aWYoT21baV0pcmV0dXJuIFBtPV9tLE1tPWksRG0oKSx2b2lkIERtKCk7aWYoT21bVG1dKXJldHVybiBQbT1fbSxNbT1UbSx2b2lkIERtKCk7aWYoSW0oVG0pfHxcIi1cIj09PVRtKXtmb3IoTW0rPVRtLERtKCk7SW0oVG0pOylNbSs9VG0sRG0oKTtyZXR1cm5cImZhbHNlXCI9PT1NbT9NbT0hMTpcInRydWVcIj09PU1tP01tPSEwOmlzTmFOKE51bWJlcihNbSkpfHwoTW09TnVtYmVyKE1tKSksdm9pZChQbT14bSl9aWYoJ1wiJz09PVRtKXtmb3IoRG0oKTtcIlwiIT1UbSYmKCdcIichPVRtfHwnXCInPT09VG0mJidcIic9PT1CbSgpKTspJ1wiJz09PVRtPyhNbSs9VG0sRG0oKSk6XCJcXFxcXCI9PT1UbSYmXCJuXCI9PT1CbSgpPyhNbSs9XCJcXG5cIixEbSgpKTpNbSs9VG0sRG0oKTtpZignXCInIT1UbSl0aHJvdyBVbSgnRW5kIG9mIHN0cmluZyBcIiBleHBlY3RlZCcpO3JldHVybiBEbSgpLHZvaWQoUG09eG0pfWZvcihQbT1FbTtcIlwiIT1UbTspTW0rPVRtLERtKCk7dGhyb3cgbmV3IFN5bnRheEVycm9yKCdTeW50YXggZXJyb3IgaW4gcGFydCBcIicrWW0oTW0sMzApKydcIicpfVBtPV9tfWZ1bmN0aW9uIExtKHQpe2Zvcig7XCJcIiE9PU1tJiZcIn1cIiE9TW07KUhtKHQpLFwiO1wiPT09TW0mJmptKCl9ZnVuY3Rpb24gSG0odCl7dmFyIGU9V20odCk7aWYoZSlWbSh0LGUpO2Vsc2V7dmFyIGk9ZnVuY3Rpb24odCl7aWYoXCJub2RlXCI9PT1NbSlyZXR1cm4gam0oKSx0Lm5vZGU9cW0oKSxcIm5vZGVcIjtpZihcImVkZ2VcIj09PU1tKXJldHVybiBqbSgpLHQuZWRnZT1xbSgpLFwiZWRnZVwiO2lmKFwiZ3JhcGhcIj09PU1tKXJldHVybiBqbSgpLHQuZ3JhcGg9cW0oKSxcImdyYXBoXCI7cmV0dXJuIG51bGx9KHQpO2lmKCFpKXtpZihQbSE9eG0pdGhyb3cgVW0oXCJJZGVudGlmaWVyIGV4cGVjdGVkXCIpO3ZhciBvPU1tO2lmKGptKCksXCI9XCI9PT1NbSl7aWYoam0oKSxQbSE9eG0pdGhyb3cgVW0oXCJJZGVudGlmaWVyIGV4cGVjdGVkXCIpO3Rbb109TW0sam0oKX1lbHNlIWZ1bmN0aW9uKHQsZSl7dmFyIGk9e2lkOmV9LG89cW0oKTtvJiYoaS5hdHRyPW8pO05tKHQsaSksVm0odCxlKX0odCxvKX19fWZ1bmN0aW9uIFdtKHQpe3ZhciBlPW51bGw7aWYoXCJzdWJncmFwaFwiPT09TW0mJigoZT17fSkudHlwZT1cInN1YmdyYXBoXCIsam0oKSxQbT09PXhtJiYoZS5pZD1NbSxqbSgpKSksXCJ7XCI9PT1NbSl7aWYoam0oKSxlfHwoZT17fSksZS5wYXJlbnQ9dCxlLm5vZGU9dC5ub2RlLGUuZWRnZT10LmVkZ2UsZS5ncmFwaD10LmdyYXBoLExtKGUpLFwifVwiIT1NbSl0aHJvdyBVbShcIkFuZ2xlIGJyYWNrZXQgfSBleHBlY3RlZFwiKTtqbSgpLGRlbGV0ZSBlLm5vZGUsZGVsZXRlIGUuZWRnZSxkZWxldGUgZS5ncmFwaCxkZWxldGUgZS5wYXJlbnQsdC5zdWJncmFwaHN8fCh0LnN1YmdyYXBocz1bXSksdC5zdWJncmFwaHMucHVzaChlKX1yZXR1cm4gZX1mdW5jdGlvbiBWbSh0LGUpe2Zvcig7XCItPlwiPT09TW18fFwiLS1cIj09PU1tOyl7dmFyIGksbz1NbTtqbSgpO3ZhciBuPVdtKHQpO2lmKG4paT1uO2Vsc2V7aWYoUG0hPXhtKXRocm93IFVtKFwiSWRlbnRpZmllciBvciBzdWJncmFwaCBleHBlY3RlZFwiKTtObSh0LHtpZDppPU1tfSksam0oKX1BbSh0LFJtKHQsZSxpLG8scW0oKSkpLGU9aX19ZnVuY3Rpb24gcW0oKXtmb3IodmFyIHQsZSxpPW51bGwsbz17ZGFzaGVkOiEwLHNvbGlkOiExLGRvdHRlZDpbMSw1XX0sbj17ZG90OlwiY2lyY2xlXCIsYm94OlwiYm94XCIsY3JvdzpcImNyb3dcIixjdXJ2ZTpcImN1cnZlXCIsaWN1cnZlOlwiaW52X2N1cnZlXCIsbm9ybWFsOlwidHJpYW5nbGVcIixpbnY6XCJpbnZfdHJpYW5nbGVcIixkaWFtb25kOlwiZGlhbW9uZFwiLHRlZTpcImJhclwiLHZlZTpcInZlZVwifSxyPW5ldyBBcnJheSxzPW5ldyBBcnJheTtcIltcIj09PU1tOyl7Zm9yKGptKCksaT17fTtcIlwiIT09TW0mJlwiXVwiIT1NbTspe2lmKFBtIT14bSl0aHJvdyBVbShcIkF0dHJpYnV0ZSBuYW1lIGV4cGVjdGVkXCIpO3ZhciBhPU1tO2lmKGptKCksXCI9XCIhPU1tKXRocm93IFVtKFwiRXF1YWwgc2lnbiA9IGV4cGVjdGVkXCIpO2lmKGptKCksUG0hPXhtKXRocm93IFVtKFwiQXR0cmlidXRlIHZhbHVlIGV4cGVjdGVkXCIpO3ZhciBoPU1tO1wic3R5bGVcIj09PWEmJihoPW9baF0pLFwiYXJyb3doZWFkXCI9PT1hJiYoYT1cImFycm93c1wiLGg9e3RvOntlbmFibGVkOiEwLHR5cGU6bltoXX19KSxcImFycm93dGFpbFwiPT09YSYmKGE9XCJhcnJvd3NcIixoPXtmcm9tOntlbmFibGVkOiEwLHR5cGU6bltoXX19KSxyLnB1c2goe2F0dHI6aSxuYW1lOmEsdmFsdWU6aH0pLHMucHVzaChhKSxqbSgpLFwiLFwiPT1NbSYmam0oKX1pZihcIl1cIiE9TW0pdGhyb3cgVW0oXCJCcmFja2V0IF0gZXhwZWN0ZWRcIik7am0oKX1pZih6ZihzKS5jYWxsKHMsXCJkaXJcIikpe3ZhciBkPXthcnJvd3M6e319O2Zvcih0PTA7dDxyLmxlbmd0aDt0KyspaWYoXCJhcnJvd3NcIj09PXJbdF0ubmFtZSlpZihudWxsIT1yW3RdLnZhbHVlLnRvKWQuYXJyb3dzLnRvPXQ7ZWxzZXtpZihudWxsPT1yW3RdLnZhbHVlLmZyb20pdGhyb3cgVW0oXCJJbnZhbGlkIHZhbHVlIG9mIGFycm93c1wiKTtkLmFycm93cy5mcm9tPXR9ZWxzZVwiZGlyXCI9PT1yW3RdLm5hbWUmJihkLmRpcj10KTt2YXIgbCxjLHU9cltkLmRpcl0udmFsdWU7aWYoIXpmKHMpLmNhbGwocyxcImFycm93c1wiKSlpZihcImJvdGhcIj09PXUpci5wdXNoKHthdHRyOnJbZC5kaXJdLmF0dHIsbmFtZTpcImFycm93c1wiLHZhbHVlOnt0bzp7ZW5hYmxlZDohMH19fSksZC5hcnJvd3MudG89ci5sZW5ndGgtMSxyLnB1c2goe2F0dHI6cltkLmRpcl0uYXR0cixuYW1lOlwiYXJyb3dzXCIsdmFsdWU6e2Zyb206e2VuYWJsZWQ6ITB9fX0pLGQuYXJyb3dzLmZyb209ci5sZW5ndGgtMTtlbHNlIGlmKFwiZm9yd2FyZFwiPT09dSlyLnB1c2goe2F0dHI6cltkLmRpcl0uYXR0cixuYW1lOlwiYXJyb3dzXCIsdmFsdWU6e3RvOntlbmFibGVkOiEwfX19KSxkLmFycm93cy50bz1yLmxlbmd0aC0xO2Vsc2UgaWYoXCJiYWNrXCI9PT11KXIucHVzaCh7YXR0cjpyW2QuZGlyXS5hdHRyLG5hbWU6XCJhcnJvd3NcIix2YWx1ZTp7ZnJvbTp7ZW5hYmxlZDohMH19fSksZC5hcnJvd3MuZnJvbT1yLmxlbmd0aC0xO2Vsc2V7aWYoXCJub25lXCIhPT11KXRocm93IFVtKCdJbnZhbGlkIGRpciB0eXBlIFwiJyt1KydcIicpO3IucHVzaCh7YXR0cjpyW2QuZGlyXS5hdHRyLG5hbWU6XCJhcnJvd3NcIix2YWx1ZTpcIlwifSksZC5hcnJvd3MudG89ci5sZW5ndGgtMX1pZihcImJvdGhcIj09PXUpZC5hcnJvd3MudG8mJmQuYXJyb3dzLmZyb20/KGM9cltkLmFycm93cy50b10udmFsdWUudG8udHlwZSxsPXJbZC5hcnJvd3MuZnJvbV0udmFsdWUuZnJvbS50eXBlLHJbZC5hcnJvd3MudG9dPXthdHRyOnJbZC5hcnJvd3MudG9dLmF0dHIsbmFtZTpyW2QuYXJyb3dzLnRvXS5uYW1lLHZhbHVlOnt0bzp7ZW5hYmxlZDohMCx0eXBlOmN9LGZyb206e2VuYWJsZWQ6ITAsdHlwZTpsfX19LHVmKHIpLmNhbGwocixkLmFycm93cy5mcm9tLDEpKTpkLmFycm93cy50bz8oYz1yW2QuYXJyb3dzLnRvXS52YWx1ZS50by50eXBlLGw9XCJhcnJvd1wiLHJbZC5hcnJvd3MudG9dPXthdHRyOnJbZC5hcnJvd3MudG9dLmF0dHIsbmFtZTpyW2QuYXJyb3dzLnRvXS5uYW1lLHZhbHVlOnt0bzp7ZW5hYmxlZDohMCx0eXBlOmN9LGZyb206e2VuYWJsZWQ6ITAsdHlwZTpsfX19KTpkLmFycm93cy5mcm9tJiYoYz1cImFycm93XCIsbD1yW2QuYXJyb3dzLmZyb21dLnZhbHVlLmZyb20udHlwZSxyW2QuYXJyb3dzLmZyb21dPXthdHRyOnJbZC5hcnJvd3MuZnJvbV0uYXR0cixuYW1lOnJbZC5hcnJvd3MuZnJvbV0ubmFtZSx2YWx1ZTp7dG86e2VuYWJsZWQ6ITAsdHlwZTpjfSxmcm9tOntlbmFibGVkOiEwLHR5cGU6bH19fSk7ZWxzZSBpZihcImJhY2tcIj09PXUpZC5hcnJvd3MudG8mJmQuYXJyb3dzLmZyb20/KGM9XCJcIixsPXJbZC5hcnJvd3MuZnJvbV0udmFsdWUuZnJvbS50eXBlLHJbZC5hcnJvd3MuZnJvbV09e2F0dHI6cltkLmFycm93cy5mcm9tXS5hdHRyLG5hbWU6cltkLmFycm93cy5mcm9tXS5uYW1lLHZhbHVlOnt0bzp7ZW5hYmxlZDohMCx0eXBlOmN9LGZyb206e2VuYWJsZWQ6ITAsdHlwZTpsfX19KTpkLmFycm93cy50bz8oYz1cIlwiLGw9XCJhcnJvd1wiLGQuYXJyb3dzLmZyb209ZC5hcnJvd3MudG8scltkLmFycm93cy5mcm9tXT17YXR0cjpyW2QuYXJyb3dzLmZyb21dLmF0dHIsbmFtZTpyW2QuYXJyb3dzLmZyb21dLm5hbWUsdmFsdWU6e3RvOntlbmFibGVkOiEwLHR5cGU6Y30sZnJvbTp7ZW5hYmxlZDohMCx0eXBlOmx9fX0pOmQuYXJyb3dzLmZyb20mJihjPVwiXCIsbD1yW2QuYXJyb3dzLmZyb21dLnZhbHVlLmZyb20udHlwZSxyW2QuYXJyb3dzLnRvXT17YXR0cjpyW2QuYXJyb3dzLmZyb21dLmF0dHIsbmFtZTpyW2QuYXJyb3dzLmZyb21dLm5hbWUsdmFsdWU6e3RvOntlbmFibGVkOiEwLHR5cGU6Y30sZnJvbTp7ZW5hYmxlZDohMCx0eXBlOmx9fX0pLHJbZC5hcnJvd3MuZnJvbV09e2F0dHI6cltkLmFycm93cy5mcm9tXS5hdHRyLG5hbWU6cltkLmFycm93cy5mcm9tXS5uYW1lLHZhbHVlOntmcm9tOntlbmFibGVkOiEwLHR5cGU6cltkLmFycm93cy5mcm9tXS52YWx1ZS5mcm9tLnR5cGV9fX07ZWxzZSBpZihcIm5vbmVcIj09PXUpe3ZhciBmO3JbZj1kLmFycm93cy50bz9kLmFycm93cy50bzpkLmFycm93cy5mcm9tXT17YXR0cjpyW2ZdLmF0dHIsbmFtZTpyW2ZdLm5hbWUsdmFsdWU6XCJcIn19ZWxzZXtpZihcImZvcndhcmRcIiE9PXUpdGhyb3cgVW0oJ0ludmFsaWQgZGlyIHR5cGUgXCInK3UrJ1wiJyk7ZC5hcnJvd3MudG8mJmQuYXJyb3dzLmZyb218fGQuYXJyb3dzLnRvPyhjPXJbZC5hcnJvd3MudG9dLnZhbHVlLnRvLnR5cGUsbD1cIlwiLHJbZC5hcnJvd3MudG9dPXthdHRyOnJbZC5hcnJvd3MudG9dLmF0dHIsbmFtZTpyW2QuYXJyb3dzLnRvXS5uYW1lLHZhbHVlOnt0bzp7ZW5hYmxlZDohMCx0eXBlOmN9LGZyb206e2VuYWJsZWQ6ITAsdHlwZTpsfX19KTpkLmFycm93cy5mcm9tJiYoYz1cImFycm93XCIsbD1cIlwiLGQuYXJyb3dzLnRvPWQuYXJyb3dzLmZyb20scltkLmFycm93cy50b109e2F0dHI6cltkLmFycm93cy50b10uYXR0cixuYW1lOnJbZC5hcnJvd3MudG9dLm5hbWUsdmFsdWU6e3RvOntlbmFibGVkOiEwLHR5cGU6Y30sZnJvbTp7ZW5hYmxlZDohMCx0eXBlOmx9fX0pLHJbZC5hcnJvd3MudG9dPXthdHRyOnJbZC5hcnJvd3MudG9dLmF0dHIsbmFtZTpyW2QuYXJyb3dzLnRvXS5uYW1lLHZhbHVlOnt0bzp7ZW5hYmxlZDohMCx0eXBlOnJbZC5hcnJvd3MudG9dLnZhbHVlLnRvLnR5cGV9fX19dWYocikuY2FsbChyLGQuZGlyLDEpfWlmKHpmKHMpLmNhbGwocyxcInBlbndpZHRoXCIpKXt2YXIgcD1bXTtmb3IoZT1yLmxlbmd0aCx0PTA7dDxlO3QrKylcIndpZHRoXCIhPT1yW3RdLm5hbWUmJihcInBlbndpZHRoXCI9PT1yW3RdLm5hbWUmJihyW3RdLm5hbWU9XCJ3aWR0aFwiKSxwLnB1c2goclt0XSkpO3I9cH1mb3IoZT1yLmxlbmd0aCx0PTA7dDxlO3QrKylGbShyW3RdLmF0dHIsclt0XS5uYW1lLHJbdF0udmFsdWUpO3JldHVybiBpfWZ1bmN0aW9uIFVtKHQpe3JldHVybiBuZXcgU3ludGF4RXJyb3IodCsnLCBnb3QgXCInK1ltKE1tLDMwKSsnXCIgKGNoYXIgJytTbStcIilcIil9ZnVuY3Rpb24gWW0odCxlKXtyZXR1cm4gdC5sZW5ndGg8PWU/dDp0LnN1YnN0cigwLDI3KStcIi4uLlwifWZ1bmN0aW9uIFhtKHQsZSxpKXtmb3IodmFyIG89ZS5zcGxpdChcIi5cIiksbj1vLnBvcCgpLHI9dCxzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBhPW9bc107YSBpbiByfHwoclthXT17fSkscj1yW2FdfXJldHVybiByW25dPWksdH1mdW5jdGlvbiBHbSh0LGUpe3ZhciBpPXt9O2Zvcih2YXIgbyBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkobykpe3ZhciBuPWVbb107aHUobik/RnUobikuY2FsbChuLChmdW5jdGlvbihlKXtYbShpLGUsdFtvXSl9KSk6WG0oaSxcInN0cmluZ1wiPT10eXBlb2Ygbj9uOm8sdFtvXSl9cmV0dXJuIGl9ZnVuY3Rpb24gS20odCl7dmFyIGUsaT1tbSh0KSxvPXtub2RlczpbXSxlZGdlczpbXSxvcHRpb25zOnt9fTtpLm5vZGVzJiZGdShlPWkubm9kZXMpLmNhbGwoZSwoZnVuY3Rpb24odCl7dmFyIGU9e2lkOnQuaWQsbGFiZWw6U3RyaW5nKHQubGFiZWx8fHQuaWQpfTt6bShlLEdtKHQuYXR0cixibSkpLGUuaW1hZ2UmJihlLnNoYXBlPVwiaW1hZ2VcIiksby5ub2Rlcy5wdXNoKGUpfSkpO2lmKGkuZWRnZXMpe3ZhciBuLHI9ZnVuY3Rpb24odCl7dmFyIGU9e2Zyb206dC5mcm9tLHRvOnQudG99O3JldHVybiB6bShlLEdtKHQuYXR0cix3bSkpLG51bGw9PWUuYXJyb3dzJiZcIi0+XCI9PT10LnR5cGUmJihlLmFycm93cz1cInRvXCIpLGV9O0Z1KG49aS5lZGdlcykuY2FsbChuLChmdW5jdGlvbih0KXt2YXIgZSxpLG4scyxhLGgsZDsoZT10LmZyb20gaW5zdGFuY2VvZiBPYmplY3Q/dC5mcm9tLm5vZGVzOntpZDp0LmZyb219LGk9dC50byBpbnN0YW5jZW9mIE9iamVjdD90LnRvLm5vZGVzOntpZDp0LnRvfSx0LmZyb20gaW5zdGFuY2VvZiBPYmplY3QmJnQuZnJvbS5lZGdlcykmJkZ1KG49dC5mcm9tLmVkZ2VzKS5jYWxsKG4sKGZ1bmN0aW9uKHQpe3ZhciBlPXIodCk7by5lZGdlcy5wdXNoKGUpfSkpOyhhPWksaD1mdW5jdGlvbihlLGkpe3ZhciBuPVJtKG8sZS5pZCxpLmlkLHQudHlwZSx0LmF0dHIpLHM9cihuKTtvLmVkZ2VzLnB1c2gocyl9LGh1KHM9ZSk/RnUocykuY2FsbChzLChmdW5jdGlvbih0KXtodShhKT9GdShhKS5jYWxsKGEsKGZ1bmN0aW9uKGUpe2godCxlKX0pKTpoKHQsYSl9KSk6aHUoYSk/RnUoYSkuY2FsbChhLChmdW5jdGlvbih0KXtoKHMsdCl9KSk6aChzLGEpLHQudG8gaW5zdGFuY2VvZiBPYmplY3QmJnQudG8uZWRnZXMpJiZGdShkPXQudG8uZWRnZXMpLmNhbGwoZCwoZnVuY3Rpb24odCl7dmFyIGU9cih0KTtvLmVkZ2VzLnB1c2goZSl9KSl9KSl9cmV0dXJuIGkuYXR0ciYmKG8ub3B0aW9ucz1pLmF0dHIpLG99dmFyICRtPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLHBhcnNlRE9UOm1tLERPVFRvR3JhcGg6S219KTtmdW5jdGlvbiBabSh0LGUpe3ZhciBpLG89e2VkZ2VzOntpbmhlcml0Q29sb3I6ITF9LG5vZGVzOntmaXhlZDohMSxwYXJzZUNvbG9yOiExfX07bnVsbCE9ZSYmKG51bGwhPWUuZml4ZWQmJihvLm5vZGVzLmZpeGVkPWUuZml4ZWQpLG51bGwhPWUucGFyc2VDb2xvciYmKG8ubm9kZXMucGFyc2VDb2xvcj1lLnBhcnNlQ29sb3IpLG51bGwhPWUuaW5oZXJpdENvbG9yJiYoby5lZGdlcy5pbmhlcml0Q29sb3I9ZS5pbmhlcml0Q29sb3IpKTt2YXIgbj10LmVkZ2VzLHI9dnUobikuY2FsbChuLChmdW5jdGlvbih0KXt2YXIgZT17ZnJvbTp0LnNvdXJjZSxpZDp0LmlkLHRvOnQudGFyZ2V0fTtyZXR1cm4gbnVsbCE9dC5hdHRyaWJ1dGVzJiYoZS5hdHRyaWJ1dGVzPXQuYXR0cmlidXRlcyksbnVsbCE9dC5sYWJlbCYmKGUubGFiZWw9dC5sYWJlbCksbnVsbCE9dC5hdHRyaWJ1dGVzJiZudWxsIT10LmF0dHJpYnV0ZXMudGl0bGUmJihlLnRpdGxlPXQuYXR0cmlidXRlcy50aXRsZSksXCJEaXJlY3RlZFwiPT09dC50eXBlJiYoZS5hcnJvd3M9XCJ0b1wiKSx0LmNvbG9yJiYhMT09PW8uZWRnZXMuaW5oZXJpdENvbG9yJiYoZS5jb2xvcj10LmNvbG9yKSxlfSkpO3JldHVybntub2Rlczp2dShpPXQubm9kZXMpLmNhbGwoaSwoZnVuY3Rpb24odCl7dmFyIGU9e2lkOnQuaWQsZml4ZWQ6by5ub2Rlcy5maXhlZCYmbnVsbCE9dC54JiZudWxsIT10Lnl9O3JldHVybiBudWxsIT10LmF0dHJpYnV0ZXMmJihlLmF0dHJpYnV0ZXM9dC5hdHRyaWJ1dGVzKSxudWxsIT10LmxhYmVsJiYoZS5sYWJlbD10LmxhYmVsKSxudWxsIT10LnNpemUmJihlLnNpemU9dC5zaXplKSxudWxsIT10LmF0dHJpYnV0ZXMmJm51bGwhPXQuYXR0cmlidXRlcy50aXRsZSYmKGUudGl0bGU9dC5hdHRyaWJ1dGVzLnRpdGxlKSxudWxsIT10LnRpdGxlJiYoZS50aXRsZT10LnRpdGxlKSxudWxsIT10LngmJihlLng9dC54KSxudWxsIT10LnkmJihlLnk9dC55KSxudWxsIT10LmNvbG9yJiYoITA9PT1vLm5vZGVzLnBhcnNlQ29sb3I/ZS5jb2xvcj10LmNvbG9yOmUuY29sb3I9e2JhY2tncm91bmQ6dC5jb2xvcixib3JkZXI6dC5jb2xvcixoaWdobGlnaHQ6e2JhY2tncm91bmQ6dC5jb2xvcixib3JkZXI6dC5jb2xvcn0saG92ZXI6e2JhY2tncm91bmQ6dC5jb2xvcixib3JkZXI6dC5jb2xvcn19KSxlfSkpLGVkZ2VzOnJ9fXZhciBRbT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxwYXJzZUdlcGhpOlptfSksSm09T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZW46e2FkZERlc2NyaXB0aW9uOlwiQ2xpY2sgaW4gYW4gZW1wdHkgc3BhY2UgdG8gcGxhY2UgYSBuZXcgbm9kZS5cIixhZGRFZGdlOlwiQWRkIEVkZ2VcIixhZGROb2RlOlwiQWRkIE5vZGVcIixiYWNrOlwiQmFja1wiLGNsb3NlOlwiQ2xvc2VcIixjcmVhdGVFZGdlRXJyb3I6XCJDYW5ub3QgbGluayBlZGdlcyB0byBhIGNsdXN0ZXIuXCIsZGVsOlwiRGVsZXRlIHNlbGVjdGVkXCIsZGVsZXRlQ2x1c3RlckVycm9yOlwiQ2x1c3RlcnMgY2Fubm90IGJlIGRlbGV0ZWQuXCIsZWRnZURlc2NyaXB0aW9uOlwiQ2xpY2sgb24gYSBub2RlIGFuZCBkcmFnIHRoZSBlZGdlIHRvIGFub3RoZXIgbm9kZSB0byBjb25uZWN0IHRoZW0uXCIsZWRpdDpcIkVkaXRcIixlZGl0Q2x1c3RlckVycm9yOlwiQ2x1c3RlcnMgY2Fubm90IGJlIGVkaXRlZC5cIixlZGl0RWRnZTpcIkVkaXQgRWRnZVwiLGVkaXRFZGdlRGVzY3JpcHRpb246XCJDbGljayBvbiB0aGUgY29udHJvbCBwb2ludHMgYW5kIGRyYWcgdGhlbSB0byBhIG5vZGUgdG8gY29ubmVjdCB0byBpdC5cIixlZGl0Tm9kZTpcIkVkaXQgTm9kZVwifSxkZTp7YWRkRGVzY3JpcHRpb246XCJLbGlja2UgYXVmIGVpbmUgZnJlaWUgU3RlbGxlLCB1bSBlaW5lbiBuZXVlbiBLbm90ZW4genUgcGxhemllcmVuLlwiLGFkZEVkZ2U6XCJLYW50ZSBoaW56dWbDvGdlblwiLGFkZE5vZGU6XCJLbm90ZW4gaGluenVmw7xnZW5cIixiYWNrOlwiWnVyw7xja1wiLGNsb3NlOlwiU2NobGllw59lblwiLGNyZWF0ZUVkZ2VFcnJvcjpcIkVzIGlzdCBuaWNodCBtw7ZnbGljaCwgS2FudGVuIG1pdCBDbHVzdGVybiB6dSB2ZXJiaW5kZW4uXCIsZGVsOlwiTMO2c2NoZSBBdXN3YWhsXCIsZGVsZXRlQ2x1c3RlckVycm9yOlwiQ2x1c3RlciBrw7ZubmVuIG5pY2h0IGdlbMO2c2NodCB3ZXJkZW4uXCIsZWRnZURlc2NyaXB0aW9uOlwiS2xpY2tlIGF1ZiBlaW5lbiBLbm90ZW4gdW5kIHppZWhlIGRpZSBLYW50ZSB6dSBlaW5lbSBhbmRlcmVuIEtub3RlbiwgdW0gZGllc2UgenUgdmVyYmluZGVuLlwiLGVkaXQ6XCJFZGl0aWVyZW5cIixlZGl0Q2x1c3RlckVycm9yOlwiQ2x1c3RlciBrw7ZubmVuIG5pY2h0IGVkaXRpZXJ0IHdlcmRlbi5cIixlZGl0RWRnZTpcIkthbnRlIGVkaXRpZXJlblwiLGVkaXRFZGdlRGVzY3JpcHRpb246XCJLbGlja2UgYXVmIGRpZSBWZXJiaW5kdW5nc3B1bmt0ZSB1bmQgemllaGUgZGllc2UgYXVmIGVpbmVuIEtub3RlbiwgdW0gc2llIHp1IHZlcmJpbmRlbi5cIixlZGl0Tm9kZTpcIktub3RlbiBlZGl0aWVyZW5cIn0sZXM6e2FkZERlc2NyaXB0aW9uOlwiSGFnYSBjbGljIGVuIHVuIGx1Z2FyIHZhY8OtbyBwYXJhIGNvbG9jYXIgdW4gbnVldm8gbm9kby5cIixhZGRFZGdlOlwiQcOxYWRpciBhcmlzdGFcIixhZGROb2RlOlwiQcOxYWRpciBub2RvXCIsYmFjazpcIkF0csOhc1wiLGNsb3NlOlwiQ2VycmFyXCIsY3JlYXRlRWRnZUVycm9yOlwiTm8gc2UgcHVlZGUgY29uZWN0YXIgdW5hIGFyaXN0YSBhIHVuIGdydXBvLlwiLGRlbDpcIkVsaW1pbmFyIHNlbGVjY2nDs25cIixkZWxldGVDbHVzdGVyRXJyb3I6XCJObyBlcyBwb3NpYmxlIGVsaW1pbmFyIGdydXBvcy5cIixlZGdlRGVzY3JpcHRpb246XCJIYWdhIGNsaWMgZW4gdW4gbm9kbyB5IGFycmFzdHJlIGxhIGFyaXN0YSBoYWNpYSBvdHJvIG5vZG8gcGFyYSBjb25lY3Rhcmxvcy5cIixlZGl0OlwiRWRpdGFyXCIsZWRpdENsdXN0ZXJFcnJvcjpcIk5vIGVzIHBvc2libGUgZWRpdGFyIGdydXBvcy5cIixlZGl0RWRnZTpcIkVkaXRhciBhcmlzdGFcIixlZGl0RWRnZURlc2NyaXB0aW9uOlwiSGFnYSBjbGljIGVuIHVuIHB1bnRvIGRlIGNvbnRyb2wgeSBhcnJhc3RyZWxvIGEgdW4gbm9kbyBwYXJhIGNvbmVjdGFybG8uXCIsZWRpdE5vZGU6XCJFZGl0YXIgbm9kb1wifSxpdDp7YWRkRGVzY3JpcHRpb246XCJDbGljY2EgcGVyIGFnZ2l1bmdlcmUgdW4gbnVvdm8gbm9kb1wiLGFkZEVkZ2U6XCJBZ2dpdW5naSB1biB2ZXJ0aWNlXCIsYWRkTm9kZTpcIkFnZ2l1bmdpIHVuIG5vZG9cIixiYWNrOlwiSW5kaWV0cm9cIixjbG9zZTpcIkNoaXVkZXJlXCIsY3JlYXRlRWRnZUVycm9yOlwiTm9uIHNpIHBvc3Nvbm8gY29sbGVnYXJlIHZlcnRpY2kgYWQgdW4gY2x1c3RlclwiLGRlbDpcIkNhbmNlbGxhIGxhIHNlbGV6aW9uZVwiLGRlbGV0ZUNsdXN0ZXJFcnJvcjpcIkkgY2x1c3RlciBub24gcG9zc29ubyBlc3NlcmUgY2FuY2VsbGF0aVwiLGVkZ2VEZXNjcmlwdGlvbjpcIkNsaWNjYSBzdSB1biBub2RvIGUgdHJhc2NpbmFsbyBhZCB1biBhbHRybyBub2RvIHBlciBjb25uZXR0ZXJsaS5cIixlZGl0OlwiTW9kaWZpY2FcIixlZGl0Q2x1c3RlckVycm9yOlwiSSBjbHVzdGVycyBub24gcG9zc29ubyBlc3NlcmUgbW9kaWZpY2F0aS5cIixlZGl0RWRnZTpcIk1vZGlmaWNhIGlsIHZlcnRpY2VcIixlZGl0RWRnZURlc2NyaXB0aW9uOlwiQ2xpY2NhIHN1aSBQdW50aSBkaSBjb250cm9sbG8gZSB0cmFzY2luYWxpIGFkIHVuIG5vZG8gcGVyIGNvbm5ldHRlcmxpLlwiLGVkaXROb2RlOlwiTW9kaWZpY2EgaWwgbm9kb1wifSxubDp7YWRkRGVzY3JpcHRpb246XCJLbGlrIG9wIGVlbiBsZWVnIGdlYmllZCBvbSBlZW4gbmlldXdlIG5vZGUgdGUgbWFrZW4uXCIsYWRkRWRnZTpcIkxpbmsgdG9ldm9lZ2VuXCIsYWRkTm9kZTpcIk5vZGUgdG9ldm9lZ2VuXCIsYmFjazpcIlRlcnVnXCIsY2xvc2U6XCJTbHVpdGVuXCIsY3JlYXRlRWRnZUVycm9yOlwiS2FuIGdlZW4gbGluayBtYWtlbiBuYWFyIGVlbiBjbHVzdGVyLlwiLGRlbDpcIlNlbGVjdGllIHZlcndpamRlcmVuXCIsZGVsZXRlQ2x1c3RlckVycm9yOlwiQ2x1c3RlcnMga3VubmVuIG5pZXQgd29yZGVuIHZlcndpamRlcmQuXCIsZWRnZURlc2NyaXB0aW9uOlwiS2xpayBvcCBlZW4gbm9kZSBlbiBzbGVlcCBkZSBsaW5rIG5hYXIgZWVuIGFuZGVyZSBub2RlIG9tIHplIHRlIHZlcmJpbmRlbi5cIixlZGl0OlwiV2lqemlnZW5cIixlZGl0Q2x1c3RlckVycm9yOlwiQ2x1c3RlcnMga3VubmVuIG5pZXQgd29yZGVuIGFhbmdlcGFzdC5cIixlZGl0RWRnZTpcIkxpbmsgd2lqemlnZW5cIixlZGl0RWRnZURlc2NyaXB0aW9uOlwiS2xpayBvcCBkZSB2ZXJiaW5kaW5nc3B1bnRlbiBlbiBzbGVlcCB6ZSBuYWFyIGVlbiBub2RlIG9tIGRhYXJtZWUgdGUgdmVyYmluZGVuLlwiLGVkaXROb2RlOlwiTm9kZSB3aWp6aWdlblwifSxwdDp7YWRkRGVzY3JpcHRpb246XCJDbGlxdWUgZW0gdW0gZXNwYcOnbyBlbSBicmFuY28gcGFyYSBhZGljaW9uYXIgdW0gbm92byBuw7NcIixhZGRFZGdlOlwiQWRpY2lvbmFyIGFyZXN0YVwiLGFkZE5vZGU6XCJBZGljaW9uYXIgbsOzXCIsYmFjazpcIlZvbHRhclwiLGNsb3NlOlwiRmVjaGFyXCIsY3JlYXRlRWRnZUVycm9yOlwiTsOjbyBmb2kgcG9zc8OtdmVsIGxpbmthciBhcmVzdGFzIGEgdW0gY2x1c3Rlci5cIixkZWw6XCJSZW1vdmVyIHNlbGVjaW9uYWRvXCIsZGVsZXRlQ2x1c3RlckVycm9yOlwiQ2x1c3RlcnMgbsOjbyBwdWRlcmFtIHNlciByZW1vdmlkb3MuXCIsZWRnZURlc2NyaXB0aW9uOlwiQ2xpcXVlIGVtIHVtIG7DsyBlIGFycmFzdGUgYSBhcmVzdGEgYXTDqSBvdXRybyBuw7MgcGFyYSBjb25lY3TDoS1sb3NcIixlZGl0OlwiRWRpdGFyXCIsZWRpdENsdXN0ZXJFcnJvcjpcIkNsdXN0ZXJzIG7Do28gcHVkZXJhbSBzZXIgZWRpdGFkb3MuXCIsZWRpdEVkZ2U6XCJFZGl0YXIgYXJlc3RhXCIsZWRpdEVkZ2VEZXNjcmlwdGlvbjpcIkNsaXF1ZSBub3MgcG9udG9zIGRlIGNvbnRyb2xlIGUgb3MgYXJyYXN0ZSBwYXJhIHVtIG7DsyBwYXJhIGNvbmVjdMOhLWxvc1wiLGVkaXROb2RlOlwiRWRpdGFyIG7Ds1wifSxydTp7YWRkRGVzY3JpcHRpb246XCLQmtC70LjQutC90LjRgtC1INCyINGB0LLQvtCx0L7QtNC90L7QtSDQvNC10YHRgtC+LCDRh9GC0L7QsdGLINC00L7QsdCw0LLQuNGC0Ywg0L3QvtCy0YvQuSDRg9C30LXQuy5cIixhZGRFZGdlOlwi0JTQvtCx0LDQstC40YLRjCDRgNC10LHRgNC+XCIsYWRkTm9kZTpcItCU0L7QsdCw0LLQuNGC0Ywg0YPQt9C10LtcIixiYWNrOlwi0J3QsNC30LDQtFwiLGNsb3NlOlwi0JfQsNC60YDRi9Cy0LDRgtGMXCIsY3JlYXRlRWRnZUVycm9yOlwi0J3QtdCy0L7Qt9C80L7QttC90L4g0YHQvtC10LTQuNC90LjRgtGMINGA0LXQsdGA0LAg0LIg0LrQu9Cw0YHRgtC10YAuXCIsZGVsOlwi0KPQtNCw0LvQuNGC0Ywg0LLRi9Cx0YDQsNC90L3QvtC1XCIsZGVsZXRlQ2x1c3RlckVycm9yOlwi0JrQu9Cw0YHRgtC10YDRiyDQvdC1INC80L7Qs9GD0YIg0LHRi9GC0Ywg0YPQtNCw0LvQtdC90YtcIixlZGdlRGVzY3JpcHRpb246XCLQmtC70LjQutC90LjRgtC1INC90LAg0YPQt9C10Lsg0Lgg0L/RgNC+0YLRj9C90LjRgtC1INGA0LXQsdGA0L4g0Log0LTRgNGD0LPQvtC80YMg0YPQt9C70YMsINGH0YLQvtCx0Ysg0YHQvtC10LTQuNC90LjRgtGMINC40YUuXCIsZWRpdDpcItCg0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMXCIsZWRpdENsdXN0ZXJFcnJvcjpcItCa0LvQsNGB0YLQtdGA0Ysg0L3QtdC00L7RgdGC0YPQv9C90Ysg0LTQu9GPINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8uXCIsZWRpdEVkZ2U6XCLQoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjCDRgNC10LHRgNC+XCIsZWRpdEVkZ2VEZXNjcmlwdGlvbjpcItCa0LvQuNC60L3QuNGC0LUg0L3QsCDQutC+0L3RgtGA0L7Qu9GM0L3Ri9C1INGC0L7Rh9C60Lgg0Lgg0L/QtdGA0LXRgtCw0YnQuNGC0LUg0LjRhSDQsiDRg9C30LXQuywg0YfRgtC+0LHRiyDQv9C+0LTQutC70Y7Rh9C40YLRjNGB0Y8g0Log0L3QtdC80YMuXCIsZWRpdE5vZGU6XCLQoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjCDRg9C30LXQu1wifSxjbjp7YWRkRGVzY3JpcHRpb246XCLljZXlh7vnqbrnmb3lpITmlL7nva7mlrDoioLngrnjgIJcIixhZGRFZGdlOlwi5re75Yqg6L+e5o6l57q/XCIsYWRkTm9kZTpcIua3u+WKoOiKgueCuVwiLGJhY2s6XCLov5Tlm55cIixjbG9zZTpcIumXnOmWiVwiLGNyZWF0ZUVkZ2VFcnJvcjpcIuaXoOazleWwhui/nuaOpee6v+i/nuaOpeWIsOe+pOmbhuOAglwiLGRlbDpcIuWIoOmZpOmAieWumlwiLGRlbGV0ZUNsdXN0ZXJFcnJvcjpcIuaXoOazleWIoOmZpOe+pOmbhuOAglwiLGVkZ2VEZXNjcmlwdGlvbjpcIuWNleWHu+afkOS4quiKgueCueW5tuWwhuivpei/nuaOpee6v+aLluWKqOWIsOWPpuS4gOS4quiKgueCueS7pei/nuaOpeWug+S7rOOAglwiLGVkaXQ6XCLnvJbovpFcIixlZGl0Q2x1c3RlckVycm9yOlwi5peg5rOV57yW6L6R576k6ZuG44CCXCIsZWRpdEVkZ2U6XCLnvJbovpHov57mjqXnur9cIixlZGl0RWRnZURlc2NyaXB0aW9uOlwi5Y2V5Ye75o6n5Yi26IqC54K55bm25bCG5a6D5Lus5ouW5Yiw6IqC54K55LiK6L+e5o6l44CCXCIsZWRpdE5vZGU6XCLnvJbovpHoioLngrlcIn0sdWs6e2FkZERlc2NyaXB0aW9uOlwiS9C70ZbQutC90ZbRgtGMINC90LAg0LLRltC70YzQvdC1INC80ZbRgdGG0LUsINGJ0L7QsSDQtNC+0LTQsNGC0Lgg0L3QvtCy0LjQuSDQstGD0LfQvtC7LlwiLGFkZEVkZ2U6XCLQlNC+0LTQsNGC0Lgg0LrRgNCw0LlcIixhZGROb2RlOlwi0JTQvtC00LDRgtC4INCy0YPQt9C+0LtcIixiYWNrOlwi0J3QsNC30LDQtFwiLGNsb3NlOlwi0JfQsNC60YDQuNGC0LhcIixjcmVhdGVFZGdlRXJyb3I6XCLQndC1INC80L7QttC70LjQstC+INC+0LEn0ZTQtNC90LDRgtC4INC60YDQsNGXINCyINCz0YDRg9C/0YMuXCIsZGVsOlwi0JLQuNC00LDQu9C40YLQuCDQvtCx0YDQsNC90LVcIixkZWxldGVDbHVzdGVyRXJyb3I6XCLQk9GA0YPQv9C4INC90LUg0LzQvtC20YPRgtGMINCx0YPRgtC4INCy0LjQtNCw0LvQtdC90ZYuXCIsZWRnZURlc2NyaXB0aW9uOlwi0JrQu9GW0LrQvdGW0YLRjCDQvdCwINCy0YPQt9C+0Lsg0ZYg0L/QtdGA0LXRgtGP0LPQvdGW0YLRjCDQutGA0LDQuSDQtNC+INGW0L3RiNC+0LPQviDQstGD0LfQu9CwLCDRidC+0LEg0ZfRhSDQtyfRlNC00L3QsNGC0LguXCIsZWRpdDpcItCg0LXQtNCw0LPRg9Cy0LDRgtC4XCIsZWRpdENsdXN0ZXJFcnJvcjpcItCT0YDRg9C/0Lgg0L3QtdC00L7RgdGC0YPQv9C90ZYg0LTQu9GPINGA0LXQtNCw0LPRg9Cy0LDQvdC90Y8uXCIsZWRpdEVkZ2U6XCLQoNC10LTQsNCz0YPQstCw0YLQuCDQutGA0LDQuVwiLGVkaXRFZGdlRGVzY3JpcHRpb246XCLQmtC70ZbQutC90ZbRgtGMINC90LAg0LrQvtC90YLRgNC+0LvRjNC90ZYg0YLQvtGH0LrQuCDRliDQv9C10YDQtdGC0Y/Qs9C90ZbRgtGMINGX0YUg0YMg0LLRg9C30L7Quywg0YnQvtCxINC/0ZbQtNC60LvRjtGH0LjRgtC40YHRjyDQtNC+INC90YzQvtCz0L4uXCIsZWRpdE5vZGU6XCLQoNC10LTQsNCz0YPQstCw0YLQuCDQstGD0LfQvtC7XCJ9LGZyOnthZGREZXNjcmlwdGlvbjpcIkNsaXF1ZXogZGFucyB1biBlbmRyb2l0IHZpZGUgcG91ciBwbGFjZXIgdW4gbsWTdWQuXCIsYWRkRWRnZTpcIkFqb3V0ZXIgdW4gbGllblwiLGFkZE5vZGU6XCJBam91dGVyIHVuIG7Fk3VkXCIsYmFjazpcIlJldG91clwiLGNsb3NlOlwiRmVybWVyXCIsY3JlYXRlRWRnZUVycm9yOlwiSW1wb3NzaWJsZSBkZSBjcsOpZXIgdW4gbGllbiB2ZXJzIHVuIGNsdXN0ZXIuXCIsZGVsOlwiRWZmYWNlciBsYSBzw6lsZWN0aW9uXCIsZGVsZXRlQ2x1c3RlckVycm9yOlwiTGVzIGNsdXN0ZXJzIG5lIHBldXZlbnQgcGFzIMOqdHJlIGVmZmFjw6lzLlwiLGVkZ2VEZXNjcmlwdGlvbjpcIkNsaXF1ZXogc3VyIHVuIG7Fk3VkIGV0IGdsaXNzZXogbGUgbGllbiB2ZXJzIHVuIGF1dHJlIG7Fk3VkIHBvdXIgbGVzIGNvbm5lY3Rlci5cIixlZGl0Olwiw4lkaXRlclwiLGVkaXRDbHVzdGVyRXJyb3I6XCJMZXMgY2x1c3RlcnMgbmUgcGV1dmVudCBwYXMgw6p0cmUgw6lkaXTDqXMuXCIsZWRpdEVkZ2U6XCLDiWRpdGVyIGxlIGxpZW5cIixlZGl0RWRnZURlc2NyaXB0aW9uOlwiQ2xpcXVleiBzdXIgbGVzIHBvaW50cyBkZSBjb250csO0bGUgZXQgZ2xpc3Nlei1sZXMgcG91ciBjb25uZWN0ZXIgdW4gbsWTdWQuXCIsZWRpdE5vZGU6XCLDiWRpdGVyIGxlIG7Fk3VkXCJ9LGNzOnthZGREZXNjcmlwdGlvbjpcIktsdWtudXTDrW0gZG8gcHLDoXpkbsOpaG8gcHJvc3RvcnUgbcWvxb5ldGUgcMWZaWRhdCBub3bDvSB2cmNob2wuXCIsYWRkRWRnZTpcIlDFmWlkYXQgaHJhbnVcIixhZGROb2RlOlwiUMWZaWRhdCB2cmNob2xcIixiYWNrOlwiWnDEm3RcIixjbG9zZTpcIlphdsWZw610XCIsY3JlYXRlRWRnZUVycm9yOlwiTmVsemUgcMWZaXBvaml0IGhyYW51IGtlIHNobHVrdS5cIixkZWw6XCJTbWF6YXQgdsO9YsSbclwiLGRlbGV0ZUNsdXN0ZXJFcnJvcjpcIk5lbHplIG1hemF0IHNobHVreS5cIixlZGdlRGVzY3JpcHRpb246XCJQxZlldGHFvmVuw61tIHogamVkbm9obyB2cmNob2x1IGRvIGRydWjDqWhvIG3Fr8W+ZXRlIHNwb2ppdCB0eXRvIHZyY2hvbHkgbm92b3UgaHJhbm91LlwiLGVkaXQ6XCJVcHJhdml0XCIsZWRpdENsdXN0ZXJFcnJvcjpcIk5lbHplIHVwcmF2b3ZhdCBzaGx1a3kuXCIsZWRpdEVkZ2U6XCJVcHJhdml0IGhyYW51XCIsZWRpdEVkZ2VEZXNjcmlwdGlvbjpcIlDFmWV0YcW+ZW7DrW0ga29udHJvbG7DrWhvIHZyY2hvbHUgaHJhbnkgamkgbcWvxb5ldGUgcMWZaXBvaml0IGsgamluw6ltdSB2cmNob2x1LlwiLGVkaXROb2RlOlwiVXByYXZpdCB2cmNob2xcIn19KTt2YXIgdGI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KSx0aGlzLk5VTV9JVEVSQVRJT05TPTQsdGhpcy5pbWFnZT1uZXcgSW1hZ2UsdGhpcy5jYW52YXM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKX1yZXR1cm4gJGwodCxbe2tleTpcImluaXRcIix2YWx1ZTpmdW5jdGlvbigpe2lmKCF0aGlzLmluaXRpYWxpemVkKCkpe3RoaXMuc3JjPXRoaXMuaW1hZ2Uuc3JjO3ZhciB0PXRoaXMuaW1hZ2Uud2lkdGgsZT10aGlzLmltYWdlLmhlaWdodDt0aGlzLndpZHRoPXQsdGhpcy5oZWlnaHQ9ZTt2YXIgaT1NYXRoLmZsb29yKGUvMiksbz1NYXRoLmZsb29yKGUvNCksbj1NYXRoLmZsb29yKGUvOCkscj1NYXRoLmZsb29yKGUvMTYpLHM9TWF0aC5mbG9vcih0LzIpLGE9TWF0aC5mbG9vcih0LzQpLGg9TWF0aC5mbG9vcih0LzgpLGQ9TWF0aC5mbG9vcih0LzE2KTt0aGlzLmNhbnZhcy53aWR0aD0zKmEsdGhpcy5jYW52YXMuaGVpZ2h0PWksdGhpcy5jb29yZGluYXRlcz1bWzAsMCxzLGldLFtzLDAsYSxvXSxbcyxvLGgsbl0sWzUqaCxvLGQscl1dLHRoaXMuX2ZpbGxNaXBNYXAoKX19fSx7a2V5OlwiaW5pdGlhbGl6ZWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLmNvb3JkaW5hdGVzfX0se2tleTpcIl9maWxsTWlwTWFwXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksZT10aGlzLmNvb3JkaW5hdGVzWzBdO3QuZHJhd0ltYWdlKHRoaXMuaW1hZ2UsZVswXSxlWzFdLGVbMl0sZVszXSk7Zm9yKHZhciBpPTE7aTx0aGlzLk5VTV9JVEVSQVRJT05TO2krKyl7dmFyIG89dGhpcy5jb29yZGluYXRlc1tpLTFdLG49dGhpcy5jb29yZGluYXRlc1tpXTt0LmRyYXdJbWFnZSh0aGlzLmNhbnZhcyxvWzBdLG9bMV0sb1syXSxvWzNdLG5bMF0sblsxXSxuWzJdLG5bM10pfX19LHtrZXk6XCJkcmF3SW1hZ2VBdFBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe2lmKHRoaXMuaW5pdGlhbGl6ZWQoKSlpZihlPjIpe2UqPS41O2Zvcih2YXIgcz0wO2U+MiYmczx0aGlzLk5VTV9JVEVSQVRJT05TOyllKj0uNSxzKz0xO3M+PXRoaXMuTlVNX0lURVJBVElPTlMmJihzPXRoaXMuTlVNX0lURVJBVElPTlMtMSk7dmFyIGE9dGhpcy5jb29yZGluYXRlc1tzXTt0LmRyYXdJbWFnZSh0aGlzLmNhbnZhcyxhWzBdLGFbMV0sYVsyXSxhWzNdLGksbyxuLHIpfWVsc2UgdC5kcmF3SW1hZ2UodGhpcy5pbWFnZSxpLG8sbixyKX19XSksdH0oKSxlYj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7WGwodGhpcyx0KSx0aGlzLmltYWdlcz17fSx0aGlzLmltYWdlQnJva2VuPXt9LHRoaXMuY2FsbGJhY2s9ZX1yZXR1cm4gJGwodCxbe2tleTpcIl90cnlsb2FkQnJva2VuVXJsXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZvaWQgMCE9PXQmJnZvaWQgMCE9PWkmJih2b2lkIDAhPT1lPyhpLmltYWdlLm9uZXJyb3I9ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IGxvYWQgYnJva2VuSW1hZ2U6XCIsZSl9LGkuaW1hZ2Uuc3JjPWUpOmNvbnNvbGUud2FybihcIk5vIGJyb2tlbiB1cmwgaW1hZ2UgZGVmaW5lZFwiKSl9fSx7a2V5OlwiX3JlZHJhd1dpdGhJbWFnZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuY2FsbGJhY2smJnRoaXMuY2FsbGJhY2sodCl9fSx7a2V5OlwibG9hZFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcyxvPXRoaXMuaW1hZ2VzW3RdO2lmKG8pcmV0dXJuIG87dmFyIG49bmV3IHRiO3JldHVybiB0aGlzLmltYWdlc1t0XT1uLG4uaW1hZ2Uub25sb2FkPWZ1bmN0aW9uKCl7aS5fZml4SW1hZ2VDb29yZGluYXRlcyhuLmltYWdlKSxuLmluaXQoKSxpLl9yZWRyYXdXaXRoSW1hZ2Uobil9LG4uaW1hZ2Uub25lcnJvcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgbG9hZCBpbWFnZTpcIix0KSxpLl90cnlsb2FkQnJva2VuVXJsKHQsZSxuKX0sbi5pbWFnZS5zcmM9dCxufX0se2tleTpcIl9maXhJbWFnZUNvb3JkaW5hdGVzXCIsdmFsdWU6ZnVuY3Rpb24odCl7MD09PXQud2lkdGgmJihkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpLHQud2lkdGg9dC5vZmZzZXRXaWR0aCx0LmhlaWdodD10Lm9mZnNldEhlaWdodCxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHQpKX19XSksdH0oKSxpYj17ZXhwb3J0czp7fX0sb2I9cigoZnVuY3Rpb24oKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcil7dmFyIHQ9bmV3IEFycmF5QnVmZmVyKDgpO09iamVjdC5pc0V4dGVuc2libGUodCkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiYVwiLHt2YWx1ZTo4fSl9fSkpLG5iPXIscmI9WCxzYj16LGFiPW9iLGhiPU9iamVjdC5pc0V4dGVuc2libGUsZGI9bmIoKGZ1bmN0aW9uKCl7aGIoMSl9KSl8fGFiP2Z1bmN0aW9uKHQpe3JldHVybiEhcmIodCkmJigoIWFifHxcIkFycmF5QnVmZmVyXCIhPXNiKHQpKSYmKCFoYnx8aGIodCkpKX06aGIsbGI9IXIoKGZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSksY2I9eGksdWI9eSxmYj1MaSxwYj1YLHZiPVZ0LGdiPVVlLmYseWI9c2gsbWI9ZGgsYmI9ZGIsd2I9bGIsa2I9ITEsX2I9R3QoXCJtZXRhXCIpLHhiPTAsRWI9ZnVuY3Rpb24odCl7Z2IodCxfYix7dmFsdWU6e29iamVjdElEOlwiT1wiK3hiKyssd2Vha0RhdGE6e319fSl9LE9iPWliLmV4cG9ydHM9e2VuYWJsZTpmdW5jdGlvbigpe09iLmVuYWJsZT1mdW5jdGlvbigpe30sa2I9ITA7dmFyIHQ9eWIuZixlPXViKFtdLnNwbGljZSksaT17fTtpW19iXT0xLHQoaSkubGVuZ3RoJiYoeWIuZj1mdW5jdGlvbihpKXtmb3IodmFyIG89dChpKSxuPTAscj1vLmxlbmd0aDtuPHI7bisrKWlmKG9bbl09PT1fYil7ZShvLG4sMSk7YnJlYWt9cmV0dXJuIG99LGNiKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDohMH0se2dldE93blByb3BlcnR5TmFtZXM6bWIuZn0pKX0sZmFzdEtleTpmdW5jdGlvbih0LGUpe2lmKCFwYih0KSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OihcInN0cmluZ1wiPT10eXBlb2YgdD9cIlNcIjpcIlBcIikrdDtpZighdmIodCxfYikpe2lmKCFiYih0KSlyZXR1cm5cIkZcIjtpZighZSlyZXR1cm5cIkVcIjtFYih0KX1yZXR1cm4gdFtfYl0ub2JqZWN0SUR9LGdldFdlYWtEYXRhOmZ1bmN0aW9uKHQsZSl7aWYoIXZiKHQsX2IpKXtpZighYmIodCkpcmV0dXJuITA7aWYoIWUpcmV0dXJuITE7RWIodCl9cmV0dXJuIHRbX2JdLndlYWtEYXRhfSxvbkZyZWV6ZTpmdW5jdGlvbih0KXtyZXR1cm4gd2ImJmtiJiZiYih0KSYmIXZiKHQsX2IpJiZFYih0KSx0fX07ZmJbX2JdPSEwO3ZhciBDYj1xZSxTYj14LFRiPVplLE1iPXd0LFBiPXFzLERiPXppLEJiPXR0LEliPXdhLHpiPWZhLEZiPVJzLE5iPW4uVHlwZUVycm9yLEFiPWZ1bmN0aW9uKHQsZSl7dGhpcy5zdG9wcGVkPXQsdGhpcy5yZXN1bHQ9ZX0sUmI9QWIucHJvdG90eXBlLGpiPWZ1bmN0aW9uKHQsZSxpKXt2YXIgbyxuLHIscyxhLGgsZCxsPWkmJmkudGhhdCxjPSEoIWl8fCFpLkFTX0VOVFJJRVMpLHU9ISghaXx8IWkuSVNfSVRFUkFUT1IpLGY9ISghaXx8IWkuSU5URVJSVVBURUQpLHA9Q2IoZSxsKSx2PWZ1bmN0aW9uKHQpe3JldHVybiBvJiZGYihvLFwibm9ybWFsXCIsdCksbmV3IEFiKCEwLHQpfSxnPWZ1bmN0aW9uKHQpe3JldHVybiBjPyhUYih0KSxmP3AodFswXSx0WzFdLHYpOnAodFswXSx0WzFdKSk6Zj9wKHQsdik6cCh0KX07aWYodSlvPXQ7ZWxzZXtpZighKG49emIodCkpKXRocm93IE5iKE1iKHQpK1wiIGlzIG5vdCBpdGVyYWJsZVwiKTtpZihQYihuKSl7Zm9yKHI9MCxzPURiKHQpO3M+cjtyKyspaWYoKGE9Zyh0W3JdKSkmJkJiKFJiLGEpKXJldHVybiBhO3JldHVybiBuZXcgQWIoITEpfW89SWIodCxuKX1mb3IoaD1vLm5leHQ7IShkPVNiKGgsbykpLmRvbmU7KXt0cnl7YT1nKGQudmFsdWUpfWNhdGNoKHQpe0ZiKG8sXCJ0aHJvd1wiLHQpfWlmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZhJiZCYihSYixhKSlyZXR1cm4gYX1yZXR1cm4gbmV3IEFiKCExKX0sTGI9dHQsSGI9bi5UeXBlRXJyb3IsV2I9ZnVuY3Rpb24odCxlKXtpZihMYihlLHQpKXJldHVybiB0O3Rocm93IEhiKFwiSW5jb3JyZWN0IGludm9jYXRpb25cIil9LFZiPXhpLHFiPW4sVWI9aWIuZXhwb3J0cyxZYj1yLFhiPWNpLEdiPWpiLEtiPVdiLCRiPW0sWmI9WCxRYj1acixKYj1VZS5mLHR3PVZoLmZvckVhY2gsZXc9dyxpdz1Vbi5zZXQsb3c9VW4uZ2V0dGVyRm9yLG53PWZ1bmN0aW9uKHQsZSxpKXt2YXIgbyxuPS0xIT09dC5pbmRleE9mKFwiTWFwXCIpLHI9LTEhPT10LmluZGV4T2YoXCJXZWFrXCIpLHM9bj9cInNldFwiOlwiYWRkXCIsYT1xYlt0XSxoPWEmJmEucHJvdG90eXBlLGQ9e307aWYoZXcmJiRiKGEpJiYocnx8aC5mb3JFYWNoJiYhWWIoKGZ1bmN0aW9uKCl7KG5ldyBhKS5lbnRyaWVzKCkubmV4dCgpfSkpKSl7dmFyIGw9KG89ZSgoZnVuY3Rpb24oZSxpKXtpdyhLYihlLGwpLHt0eXBlOnQsY29sbGVjdGlvbjpuZXcgYX0pLG51bGwhPWkmJkdiKGksZVtzXSx7dGhhdDplLEFTX0VOVFJJRVM6bn0pfSkpKS5wcm90b3R5cGUsYz1vdyh0KTt0dyhbXCJhZGRcIixcImNsZWFyXCIsXCJkZWxldGVcIixcImZvckVhY2hcIixcImdldFwiLFwiaGFzXCIsXCJzZXRcIixcImtleXNcIixcInZhbHVlc1wiLFwiZW50cmllc1wiXSwoZnVuY3Rpb24odCl7dmFyIGU9XCJhZGRcIj09dHx8XCJzZXRcIj09dDshKHQgaW4gaCl8fHImJlwiY2xlYXJcIj09dHx8WGIobCx0LChmdW5jdGlvbihpLG8pe3ZhciBuPWModGhpcykuY29sbGVjdGlvbjtpZighZSYmciYmIVpiKGkpKXJldHVyblwiZ2V0XCI9PXQmJnZvaWQgMDt2YXIgcz1uW3RdKDA9PT1pPzA6aSxvKTtyZXR1cm4gZT90aGlzOnN9KSl9KSkscnx8SmIobCxcInNpemVcIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjKHRoaXMpLmNvbGxlY3Rpb24uc2l6ZX19KX1lbHNlIG89aS5nZXRDb25zdHJ1Y3RvcihlLHQsbixzKSxVYi5lbmFibGUoKTtyZXR1cm4gUWIobyx0LCExLCEwKSxkW3RdPW8sVmIoe2dsb2JhbDohMCxmb3JjZWQ6ITB9LGQpLHJ8fGkuc2V0U3Ryb25nKG8sdCxuKSxvfSxydz1Jcixzdz1mdW5jdGlvbih0LGUsaSl7Zm9yKHZhciBvIGluIGUpaSYmaS51bnNhZmUmJnRbb10/dFtvXT1lW29dOnJ3KHQsbyxlW29dLGkpO3JldHVybiB0fSxhdz1KLGh3PVVlLGR3PXcsbHc9cmUoXCJzcGVjaWVzXCIpLGN3PVVlLmYsdXc9a3IsZnc9c3cscHc9cWUsdnc9V2IsZ3c9amIseXc9U3MsbXc9ZnVuY3Rpb24odCl7dmFyIGU9YXcodCksaT1ody5mO2R3JiZlJiYhZVtsd10mJmkoZSxsdyx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfSxidz13LHd3PWliLmV4cG9ydHMuZmFzdEtleSxrdz1Vbi5zZXQsX3c9VW4uZ2V0dGVyRm9yLHh3PXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbih0LGUsaSxvKXt2YXIgbj10KChmdW5jdGlvbih0LG4pe3Z3KHQsciksa3codCx7dHlwZTplLGluZGV4OnV3KG51bGwpLGZpcnN0OnZvaWQgMCxsYXN0OnZvaWQgMCxzaXplOjB9KSxid3x8KHQuc2l6ZT0wKSxudWxsIT1uJiZndyhuLHRbb10se3RoYXQ6dCxBU19FTlRSSUVTOml9KX0pKSxyPW4ucHJvdG90eXBlLHM9X3coZSksYT1mdW5jdGlvbih0LGUsaSl7dmFyIG8sbixyPXModCksYT1oKHQsZSk7cmV0dXJuIGE/YS52YWx1ZT1pOihyLmxhc3Q9YT17aW5kZXg6bj13dyhlLCEwKSxrZXk6ZSx2YWx1ZTppLHByZXZpb3VzOm89ci5sYXN0LG5leHQ6dm9pZCAwLHJlbW92ZWQ6ITF9LHIuZmlyc3R8fChyLmZpcnN0PWEpLG8mJihvLm5leHQ9YSksYnc/ci5zaXplKys6dC5zaXplKyssXCJGXCIhPT1uJiYoci5pbmRleFtuXT1hKSksdH0saD1mdW5jdGlvbih0LGUpe3ZhciBpLG89cyh0KSxuPXd3KGUpO2lmKFwiRlwiIT09bilyZXR1cm4gby5pbmRleFtuXTtmb3IoaT1vLmZpcnN0O2k7aT1pLm5leHQpaWYoaS5rZXk9PWUpcmV0dXJuIGl9O3JldHVybiBmdyhyLHtjbGVhcjpmdW5jdGlvbigpe2Zvcih2YXIgdD1zKHRoaXMpLGU9dC5pbmRleCxpPXQuZmlyc3Q7aTspaS5yZW1vdmVkPSEwLGkucHJldmlvdXMmJihpLnByZXZpb3VzPWkucHJldmlvdXMubmV4dD12b2lkIDApLGRlbGV0ZSBlW2kuaW5kZXhdLGk9aS5uZXh0O3QuZmlyc3Q9dC5sYXN0PXZvaWQgMCxidz90LnNpemU9MDp0aGlzLnNpemU9MH0sZGVsZXRlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsaT1zKGUpLG89aChlLHQpO2lmKG8pe3ZhciBuPW8ubmV4dCxyPW8ucHJldmlvdXM7ZGVsZXRlIGkuaW5kZXhbby5pbmRleF0sby5yZW1vdmVkPSEwLHImJihyLm5leHQ9biksbiYmKG4ucHJldmlvdXM9ciksaS5maXJzdD09byYmKGkuZmlyc3Q9biksaS5sYXN0PT1vJiYoaS5sYXN0PXIpLGJ3P2kuc2l6ZS0tOmUuc2l6ZS0tfXJldHVybiEhb30sZm9yRWFjaDpmdW5jdGlvbih0KXtmb3IodmFyIGUsaT1zKHRoaXMpLG89cHcodCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCk7ZT1lP2UubmV4dDppLmZpcnN0Oylmb3IobyhlLnZhbHVlLGUua2V5LHRoaXMpO2UmJmUucmVtb3ZlZDspZT1lLnByZXZpb3VzfSxoYXM6ZnVuY3Rpb24odCl7cmV0dXJuISFoKHRoaXMsdCl9fSksZncocixpP3tnZXQ6ZnVuY3Rpb24odCl7dmFyIGU9aCh0aGlzLHQpO3JldHVybiBlJiZlLnZhbHVlfSxzZXQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gYSh0aGlzLDA9PT10PzA6dCxlKX19OnthZGQ6ZnVuY3Rpb24odCl7cmV0dXJuIGEodGhpcyx0PTA9PT10PzA6dCx0KX19KSxidyYmY3cocixcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHModGhpcykuc2l6ZX19KSxufSxzZXRTdHJvbmc6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPWUrXCIgSXRlcmF0b3JcIixuPV93KGUpLHI9X3cobyk7eXcodCxlLChmdW5jdGlvbih0LGUpe2t3KHRoaXMse3R5cGU6byx0YXJnZXQ6dCxzdGF0ZTpuKHQpLGtpbmQ6ZSxsYXN0OnZvaWQgMH0pfSksKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PXIodGhpcyksZT10LmtpbmQsaT10Lmxhc3Q7aSYmaS5yZW1vdmVkOylpPWkucHJldmlvdXM7cmV0dXJuIHQudGFyZ2V0JiYodC5sYXN0PWk9aT9pLm5leHQ6dC5zdGF0ZS5maXJzdCk/XCJrZXlzXCI9PWU/e3ZhbHVlOmkua2V5LGRvbmU6ITF9OlwidmFsdWVzXCI9PWU/e3ZhbHVlOmkudmFsdWUsZG9uZTohMX06e3ZhbHVlOltpLmtleSxpLnZhbHVlXSxkb25lOiExfToodC50YXJnZXQ9dm9pZCAwLHt2YWx1ZTp2b2lkIDAsZG9uZTohMH0pfSksaT9cImVudHJpZXNcIjpcInZhbHVlc1wiLCFpLCEwKSxtdyhlKX19O253KFwiTWFwXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsYXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMF06dm9pZCAwKX19KSx4dyk7dmFyIEV3PUcuTWFwLE93PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe1hsKHRoaXMsdCksdGhpcy5jbGVhcigpLHRoaXMuX2RlZmF1bHRJbmRleD0wLHRoaXMuX2dyb3VwSW5kZXg9MCx0aGlzLl9kZWZhdWx0R3JvdXBzPVt7Ym9yZGVyOlwiIzJCN0NFOVwiLGJhY2tncm91bmQ6XCIjOTdDMkZDXCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjMkI3Q0U5XCIsYmFja2dyb3VuZDpcIiNEMkU1RkZcIn0saG92ZXI6e2JvcmRlcjpcIiMyQjdDRTlcIixiYWNrZ3JvdW5kOlwiI0QyRTVGRlwifX0se2JvcmRlcjpcIiNGRkE1MDBcIixiYWNrZ3JvdW5kOlwiI0ZGRkYwMFwiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiI0ZGQTUwMFwiLGJhY2tncm91bmQ6XCIjRkZGRkEzXCJ9LGhvdmVyOntib3JkZXI6XCIjRkZBNTAwXCIsYmFja2dyb3VuZDpcIiNGRkZGQTNcIn19LHtib3JkZXI6XCIjRkEwQTEwXCIsYmFja2dyb3VuZDpcIiNGQjdFODFcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiNGQTBBMTBcIixiYWNrZ3JvdW5kOlwiI0ZGQUZCMVwifSxob3Zlcjp7Ym9yZGVyOlwiI0ZBMEExMFwiLGJhY2tncm91bmQ6XCIjRkZBRkIxXCJ9fSx7Ym9yZGVyOlwiIzQxQTkwNlwiLGJhY2tncm91bmQ6XCIjN0JFMTQxXCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjNDFBOTA2XCIsYmFja2dyb3VuZDpcIiNBMUVDNzZcIn0saG92ZXI6e2JvcmRlcjpcIiM0MUE5MDZcIixiYWNrZ3JvdW5kOlwiI0ExRUM3NlwifX0se2JvcmRlcjpcIiNFMTI5RjBcIixiYWNrZ3JvdW5kOlwiI0VCN0RGNFwiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiI0UxMjlGMFwiLGJhY2tncm91bmQ6XCIjRjBCM0Y1XCJ9LGhvdmVyOntib3JkZXI6XCIjRTEyOUYwXCIsYmFja2dyb3VuZDpcIiNGMEIzRjVcIn19LHtib3JkZXI6XCIjN0MyOUYwXCIsYmFja2dyb3VuZDpcIiNBRDg1RTRcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiM3QzI5RjBcIixiYWNrZ3JvdW5kOlwiI0QzQkRGMFwifSxob3Zlcjp7Ym9yZGVyOlwiIzdDMjlGMFwiLGJhY2tncm91bmQ6XCIjRDNCREYwXCJ9fSx7Ym9yZGVyOlwiI0MzN0YwMFwiLGJhY2tncm91bmQ6XCIjRkZBODA3XCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjQzM3RjAwXCIsYmFja2dyb3VuZDpcIiNGRkNBNjZcIn0saG92ZXI6e2JvcmRlcjpcIiNDMzdGMDBcIixiYWNrZ3JvdW5kOlwiI0ZGQ0E2NlwifX0se2JvcmRlcjpcIiM0MjIwRkJcIixiYWNrZ3JvdW5kOlwiIzZFNkVGRFwiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiIzQyMjBGQlwiLGJhY2tncm91bmQ6XCIjOUI5QkZEXCJ9LGhvdmVyOntib3JkZXI6XCIjNDIyMEZCXCIsYmFja2dyb3VuZDpcIiM5QjlCRkRcIn19LHtib3JkZXI6XCIjRkQ1QTc3XCIsYmFja2dyb3VuZDpcIiNGRkMwQ0JcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiNGRDVBNzdcIixiYWNrZ3JvdW5kOlwiI0ZGRDFEOVwifSxob3Zlcjp7Ym9yZGVyOlwiI0ZENUE3N1wiLGJhY2tncm91bmQ6XCIjRkZEMUQ5XCJ9fSx7Ym9yZGVyOlwiIzRBRDYzQVwiLGJhY2tncm91bmQ6XCIjQzJGQUJDXCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjNEFENjNBXCIsYmFja2dyb3VuZDpcIiNFNkZGRTNcIn0saG92ZXI6e2JvcmRlcjpcIiM0QUQ2M0FcIixiYWNrZ3JvdW5kOlwiI0U2RkZFM1wifX0se2JvcmRlcjpcIiM5OTAwMDBcIixiYWNrZ3JvdW5kOlwiI0VFMDAwMFwiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiI0JCMDAwMFwiLGJhY2tncm91bmQ6XCIjRkYzMzMzXCJ9LGhvdmVyOntib3JkZXI6XCIjQkIwMDAwXCIsYmFja2dyb3VuZDpcIiNGRjMzMzNcIn19LHtib3JkZXI6XCIjRkY2MDAwXCIsYmFja2dyb3VuZDpcIiNGRjYwMDBcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiNGRjYwMDBcIixiYWNrZ3JvdW5kOlwiI0ZGNjAwMFwifSxob3Zlcjp7Ym9yZGVyOlwiI0ZGNjAwMFwiLGJhY2tncm91bmQ6XCIjRkY2MDAwXCJ9fSx7Ym9yZGVyOlwiIzk3QzJGQ1wiLGJhY2tncm91bmQ6XCIjMkI3Q0U5XCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjRDJFNUZGXCIsYmFja2dyb3VuZDpcIiMyQjdDRTlcIn0saG92ZXI6e2JvcmRlcjpcIiNEMkU1RkZcIixiYWNrZ3JvdW5kOlwiIzJCN0NFOVwifX0se2JvcmRlcjpcIiMzOTk2MDVcIixiYWNrZ3JvdW5kOlwiIzI1NUMwM1wiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiIzM5OTYwNVwiLGJhY2tncm91bmQ6XCIjMjU1QzAzXCJ9LGhvdmVyOntib3JkZXI6XCIjMzk5NjA1XCIsYmFja2dyb3VuZDpcIiMyNTVDMDNcIn19LHtib3JkZXI6XCIjQjcwMDU0XCIsYmFja2dyb3VuZDpcIiNGRjAwN0VcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiNCNzAwNTRcIixiYWNrZ3JvdW5kOlwiI0ZGMDA3RVwifSxob3Zlcjp7Ym9yZGVyOlwiI0I3MDA1NFwiLGJhY2tncm91bmQ6XCIjRkYwMDdFXCJ9fSx7Ym9yZGVyOlwiI0FEODVFNFwiLGJhY2tncm91bmQ6XCIjN0MyOUYwXCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjRDNCREYwXCIsYmFja2dyb3VuZDpcIiM3QzI5RjBcIn0saG92ZXI6e2JvcmRlcjpcIiNEM0JERjBcIixiYWNrZ3JvdW5kOlwiIzdDMjlGMFwifX0se2JvcmRlcjpcIiM0NTU3RkFcIixiYWNrZ3JvdW5kOlwiIzAwMEVBMVwiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiIzZFNkVGRFwiLGJhY2tncm91bmQ6XCIjMDAwRUExXCJ9LGhvdmVyOntib3JkZXI6XCIjNkU2RUZEXCIsYmFja2dyb3VuZDpcIiMwMDBFQTFcIn19LHtib3JkZXI6XCIjRkZDMENCXCIsYmFja2dyb3VuZDpcIiNGRDVBNzdcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiNGRkQxRDlcIixiYWNrZ3JvdW5kOlwiI0ZENUE3N1wifSxob3Zlcjp7Ym9yZGVyOlwiI0ZGRDFEOVwiLGJhY2tncm91bmQ6XCIjRkQ1QTc3XCJ9fSx7Ym9yZGVyOlwiI0MyRkFCQ1wiLGJhY2tncm91bmQ6XCIjNzRENjZBXCIsaGlnaGxpZ2h0Ontib3JkZXI6XCIjRTZGRkUzXCIsYmFja2dyb3VuZDpcIiM3NEQ2NkFcIn0saG92ZXI6e2JvcmRlcjpcIiNFNkZGRTNcIixiYWNrZ3JvdW5kOlwiIzc0RDY2QVwifX0se2JvcmRlcjpcIiNFRTAwMDBcIixiYWNrZ3JvdW5kOlwiIzk5MDAwMFwiLGhpZ2hsaWdodDp7Ym9yZGVyOlwiI0ZGMzMzM1wiLGJhY2tncm91bmQ6XCIjQkIwMDAwXCJ9LGhvdmVyOntib3JkZXI6XCIjRkYzMzMzXCIsYmFja2dyb3VuZDpcIiNCQjAwMDBcIn19XSx0aGlzLm9wdGlvbnM9e30sdGhpcy5kZWZhdWx0T3B0aW9ucz17dXNlRGVmYXVsdEdyb3VwczohMH0sZm8odGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnMpfXJldHVybiAkbCh0LFt7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVtcInVzZURlZmF1bHRHcm91cHNcIl07aWYodm9pZCAwIT09dClmb3IodmFyIGkgaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKSYmLTE9PT16cChlKS5jYWxsKGUsaSkpe3ZhciBvPXRbaV07dGhpcy5hZGQoaSxvKX19fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2dyb3Vwcz1uZXcgRXcsdGhpcy5fZ3JvdXBOYW1lcz1bXX19LHtrZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdKXx8YXJndW1lbnRzWzFdLGk9dGhpcy5fZ3JvdXBzLmdldCh0KTtpZih2b2lkIDA9PT1pJiZlKWlmKCExPT09dGhpcy5vcHRpb25zLnVzZURlZmF1bHRHcm91cHMmJnRoaXMuX2dyb3VwTmFtZXMubGVuZ3RoPjApe3ZhciBvPXRoaXMuX2dyb3VwSW5kZXgldGhpcy5fZ3JvdXBOYW1lcy5sZW5ndGg7Kyt0aGlzLl9ncm91cEluZGV4LChpPXt9KS5jb2xvcj10aGlzLl9ncm91cHMuZ2V0KHRoaXMuX2dyb3VwTmFtZXNbb10pLHRoaXMuX2dyb3Vwcy5zZXQodCxpKX1lbHNle3ZhciBuPXRoaXMuX2RlZmF1bHRJbmRleCV0aGlzLl9kZWZhdWx0R3JvdXBzLmxlbmd0aDt0aGlzLl9kZWZhdWx0SW5kZXgrKywoaT17fSkuY29sb3I9dGhpcy5fZGVmYXVsdEdyb3Vwc1tuXSx0aGlzLl9ncm91cHMuc2V0KHQsaSl9cmV0dXJuIGl9fSx7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZ3JvdXBzLmhhcyh0KXx8dGhpcy5fZ3JvdXBOYW1lcy5wdXNoKHQpLHRoaXMuX2dyb3Vwcy5zZXQodCxlKSxlfX1dKSx0fSgpO3hpKHt0YXJnZXQ6XCJOdW1iZXJcIixzdGF0OiEwfSx7aXNOYU46ZnVuY3Rpb24odCl7cmV0dXJuIHQhPXR9fSk7dmFyIEN3PUcuTnVtYmVyLmlzTmFOLFN3PW4uaXNGaW5pdGUsVHc9TnVtYmVyLmlzRmluaXRlfHxmdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmU3codCl9O3hpKHt0YXJnZXQ6XCJOdW1iZXJcIixzdGF0OiEwfSx7aXNGaW5pdGU6VHd9KTt2YXIgTXc9Ry5OdW1iZXIuaXNGaW5pdGUsUHc9Vmguc29tZTt4aSh7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IU91KFwic29tZVwiKX0se3NvbWU6ZnVuY3Rpb24odCl7cmV0dXJuIFB3KHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSk7dmFyIER3PU1vKFwiQXJyYXlcIikuc29tZSxCdz10dCxJdz1Edyx6dz1BcnJheS5wcm90b3R5cGUsRnc9ZnVuY3Rpb24odCl7dmFyIGU9dC5zb21lO3JldHVybiB0PT09end8fEJ3KHp3LHQpJiZlPT09encuc29tZT9JdzplfSxOdz1GdyxBdz1uLFJ3PXIsanc9b24sTHc9ZHAudHJpbSxIdz15KFwiXCIuY2hhckF0KSxXdz1Bdy5wYXJzZUZsb2F0LFZ3PUF3LlN5bWJvbCxxdz1WdyYmVncuaXRlcmF0b3IsVXc9MS9XdyhcIlxcdFxcblxcdlxcZlxcciDCoOGagOKAgOKAgeKAguKAg+KAhOKAheKAhuKAh+KAiOKAieKAiuKAr+KBn+OAgFxcdTIwMjhcXHUyMDI5XFx1ZmVmZi0wXCIpIT0tMS8wfHxxdyYmIVJ3KChmdW5jdGlvbigpe1d3KE9iamVjdChxdykpfSkpP2Z1bmN0aW9uKHQpe3ZhciBlPUx3KGp3KHQpKSxpPVd3KGUpO3JldHVybiAwPT09aSYmXCItXCI9PUh3KGUsMCk/LTA6aX06V3c7eGkoe2dsb2JhbDohMCxmb3JjZWQ6cGFyc2VGbG9hdCE9VXd9LHtwYXJzZUZsb2F0OlV3fSk7dmFyIFl3PUcucGFyc2VGbG9hdCxYdz14aSxHdz1yLEt3PWRoLmY7WHcoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOkd3KChmdW5jdGlvbigpe3JldHVybiFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcygxKX0pKX0se2dldE93blByb3BlcnR5TmFtZXM6S3d9KTt2YXIgJHc9Ry5PYmplY3QsWnc9ZnVuY3Rpb24odCl7cmV0dXJuICR3LmdldE93blByb3BlcnR5TmFtZXModCl9LFF3PVp3O2Z1bmN0aW9uIEp3KHQsZSl7dmFyIGk9W1wibm9kZVwiLFwiZWRnZVwiLFwibGFiZWxcIl0sbz0hMCxuPWltKGUsXCJjaG9zZW5cIik7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBuKW89bjtlbHNlIGlmKFwib2JqZWN0XCI9PT1RYyhuKSl7aWYoLTE9PT16cChpKS5jYWxsKGksdCkpdGhyb3cgbmV3IEVycm9yKFwiY2hvb3NpZnk6IHN1Yk9wdGlvbiAnXCIrdCtcIicgc2hvdWxkIGJlIG9uZSBvZiAnXCIraS5qb2luKFwiJywgJ1wiKStcIidcIik7dmFyIHI9aW0oZSxbXCJjaG9zZW5cIix0XSk7XCJib29sZWFuXCIhPXR5cGVvZiByJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiByfHwobz1yKX1yZXR1cm4gb31mdW5jdGlvbiB0ayh0LGUsaSl7aWYodC53aWR0aDw9MHx8dC5oZWlnaHQ8PTApcmV0dXJuITE7aWYodm9pZCAwIT09aSl7dmFyIG89e3g6ZS54LWkueCx5OmUueS1pLnl9O2lmKDAhPT1pLmFuZ2xlKXt2YXIgbj0taS5hbmdsZTtlPXt4Ok1hdGguY29zKG4pKm8ueC1NYXRoLnNpbihuKSpvLnkseTpNYXRoLnNpbihuKSpvLngrTWF0aC5jb3Mobikqby55fX1lbHNlIGU9b312YXIgcj10LngrdC53aWR0aCxzPXQueSt0LndpZHRoO3JldHVybiB0LmxlZnQ8ZS54JiZyPmUueCYmdC50b3A8ZS55JiZzPmUueX1mdW5jdGlvbiBlayh0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmXCJcIiE9PXR9ZnVuY3Rpb24gaWsodCxlLGksbyl7dmFyIG49by54LHI9by55O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG8uZGlzdGFuY2VUb0JvcmRlcil7dmFyIHM9by5kaXN0YW5jZVRvQm9yZGVyKHQsZSksYT1NYXRoLnNpbihlKSpzLGg9TWF0aC5jb3MoZSkqcztoPT09cz8obis9cyxyPW8ueSk6YT09PXM/KG49by54LHItPXMpOihuKz1oLHItPWEpfWVsc2Ugby5zaGFwZS53aWR0aD5vLnNoYXBlLmhlaWdodD8obj1vLngrLjUqby5zaGFwZS53aWR0aCxyPW8ueS1pKToobj1vLngraSxyPW8ueS0uNSpvLnNoYXBlLmhlaWdodCk7cmV0dXJue3g6bix5OnJ9fXZhciBvaz1NbyhcIkFycmF5XCIpLnZhbHVlcyxuaz1Kbyxyaz1WdCxzaz10dCxhaz1vayxoaz1BcnJheS5wcm90b3R5cGUsZGs9e0RPTVRva2VuTGlzdDohMCxOb2RlTGlzdDohMH0sbGs9ZnVuY3Rpb24odCl7dmFyIGU9dC52YWx1ZXM7cmV0dXJuIHQ9PT1oa3x8c2soaGssdCkmJmU9PT1oay52YWx1ZXN8fHJrKGRrLG5rKHQpKT9hazplfSxjaz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7WGwodGhpcyx0KSx0aGlzLm1lYXN1cmVUZXh0PWUsdGhpcy5jdXJyZW50PTAsdGhpcy53aWR0aD0wLHRoaXMuaGVpZ2h0PTAsdGhpcy5saW5lcz1bXX1yZXR1cm4gJGwodCxbe2tleTpcIl9hZGRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpcIm5vcm1hbFwiO3ZvaWQgMD09PXRoaXMubGluZXNbdF0mJih0aGlzLmxpbmVzW3RdPXt3aWR0aDowLGhlaWdodDowLGJsb2NrczpbXX0pO3ZhciBvPWU7dm9pZCAwIT09ZSYmXCJcIiE9PWV8fChvPVwiIFwiKTt2YXIgbj10aGlzLm1lYXN1cmVUZXh0KG8saSkscj1mbyh7fSxsayhuKSk7ci50ZXh0PWUsci53aWR0aD1uLndpZHRoLHIubW9kPWksdm9pZCAwIT09ZSYmXCJcIiE9PWV8fChyLndpZHRoPTApLHRoaXMubGluZXNbdF0uYmxvY2tzLnB1c2gociksdGhpcy5saW5lc1t0XS53aWR0aCs9ci53aWR0aH19LHtrZXk6XCJjdXJXaWR0aFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5saW5lc1t0aGlzLmN1cnJlbnRdO3JldHVybiB2b2lkIDA9PT10PzA6dC53aWR0aH19LHtrZXk6XCJhcHBlbmRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJub3JtYWxcIjt0aGlzLl9hZGQodGhpcy5jdXJyZW50LHQsZSl9fSx7a2V5OlwibmV3TGluZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIm5vcm1hbFwiO3RoaXMuX2FkZCh0aGlzLmN1cnJlbnQsdCxlKSx0aGlzLmN1cnJlbnQrK319LHtrZXk6XCJkZXRlcm1pbmVMaW5lSGVpZ2h0c1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLmxpbmVzLmxlbmd0aDt0Kyspe3ZhciBlPXRoaXMubGluZXNbdF0saT0wO2lmKHZvaWQgMCE9PWUuYmxvY2tzKWZvcih2YXIgbz0wO288ZS5ibG9ja3MubGVuZ3RoO28rKyl7dmFyIG49ZS5ibG9ja3Nbb107aTxuLmhlaWdodCYmKGk9bi5oZWlnaHQpfWUuaGVpZ2h0PWl9fX0se2tleTpcImRldGVybWluZUxhYmVsU2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT0wLGk9MDtpPHRoaXMubGluZXMubGVuZ3RoO2krKyl7dmFyIG89dGhpcy5saW5lc1tpXTtvLndpZHRoPnQmJih0PW8ud2lkdGgpLGUrPW8uaGVpZ2h0fXRoaXMud2lkdGg9dCx0aGlzLmhlaWdodD1lfX0se2tleTpcInJlbW92ZUVtcHR5QmxvY2tzXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wO2U8dGhpcy5saW5lcy5sZW5ndGg7ZSsrKXt2YXIgaT10aGlzLmxpbmVzW2VdO2lmKDAhPT1pLmJsb2Nrcy5sZW5ndGgmJihlIT09dGhpcy5saW5lcy5sZW5ndGgtMXx8MCE9PWkud2lkdGgpKXt2YXIgbz17fTtmbyhvLGkpLG8uYmxvY2tzPVtdO2Zvcih2YXIgbj12b2lkIDAscj1bXSxzPTA7czxpLmJsb2Nrcy5sZW5ndGg7cysrKXt2YXIgYT1pLmJsb2Nrc1tzXTswIT09YS53aWR0aD9yLnB1c2goYSk6dm9pZCAwPT09biYmKG49YSl9MD09PXIubGVuZ3RoJiZ2b2lkIDAhPT1uJiZyLnB1c2gobiksby5ibG9ja3M9cix0LnB1c2gobyl9fXJldHVybiB0fX0se2tleTpcImZpbmFsaXplXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmRldGVybWluZUxpbmVIZWlnaHRzKCksdGhpcy5kZXRlcm1pbmVMYWJlbFNpemUoKTt2YXIgdD10aGlzLnJlbW92ZUVtcHR5QmxvY2tzKCk7cmV0dXJue3dpZHRoOnRoaXMud2lkdGgsaGVpZ2h0OnRoaXMuaGVpZ2h0LGxpbmVzOnR9fX1dKSx0fSgpLHVrPXtcIjxiPlwiOi88Yj4vLFwiPGk+XCI6LzxpPi8sXCI8Y29kZT5cIjovPGNvZGU+LyxcIjwvYj5cIjovPFxcL2I+LyxcIjwvaT5cIjovPFxcL2k+LyxcIjwvY29kZT5cIjovPFxcL2NvZGU+LyxcIipcIjovXFwqLyxfOi9fLyxcImBcIjovYC8sYWZ0ZXJCb2xkOi9bXipdLyxhZnRlckl0YWw6L1teX10vLGFmdGVyTW9ubzovW15gXS99LGZrPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtYbCh0aGlzLHQpLHRoaXMudGV4dD1lLHRoaXMuYm9sZD0hMSx0aGlzLml0YWw9ITEsdGhpcy5tb25vPSExLHRoaXMuc3BhY2luZz0hMSx0aGlzLnBvc2l0aW9uPTAsdGhpcy5idWZmZXI9XCJcIix0aGlzLm1vZFN0YWNrPVtdLHRoaXMuYmxvY2tzPVtdfXJldHVybiAkbCh0LFt7a2V5OlwibW9kXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMubW9kU3RhY2subGVuZ3RoP1wibm9ybWFsXCI6dGhpcy5tb2RTdGFja1swXX19LHtrZXk6XCJtb2ROYW1lXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMubW9kU3RhY2subGVuZ3RoP1wibm9ybWFsXCI6XCJtb25vXCI9PT10aGlzLm1vZFN0YWNrWzBdP1wibW9ub1wiOnRoaXMuYm9sZCYmdGhpcy5pdGFsP1wiYm9sZGl0YWxcIjp0aGlzLmJvbGQ/XCJib2xkXCI6dGhpcy5pdGFsP1wiaXRhbFwiOnZvaWQgMH19LHtrZXk6XCJlbWl0QmxvY2tcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3BhY2luZyYmKHRoaXMuYWRkKFwiIFwiKSx0aGlzLnNwYWNpbmc9ITEpLHRoaXMuYnVmZmVyLmxlbmd0aD4wJiYodGhpcy5ibG9ja3MucHVzaCh7dGV4dDp0aGlzLmJ1ZmZlcixtb2Q6dGhpcy5tb2ROYW1lKCl9KSx0aGlzLmJ1ZmZlcj1cIlwiKX19LHtrZXk6XCJhZGRcIix2YWx1ZTpmdW5jdGlvbih0KXtcIiBcIj09PXQmJih0aGlzLnNwYWNpbmc9ITApLHRoaXMuc3BhY2luZyYmKHRoaXMuYnVmZmVyKz1cIiBcIix0aGlzLnNwYWNpbmc9ITEpLFwiIFwiIT10JiYodGhpcy5idWZmZXIrPXQpfX0se2tleTpcInBhcnNlV1NcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hIS9bIFxcdF0vLnRlc3QodCkmJih0aGlzLm1vbm8/dGhpcy5hZGQodCk6dGhpcy5zcGFjaW5nPSEwLCEwKX19LHtrZXk6XCJzZXRUYWdcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmVtaXRCbG9jaygpLHRoaXNbdF09ITAsdGhpcy5tb2RTdGFjay51bnNoaWZ0KHQpfX0se2tleTpcInVuc2V0VGFnXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5lbWl0QmxvY2soKSx0aGlzW3RdPSExLHRoaXMubW9kU3RhY2suc2hpZnQoKX19LHtrZXk6XCJwYXJzZVN0YXJ0VGFnXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4hKHRoaXMubW9ub3x8dGhpc1t0XXx8IXRoaXMubWF0Y2goZSkpJiYodGhpcy5zZXRUYWcodCksITApfX0se2tleTpcIm1hdGNoXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXSxpPXRoaXMucHJlcGFyZVJlZ0V4cCh0KSxvPSRjKGksMiksbj1vWzBdLHI9b1sxXSxzPW4udGVzdCh0aGlzLnRleHQuc3Vic3RyKHRoaXMucG9zaXRpb24scikpO3JldHVybiBzJiZlJiYodGhpcy5wb3NpdGlvbis9ci0xKSxzfX0se2tleTpcInBhcnNlRW5kVGFnXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPXRoaXMubW9kKCk9PT10O3JldHVybiEoIShvPVwibW9ub1wiPT09dD9vJiZ0aGlzLm1vbm86byYmIXRoaXMubW9ubyl8fCF0aGlzLm1hdGNoKGUpKSYmKHZvaWQgMCE9PWk/KHRoaXMucG9zaXRpb249PT10aGlzLnRleHQubGVuZ3RoLTF8fHRoaXMubWF0Y2goaSwhMSkpJiZ0aGlzLnVuc2V0VGFnKHQpOnRoaXMudW5zZXRUYWcodCksITApfX0se2tleTpcInJlcGxhY2VcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiEhdGhpcy5tYXRjaCh0KSYmKHRoaXMuYWRkKGUpLHRoaXMucG9zaXRpb24rPWxlbmd0aC0xLCEwKX19LHtrZXk6XCJwcmVwYXJlUmVnRXhwXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsaTtpZih0IGluc3RhbmNlb2YgUmVnRXhwKWk9dCxlPTE7ZWxzZXt2YXIgbz11a1t0XTtpPXZvaWQgMCE9PW8/bzpuZXcgUmVnRXhwKHQpLGU9dC5sZW5ndGh9cmV0dXJuW2ksZV19fV0pLHR9KCkscGs9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsaSxvLG4pe3ZhciByPXRoaXM7WGwodGhpcyx0KSx0aGlzLmN0eD1lLHRoaXMucGFyZW50PWksdGhpcy5zZWxlY3RlZD1vLHRoaXMuaG92ZXI9bjt0aGlzLmxpbmVzPW5ldyBjaygoZnVuY3Rpb24odCxpKXtpZih2b2lkIDA9PT10KXJldHVybiAwO3ZhciBzPXIucGFyZW50LmdldEZvcm1hdHRpbmdWYWx1ZXMoZSxvLG4saSksYT0wO1wiXCIhPT10JiYoYT1yLmN0eC5tZWFzdXJlVGV4dCh0KS53aWR0aCk7cmV0dXJue3dpZHRoOmEsdmFsdWVzOnN9fSkpfXJldHVybiAkbCh0LFt7a2V5OlwicHJvY2Vzc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCFlayh0KSlyZXR1cm4gdGhpcy5saW5lcy5maW5hbGl6ZSgpO3ZhciBlPXRoaXMucGFyZW50LmZvbnRPcHRpb25zO3Q9KHQ9dC5yZXBsYWNlKC9cXHJcXG4vZyxcIlxcblwiKSkucmVwbGFjZSgvXFxyL2csXCJcXG5cIik7dmFyIGk9U3RyaW5nKHQpLnNwbGl0KFwiXFxuXCIpLG89aS5sZW5ndGg7aWYoZS5tdWx0aSlmb3IodmFyIG49MDtuPG87bisrKXt2YXIgcj10aGlzLnNwbGl0QmxvY2tzKGlbbl0sZS5tdWx0aSk7aWYodm9pZCAwIT09cilpZigwIT09ci5sZW5ndGgpe2lmKGUubWF4V2R0PjApZm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspe3ZhciBhPXJbc10ubW9kLGg9cltzXS50ZXh0O3RoaXMuc3BsaXRTdHJpbmdJbnRvTGluZXMoaCxhLCEwKX1lbHNlIGZvcih2YXIgZD0wO2Q8ci5sZW5ndGg7ZCsrKXt2YXIgbD1yW2RdLm1vZCxjPXJbZF0udGV4dDt0aGlzLmxpbmVzLmFwcGVuZChjLGwpfXRoaXMubGluZXMubmV3TGluZSgpfWVsc2UgdGhpcy5saW5lcy5uZXdMaW5lKFwiXCIpfWVsc2UgaWYoZS5tYXhXZHQ+MClmb3IodmFyIHU9MDt1PG87dSsrKXRoaXMuc3BsaXRTdHJpbmdJbnRvTGluZXMoaVt1XSk7ZWxzZSBmb3IodmFyIGY9MDtmPG87ZisrKXRoaXMubGluZXMubmV3TGluZShpW2ZdKTtyZXR1cm4gdGhpcy5saW5lcy5maW5hbGl6ZSgpfX0se2tleTpcImRlY29kZU1hcmt1cFN5c3RlbVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVwibm9uZVwiO3JldHVyblwibWFya2Rvd25cIj09PXR8fFwibWRcIj09PXQ/ZT1cIm1hcmtkb3duXCI6ITAhPT10JiZcImh0bWxcIiE9PXR8fChlPVwiaHRtbFwiKSxlfX0se2tleTpcInNwbGl0SHRtbEJsb2Nrc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgZmsodCksaT1mdW5jdGlvbih0KXtyZXR1cm4hIS8mLy50ZXN0KHQpJiYoZS5yZXBsYWNlKGUudGV4dCxcIiZsdDtcIixcIjxcIil8fGUucmVwbGFjZShlLnRleHQsXCImYW1wO1wiLFwiJlwiKXx8ZS5hZGQoXCImXCIpLCEwKX07ZS5wb3NpdGlvbjxlLnRleHQubGVuZ3RoOyl7dmFyIG89ZS50ZXh0LmNoYXJBdChlLnBvc2l0aW9uKTtlLnBhcnNlV1Mobyl8fC88Ly50ZXN0KG8pJiYoZS5wYXJzZVN0YXJ0VGFnKFwiYm9sZFwiLFwiPGI+XCIpfHxlLnBhcnNlU3RhcnRUYWcoXCJpdGFsXCIsXCI8aT5cIil8fGUucGFyc2VTdGFydFRhZyhcIm1vbm9cIixcIjxjb2RlPlwiKXx8ZS5wYXJzZUVuZFRhZyhcImJvbGRcIixcIjwvYj5cIil8fGUucGFyc2VFbmRUYWcoXCJpdGFsXCIsXCI8L2k+XCIpfHxlLnBhcnNlRW5kVGFnKFwibW9ub1wiLFwiPC9jb2RlPlwiKSl8fGkobyl8fGUuYWRkKG8pLGUucG9zaXRpb24rK31yZXR1cm4gZS5lbWl0QmxvY2soKSxlLmJsb2Nrc319LHtrZXk6XCJzcGxpdE1hcmtkb3duQmxvY2tzXCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMsaT1uZXcgZmsodCksbz0hMCxuPWZ1bmN0aW9uKHQpe3JldHVybiEhL1xcXFwvLnRlc3QodCkmJihpLnBvc2l0aW9uPGUudGV4dC5sZW5ndGgrMSYmKGkucG9zaXRpb24rKyx0PWUudGV4dC5jaGFyQXQoaS5wb3NpdGlvbiksLyBcXHQvLnRlc3QodCk/aS5zcGFjaW5nPSEwOihpLmFkZCh0KSxvPSExKSksITApfTtpLnBvc2l0aW9uPGkudGV4dC5sZW5ndGg7KXt2YXIgcj1pLnRleHQuY2hhckF0KGkucG9zaXRpb24pO2kucGFyc2VXUyhyKXx8bihyKXx8KG98fGkuc3BhY2luZykmJihpLnBhcnNlU3RhcnRUYWcoXCJib2xkXCIsXCIqXCIpfHxpLnBhcnNlU3RhcnRUYWcoXCJpdGFsXCIsXCJfXCIpfHxpLnBhcnNlU3RhcnRUYWcoXCJtb25vXCIsXCJgXCIpKXx8aS5wYXJzZUVuZFRhZyhcImJvbGRcIixcIipcIixcImFmdGVyQm9sZFwiKXx8aS5wYXJzZUVuZFRhZyhcIml0YWxcIixcIl9cIixcImFmdGVySXRhbFwiKXx8aS5wYXJzZUVuZFRhZyhcIm1vbm9cIixcImBcIixcImFmdGVyTW9ub1wiKXx8KGkuYWRkKHIpLG89ITEpLGkucG9zaXRpb24rK31yZXR1cm4gaS5lbWl0QmxvY2soKSxpLmJsb2Nrc319LHtrZXk6XCJzcGxpdEJsb2Nrc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5kZWNvZGVNYXJrdXBTeXN0ZW0oZSk7cmV0dXJuXCJub25lXCI9PT1pP1t7dGV4dDp0LG1vZDpcIm5vcm1hbFwifV06XCJtYXJrZG93blwiPT09aT90aGlzLnNwbGl0TWFya2Rvd25CbG9ja3ModCk6XCJodG1sXCI9PT1pP3RoaXMuc3BsaXRIdG1sQmxvY2tzKHQpOnZvaWQgMH19LHtrZXk6XCJvdmVyTWF4V2lkdGhcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmN0eC5tZWFzdXJlVGV4dCh0KS53aWR0aDtyZXR1cm4gdGhpcy5saW5lcy5jdXJXaWR0aCgpK2U+dGhpcy5wYXJlbnQuZm9udE9wdGlvbnMubWF4V2R0fX0se2tleTpcImdldExvbmdlc3RGaXRcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9XCJcIixpPTA7aTx0Lmxlbmd0aDspe3ZhciBvPWUrKFwiXCI9PT1lP1wiXCI6XCIgXCIpK3RbaV07aWYodGhpcy5vdmVyTWF4V2lkdGgobykpYnJlYWs7ZT1vLGkrK31yZXR1cm4gaX19LHtrZXk6XCJnZXRMb25nZXN0Rml0V29yZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGgmJiF0aGlzLm92ZXJNYXhXaWR0aChhdSh0KS5jYWxsKHQsMCxlKSk7KWUrKztyZXR1cm4gZX19LHtrZXk6XCJzcGxpdFN0cmluZ0ludG9MaW5lc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIm5vcm1hbFwiLGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTt0aGlzLnBhcmVudC5nZXRGb3JtYXR0aW5nVmFsdWVzKHRoaXMuY3R4LHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixlKTtmb3IodmFyIG89KHQ9KHQ9dC5yZXBsYWNlKC9eKCArKS9nLFwiJDFcXHJcIikpLnJlcGxhY2UoLyhbXlxccl1bXiBdKikoICspL2csXCIkMVxcciQyXFxyXCIpKS5zcGxpdChcIlxcclwiKTtvLmxlbmd0aD4wOyl7dmFyIG49dGhpcy5nZXRMb25nZXN0Rml0KG8pO2lmKDA9PT1uKXt2YXIgcj1vWzBdLHM9dGhpcy5nZXRMb25nZXN0Rml0V29yZChyKTt0aGlzLmxpbmVzLm5ld0xpbmUoYXUocikuY2FsbChyLDAscyksZSksb1swXT1hdShyKS5jYWxsKHIscyl9ZWxzZXt2YXIgYT1uO1wiIFwiPT09b1tuLTFdP24tLTpcIiBcIj09PW9bYV0mJmErKzt2YXIgaD1hdShvKS5jYWxsKG8sMCxuKS5qb2luKFwiXCIpO249PW8ubGVuZ3RoJiZpP3RoaXMubGluZXMuYXBwZW5kKGgsZSk6dGhpcy5saW5lcy5uZXdMaW5lKGgsZSksbz1hdShvKS5jYWxsKG8sYSl9fX19XSksdH0oKSx2az1bXCJib2xkXCIsXCJpdGFsXCIsXCJib2xkaXRhbFwiLFwibW9ub1wiXSxnaz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpKXt2YXIgbz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO1hsKHRoaXMsdCksdGhpcy5ib2R5PWUsdGhpcy5wb2ludFRvU2VsZj0hMSx0aGlzLmJhc2VTaXplPXZvaWQgMCx0aGlzLmZvbnRPcHRpb25zPXt9LHRoaXMuc2V0T3B0aW9ucyhpKSx0aGlzLnNpemU9e3RvcDowLGxlZnQ6MCx3aWR0aDowLGhlaWdodDowLHlMaW5lOjB9LHRoaXMuaXNFZGdlTGFiZWw9b31yZXR1cm4gJGwodCxbe2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLmVsZW1lbnRPcHRpb25zPXQsdGhpcy5pbml0Rm9udE9wdGlvbnModC5mb250KSxlayh0LmxhYmVsKT90aGlzLmxhYmVsRGlydHk9ITA6dC5sYWJlbD12b2lkIDAsdm9pZCAwIT09dC5mb250JiZudWxsIT09dC5mb250KWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmZvbnQpdGhpcy5iYXNlU2l6ZT10aGlzLmZvbnRPcHRpb25zLnNpemU7ZWxzZSBpZihcIm9iamVjdFwiPT09UWModC5mb250KSl7dmFyIGU9dC5mb250LnNpemU7dm9pZCAwIT09ZSYmKHRoaXMuYmFzZVNpemU9ZSl9fX0se2tleTpcImluaXRGb250T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXM7V3kodmssKGZ1bmN0aW9uKHQpe2kuZm9udE9wdGlvbnNbdF09e319KSksdC5wYXJzZUZvbnRTdHJpbmcodGhpcy5mb250T3B0aW9ucyxlKT90aGlzLmZvbnRPcHRpb25zLnZhZGp1c3Q9MDpXeShlLChmdW5jdGlvbih0LGUpe251bGwhPXQmJlwib2JqZWN0XCIhPT1RYyh0KSYmKGkuZm9udE9wdGlvbnNbZV09dCl9KSl9fSx7a2V5OlwiY29uc3RyYWluXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9e2NvbnN0cmFpbldpZHRoOiExLG1heFdkdDotMSxtaW5XZHQ6LTEsY29uc3RyYWluSGVpZ2h0OiExLG1pbkhndDotMSx2YWxpZ246XCJtaWRkbGVcIn0saT1pbSh0LFwid2lkdGhDb25zdHJhaW50XCIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBpKWUubWF4V2R0PU51bWJlcihpKSxlLm1pbldkdD1OdW1iZXIoaSk7ZWxzZSBpZihcIm9iamVjdFwiPT09UWMoaSkpe3ZhciBvPWltKHQsW1wid2lkdGhDb25zdHJhaW50XCIsXCJtYXhpbXVtXCJdKTtcIm51bWJlclwiPT10eXBlb2YgbyYmKGUubWF4V2R0PU51bWJlcihvKSk7dmFyIG49aW0odCxbXCJ3aWR0aENvbnN0cmFpbnRcIixcIm1pbmltdW1cIl0pO1wibnVtYmVyXCI9PXR5cGVvZiBuJiYoZS5taW5XZHQ9TnVtYmVyKG4pKX12YXIgcj1pbSh0LFwiaGVpZ2h0Q29uc3RyYWludFwiKTtpZihcIm51bWJlclwiPT10eXBlb2YgcillLm1pbkhndD1OdW1iZXIocik7ZWxzZSBpZihcIm9iamVjdFwiPT09UWMocikpe3ZhciBzPWltKHQsW1wiaGVpZ2h0Q29uc3RyYWludFwiLFwibWluaW11bVwiXSk7XCJudW1iZXJcIj09dHlwZW9mIHMmJihlLm1pbkhndD1OdW1iZXIocykpO3ZhciBhPWltKHQsW1wiaGVpZ2h0Q29uc3RyYWludFwiLFwidmFsaWduXCJdKTtcInN0cmluZ1wiPT10eXBlb2YgYSYmKFwidG9wXCIhPT1hJiZcImJvdHRvbVwiIT09YXx8KGUudmFsaWduPWEpKX1yZXR1cm4gZX19LHtrZXk6XCJ1cGRhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuc2V0T3B0aW9ucyh0LCEwKSx0aGlzLnByb3BhZ2F0ZUZvbnRzKGUpLFJ5KHRoaXMuZm9udE9wdGlvbnMsdGhpcy5jb25zdHJhaW4oZSkpLHRoaXMuZm9udE9wdGlvbnMuY2hvb3Nlcj1KdyhcImxhYmVsXCIsZSl9fSx7a2V5OlwiYWRqdXN0U2l6ZXNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10P3QucmlnaHQrdC5sZWZ0OjA7dGhpcy5mb250T3B0aW9ucy5jb25zdHJhaW5XaWR0aCYmKHRoaXMuZm9udE9wdGlvbnMubWF4V2R0LT1lLHRoaXMuZm9udE9wdGlvbnMubWluV2R0LT1lKTt2YXIgaT10P3QudG9wK3QuYm90dG9tOjA7dGhpcy5mb250T3B0aW9ucy5jb25zdHJhaW5IZWlnaHQmJih0aGlzLmZvbnRPcHRpb25zLm1pbkhndC09aSl9fSx7a2V5OlwiYWRkRm9udE9wdGlvbnNUb1BpbGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgaT0wO2k8ZS5sZW5ndGg7KytpKXRoaXMuYWRkRm9udFRvUGlsZSh0LGVbaV0pfX0se2tleTpcImFkZEZvbnRUb1BpbGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKHZvaWQgMCE9PWUmJnZvaWQgMCE9PWUuZm9udCYmbnVsbCE9PWUuZm9udCl7dmFyIGk9ZS5mb250O3QucHVzaChpKX19fSx7a2V5OlwiZ2V0QmFzaWNPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciBpPXt9LG89MDtvPGUubGVuZ3RoOysrbyl7dmFyIG49ZVtvXSxyPXt9O3QucGFyc2VGb250U3RyaW5nKHIsbikmJihuPXIpLFd5KG4sKGZ1bmN0aW9uKHQsZSl7dm9pZCAwIT09dCYmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpLGUpfHwoLTEhPT16cCh2aykuY2FsbCh2ayxlKT9pW2VdPXt9OmlbZV09dCkpfSkpfXJldHVybiBpfX0se2tleTpcImdldEZvbnRPcHRpb25cIix2YWx1ZTpmdW5jdGlvbihlLGksbyl7Zm9yKHZhciBuLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIHM9ZVtyXTtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocyxpKSl7aWYobnVsbD09KG49c1tpXSkpY29udGludWU7dmFyIGE9e307aWYodC5wYXJzZUZvbnRTdHJpbmcoYSxuKSYmKG49YSksT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sbykpcmV0dXJuIG5bb119fWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmZvbnRPcHRpb25zLG8pKXJldHVybiB0aGlzLmZvbnRPcHRpb25zW29dO3Rocm93IG5ldyBFcnJvcihcIkRpZCBub3QgZmluZCB2YWx1ZSBmb3IgbXVsdGktZm9udCBmb3IgcHJvcGVydHk6ICdcIitvK1wiJ1wiKX19LHtrZXk6XCJnZXRGb250T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBpPXt9LG89W1wiY29sb3JcIixcInNpemVcIixcImZhY2VcIixcIm1vZFwiLFwidmFkanVzdFwiXSxuPTA7bjxvLmxlbmd0aDsrK24pe3ZhciByPW9bbl07aVtyXT10aGlzLmdldEZvbnRPcHRpb24odCxlLHIpfXJldHVybiBpfX0se2tleTpcInByb3BhZ2F0ZUZvbnRzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxpPVtdO3RoaXMuYWRkRm9udE9wdGlvbnNUb1BpbGUoaSx0KSx0aGlzLmZvbnRPcHRpb25zPXRoaXMuZ2V0QmFzaWNPcHRpb25zKGkpO2Zvcih2YXIgbz1mdW5jdGlvbih0KXt2YXIgbz12a1t0XSxuPWUuZm9udE9wdGlvbnNbb107V3koZS5nZXRGb250T3B0aW9ucyhpLG8pLChmdW5jdGlvbih0LGUpe25bZV09dH0pKSxuLnNpemU9TnVtYmVyKG4uc2l6ZSksbi52YWRqdXN0PU51bWJlcihuLnZhZGp1c3QpfSxuPTA7bjx2ay5sZW5ndGg7KytuKW8obil9fSx7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD41JiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOlwibWlkZGxlXCI7aWYodm9pZCAwIT09dGhpcy5lbGVtZW50T3B0aW9ucy5sYWJlbCl7dmFyIHM9dGhpcy5mb250T3B0aW9ucy5zaXplKnRoaXMuYm9keS52aWV3LnNjYWxlO3RoaXMuZWxlbWVudE9wdGlvbnMubGFiZWwmJnM8dGhpcy5lbGVtZW50T3B0aW9ucy5zY2FsaW5nLmxhYmVsLmRyYXdUaHJlc2hvbGQtMXx8KHM+PXRoaXMuZWxlbWVudE9wdGlvbnMuc2NhbGluZy5sYWJlbC5tYXhWaXNpYmxlJiYocz1OdW1iZXIodGhpcy5lbGVtZW50T3B0aW9ucy5zY2FsaW5nLmxhYmVsLm1heFZpc2libGUpL3RoaXMuYm9keS52aWV3LnNjYWxlKSx0aGlzLmNhbGN1bGF0ZUxhYmVsU2l6ZSh0LG8sbixlLGksciksdGhpcy5fZHJhd0JhY2tncm91bmQodCksdGhpcy5fZHJhd1RleHQodCxlLHRoaXMuc2l6ZS55TGluZSxyLHMpKX19fSx7a2V5OlwiX2RyYXdCYWNrZ3JvdW5kXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwIT09dGhpcy5mb250T3B0aW9ucy5iYWNrZ3JvdW5kJiZcIm5vbmVcIiE9PXRoaXMuZm9udE9wdGlvbnMuYmFja2dyb3VuZCl7dC5maWxsU3R5bGU9dGhpcy5mb250T3B0aW9ucy5iYWNrZ3JvdW5kO3ZhciBlPXRoaXMuZ2V0U2l6ZSgpO3QuZmlsbFJlY3QoZS5sZWZ0LGUudG9wLGUud2lkdGgsZS5oZWlnaHQpfX19LHtrZXk6XCJfZHJhd1RleHRcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOlwibWlkZGxlXCIsbj1hcmd1bWVudHMubGVuZ3RoPjQ/YXJndW1lbnRzWzRdOnZvaWQgMCxyPXRoaXMuX3NldEFsaWdubWVudCh0LGUsaSxvKSxzPSRjKHIsMik7ZT1zWzBdLGk9c1sxXSx0LnRleHRBbGlnbj1cImxlZnRcIixlLT10aGlzLnNpemUud2lkdGgvMix0aGlzLmZvbnRPcHRpb25zLnZhbGlnbiYmdGhpcy5zaXplLmhlaWdodD50aGlzLnNpemUubGFiZWxIZWlnaHQmJihcInRvcFwiPT09dGhpcy5mb250T3B0aW9ucy52YWxpZ24mJihpLT0odGhpcy5zaXplLmhlaWdodC10aGlzLnNpemUubGFiZWxIZWlnaHQpLzIpLFwiYm90dG9tXCI9PT10aGlzLmZvbnRPcHRpb25zLnZhbGlnbiYmKGkrPSh0aGlzLnNpemUuaGVpZ2h0LXRoaXMuc2l6ZS5sYWJlbEhlaWdodCkvMikpO2Zvcih2YXIgYT0wO2E8dGhpcy5saW5lQ291bnQ7YSsrKXt2YXIgaD10aGlzLmxpbmVzW2FdO2lmKGgmJmguYmxvY2tzKXt2YXIgZD0wO3RoaXMuaXNFZGdlTGFiZWx8fFwiY2VudGVyXCI9PT10aGlzLmZvbnRPcHRpb25zLmFsaWduP2QrPSh0aGlzLnNpemUud2lkdGgtaC53aWR0aCkvMjpcInJpZ2h0XCI9PT10aGlzLmZvbnRPcHRpb25zLmFsaWduJiYoZCs9dGhpcy5zaXplLndpZHRoLWgud2lkdGgpO2Zvcih2YXIgbD0wO2w8aC5ibG9ja3MubGVuZ3RoO2wrKyl7dmFyIGM9aC5ibG9ja3NbbF07dC5mb250PWMuZm9udDt2YXIgdT10aGlzLl9nZXRDb2xvcihjLmNvbG9yLG4sYy5zdHJva2VDb2xvciksZj0kYyh1LDIpLHA9ZlswXSx2PWZbMV07Yy5zdHJva2VXaWR0aD4wJiYodC5saW5lV2lkdGg9Yy5zdHJva2VXaWR0aCx0LnN0cm9rZVN0eWxlPXYsdC5saW5lSm9pbj1cInJvdW5kXCIpLHQuZmlsbFN0eWxlPXAsYy5zdHJva2VXaWR0aD4wJiZ0LnN0cm9rZVRleHQoYy50ZXh0LGUrZCxpK2MudmFkanVzdCksdC5maWxsVGV4dChjLnRleHQsZStkLGkrYy52YWRqdXN0KSxkKz1jLndpZHRofWkrPWguaGVpZ2h0fX19fSx7a2V5OlwiX3NldEFsaWdubWVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8pe2lmKHRoaXMuaXNFZGdlTGFiZWwmJlwiaG9yaXpvbnRhbFwiIT09dGhpcy5mb250T3B0aW9ucy5hbGlnbiYmITE9PT10aGlzLnBvaW50VG9TZWxmKXtlPTAsaT0wO1widG9wXCI9PT10aGlzLmZvbnRPcHRpb25zLmFsaWduPyh0LnRleHRCYXNlbGluZT1cImFscGhhYmV0aWNcIixpLT00KTpcImJvdHRvbVwiPT09dGhpcy5mb250T3B0aW9ucy5hbGlnbj8odC50ZXh0QmFzZWxpbmU9XCJoYW5naW5nXCIsaSs9NCk6dC50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIn1lbHNlIHQudGV4dEJhc2VsaW5lPW87cmV0dXJuW2UsaV19fSx7a2V5OlwiX2dldENvbG9yXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPXR8fFwiIzAwMDAwMFwiLG49aXx8XCIjZmZmZmZmXCI7aWYoZTw9dGhpcy5lbGVtZW50T3B0aW9ucy5zY2FsaW5nLmxhYmVsLmRyYXdUaHJlc2hvbGQpe3ZhciByPU1hdGgubWF4KDAsTWF0aC5taW4oMSwxLSh0aGlzLmVsZW1lbnRPcHRpb25zLnNjYWxpbmcubGFiZWwuZHJhd1RocmVzaG9sZC1lKSkpO289cXkobyxyKSxuPXF5KG4scil9cmV0dXJuW28sbl19fSx7a2V5OlwiZ2V0VGV4dFNpemVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtyZXR1cm4gdGhpcy5fcHJvY2Vzc0xhYmVsKHQsZSxpKSx7d2lkdGg6dGhpcy5zaXplLndpZHRoLGhlaWdodDp0aGlzLnNpemUuaGVpZ2h0LGxpbmVDb3VudDp0aGlzLmxpbmVDb3VudH19fSx7a2V5OlwiZ2V0U2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zaXplLmxlZnQsZT10aGlzLnNpemUudG9wLTE7aWYodGhpcy5pc0VkZ2VMYWJlbCl7dmFyIGk9LjUqLXRoaXMuc2l6ZS53aWR0aDtzd2l0Y2godGhpcy5mb250T3B0aW9ucy5hbGlnbil7Y2FzZVwibWlkZGxlXCI6dD1pLGU9LjUqLXRoaXMuc2l6ZS5oZWlnaHQ7YnJlYWs7Y2FzZVwidG9wXCI6dD1pLGU9LSh0aGlzLnNpemUuaGVpZ2h0KzIpO2JyZWFrO2Nhc2VcImJvdHRvbVwiOnQ9aSxlPTJ9fXJldHVybntsZWZ0OnQsdG9wOmUsd2lkdGg6dGhpcy5zaXplLndpZHRoLGhlaWdodDp0aGlzLnNpemUuaGVpZ2h0fX19LHtrZXk6XCJjYWxjdWxhdGVMYWJlbFNpemVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOjAsbj1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxyPWFyZ3VtZW50cy5sZW5ndGg+NSYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTpcIm1pZGRsZVwiO3RoaXMuX3Byb2Nlc3NMYWJlbCh0LGUsaSksdGhpcy5zaXplLmxlZnQ9by0uNSp0aGlzLnNpemUud2lkdGgsdGhpcy5zaXplLnRvcD1uLS41KnRoaXMuc2l6ZS5oZWlnaHQsdGhpcy5zaXplLnlMaW5lPW4rLjUqKDEtdGhpcy5saW5lQ291bnQpKnRoaXMuZm9udE9wdGlvbnMuc2l6ZSxcImhhbmdpbmdcIj09PXImJih0aGlzLnNpemUudG9wKz0uNSp0aGlzLmZvbnRPcHRpb25zLnNpemUsdGhpcy5zaXplLnRvcCs9NCx0aGlzLnNpemUueUxpbmUrPTQpfX0se2tleTpcImdldEZvcm1hdHRpbmdWYWx1ZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvKXt2YXIgbj1mdW5jdGlvbih0LGUsaSl7cmV0dXJuXCJub3JtYWxcIj09PWU/XCJtb2RcIj09PWk/XCJcIjp0W2ldOnZvaWQgMCE9PXRbZV1baV0/dFtlXVtpXTp0W2ldfSxyPXtjb2xvcjpuKHRoaXMuZm9udE9wdGlvbnMsbyxcImNvbG9yXCIpLHNpemU6bih0aGlzLmZvbnRPcHRpb25zLG8sXCJzaXplXCIpLGZhY2U6bih0aGlzLmZvbnRPcHRpb25zLG8sXCJmYWNlXCIpLG1vZDpuKHRoaXMuZm9udE9wdGlvbnMsbyxcIm1vZFwiKSx2YWRqdXN0Om4odGhpcy5mb250T3B0aW9ucyxvLFwidmFkanVzdFwiKSxzdHJva2VXaWR0aDp0aGlzLmZvbnRPcHRpb25zLnN0cm9rZVdpZHRoLHN0cm9rZUNvbG9yOnRoaXMuZm9udE9wdGlvbnMuc3Ryb2tlQ29sb3J9OyhlfHxpKSYmKFwibm9ybWFsXCI9PT1vJiYhMD09PXRoaXMuZm9udE9wdGlvbnMuY2hvb3NlciYmdGhpcy5lbGVtZW50T3B0aW9ucy5sYWJlbEhpZ2hsaWdodEJvbGQ/ci5tb2Q9XCJib2xkXCI6XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5mb250T3B0aW9ucy5jaG9vc2VyJiZ0aGlzLmZvbnRPcHRpb25zLmNob29zZXIocix0aGlzLmVsZW1lbnRPcHRpb25zLmlkLGUsaSkpO3ZhciBzPVwiXCI7cmV0dXJuIHZvaWQgMCE9PXIubW9kJiZcIlwiIT09ci5tb2QmJihzKz1yLm1vZCtcIiBcIikscys9ci5zaXplK1wicHggXCIrci5mYWNlLHQuZm9udD1zLnJlcGxhY2UoL1wiL2csXCJcIiksci5mb250PXQuZm9udCxyLmhlaWdodD1yLnNpemUscn19LHtrZXk6XCJkaWZmZXJlbnRTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQhPT10aGlzLnNlbGVjdGVkU3RhdGV8fGUhPT10aGlzLmhvdmVyU3RhdGV9fSx7a2V5OlwiX3Byb2Nlc3NMYWJlbFRleHRcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvKXtyZXR1cm4gbmV3IHBrKHQsdGhpcyxlLGkpLnByb2Nlc3Mobyl9fSx7a2V5OlwiX3Byb2Nlc3NMYWJlbFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXtpZighMSE9PXRoaXMubGFiZWxEaXJ0eXx8dGhpcy5kaWZmZXJlbnRTdGF0ZShlLGkpKXt2YXIgbz10aGlzLl9wcm9jZXNzTGFiZWxUZXh0KHQsZSxpLHRoaXMuZWxlbWVudE9wdGlvbnMubGFiZWwpO3RoaXMuZm9udE9wdGlvbnMubWluV2R0PjAmJm8ud2lkdGg8dGhpcy5mb250T3B0aW9ucy5taW5XZHQmJihvLndpZHRoPXRoaXMuZm9udE9wdGlvbnMubWluV2R0KSx0aGlzLnNpemUubGFiZWxIZWlnaHQ9by5oZWlnaHQsdGhpcy5mb250T3B0aW9ucy5taW5IZ3Q+MCYmby5oZWlnaHQ8dGhpcy5mb250T3B0aW9ucy5taW5IZ3QmJihvLmhlaWdodD10aGlzLmZvbnRPcHRpb25zLm1pbkhndCksdGhpcy5saW5lcz1vLmxpbmVzLHRoaXMubGluZUNvdW50PW8ubGluZXMubGVuZ3RoLHRoaXMuc2l6ZS53aWR0aD1vLndpZHRoLHRoaXMuc2l6ZS5oZWlnaHQ9by5oZWlnaHQsdGhpcy5zZWxlY3RlZFN0YXRlPWUsdGhpcy5ob3ZlclN0YXRlPWksdGhpcy5sYWJlbERpcnR5PSExfX19LHtrZXk6XCJ2aXNpYmxlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gMCE9PXRoaXMuc2l6ZS53aWR0aCYmMCE9PXRoaXMuc2l6ZS5oZWlnaHQmJnZvaWQgMCE9PXRoaXMuZWxlbWVudE9wdGlvbnMubGFiZWwmJiEodGhpcy5mb250T3B0aW9ucy5zaXplKnRoaXMuYm9keS52aWV3LnNjYWxlPHRoaXMuZWxlbWVudE9wdGlvbnMuc2NhbGluZy5sYWJlbC5kcmF3VGhyZXNob2xkLTEpfX1dLFt7a2V5OlwicGFyc2VGb250U3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZighZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuITE7dmFyIGk9ZS5zcGxpdChcIiBcIik7cmV0dXJuIHQuc2l6ZT0raVswXS5yZXBsYWNlKFwicHhcIixcIlwiKSx0LmZhY2U9aVsxXSx0LmNvbG9yPWlbMl0sITB9fV0pLHR9KCkseWs9bmEsbWs9d3QsYms9bi5UeXBlRXJyb3Isd2s9eGksa2s9Yyxfaz1Dbyx4az1mdW5jdGlvbih0KXtpZih5ayh0KSlyZXR1cm4gdDt0aHJvdyBiayhtayh0KStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKX0sRWs9WmUsT2s9WCxDaz1rcixTaz1yLFRrPUooXCJSZWZsZWN0XCIsXCJjb25zdHJ1Y3RcIiksTWs9T2JqZWN0LnByb3RvdHlwZSxQaz1bXS5wdXNoLERrPVNrKChmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIShUaygoZnVuY3Rpb24oKXt9KSxbXSx0KWluc3RhbmNlb2YgdCl9KSksQms9IVNrKChmdW5jdGlvbigpe1RrKChmdW5jdGlvbigpe30pKX0pKSxJaz1Ea3x8Qms7d2soe3RhcmdldDpcIlJlZmxlY3RcIixzdGF0OiEwLGZvcmNlZDpJayxzaGFtOklrfSx7Y29uc3RydWN0OmZ1bmN0aW9uKHQsZSl7eGsodCksRWsoZSk7dmFyIGk9YXJndW1lbnRzLmxlbmd0aDwzP3Q6eGsoYXJndW1lbnRzWzJdKTtpZihCayYmIURrKXJldHVybiBUayh0LGUsaSk7aWYodD09aSl7c3dpdGNoKGUubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyB0O2Nhc2UgMTpyZXR1cm4gbmV3IHQoZVswXSk7Y2FzZSAyOnJldHVybiBuZXcgdChlWzBdLGVbMV0pO2Nhc2UgMzpyZXR1cm4gbmV3IHQoZVswXSxlWzFdLGVbMl0pO2Nhc2UgNDpyZXR1cm4gbmV3IHQoZVswXSxlWzFdLGVbMl0sZVszXSl9dmFyIG89W251bGxdO3JldHVybiBrayhQayxvLGUpLG5ldyhrayhfayx0LG8pKX12YXIgbj1pLnByb3RvdHlwZSxyPUNrKE9rKG4pP246TWspLHM9a2sodCxyLGUpO3JldHVybiBPayhzKT9zOnJ9fSk7dmFyIHprPUcuUmVmbGVjdC5jb25zdHJ1Y3QsRms9THA7eGkoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITB9LHtzZXRQcm90b3R5cGVPZjp1c30pO3ZhciBOaz1HLk9iamVjdC5zZXRQcm90b3R5cGVPZjtmdW5jdGlvbiBBayh0LGUpe3JldHVybiBBaz1Oa3x8ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5fX3Byb3RvX189ZSx0fSxBayh0LGUpfWZ1bmN0aW9uIFJrKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPUZrKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksR2wodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGUmJkFrKHQsZSl9ZnVuY3Rpb24gamsodCxlKXtpZihlJiYoXCJvYmplY3RcIj09PVFjKGUpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSlyZXR1cm4gZTtpZih2b2lkIDAhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIHR9KHQpfXZhciBMaz1SZjtmdW5jdGlvbiBIayh0KXtyZXR1cm4gSGs9Tms/TGs6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxMayh0KX0sSGsodCl9dmFyIFdrPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7WGwodGhpcyx0KSx0aGlzLmJvZHk9aSx0aGlzLmxhYmVsTW9kdWxlPW8sdGhpcy5zZXRPcHRpb25zKGUpLHRoaXMudG9wPXZvaWQgMCx0aGlzLmxlZnQ9dm9pZCAwLHRoaXMuaGVpZ2h0PXZvaWQgMCx0aGlzLndpZHRoPXZvaWQgMCx0aGlzLnJhZGl1cz12b2lkIDAsdGhpcy5tYXJnaW49dm9pZCAwLHRoaXMucmVmcmVzaE5lZWRlZD0hMCx0aGlzLmJvdW5kaW5nQm94PXt0b3A6MCxsZWZ0OjAscmlnaHQ6MCxib3R0b206MH19cmV0dXJuICRsKHQsW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zPXR9fSx7a2V5OlwiX3NldE1hcmdpbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLm1hcmdpbj17fSx0aGlzLm9wdGlvbnMubWFyZ2luJiYoXCJvYmplY3RcIj09UWModGhpcy5vcHRpb25zLm1hcmdpbik/KHRoaXMubWFyZ2luLnRvcD10aGlzLm9wdGlvbnMubWFyZ2luLnRvcCx0aGlzLm1hcmdpbi5yaWdodD10aGlzLm9wdGlvbnMubWFyZ2luLnJpZ2h0LHRoaXMubWFyZ2luLmJvdHRvbT10aGlzLm9wdGlvbnMubWFyZ2luLmJvdHRvbSx0aGlzLm1hcmdpbi5sZWZ0PXRoaXMub3B0aW9ucy5tYXJnaW4ubGVmdCk6KHRoaXMubWFyZ2luLnRvcD10aGlzLm9wdGlvbnMubWFyZ2luLHRoaXMubWFyZ2luLnJpZ2h0PXRoaXMub3B0aW9ucy5tYXJnaW4sdGhpcy5tYXJnaW4uYm90dG9tPXRoaXMub3B0aW9ucy5tYXJnaW4sdGhpcy5tYXJnaW4ubGVmdD10aGlzLm9wdGlvbnMubWFyZ2luKSksdC5hZGp1c3RTaXplcyh0aGlzLm1hcmdpbil9fSx7a2V5OlwiX2Rpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMub3B0aW9ucy5ib3JkZXJXaWR0aDtyZXR1cm4gdCYmdGhpcy5yZXNpemUodCksTWF0aC5taW4oTWF0aC5hYnModGhpcy53aWR0aC8yL01hdGguY29zKGUpKSxNYXRoLmFicyh0aGlzLmhlaWdodC8yL01hdGguc2luKGUpKSkraX19LHtrZXk6XCJlbmFibGVTaGFkb3dcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Uuc2hhZG93JiYodC5zaGFkb3dDb2xvcj1lLnNoYWRvd0NvbG9yLHQuc2hhZG93Qmx1cj1lLnNoYWRvd1NpemUsdC5zaGFkb3dPZmZzZXRYPWUuc2hhZG93WCx0LnNoYWRvd09mZnNldFk9ZS5zaGFkb3dZKX19LHtrZXk6XCJkaXNhYmxlU2hhZG93XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtlLnNoYWRvdyYmKHQuc2hhZG93Q29sb3I9XCJyZ2JhKDAsMCwwLDApXCIsdC5zaGFkb3dCbHVyPTAsdC5zaGFkb3dPZmZzZXRYPTAsdC5zaGFkb3dPZmZzZXRZPTApfX0se2tleTpcImVuYWJsZUJvcmRlckRhc2hlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoITEhPT1lLmJvcmRlckRhc2hlcylpZih2b2lkIDAhPT10LnNldExpbmVEYXNoKXt2YXIgaT1lLmJvcmRlckRhc2hlczshMD09PWkmJihpPVs1LDE1XSksdC5zZXRMaW5lRGFzaChpKX1lbHNlIGNvbnNvbGUud2FybihcInNldExpbmVEYXNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyLiBUaGUgZGFzaGVkIGJvcmRlcnMgY2Fubm90IGJlIHVzZWQuXCIpLHRoaXMub3B0aW9ucy5zaGFwZVByb3BlcnRpZXMuYm9yZGVyRGFzaGVzPSExLGUuYm9yZGVyRGFzaGVzPSExfX0se2tleTpcImRpc2FibGVCb3JkZXJEYXNoZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUpeyExIT09ZS5ib3JkZXJEYXNoZXMmJih2b2lkIDAhPT10LnNldExpbmVEYXNoP3Quc2V0TGluZURhc2goWzBdKTooY29uc29sZS53YXJuKFwic2V0TGluZURhc2ggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuIFRoZSBkYXNoZWQgYm9yZGVycyBjYW5ub3QgYmUgdXNlZC5cIiksdGhpcy5vcHRpb25zLnNoYXBlUHJvcGVydGllcy5ib3JkZXJEYXNoZXM9ITEsZS5ib3JkZXJEYXNoZXM9ITEpKX19LHtrZXk6XCJuZWVkc1JlZnJlc2hcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiEwPT09dGhpcy5yZWZyZXNoTmVlZGVkPyh0aGlzLnJlZnJlc2hOZWVkZWQ9ITEsITApOnZvaWQgMD09PXRoaXMud2lkdGh8fHRoaXMubGFiZWxNb2R1bGUuZGlmZmVyZW50U3RhdGUodCxlKX19LHtrZXk6XCJpbml0Q29udGV4dEZvckRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPWUuYm9yZGVyV2lkdGgvdGhpcy5ib2R5LnZpZXcuc2NhbGU7dC5saW5lV2lkdGg9TWF0aC5taW4odGhpcy53aWR0aCxpKSx0LnN0cm9rZVN0eWxlPWUuYm9yZGVyQ29sb3IsdC5maWxsU3R5bGU9ZS5jb2xvcn19LHtrZXk6XCJwZXJmb3JtU3Ryb2tlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT1lLmJvcmRlcldpZHRoL3RoaXMuYm9keS52aWV3LnNjYWxlO3Quc2F2ZSgpLGk+MCYmKHRoaXMuZW5hYmxlQm9yZGVyRGFzaGVzKHQsZSksdC5zdHJva2UoKSx0aGlzLmRpc2FibGVCb3JkZXJEYXNoZXModCxlKSksdC5yZXN0b3JlKCl9fSx7a2V5OlwicGVyZm9ybUZpbGxcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3Quc2F2ZSgpLHQuZmlsbFN0eWxlPWUuY29sb3IsdGhpcy5lbmFibGVTaGFkb3codCxlKSxQdih0KS5jYWxsKHQpLHRoaXMuZGlzYWJsZVNoYWRvdyh0LGUpLHQucmVzdG9yZSgpLHRoaXMucGVyZm9ybVN0cm9rZSh0LGUpfX0se2tleTpcIl9hZGRCb3VuZGluZ0JveE1hcmdpblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuYm91bmRpbmdCb3gubGVmdC09dCx0aGlzLmJvdW5kaW5nQm94LnRvcC09dCx0aGlzLmJvdW5kaW5nQm94LmJvdHRvbSs9dCx0aGlzLmJvdW5kaW5nQm94LnJpZ2h0Kz10fX0se2tleTpcIl91cGRhdGVCb3VuZGluZ0JveFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbil7dm9pZCAwIT09aSYmdGhpcy5yZXNpemUoaSxvLG4pLHRoaXMubGVmdD10LXRoaXMud2lkdGgvMix0aGlzLnRvcD1lLXRoaXMuaGVpZ2h0LzIsdGhpcy5ib3VuZGluZ0JveC5sZWZ0PXRoaXMubGVmdCx0aGlzLmJvdW5kaW5nQm94LnRvcD10aGlzLnRvcCx0aGlzLmJvdW5kaW5nQm94LmJvdHRvbT10aGlzLnRvcCt0aGlzLmhlaWdodCx0aGlzLmJvdW5kaW5nQm94LnJpZ2h0PXRoaXMubGVmdCt0aGlzLndpZHRofX0se2tleTpcInVwZGF0ZUJvdW5kaW5nQm94XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuKXt0aGlzLl91cGRhdGVCb3VuZGluZ0JveCh0LGUsaSxvLG4pfX0se2tleTpcImdldERpbWVuc2lvbnNGcm9tTGFiZWxcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dGhpcy50ZXh0U2l6ZT10aGlzLmxhYmVsTW9kdWxlLmdldFRleHRTaXplKHQsZSxpKTt2YXIgbz10aGlzLnRleHRTaXplLndpZHRoLG49dGhpcy50ZXh0U2l6ZS5oZWlnaHQ7cmV0dXJuIDA9PT1vJiYobz0xNCxuPTE0KSx7d2lkdGg6byxoZWlnaHQ6bn19fV0pLHR9KCk7ZnVuY3Rpb24gVmsodCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgcWs9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1WayhpKTtmdW5jdGlvbiBpKHQsbyxuKXt2YXIgcjtyZXR1cm4gWGwodGhpcyxpKSwocj1lLmNhbGwodGhpcyx0LG8sbikpLl9zZXRNYXJnaW5zKG4pLHJ9cmV0dXJuICRsKGksW3trZXk6XCJyZXNpemVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5zZWxlY3RlZCxpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp0aGlzLmhvdmVyO2lmKHRoaXMubmVlZHNSZWZyZXNoKGUsaSkpe3ZhciBvPXRoaXMuZ2V0RGltZW5zaW9uc0Zyb21MYWJlbCh0LGUsaSk7dGhpcy53aWR0aD1vLndpZHRoK3RoaXMubWFyZ2luLnJpZ2h0K3RoaXMubWFyZ2luLmxlZnQsdGhpcy5oZWlnaHQ9by5oZWlnaHQrdGhpcy5tYXJnaW4udG9wK3RoaXMubWFyZ2luLmJvdHRvbSx0aGlzLnJhZGl1cz10aGlzLndpZHRoLzJ9fX0se2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7dGhpcy5yZXNpemUodCxvLG4pLHRoaXMubGVmdD1lLXRoaXMud2lkdGgvMix0aGlzLnRvcD1pLXRoaXMuaGVpZ2h0LzIsdGhpcy5pbml0Q29udGV4dEZvckRyYXcodCxyKSxBbyh0LHRoaXMubGVmdCx0aGlzLnRvcCx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LHIuYm9yZGVyUmFkaXVzKSx0aGlzLnBlcmZvcm1GaWxsKHQsciksdGhpcy51cGRhdGVCb3VuZGluZ0JveChlLGksdCxvLG4pLHRoaXMubGFiZWxNb2R1bGUuZHJhdyh0LHRoaXMubGVmdCt0aGlzLnRleHRTaXplLndpZHRoLzIrdGhpcy5tYXJnaW4ubGVmdCx0aGlzLnRvcCt0aGlzLnRleHRTaXplLmhlaWdodC8yK3RoaXMubWFyZ2luLnRvcCxvLG4pfX0se2tleTpcInVwZGF0ZUJvdW5kaW5nQm94XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuKXt0aGlzLl91cGRhdGVCb3VuZGluZ0JveCh0LGUsaSxvLG4pO3ZhciByPXRoaXMub3B0aW9ucy5zaGFwZVByb3BlcnRpZXMuYm9yZGVyUmFkaXVzO3RoaXMuX2FkZEJvdW5kaW5nQm94TWFyZ2luKHIpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3QmJnRoaXMucmVzaXplKHQpO3ZhciBpPXRoaXMub3B0aW9ucy5ib3JkZXJXaWR0aDtyZXR1cm4gTWF0aC5taW4oTWF0aC5hYnModGhpcy53aWR0aC8yL01hdGguY29zKGUpKSxNYXRoLmFicyh0aGlzLmhlaWdodC8yL01hdGguc2luKGUpKSkraX19XSksaX0oV2spO2Z1bmN0aW9uIFVrKHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyIFlrPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9VWsoaSk7ZnVuY3Rpb24gaSh0LG8sbil7dmFyIHI7cmV0dXJuIFhsKHRoaXMsaSksKHI9ZS5jYWxsKHRoaXMsdCxvLG4pKS5sYWJlbE9mZnNldD0wLHIuc2VsZWN0ZWQ9ITEscn1yZXR1cm4gJGwoaSxbe2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dGhpcy5vcHRpb25zPXQsdm9pZCAwPT09ZSYmdm9pZCAwPT09aXx8dGhpcy5zZXRJbWFnZXMoZSxpKX19LHtrZXk6XCJzZXRJbWFnZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2UmJnRoaXMuc2VsZWN0ZWQ/KHRoaXMuaW1hZ2VPYmo9ZSx0aGlzLmltYWdlT2JqQWx0PXQpOih0aGlzLmltYWdlT2JqPXQsdGhpcy5pbWFnZU9iakFsdD1lKX19LHtrZXk6XCJzd2l0Y2hJbWFnZXNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10JiYhdGhpcy5zZWxlY3RlZHx8IXQmJnRoaXMuc2VsZWN0ZWQ7aWYodGhpcy5zZWxlY3RlZD10LHZvaWQgMCE9PXRoaXMuaW1hZ2VPYmpBbHQmJmUpe3ZhciBpPXRoaXMuaW1hZ2VPYmo7dGhpcy5pbWFnZU9iaj10aGlzLmltYWdlT2JqQWx0LHRoaXMuaW1hZ2VPYmpBbHQ9aX19fSx7a2V5OlwiX2dldEltYWdlUGFkZGluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9e3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowfTtpZih0aGlzLm9wdGlvbnMuaW1hZ2VQYWRkaW5nKXt2YXIgZT10aGlzLm9wdGlvbnMuaW1hZ2VQYWRkaW5nO1wib2JqZWN0XCI9PVFjKGUpPyh0LnRvcD1lLnRvcCx0LnJpZ2h0PWUucmlnaHQsdC5ib3R0b209ZS5ib3R0b20sdC5sZWZ0PWUubGVmdCk6KHQudG9wPWUsdC5yaWdodD1lLHQuYm90dG9tPWUsdC5sZWZ0PWUpfXJldHVybiB0fX0se2tleTpcIl9yZXNpemVJbWFnZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZTtpZighMT09PXRoaXMub3B0aW9ucy5zaGFwZVByb3BlcnRpZXMudXNlSW1hZ2VTaXplKXt2YXIgaT0xLG89MTt0aGlzLmltYWdlT2JqLndpZHRoJiZ0aGlzLmltYWdlT2JqLmhlaWdodCYmKHRoaXMuaW1hZ2VPYmoud2lkdGg+dGhpcy5pbWFnZU9iai5oZWlnaHQ/aT10aGlzLmltYWdlT2JqLndpZHRoL3RoaXMuaW1hZ2VPYmouaGVpZ2h0Om89dGhpcy5pbWFnZU9iai5oZWlnaHQvdGhpcy5pbWFnZU9iai53aWR0aCksdD0yKnRoaXMub3B0aW9ucy5zaXplKmksZT0yKnRoaXMub3B0aW9ucy5zaXplKm99ZWxzZXt2YXIgbj10aGlzLl9nZXRJbWFnZVBhZGRpbmcoKTt0PXRoaXMuaW1hZ2VPYmoud2lkdGgrbi5sZWZ0K24ucmlnaHQsZT10aGlzLmltYWdlT2JqLmhlaWdodCtuLnRvcCtuLmJvdHRvbX10aGlzLndpZHRoPXQsdGhpcy5oZWlnaHQ9ZSx0aGlzLnJhZGl1cz0uNSp0aGlzLndpZHRofX0se2tleTpcIl9kcmF3UmF3Q2lyY2xlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyl7dGhpcy5pbml0Q29udGV4dEZvckRyYXcodCxvKSxObyh0LGUsaSxvLnNpemUpLHRoaXMucGVyZm9ybUZpbGwodCxvKX19LHtrZXk6XCJfZHJhd0ltYWdlQXRQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoMCE9dGhpcy5pbWFnZU9iai53aWR0aCl7dC5nbG9iYWxBbHBoYT12b2lkIDAhPT1lLm9wYWNpdHk/ZS5vcGFjaXR5OjEsdGhpcy5lbmFibGVTaGFkb3codCxlKTt2YXIgaT0xOyEwPT09dGhpcy5vcHRpb25zLnNoYXBlUHJvcGVydGllcy5pbnRlcnBvbGF0aW9uJiYoaT10aGlzLmltYWdlT2JqLndpZHRoL3RoaXMud2lkdGgvdGhpcy5ib2R5LnZpZXcuc2NhbGUpO3ZhciBvPXRoaXMuX2dldEltYWdlUGFkZGluZygpLG49dGhpcy5sZWZ0K28ubGVmdCxyPXRoaXMudG9wK28udG9wLHM9dGhpcy53aWR0aC1vLmxlZnQtby5yaWdodCxhPXRoaXMuaGVpZ2h0LW8udG9wLW8uYm90dG9tO3RoaXMuaW1hZ2VPYmouZHJhd0ltYWdlQXRQb3NpdGlvbih0LGksbixyLHMsYSksdGhpcy5kaXNhYmxlU2hhZG93KHQsZSl9fX0se2tleTpcIl9kcmF3SW1hZ2VMYWJlbFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbil7dmFyIHI9MDtpZih2b2lkIDAhPT10aGlzLmhlaWdodCl7cj0uNSp0aGlzLmhlaWdodDt2YXIgcz10aGlzLmxhYmVsTW9kdWxlLmdldFRleHRTaXplKHQsbyxuKTtzLmxpbmVDb3VudD49MSYmKHIrPXMuaGVpZ2h0LzIpfXZhciBhPWkrcjt0aGlzLm9wdGlvbnMubGFiZWwmJih0aGlzLmxhYmVsT2Zmc2V0PXIpLHRoaXMubGFiZWxNb2R1bGUuZHJhdyh0LGUsYSxvLG4sXCJoYW5naW5nXCIpfX1dKSxpfShXayk7ZnVuY3Rpb24gWGsodCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgR2s9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1YayhpKTtmdW5jdGlvbiBpKHQsbyxuKXt2YXIgcjtyZXR1cm4gWGwodGhpcyxpKSwocj1lLmNhbGwodGhpcyx0LG8sbikpLl9zZXRNYXJnaW5zKG4pLHJ9cmV0dXJuICRsKGksW3trZXk6XCJyZXNpemVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5zZWxlY3RlZCxpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp0aGlzLmhvdmVyO2lmKHRoaXMubmVlZHNSZWZyZXNoKGUsaSkpe3ZhciBvPXRoaXMuZ2V0RGltZW5zaW9uc0Zyb21MYWJlbCh0LGUsaSksbj1NYXRoLm1heChvLndpZHRoK3RoaXMubWFyZ2luLnJpZ2h0K3RoaXMubWFyZ2luLmxlZnQsby5oZWlnaHQrdGhpcy5tYXJnaW4udG9wK3RoaXMubWFyZ2luLmJvdHRvbSk7dGhpcy5vcHRpb25zLnNpemU9bi8yLHRoaXMud2lkdGg9bix0aGlzLmhlaWdodD1uLHRoaXMucmFkaXVzPXRoaXMud2lkdGgvMn19fSx7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXt0aGlzLnJlc2l6ZSh0LG8sbiksdGhpcy5sZWZ0PWUtdGhpcy53aWR0aC8yLHRoaXMudG9wPWktdGhpcy5oZWlnaHQvMix0aGlzLl9kcmF3UmF3Q2lyY2xlKHQsZSxpLHIpLHRoaXMudXBkYXRlQm91bmRpbmdCb3goZSxpKSx0aGlzLmxhYmVsTW9kdWxlLmRyYXcodCx0aGlzLmxlZnQrdGhpcy50ZXh0U2l6ZS53aWR0aC8yK3RoaXMubWFyZ2luLmxlZnQsaSxvLG4pfX0se2tleTpcInVwZGF0ZUJvdW5kaW5nQm94XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLmJvdW5kaW5nQm94LnRvcD1lLXRoaXMub3B0aW9ucy5zaXplLHRoaXMuYm91bmRpbmdCb3gubGVmdD10LXRoaXMub3B0aW9ucy5zaXplLHRoaXMuYm91bmRpbmdCb3gucmlnaHQ9dCt0aGlzLm9wdGlvbnMuc2l6ZSx0aGlzLmJvdW5kaW5nQm94LmJvdHRvbT1lK3RoaXMub3B0aW9ucy5zaXplfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmdGhpcy5yZXNpemUodCksLjUqdGhpcy53aWR0aH19XSksaX0oWWspO2Z1bmN0aW9uIEtrKHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyICRrPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9S2soaSk7ZnVuY3Rpb24gaSh0LG8sbixyLHMpe3ZhciBhO3JldHVybiBYbCh0aGlzLGkpLChhPWUuY2FsbCh0aGlzLHQsbyxuKSkuc2V0SW1hZ2VzKHIscyksYX1yZXR1cm4gJGwoaSxbe2tleTpcInJlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLnNlbGVjdGVkLGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnRoaXMuaG92ZXIsbz12b2lkIDA9PT10aGlzLmltYWdlT2JqLnNyY3x8dm9pZCAwPT09dGhpcy5pbWFnZU9iai53aWR0aHx8dm9pZCAwPT09dGhpcy5pbWFnZU9iai5oZWlnaHQ7aWYobyl7dmFyIG49Mip0aGlzLm9wdGlvbnMuc2l6ZTtyZXR1cm4gdGhpcy53aWR0aD1uLHRoaXMuaGVpZ2h0PW4sdm9pZCh0aGlzLnJhZGl1cz0uNSp0aGlzLndpZHRoKX10aGlzLm5lZWRzUmVmcmVzaChlLGkpJiZ0aGlzLl9yZXNpemVJbWFnZSgpfX0se2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7dGhpcy5zd2l0Y2hJbWFnZXMobyksdGhpcy5yZXNpemUoKTt2YXIgcz1lLGE9aTtcInRvcC1sZWZ0XCI9PT10aGlzLm9wdGlvbnMuc2hhcGVQcm9wZXJ0aWVzLmNvb3JkaW5hdGVPcmlnaW4/KHRoaXMubGVmdD1lLHRoaXMudG9wPWkscys9dGhpcy53aWR0aC8yLGErPXRoaXMuaGVpZ2h0LzIpOih0aGlzLmxlZnQ9ZS10aGlzLndpZHRoLzIsdGhpcy50b3A9aS10aGlzLmhlaWdodC8yKSx0aGlzLl9kcmF3UmF3Q2lyY2xlKHQscyxhLHIpLHQuc2F2ZSgpLHQuY2xpcCgpLHRoaXMuX2RyYXdJbWFnZUF0UG9zaXRpb24odCxyKSx0LnJlc3RvcmUoKSx0aGlzLl9kcmF3SW1hZ2VMYWJlbCh0LHMsYSxvLG4pLHRoaXMudXBkYXRlQm91bmRpbmdCb3goZSxpKX19LHtrZXk6XCJ1cGRhdGVCb3VuZGluZ0JveFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7XCJ0b3AtbGVmdFwiPT09dGhpcy5vcHRpb25zLnNoYXBlUHJvcGVydGllcy5jb29yZGluYXRlT3JpZ2luPyh0aGlzLmJvdW5kaW5nQm94LnRvcD1lLHRoaXMuYm91bmRpbmdCb3gubGVmdD10LHRoaXMuYm91bmRpbmdCb3gucmlnaHQ9dCsyKnRoaXMub3B0aW9ucy5zaXplLHRoaXMuYm91bmRpbmdCb3guYm90dG9tPWUrMip0aGlzLm9wdGlvbnMuc2l6ZSk6KHRoaXMuYm91bmRpbmdCb3gudG9wPWUtdGhpcy5vcHRpb25zLnNpemUsdGhpcy5ib3VuZGluZ0JveC5sZWZ0PXQtdGhpcy5vcHRpb25zLnNpemUsdGhpcy5ib3VuZGluZ0JveC5yaWdodD10K3RoaXMub3B0aW9ucy5zaXplLHRoaXMuYm91bmRpbmdCb3guYm90dG9tPWUrdGhpcy5vcHRpb25zLnNpemUpLHRoaXMuYm91bmRpbmdCb3gubGVmdD1NYXRoLm1pbih0aGlzLmJvdW5kaW5nQm94LmxlZnQsdGhpcy5sYWJlbE1vZHVsZS5zaXplLmxlZnQpLHRoaXMuYm91bmRpbmdCb3gucmlnaHQ9TWF0aC5tYXgodGhpcy5ib3VuZGluZ0JveC5yaWdodCx0aGlzLmxhYmVsTW9kdWxlLnNpemUubGVmdCt0aGlzLmxhYmVsTW9kdWxlLnNpemUud2lkdGgpLHRoaXMuYm91bmRpbmdCb3guYm90dG9tPU1hdGgubWF4KHRoaXMuYm91bmRpbmdCb3guYm90dG9tLHRoaXMuYm91bmRpbmdCb3guYm90dG9tK3RoaXMubGFiZWxPZmZzZXQpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmdGhpcy5yZXNpemUodCksLjUqdGhpcy53aWR0aH19XSksaX0oWWspO2Z1bmN0aW9uIFprKHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyIFFrPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9WmsoaSk7ZnVuY3Rpb24gaSh0LG8sbil7cmV0dXJuIFhsKHRoaXMsaSksZS5jYWxsKHRoaXMsdCxvLG4pfXJldHVybiAkbChpLFt7a2V5OlwicmVzaXplXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuc2VsZWN0ZWQsaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dGhpcy5ob3ZlcixvPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTp7c2l6ZTp0aGlzLm9wdGlvbnMuc2l6ZX07aWYodGhpcy5uZWVkc1JlZnJlc2goZSxpKSl7dmFyIG4scjt0aGlzLmxhYmVsTW9kdWxlLmdldFRleHRTaXplKHQsZSxpKTt2YXIgcz0yKm8uc2l6ZTt0aGlzLndpZHRoPW51bGwhPT0obj10aGlzLmN1c3RvbVNpemVXaWR0aCkmJnZvaWQgMCE9PW4/bjpzLHRoaXMuaGVpZ2h0PW51bGwhPT0ocj10aGlzLmN1c3RvbVNpemVIZWlnaHQpJiZ2b2lkIDAhPT1yP3I6cyx0aGlzLnJhZGl1cz0uNSp0aGlzLndpZHRofX19LHtrZXk6XCJfZHJhd1NoYXBlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIscyxhKXt2YXIgaCxkPXRoaXM7cmV0dXJuIHRoaXMucmVzaXplKHQscixzLGEpLHRoaXMubGVmdD1vLXRoaXMud2lkdGgvMix0aGlzLnRvcD1uLXRoaXMuaGVpZ2h0LzIsdGhpcy5pbml0Q29udGV4dEZvckRyYXcodCxhKSwoaD1lLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChIbyxoKT9Ib1toXTpmdW5jdGlvbih0KXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheShlPjE/ZS0xOjApLG89MTtvPGU7bysrKWlbby0xXT1hcmd1bWVudHNbb107Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZVtoXS5jYWxsKHQsaSl9KSh0LG8sbixhLnNpemUpLHRoaXMucGVyZm9ybUZpbGwodCxhKSx2b2lkIDAhPT10aGlzLm9wdGlvbnMuaWNvbiYmdm9pZCAwIT09dGhpcy5vcHRpb25zLmljb24uY29kZSYmKHQuZm9udD0ocj9cImJvbGQgXCI6XCJcIikrdGhpcy5oZWlnaHQvMitcInB4IFwiKyh0aGlzLm9wdGlvbnMuaWNvbi5mYWNlfHxcIkZvbnRBd2Vzb21lXCIpLHQuZmlsbFN0eWxlPXRoaXMub3B0aW9ucy5pY29uLmNvbG9yfHxcImJsYWNrXCIsdC50ZXh0QWxpZ249XCJjZW50ZXJcIix0LnRleHRCYXNlbGluZT1cIm1pZGRsZVwiLHQuZmlsbFRleHQodGhpcy5vcHRpb25zLmljb24uY29kZSxvLG4pKSx7ZHJhd0V4dGVybmFsTGFiZWw6ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1kLm9wdGlvbnMubGFiZWwpe2QubGFiZWxNb2R1bGUuY2FsY3VsYXRlTGFiZWxTaXplKHQscixzLG8sbixcImhhbmdpbmdcIik7dmFyIGU9bisuNSpkLmhlaWdodCsuNSpkLmxhYmVsTW9kdWxlLnNpemUuaGVpZ2h0O2QubGFiZWxNb2R1bGUuZHJhdyh0LG8sZSxyLHMsXCJoYW5naW5nXCIpfWQudXBkYXRlQm91bmRpbmdCb3gobyxuKX19fX0se2tleTpcInVwZGF0ZUJvdW5kaW5nQm94XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLmJvdW5kaW5nQm94LnRvcD1lLXRoaXMub3B0aW9ucy5zaXplLHRoaXMuYm91bmRpbmdCb3gubGVmdD10LXRoaXMub3B0aW9ucy5zaXplLHRoaXMuYm91bmRpbmdCb3gucmlnaHQ9dCt0aGlzLm9wdGlvbnMuc2l6ZSx0aGlzLmJvdW5kaW5nQm94LmJvdHRvbT1lK3RoaXMub3B0aW9ucy5zaXplLHZvaWQgMCE9PXRoaXMub3B0aW9ucy5sYWJlbCYmdGhpcy5sYWJlbE1vZHVsZS5zaXplLndpZHRoPjAmJih0aGlzLmJvdW5kaW5nQm94LmxlZnQ9TWF0aC5taW4odGhpcy5ib3VuZGluZ0JveC5sZWZ0LHRoaXMubGFiZWxNb2R1bGUuc2l6ZS5sZWZ0KSx0aGlzLmJvdW5kaW5nQm94LnJpZ2h0PU1hdGgubWF4KHRoaXMuYm91bmRpbmdCb3gucmlnaHQsdGhpcy5sYWJlbE1vZHVsZS5zaXplLmxlZnQrdGhpcy5sYWJlbE1vZHVsZS5zaXplLndpZHRoKSx0aGlzLmJvdW5kaW5nQm94LmJvdHRvbT1NYXRoLm1heCh0aGlzLmJvdW5kaW5nQm94LmJvdHRvbSx0aGlzLmJvdW5kaW5nQm94LmJvdHRvbSt0aGlzLmxhYmVsTW9kdWxlLnNpemUuaGVpZ2h0KSl9fV0pLGl9KFdrKTtmdW5jdGlvbiBKayh0LGUpe3ZhciBpPW11KHQpO2lmKGRsKXt2YXIgbz1kbCh0KTtlJiYobz1ZZihvKS5jYWxsKG8sKGZ1bmN0aW9uKGUpe3JldHVybiB3bCh0LGUpLmVudW1lcmFibGV9KSkpLGkucHVzaC5hcHBseShpLG8pfXJldHVybiBpfWZ1bmN0aW9uIHRfKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBpLG8sbj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9GdShpPUprKE9iamVjdChuKSwhMCkpLmNhbGwoaSwoZnVuY3Rpb24oZSl7WmwodCxlLG5bZV0pfSkpOkRsP1JsKHQsRGwobikpOkZ1KG89SmsoT2JqZWN0KG4pKSkuY2FsbChvLChmdW5jdGlvbihlKXtZbCh0LGUsd2wobixlKSl9KSl9cmV0dXJuIHR9ZnVuY3Rpb24gZV8odCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgaV89ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1lXyhpKTtmdW5jdGlvbiBpKHQsbyxuLHIpe3ZhciBzO3JldHVybiBYbCh0aGlzLGkpLChzPWUuY2FsbCh0aGlzLHQsbyxuLHIpKS5jdHhSZW5kZXJlcj1yLHN9cmV0dXJuICRsKGksW3trZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe3RoaXMucmVzaXplKHQsbyxuLHIpLHRoaXMubGVmdD1lLXRoaXMud2lkdGgvMix0aGlzLnRvcD1pLXRoaXMuaGVpZ2h0LzIsdC5zYXZlKCk7dmFyIHM9dGhpcy5jdHhSZW5kZXJlcih7Y3R4OnQsaWQ6dGhpcy5vcHRpb25zLmlkLHg6ZSx5Omksc3RhdGU6e3NlbGVjdGVkOm8saG92ZXI6bn0sc3R5bGU6dF8oe30sciksbGFiZWw6dGhpcy5vcHRpb25zLmxhYmVsfSk7aWYobnVsbCE9cy5kcmF3Tm9kZSYmcy5kcmF3Tm9kZSgpLHQucmVzdG9yZSgpLHMuZHJhd0V4dGVybmFsTGFiZWwpe3ZhciBhPXMuZHJhd0V4dGVybmFsTGFiZWw7cy5kcmF3RXh0ZXJuYWxMYWJlbD1mdW5jdGlvbigpe3Quc2F2ZSgpLGEoKSx0LnJlc3RvcmUoKX19cmV0dXJuIHMubm9kZURpbWVuc2lvbnMmJih0aGlzLmN1c3RvbVNpemVXaWR0aD1zLm5vZGVEaW1lbnNpb25zLndpZHRoLHRoaXMuY3VzdG9tU2l6ZUhlaWdodD1zLm5vZGVEaW1lbnNpb25zLmhlaWdodCksc319LHtrZXk6XCJkaXN0YW5jZVRvQm9yZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZGlzdGFuY2VUb0JvcmRlcih0LGUpfX1dKSxpfShRayk7ZnVuY3Rpb24gb18odCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgbl89ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1vXyhpKTtmdW5jdGlvbiBpKHQsbyxuKXt2YXIgcjtyZXR1cm4gWGwodGhpcyxpKSwocj1lLmNhbGwodGhpcyx0LG8sbikpLl9zZXRNYXJnaW5zKG4pLHJ9cmV0dXJuICRsKGksW3trZXk6XCJyZXNpemVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7aWYodGhpcy5uZWVkc1JlZnJlc2goZSxpKSl7dmFyIG89dGhpcy5nZXREaW1lbnNpb25zRnJvbUxhYmVsKHQsZSxpKS53aWR0aCt0aGlzLm1hcmdpbi5yaWdodCt0aGlzLm1hcmdpbi5sZWZ0O3RoaXMud2lkdGg9byx0aGlzLmhlaWdodD1vLHRoaXMucmFkaXVzPXRoaXMud2lkdGgvMn19fSx7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXt0aGlzLnJlc2l6ZSh0LG8sbiksdGhpcy5sZWZ0PWUtdGhpcy53aWR0aC8yLHRoaXMudG9wPWktdGhpcy5oZWlnaHQvMix0aGlzLmluaXRDb250ZXh0Rm9yRHJhdyh0LHIpLGpvKHQsZS10aGlzLndpZHRoLzIsaS10aGlzLmhlaWdodC8yLHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMucGVyZm9ybUZpbGwodCxyKSx0aGlzLnVwZGF0ZUJvdW5kaW5nQm94KGUsaSx0LG8sbiksdGhpcy5sYWJlbE1vZHVsZS5kcmF3KHQsdGhpcy5sZWZ0K3RoaXMudGV4dFNpemUud2lkdGgvMit0aGlzLm1hcmdpbi5sZWZ0LHRoaXMudG9wK3RoaXMudGV4dFNpemUuaGVpZ2h0LzIrdGhpcy5tYXJnaW4udG9wLG8sbil9fSx7a2V5OlwiZGlzdGFuY2VUb0JvcmRlclwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2Rpc3RhbmNlVG9Cb3JkZXIodCxlKX19XSksaX0oV2spO2Z1bmN0aW9uIHJfKHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyIHNfPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9cl8oaSk7ZnVuY3Rpb24gaSh0LG8sbil7cmV0dXJuIFhsKHRoaXMsaSksZS5jYWxsKHRoaXMsdCxvLG4pfXJldHVybiAkbChpLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXtyZXR1cm4gdGhpcy5fZHJhd1NoYXBlKHQsXCJkaWFtb25kXCIsNCxlLGksbyxuLHIpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9kaXN0YW5jZVRvQm9yZGVyKHQsZSl9fV0pLGl9KFFrKTtmdW5jdGlvbiBhXyh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBoXz1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPWFfKGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7cmV0dXJuIHRoaXMuX2RyYXdTaGFwZSh0LFwiY2lyY2xlXCIsMixlLGksbyxuLHIpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmdGhpcy5yZXNpemUodCksdGhpcy5vcHRpb25zLnNpemV9fV0pLGl9KFFrKTtmdW5jdGlvbiBkXyh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBsXz1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPWRfKGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcInJlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLnNlbGVjdGVkLGk9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnRoaXMuaG92ZXI7aWYodGhpcy5uZWVkc1JlZnJlc2goZSxpKSl7dmFyIG89dGhpcy5nZXREaW1lbnNpb25zRnJvbUxhYmVsKHQsZSxpKTt0aGlzLmhlaWdodD0yKm8uaGVpZ2h0LHRoaXMud2lkdGg9by53aWR0aCtvLmhlaWdodCx0aGlzLnJhZGl1cz0uNSp0aGlzLndpZHRofX19LHtrZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe3RoaXMucmVzaXplKHQsbyxuKSx0aGlzLmxlZnQ9ZS0uNSp0aGlzLndpZHRoLHRoaXMudG9wPWktLjUqdGhpcy5oZWlnaHQsdGhpcy5pbml0Q29udGV4dEZvckRyYXcodCxyKSxSbyh0LHRoaXMubGVmdCx0aGlzLnRvcCx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KSx0aGlzLnBlcmZvcm1GaWxsKHQsciksdGhpcy51cGRhdGVCb3VuZGluZ0JveChlLGksdCxvLG4pLHRoaXMubGFiZWxNb2R1bGUuZHJhdyh0LGUsaSxvLG4pfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3QmJnRoaXMucmVzaXplKHQpO3ZhciBpPS41KnRoaXMud2lkdGgsbz0uNSp0aGlzLmhlaWdodCxuPU1hdGguc2luKGUpKmkscj1NYXRoLmNvcyhlKSpvO3JldHVybiBpKm8vTWF0aC5zcXJ0KG4qbityKnIpfX1dKSxpfShXayk7ZnVuY3Rpb24gY18odCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgdV89ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1jXyhpKTtmdW5jdGlvbiBpKHQsbyxuKXt2YXIgcjtyZXR1cm4gWGwodGhpcyxpKSwocj1lLmNhbGwodGhpcyx0LG8sbikpLl9zZXRNYXJnaW5zKG4pLHJ9cmV0dXJuICRsKGksW3trZXk6XCJyZXNpemVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dGhpcy5uZWVkc1JlZnJlc2goZSxpKSYmKHRoaXMuaWNvblNpemU9e3dpZHRoOk51bWJlcih0aGlzLm9wdGlvbnMuaWNvbi5zaXplKSxoZWlnaHQ6TnVtYmVyKHRoaXMub3B0aW9ucy5pY29uLnNpemUpfSx0aGlzLndpZHRoPXRoaXMuaWNvblNpemUud2lkdGgrdGhpcy5tYXJnaW4ucmlnaHQrdGhpcy5tYXJnaW4ubGVmdCx0aGlzLmhlaWdodD10aGlzLmljb25TaXplLmhlaWdodCt0aGlzLm1hcmdpbi50b3ArdGhpcy5tYXJnaW4uYm90dG9tLHRoaXMucmFkaXVzPS41KnRoaXMud2lkdGgpfX0se2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7dmFyIHM9dGhpcztyZXR1cm4gdGhpcy5yZXNpemUodCxvLG4pLHRoaXMub3B0aW9ucy5pY29uLnNpemU9dGhpcy5vcHRpb25zLmljb24uc2l6ZXx8NTAsdGhpcy5sZWZ0PWUtdGhpcy53aWR0aC8yLHRoaXMudG9wPWktdGhpcy5oZWlnaHQvMix0aGlzLl9pY29uKHQsZSxpLG8sbixyKSx7ZHJhd0V4dGVybmFsTGFiZWw6ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1zLm9wdGlvbnMubGFiZWwpe3MubGFiZWxNb2R1bGUuZHJhdyh0LHMubGVmdCtzLmljb25TaXplLndpZHRoLzIrcy5tYXJnaW4ubGVmdCxpK3MuaGVpZ2h0LzIrNSxvKX1zLnVwZGF0ZUJvdW5kaW5nQm94KGUsaSl9fX19LHtrZXk6XCJ1cGRhdGVCb3VuZGluZ0JveFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodGhpcy5ib3VuZGluZ0JveC50b3A9ZS0uNSp0aGlzLm9wdGlvbnMuaWNvbi5zaXplLHRoaXMuYm91bmRpbmdCb3gubGVmdD10LS41KnRoaXMub3B0aW9ucy5pY29uLnNpemUsdGhpcy5ib3VuZGluZ0JveC5yaWdodD10Ky41KnRoaXMub3B0aW9ucy5pY29uLnNpemUsdGhpcy5ib3VuZGluZ0JveC5ib3R0b209ZSsuNSp0aGlzLm9wdGlvbnMuaWNvbi5zaXplLHZvaWQgMCE9PXRoaXMub3B0aW9ucy5sYWJlbCYmdGhpcy5sYWJlbE1vZHVsZS5zaXplLndpZHRoPjApe3RoaXMuYm91bmRpbmdCb3gubGVmdD1NYXRoLm1pbih0aGlzLmJvdW5kaW5nQm94LmxlZnQsdGhpcy5sYWJlbE1vZHVsZS5zaXplLmxlZnQpLHRoaXMuYm91bmRpbmdCb3gucmlnaHQ9TWF0aC5tYXgodGhpcy5ib3VuZGluZ0JveC5yaWdodCx0aGlzLmxhYmVsTW9kdWxlLnNpemUubGVmdCt0aGlzLmxhYmVsTW9kdWxlLnNpemUud2lkdGgpLHRoaXMuYm91bmRpbmdCb3guYm90dG9tPU1hdGgubWF4KHRoaXMuYm91bmRpbmdCb3guYm90dG9tLHRoaXMuYm91bmRpbmdCb3guYm90dG9tK3RoaXMubGFiZWxNb2R1bGUuc2l6ZS5oZWlnaHQrNSl9fX0se2tleTpcIl9pY29uXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe3ZhciBzPU51bWJlcih0aGlzLm9wdGlvbnMuaWNvbi5zaXplKTt2b2lkIDAhPT10aGlzLm9wdGlvbnMuaWNvbi5jb2RlPyh0LmZvbnQ9W251bGwhPXRoaXMub3B0aW9ucy5pY29uLndlaWdodD90aGlzLm9wdGlvbnMuaWNvbi53ZWlnaHQ6bz9cImJvbGRcIjpcIlwiLChudWxsIT10aGlzLm9wdGlvbnMuaWNvbi53ZWlnaHQmJm8/NTowKStzK1wicHhcIix0aGlzLm9wdGlvbnMuaWNvbi5mYWNlXS5qb2luKFwiIFwiKSx0LmZpbGxTdHlsZT10aGlzLm9wdGlvbnMuaWNvbi5jb2xvcnx8XCJibGFja1wiLHQudGV4dEFsaWduPVwiY2VudGVyXCIsdC50ZXh0QmFzZWxpbmU9XCJtaWRkbGVcIix0aGlzLmVuYWJsZVNoYWRvdyh0LHIpLHQuZmlsbFRleHQodGhpcy5vcHRpb25zLmljb24uY29kZSxlLGkpLHRoaXMuZGlzYWJsZVNoYWRvdyh0LHIpKTpjb25zb2xlLmVycm9yKFwiV2hlbiB1c2luZyB0aGUgaWNvbiBzaGFwZSwgeW91IG5lZWQgdG8gZGVmaW5lIHRoZSBjb2RlIGluIHRoZSBpY29uIG9wdGlvbnMgb2JqZWN0LiBUaGlzIGNhbiBiZSBkb25lIHBlciBub2RlIG9yIGdsb2JhbGx5LlwiKX19LHtrZXk6XCJkaXN0YW5jZVRvQm9yZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZGlzdGFuY2VUb0JvcmRlcih0LGUpfX1dKSxpfShXayk7ZnVuY3Rpb24gZl8odCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgcF89ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1mXyhpKTtmdW5jdGlvbiBpKHQsbyxuLHIscyl7dmFyIGE7cmV0dXJuIFhsKHRoaXMsaSksKGE9ZS5jYWxsKHRoaXMsdCxvLG4pKS5zZXRJbWFnZXMocixzKSxhfXJldHVybiAkbChpLFt7a2V5OlwicmVzaXplXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuc2VsZWN0ZWQsaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dGhpcy5ob3ZlcixvPXZvaWQgMD09PXRoaXMuaW1hZ2VPYmouc3JjfHx2b2lkIDA9PT10aGlzLmltYWdlT2JqLndpZHRofHx2b2lkIDA9PT10aGlzLmltYWdlT2JqLmhlaWdodDtpZihvKXt2YXIgbj0yKnRoaXMub3B0aW9ucy5zaXplO3JldHVybiB0aGlzLndpZHRoPW4sdm9pZCh0aGlzLmhlaWdodD1uKX10aGlzLm5lZWRzUmVmcmVzaChlLGkpJiZ0aGlzLl9yZXNpemVJbWFnZSgpfX0se2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7dC5zYXZlKCksdGhpcy5zd2l0Y2hJbWFnZXMobyksdGhpcy5yZXNpemUoKTt2YXIgcz1lLGE9aTtpZihcInRvcC1sZWZ0XCI9PT10aGlzLm9wdGlvbnMuc2hhcGVQcm9wZXJ0aWVzLmNvb3JkaW5hdGVPcmlnaW4/KHRoaXMubGVmdD1lLHRoaXMudG9wPWkscys9dGhpcy53aWR0aC8yLGErPXRoaXMuaGVpZ2h0LzIpOih0aGlzLmxlZnQ9ZS10aGlzLndpZHRoLzIsdGhpcy50b3A9aS10aGlzLmhlaWdodC8yKSwhMD09PXRoaXMub3B0aW9ucy5zaGFwZVByb3BlcnRpZXMudXNlQm9yZGVyV2l0aEltYWdlKXt2YXIgaD10aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgsZD10aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGhTZWxlY3RlZHx8Mip0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgsbD0obz9kOmgpL3RoaXMuYm9keS52aWV3LnNjYWxlO3QubGluZVdpZHRoPU1hdGgubWluKHRoaXMud2lkdGgsbCksdC5iZWdpblBhdGgoKTt2YXIgYz1vP3RoaXMub3B0aW9ucy5jb2xvci5oaWdobGlnaHQuYm9yZGVyOm4/dGhpcy5vcHRpb25zLmNvbG9yLmhvdmVyLmJvcmRlcjp0aGlzLm9wdGlvbnMuY29sb3IuYm9yZGVyLHU9bz90aGlzLm9wdGlvbnMuY29sb3IuaGlnaGxpZ2h0LmJhY2tncm91bmQ6bj90aGlzLm9wdGlvbnMuY29sb3IuaG92ZXIuYmFja2dyb3VuZDp0aGlzLm9wdGlvbnMuY29sb3IuYmFja2dyb3VuZDt2b2lkIDAhPT1yLm9wYWNpdHkmJihjPXF5KGMsci5vcGFjaXR5KSx1PXF5KHUsci5vcGFjaXR5KSksdC5zdHJva2VTdHlsZT1jLHQuZmlsbFN0eWxlPXUsdC5yZWN0KHRoaXMubGVmdC0uNSp0LmxpbmVXaWR0aCx0aGlzLnRvcC0uNSp0LmxpbmVXaWR0aCx0aGlzLndpZHRoK3QubGluZVdpZHRoLHRoaXMuaGVpZ2h0K3QubGluZVdpZHRoKSxQdih0KS5jYWxsKHQpLHRoaXMucGVyZm9ybVN0cm9rZSh0LHIpLHQuY2xvc2VQYXRoKCl9dGhpcy5fZHJhd0ltYWdlQXRQb3NpdGlvbih0LHIpLHRoaXMuX2RyYXdJbWFnZUxhYmVsKHQscyxhLG8sbiksdGhpcy51cGRhdGVCb3VuZGluZ0JveChlLGkpLHQucmVzdG9yZSgpfX0se2tleTpcInVwZGF0ZUJvdW5kaW5nQm94XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLnJlc2l6ZSgpLFwidG9wLWxlZnRcIj09PXRoaXMub3B0aW9ucy5zaGFwZVByb3BlcnRpZXMuY29vcmRpbmF0ZU9yaWdpbj8odGhpcy5sZWZ0PXQsdGhpcy50b3A9ZSk6KHRoaXMubGVmdD10LXRoaXMud2lkdGgvMix0aGlzLnRvcD1lLXRoaXMuaGVpZ2h0LzIpLHRoaXMuYm91bmRpbmdCb3gubGVmdD10aGlzLmxlZnQsdGhpcy5ib3VuZGluZ0JveC50b3A9dGhpcy50b3AsdGhpcy5ib3VuZGluZ0JveC5ib3R0b209dGhpcy50b3ArdGhpcy5oZWlnaHQsdGhpcy5ib3VuZGluZ0JveC5yaWdodD10aGlzLmxlZnQrdGhpcy53aWR0aCx2b2lkIDAhPT10aGlzLm9wdGlvbnMubGFiZWwmJnRoaXMubGFiZWxNb2R1bGUuc2l6ZS53aWR0aD4wJiYodGhpcy5ib3VuZGluZ0JveC5sZWZ0PU1hdGgubWluKHRoaXMuYm91bmRpbmdCb3gubGVmdCx0aGlzLmxhYmVsTW9kdWxlLnNpemUubGVmdCksdGhpcy5ib3VuZGluZ0JveC5yaWdodD1NYXRoLm1heCh0aGlzLmJvdW5kaW5nQm94LnJpZ2h0LHRoaXMubGFiZWxNb2R1bGUuc2l6ZS5sZWZ0K3RoaXMubGFiZWxNb2R1bGUuc2l6ZS53aWR0aCksdGhpcy5ib3VuZGluZ0JveC5ib3R0b209TWF0aC5tYXgodGhpcy5ib3VuZGluZ0JveC5ib3R0b20sdGhpcy5ib3VuZGluZ0JveC5ib3R0b20rdGhpcy5sYWJlbE9mZnNldCkpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9kaXN0YW5jZVRvQm9yZGVyKHQsZSl9fV0pLGl9KFlrKTtmdW5jdGlvbiB2Xyh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBnXz1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPXZfKGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7cmV0dXJuIHRoaXMuX2RyYXdTaGFwZSh0LFwic3F1YXJlXCIsMixlLGksbyxuLHIpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9kaXN0YW5jZVRvQm9yZGVyKHQsZSl9fV0pLGl9KFFrKTtmdW5jdGlvbiB5Xyh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBtXz1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPXlfKGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7cmV0dXJuIHRoaXMuX2RyYXdTaGFwZSh0LFwiaGV4YWdvblwiLDQsZSxpLG8sbixyKX19LHtrZXk6XCJkaXN0YW5jZVRvQm9yZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZGlzdGFuY2VUb0JvcmRlcih0LGUpfX1dKSxpfShRayk7ZnVuY3Rpb24gYl8odCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgd189ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1iXyhpKTtmdW5jdGlvbiBpKHQsbyxuKXtyZXR1cm4gWGwodGhpcyxpKSxlLmNhbGwodGhpcyx0LG8sbil9cmV0dXJuICRsKGksW3trZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe3JldHVybiB0aGlzLl9kcmF3U2hhcGUodCxcInN0YXJcIiw0LGUsaSxvLG4scil9fSx7a2V5OlwiZGlzdGFuY2VUb0JvcmRlclwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2Rpc3RhbmNlVG9Cb3JkZXIodCxlKX19XSksaX0oUWspO2Z1bmN0aW9uIGtfKHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyIF9fPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9a18oaSk7ZnVuY3Rpb24gaSh0LG8sbil7dmFyIHI7cmV0dXJuIFhsKHRoaXMsaSksKHI9ZS5jYWxsKHRoaXMsdCxvLG4pKS5fc2V0TWFyZ2lucyhuKSxyfXJldHVybiAkbChpLFt7a2V5OlwicmVzaXplXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3RoaXMubmVlZHNSZWZyZXNoKGUsaSkmJih0aGlzLnRleHRTaXplPXRoaXMubGFiZWxNb2R1bGUuZ2V0VGV4dFNpemUodCxlLGkpLHRoaXMud2lkdGg9dGhpcy50ZXh0U2l6ZS53aWR0aCt0aGlzLm1hcmdpbi5yaWdodCt0aGlzLm1hcmdpbi5sZWZ0LHRoaXMuaGVpZ2h0PXRoaXMudGV4dFNpemUuaGVpZ2h0K3RoaXMubWFyZ2luLnRvcCt0aGlzLm1hcmdpbi5ib3R0b20sdGhpcy5yYWRpdXM9LjUqdGhpcy53aWR0aCl9fSx7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXt0aGlzLnJlc2l6ZSh0LG8sbiksdGhpcy5sZWZ0PWUtdGhpcy53aWR0aC8yLHRoaXMudG9wPWktdGhpcy5oZWlnaHQvMix0aGlzLmVuYWJsZVNoYWRvdyh0LHIpLHRoaXMubGFiZWxNb2R1bGUuZHJhdyh0LHRoaXMubGVmdCt0aGlzLnRleHRTaXplLndpZHRoLzIrdGhpcy5tYXJnaW4ubGVmdCx0aGlzLnRvcCt0aGlzLnRleHRTaXplLmhlaWdodC8yK3RoaXMubWFyZ2luLnRvcCxvLG4pLHRoaXMuZGlzYWJsZVNoYWRvdyh0LHIpLHRoaXMudXBkYXRlQm91bmRpbmdCb3goZSxpLHQsbyxuKX19LHtrZXk6XCJkaXN0YW5jZVRvQm9yZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZGlzdGFuY2VUb0JvcmRlcih0LGUpfX1dKSxpfShXayk7ZnVuY3Rpb24geF8odCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgRV89ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT14XyhpKTtmdW5jdGlvbiBpKHQsbyxuKXtyZXR1cm4gWGwodGhpcyxpKSxlLmNhbGwodGhpcyx0LG8sbil9cmV0dXJuICRsKGksW3trZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe3JldHVybiB0aGlzLl9kcmF3U2hhcGUodCxcInRyaWFuZ2xlXCIsMyxlLGksbyxuLHIpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9kaXN0YW5jZVRvQm9yZGVyKHQsZSl9fV0pLGl9KFFrKTtmdW5jdGlvbiBPXyh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBDXz1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPU9fKGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7cmV0dXJuIHRoaXMuX2RyYXdTaGFwZSh0LFwidHJpYW5nbGVEb3duXCIsMyxlLGksbyxuLHIpfX0se2tleTpcImRpc3RhbmNlVG9Cb3JkZXJcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9kaXN0YW5jZVRvQm9yZGVyKHQsZSl9fV0pLGl9KFFrKTtmdW5jdGlvbiBTXyh0LGUpe3ZhciBpPW11KHQpO2lmKGRsKXt2YXIgbz1kbCh0KTtlJiYobz1ZZihvKS5jYWxsKG8sKGZ1bmN0aW9uKGUpe3JldHVybiB3bCh0LGUpLmVudW1lcmFibGV9KSkpLGkucHVzaC5hcHBseShpLG8pfXJldHVybiBpfWZ1bmN0aW9uIFRfKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBpLG8sbj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9GdShpPVNfKE9iamVjdChuKSwhMCkpLmNhbGwoaSwoZnVuY3Rpb24oZSl7WmwodCxlLG5bZV0pfSkpOkRsP1JsKHQsRGwobikpOkZ1KG89U18oT2JqZWN0KG4pKSkuY2FsbChvLChmdW5jdGlvbihlKXtZbCh0LGUsd2wobixlKSl9KSl9cmV0dXJuIHR9dmFyIE1fPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyxuLHIscyl7WGwodGhpcyx0KSx0aGlzLm9wdGlvbnM9SnkociksdGhpcy5nbG9iYWxPcHRpb25zPXIsdGhpcy5kZWZhdWx0T3B0aW9ucz1zLHRoaXMuYm9keT1pLHRoaXMuZWRnZXM9W10sdGhpcy5pZD12b2lkIDAsdGhpcy5pbWFnZWxpc3Q9byx0aGlzLmdyb3VwbGlzdD1uLHRoaXMueD12b2lkIDAsdGhpcy55PXZvaWQgMCx0aGlzLmJhc2VTaXplPXRoaXMub3B0aW9ucy5zaXplLHRoaXMuYmFzZUZvbnRTaXplPXRoaXMub3B0aW9ucy5mb250LnNpemUsdGhpcy5wcmVkZWZpbmVkUG9zaXRpb249ITEsdGhpcy5zZWxlY3RlZD0hMSx0aGlzLmhvdmVyPSExLHRoaXMubGFiZWxNb2R1bGU9bmV3IGdrKHRoaXMuYm9keSx0aGlzLm9wdGlvbnMsITEpLHRoaXMuc2V0T3B0aW9ucyhlKX1yZXR1cm4gJGwodCxbe2tleTpcImF0dGFjaEVkZ2VcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZTstMT09PXpwKGU9dGhpcy5lZGdlcykuY2FsbChlLHQpJiZ0aGlzLmVkZ2VzLnB1c2godCl9fSx7a2V5OlwiZGV0YWNoRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGksbz16cChlPXRoaXMuZWRnZXMpLmNhbGwoZSx0KTstMSE9byYmdWYoaT10aGlzLmVkZ2VzKS5jYWxsKGksbywxKX19LHtrZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLnNoYXBlO2lmKGUpe2lmKHZvaWQgMCE9PWUuY29sb3ImJih0aGlzLl9sb2NhbENvbG9yPWUuY29sb3IpLHZvaWQgMCE9PWUuaWQmJih0aGlzLmlkPWUuaWQpLHZvaWQgMD09PXRoaXMuaWQpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBtdXN0IGhhdmUgYW4gaWRcIik7dC5jaGVja01hc3MoZSx0aGlzLmlkKSx2b2lkIDAhPT1lLngmJihudWxsPT09ZS54Pyh0aGlzLng9dm9pZCAwLHRoaXMucHJlZGVmaW5lZFBvc2l0aW9uPSExKToodGhpcy54PV9wKGUueCksdGhpcy5wcmVkZWZpbmVkUG9zaXRpb249ITApKSx2b2lkIDAhPT1lLnkmJihudWxsPT09ZS55Pyh0aGlzLnk9dm9pZCAwLHRoaXMucHJlZGVmaW5lZFBvc2l0aW9uPSExKToodGhpcy55PV9wKGUueSksdGhpcy5wcmVkZWZpbmVkUG9zaXRpb249ITApKSx2b2lkIDAhPT1lLnNpemUmJih0aGlzLmJhc2VTaXplPWUuc2l6ZSksdm9pZCAwIT09ZS52YWx1ZSYmKGUudmFsdWU9WXcoZS52YWx1ZSkpLHQucGFyc2VPcHRpb25zKHRoaXMub3B0aW9ucyxlLCEwLHRoaXMuZ2xvYmFsT3B0aW9ucyx0aGlzLmdyb3VwbGlzdCk7dmFyIG89W2UsdGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnNdO3JldHVybiB0aGlzLmNob29zZXI9SncoXCJub2RlXCIsbyksdGhpcy5fbG9hZF9pbWFnZXMoKSx0aGlzLnVwZGF0ZUxhYmVsTW9kdWxlKGUpLHZvaWQgMCE9PWUub3BhY2l0eSYmdC5jaGVja09wYWNpdHkoZS5vcGFjaXR5KSYmKHRoaXMub3B0aW9ucy5vcGFjaXR5PWUub3BhY2l0eSksdGhpcy51cGRhdGVTaGFwZShpKSx2b2lkIDAhPT1lLmhpZGRlbnx8dm9pZCAwIT09ZS5waHlzaWNzfX19LHtrZXk6XCJfbG9hZF9pbWFnZXNcIix2YWx1ZTpmdW5jdGlvbigpe2lmKChcImNpcmN1bGFySW1hZ2VcIj09PXRoaXMub3B0aW9ucy5zaGFwZXx8XCJpbWFnZVwiPT09dGhpcy5vcHRpb25zLnNoYXBlKSYmdm9pZCAwPT09dGhpcy5vcHRpb25zLmltYWdlKXRocm93IG5ldyBFcnJvcihcIk9wdGlvbiBpbWFnZSBtdXN0IGJlIGRlZmluZWQgZm9yIG5vZGUgdHlwZSAnXCIrdGhpcy5vcHRpb25zLnNoYXBlK1wiJ1wiKTtpZih2b2lkIDAhPT10aGlzLm9wdGlvbnMuaW1hZ2Upe2lmKHZvaWQgMD09PXRoaXMuaW1hZ2VsaXN0KXRocm93IG5ldyBFcnJvcihcIkludGVybmFsIEVycm9yOiBObyBpbWFnZXMgcHJvdmlkZWRcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHRoaXMub3B0aW9ucy5pbWFnZSl0aGlzLmltYWdlT2JqPXRoaXMuaW1hZ2VsaXN0LmxvYWQodGhpcy5vcHRpb25zLmltYWdlLHRoaXMub3B0aW9ucy5icm9rZW5JbWFnZSx0aGlzLmlkKTtlbHNle2lmKHZvaWQgMD09PXRoaXMub3B0aW9ucy5pbWFnZS51bnNlbGVjdGVkKXRocm93IG5ldyBFcnJvcihcIk5vIHVuc2VsZWN0ZWQgaW1hZ2UgcHJvdmlkZWRcIik7dGhpcy5pbWFnZU9iaj10aGlzLmltYWdlbGlzdC5sb2FkKHRoaXMub3B0aW9ucy5pbWFnZS51bnNlbGVjdGVkLHRoaXMub3B0aW9ucy5icm9rZW5JbWFnZSx0aGlzLmlkKSx2b2lkIDAhPT10aGlzLm9wdGlvbnMuaW1hZ2Uuc2VsZWN0ZWQ/dGhpcy5pbWFnZU9iakFsdD10aGlzLmltYWdlbGlzdC5sb2FkKHRoaXMub3B0aW9ucy5pbWFnZS5zZWxlY3RlZCx0aGlzLm9wdGlvbnMuYnJva2VuSW1hZ2UsdGhpcy5pZCk6dGhpcy5pbWFnZU9iakFsdD12b2lkIDB9fX19LHtrZXk6XCJnZXRGb3JtYXR0aW5nVmFsdWVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD17Y29sb3I6dGhpcy5vcHRpb25zLmNvbG9yLmJhY2tncm91bmQsb3BhY2l0eTp0aGlzLm9wdGlvbnMub3BhY2l0eSxib3JkZXJXaWR0aDp0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgsYm9yZGVyQ29sb3I6dGhpcy5vcHRpb25zLmNvbG9yLmJvcmRlcixzaXplOnRoaXMub3B0aW9ucy5zaXplLGJvcmRlckRhc2hlczp0aGlzLm9wdGlvbnMuc2hhcGVQcm9wZXJ0aWVzLmJvcmRlckRhc2hlcyxib3JkZXJSYWRpdXM6dGhpcy5vcHRpb25zLnNoYXBlUHJvcGVydGllcy5ib3JkZXJSYWRpdXMsc2hhZG93OnRoaXMub3B0aW9ucy5zaGFkb3cuZW5hYmxlZCxzaGFkb3dDb2xvcjp0aGlzLm9wdGlvbnMuc2hhZG93LmNvbG9yLHNoYWRvd1NpemU6dGhpcy5vcHRpb25zLnNoYWRvdy5zaXplLHNoYWRvd1g6dGhpcy5vcHRpb25zLnNoYWRvdy54LHNoYWRvd1k6dGhpcy5vcHRpb25zLnNoYWRvdy55fTtpZih0aGlzLnNlbGVjdGVkfHx0aGlzLmhvdmVyPyEwPT09dGhpcy5jaG9vc2VyP3RoaXMuc2VsZWN0ZWQ/KG51bGwhPXRoaXMub3B0aW9ucy5ib3JkZXJXaWR0aFNlbGVjdGVkP3QuYm9yZGVyV2lkdGg9dGhpcy5vcHRpb25zLmJvcmRlcldpZHRoU2VsZWN0ZWQ6dC5ib3JkZXJXaWR0aCo9Mix0LmNvbG9yPXRoaXMub3B0aW9ucy5jb2xvci5oaWdobGlnaHQuYmFja2dyb3VuZCx0LmJvcmRlckNvbG9yPXRoaXMub3B0aW9ucy5jb2xvci5oaWdobGlnaHQuYm9yZGVyLHQuc2hhZG93PXRoaXMub3B0aW9ucy5zaGFkb3cuZW5hYmxlZCk6dGhpcy5ob3ZlciYmKHQuY29sb3I9dGhpcy5vcHRpb25zLmNvbG9yLmhvdmVyLmJhY2tncm91bmQsdC5ib3JkZXJDb2xvcj10aGlzLm9wdGlvbnMuY29sb3IuaG92ZXIuYm9yZGVyLHQuc2hhZG93PXRoaXMub3B0aW9ucy5zaGFkb3cuZW5hYmxlZCk6XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jaG9vc2VyJiYodGhpcy5jaG9vc2VyKHQsdGhpcy5vcHRpb25zLmlkLHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlciksITE9PT10LnNoYWRvdyYmKHQuc2hhZG93Q29sb3I9PT10aGlzLm9wdGlvbnMuc2hhZG93LmNvbG9yJiZ0LnNoYWRvd1NpemU9PT10aGlzLm9wdGlvbnMuc2hhZG93LnNpemUmJnQuc2hhZG93WD09PXRoaXMub3B0aW9ucy5zaGFkb3cueCYmdC5zaGFkb3dZPT09dGhpcy5vcHRpb25zLnNoYWRvdy55fHwodC5zaGFkb3c9ITApKSk6dC5zaGFkb3c9dGhpcy5vcHRpb25zLnNoYWRvdy5lbmFibGVkLHZvaWQgMCE9PXRoaXMub3B0aW9ucy5vcGFjaXR5KXt2YXIgZT10aGlzLm9wdGlvbnMub3BhY2l0eTt0LmJvcmRlckNvbG9yPXF5KHQuYm9yZGVyQ29sb3IsZSksdC5jb2xvcj1xeSh0LmNvbG9yLGUpLHQuc2hhZG93Q29sb3I9cXkodC5zaGFkb3dDb2xvcixlKX1yZXR1cm4gdH19LHtrZXk6XCJ1cGRhdGVMYWJlbE1vZHVsZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PXRoaXMub3B0aW9ucy5sYWJlbCYmbnVsbCE9PXRoaXMub3B0aW9ucy5sYWJlbHx8KHRoaXMub3B0aW9ucy5sYWJlbD1cIlwiKSx0LnVwZGF0ZUdyb3VwT3B0aW9ucyh0aGlzLm9wdGlvbnMsVF8oVF8oe30sZSkse30se2NvbG9yOmUmJmUuY29sb3J8fHRoaXMuX2xvY2FsQ29sb3J8fHZvaWQgMH0pLHRoaXMuZ3JvdXBsaXN0KTt2YXIgaT10aGlzLmdyb3VwbGlzdC5nZXQodGhpcy5vcHRpb25zLmdyb3VwLCExKSxvPVtlLHRoaXMub3B0aW9ucyxpLHRoaXMuZ2xvYmFsT3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zXTt0aGlzLmxhYmVsTW9kdWxlLnVwZGF0ZSh0aGlzLm9wdGlvbnMsbyksdm9pZCAwIT09dGhpcy5sYWJlbE1vZHVsZS5iYXNlU2l6ZSYmKHRoaXMuYmFzZUZvbnRTaXplPXRoaXMubGFiZWxNb2R1bGUuYmFzZVNpemUpfX0se2tleTpcInVwZGF0ZVNoYXBlXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodD09PXRoaXMub3B0aW9ucy5zaGFwZSYmdGhpcy5zaGFwZSl0aGlzLnNoYXBlLnNldE9wdGlvbnModGhpcy5vcHRpb25zLHRoaXMuaW1hZ2VPYmosdGhpcy5pbWFnZU9iakFsdCk7ZWxzZSBzd2l0Y2godGhpcy5vcHRpb25zLnNoYXBlKXtjYXNlXCJib3hcIjp0aGlzLnNoYXBlPW5ldyBxayh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpO2JyZWFrO2Nhc2VcImNpcmNsZVwiOnRoaXMuc2hhcGU9bmV3IEdrKHRoaXMub3B0aW9ucyx0aGlzLmJvZHksdGhpcy5sYWJlbE1vZHVsZSk7YnJlYWs7Y2FzZVwiY2lyY3VsYXJJbWFnZVwiOnRoaXMuc2hhcGU9bmV3ICRrKHRoaXMub3B0aW9ucyx0aGlzLmJvZHksdGhpcy5sYWJlbE1vZHVsZSx0aGlzLmltYWdlT2JqLHRoaXMuaW1hZ2VPYmpBbHQpO2JyZWFrO2Nhc2VcImN1c3RvbVwiOnRoaXMuc2hhcGU9bmV3IGlfKHRoaXMub3B0aW9ucyx0aGlzLmJvZHksdGhpcy5sYWJlbE1vZHVsZSx0aGlzLm9wdGlvbnMuY3R4UmVuZGVyZXIpO2JyZWFrO2Nhc2VcImRhdGFiYXNlXCI6dGhpcy5zaGFwZT1uZXcgbl8odGhpcy5vcHRpb25zLHRoaXMuYm9keSx0aGlzLmxhYmVsTW9kdWxlKTticmVhaztjYXNlXCJkaWFtb25kXCI6dGhpcy5zaGFwZT1uZXcgc18odGhpcy5vcHRpb25zLHRoaXMuYm9keSx0aGlzLmxhYmVsTW9kdWxlKTticmVhaztjYXNlXCJkb3RcIjp0aGlzLnNoYXBlPW5ldyBoXyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpO2JyZWFrO2Nhc2VcImVsbGlwc2VcIjpkZWZhdWx0OnRoaXMuc2hhcGU9bmV3IGxfKHRoaXMub3B0aW9ucyx0aGlzLmJvZHksdGhpcy5sYWJlbE1vZHVsZSk7YnJlYWs7Y2FzZVwiaWNvblwiOnRoaXMuc2hhcGU9bmV3IHVfKHRoaXMub3B0aW9ucyx0aGlzLmJvZHksdGhpcy5sYWJlbE1vZHVsZSk7YnJlYWs7Y2FzZVwiaW1hZ2VcIjp0aGlzLnNoYXBlPW5ldyBwXyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUsdGhpcy5pbWFnZU9iaix0aGlzLmltYWdlT2JqQWx0KTticmVhaztjYXNlXCJzcXVhcmVcIjp0aGlzLnNoYXBlPW5ldyBnXyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpO2JyZWFrO2Nhc2VcImhleGFnb25cIjp0aGlzLnNoYXBlPW5ldyBtXyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpO2JyZWFrO2Nhc2VcInN0YXJcIjp0aGlzLnNoYXBlPW5ldyB3Xyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpO2JyZWFrO2Nhc2VcInRleHRcIjp0aGlzLnNoYXBlPW5ldyBfXyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpO2JyZWFrO2Nhc2VcInRyaWFuZ2xlXCI6dGhpcy5zaGFwZT1uZXcgRV8odGhpcy5vcHRpb25zLHRoaXMuYm9keSx0aGlzLmxhYmVsTW9kdWxlKTticmVhaztjYXNlXCJ0cmlhbmdsZURvd25cIjp0aGlzLnNoYXBlPW5ldyBDXyh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpfXRoaXMubmVlZHNSZWZyZXNoKCl9fSx7a2V5Olwic2VsZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdGVkPSEwLHRoaXMubmVlZHNSZWZyZXNoKCl9fSx7a2V5OlwidW5zZWxlY3RcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2VsZWN0ZWQ9ITEsdGhpcy5uZWVkc1JlZnJlc2goKX19LHtrZXk6XCJuZWVkc1JlZnJlc2hcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2hhcGUucmVmcmVzaE5lZWRlZD0hMH19LHtrZXk6XCJnZXRUaXRsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy50aXRsZX19LHtrZXk6XCJkaXN0YW5jZVRvQm9yZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5zaGFwZS5kaXN0YW5jZVRvQm9yZGVyKHQsZSl9fSx7a2V5OlwiaXNGaXhlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5maXhlZC54JiZ0aGlzLm9wdGlvbnMuZml4ZWQueX19LHtrZXk6XCJpc1NlbGVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3RlZH19LHtrZXk6XCJnZXRWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZX19LHtrZXk6XCJnZXRMYWJlbFNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxhYmVsTW9kdWxlLnNpemUoKX19LHtrZXk6XCJzZXRWYWx1ZVJhbmdlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe2lmKHZvaWQgMCE9PXRoaXMub3B0aW9ucy52YWx1ZSl7dmFyIG89dGhpcy5vcHRpb25zLnNjYWxpbmcuY3VzdG9tU2NhbGluZ0Z1bmN0aW9uKHQsZSxpLHRoaXMub3B0aW9ucy52YWx1ZSksbj10aGlzLm9wdGlvbnMuc2NhbGluZy5tYXgtdGhpcy5vcHRpb25zLnNjYWxpbmcubWluO2lmKCEwPT09dGhpcy5vcHRpb25zLnNjYWxpbmcubGFiZWwuZW5hYmxlZCl7dmFyIHI9dGhpcy5vcHRpb25zLnNjYWxpbmcubGFiZWwubWF4LXRoaXMub3B0aW9ucy5zY2FsaW5nLmxhYmVsLm1pbjt0aGlzLm9wdGlvbnMuZm9udC5zaXplPXRoaXMub3B0aW9ucy5zY2FsaW5nLmxhYmVsLm1pbitvKnJ9dGhpcy5vcHRpb25zLnNpemU9dGhpcy5vcHRpb25zLnNjYWxpbmcubWluK28qbn1lbHNlIHRoaXMub3B0aW9ucy5zaXplPXRoaXMuYmFzZVNpemUsdGhpcy5vcHRpb25zLmZvbnQuc2l6ZT10aGlzLmJhc2VGb250U2l6ZTt0aGlzLnVwZGF0ZUxhYmVsTW9kdWxlKCl9fSx7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0Rm9ybWF0dGluZ1ZhbHVlcygpO3JldHVybiB0aGlzLnNoYXBlLmRyYXcodCx0aGlzLngsdGhpcy55LHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixlKXx8e319fSx7a2V5OlwidXBkYXRlQm91bmRpbmdCb3hcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnNoYXBlLnVwZGF0ZUJvdW5kaW5nQm94KHRoaXMueCx0aGlzLnksdCl9fSx7a2V5OlwicmVzaXplXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRGb3JtYXR0aW5nVmFsdWVzKCk7dGhpcy5zaGFwZS5yZXNpemUodCx0aGlzLnNlbGVjdGVkLHRoaXMuaG92ZXIsZSl9fSx7a2V5OlwiZ2V0SXRlbXNPblBvaW50XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9W107cmV0dXJuIHRoaXMubGFiZWxNb2R1bGUudmlzaWJsZSgpJiZ0ayh0aGlzLmxhYmVsTW9kdWxlLmdldFNpemUoKSx0KSYmZS5wdXNoKHtub2RlSWQ6dGhpcy5pZCxsYWJlbElkOjB9KSx0ayh0aGlzLnNoYXBlLmJvdW5kaW5nQm94LHQpJiZlLnB1c2goe25vZGVJZDp0aGlzLmlkfSksZX19LHtrZXk6XCJpc092ZXJsYXBwaW5nV2l0aFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnNoYXBlLmxlZnQ8dC5yaWdodCYmdGhpcy5zaGFwZS5sZWZ0K3RoaXMuc2hhcGUud2lkdGg+dC5sZWZ0JiZ0aGlzLnNoYXBlLnRvcDx0LmJvdHRvbSYmdGhpcy5zaGFwZS50b3ArdGhpcy5zaGFwZS5oZWlnaHQ+dC50b3B9fSx7a2V5OlwiaXNCb3VuZGluZ0JveE92ZXJsYXBwaW5nV2l0aFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnNoYXBlLmJvdW5kaW5nQm94LmxlZnQ8dC5yaWdodCYmdGhpcy5zaGFwZS5ib3VuZGluZ0JveC5yaWdodD50LmxlZnQmJnRoaXMuc2hhcGUuYm91bmRpbmdCb3gudG9wPHQuYm90dG9tJiZ0aGlzLnNoYXBlLmJvdW5kaW5nQm94LmJvdHRvbT50LnRvcH19XSxbe2tleTpcImNoZWNrT3BhY2l0eVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiAwPD10JiZ0PD0xfX0se2tleTpcImNoZWNrQ29vcmRpbmF0ZU9yaWdpblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10fHxcImNlbnRlclwiPT09dHx8XCJ0b3AtbGVmdFwiPT09dH19LHtrZXk6XCJ1cGRhdGVHcm91cE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbihlLGksbyl7dmFyIG47aWYodm9pZCAwIT09byl7dmFyIHI9ZS5ncm91cDtpZih2b2lkIDAhPT1pJiZ2b2lkIDAhPT1pLmdyb3VwJiZyIT09aS5ncm91cCl0aHJvdyBuZXcgRXJyb3IoXCJ1cGRhdGVHcm91cE9wdGlvbnM6IGdyb3VwIHZhbHVlcyBpbiBvcHRpb25zIGRvbid0IG1hdGNoLlwiKTtpZihcIm51bWJlclwiPT10eXBlb2Ygcnx8XCJzdHJpbmdcIj09dHlwZW9mIHImJlwiXCIhPXIpe3ZhciBzPW8uZ2V0KHIpO3ZvaWQgMCE9PXMub3BhY2l0eSYmdm9pZCAwPT09aS5vcGFjaXR5JiYodC5jaGVja09wYWNpdHkocy5vcGFjaXR5KXx8KGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG9wdGlvbiBmb3Igbm9kZSBvcGFjaXR5LiBWYWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMSwgZm91bmQ6IFwiK3Mub3BhY2l0eSkscy5vcGFjaXR5PXZvaWQgMCkpO3ZhciBhPVlmKG49UXcoaSkpLmNhbGwobiwoZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPWlbdF19KSk7YS5wdXNoKFwiZm9udFwiKSxBeShhLGUscyksZS5jb2xvcj1ZeShlLmNvbG9yKX19fX0se2tleTpcInBhcnNlT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKGUsaSl7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxuPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTp7fSxyPWFyZ3VtZW50cy5sZW5ndGg+ND9hcmd1bWVudHNbNF06dm9pZCAwLHM9W1wiY29sb3JcIixcImZpeGVkXCIsXCJzaGFkb3dcIl07aWYoQXkocyxlLGksbyksdC5jaGVja01hc3MoaSksdm9pZCAwIT09ZS5vcGFjaXR5JiYodC5jaGVja09wYWNpdHkoZS5vcGFjaXR5KXx8KGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIG9wdGlvbiBmb3Igbm9kZSBvcGFjaXR5LiBWYWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMSwgZm91bmQ6IFwiK2Uub3BhY2l0eSksZS5vcGFjaXR5PXZvaWQgMCkpLHZvaWQgMCE9PWkub3BhY2l0eSYmKHQuY2hlY2tPcGFjaXR5KGkub3BhY2l0eSl8fChjb25zb2xlLmVycm9yKFwiSW52YWxpZCBvcHRpb24gZm9yIG5vZGUgb3BhY2l0eS4gVmFsdWUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEsIGZvdW5kOiBcIitpLm9wYWNpdHkpLGkub3BhY2l0eT12b2lkIDApKSxpLnNoYXBlUHJvcGVydGllcyYmIXQuY2hlY2tDb29yZGluYXRlT3JpZ2luKGkuc2hhcGVQcm9wZXJ0aWVzLmNvb3JkaW5hdGVPcmlnaW4pJiZjb25zb2xlLmVycm9yKFwiSW52YWxpZCBvcHRpb24gZm9yIG5vZGUgY29vcmRpbmF0ZU9yaWdpbiwgZm91bmQ6IFwiK2kuc2hhcGVQcm9wZXJ0aWVzLmNvb3JkaW5hdGVPcmlnaW4pLHRtKGUsaSxcInNoYWRvd1wiLG4pLHZvaWQgMCE9PWkuY29sb3ImJm51bGwhPT1pLmNvbG9yKXt2YXIgYT1ZeShpLmNvbG9yKTtGeShlLmNvbG9yLGEpfWVsc2UhMD09PW8mJm51bGw9PT1pLmNvbG9yJiYoZS5jb2xvcj1KeShuLmNvbG9yKSk7dm9pZCAwIT09aS5maXhlZCYmbnVsbCE9PWkuZml4ZWQmJihcImJvb2xlYW5cIj09dHlwZW9mIGkuZml4ZWQ/KGUuZml4ZWQueD1pLmZpeGVkLGUuZml4ZWQueT1pLmZpeGVkKToodm9pZCAwIT09aS5maXhlZC54JiZcImJvb2xlYW5cIj09dHlwZW9mIGkuZml4ZWQueCYmKGUuZml4ZWQueD1pLmZpeGVkLngpLHZvaWQgMCE9PWkuZml4ZWQueSYmXCJib29sZWFuXCI9PXR5cGVvZiBpLmZpeGVkLnkmJihlLmZpeGVkLnk9aS5maXhlZC55KSkpLCEwPT09byYmbnVsbD09PWkuZm9udCYmKGUuZm9udD1KeShuLmZvbnQpKSx0LnVwZGF0ZUdyb3VwT3B0aW9ucyhlLGksciksdm9pZCAwIT09aS5zY2FsaW5nJiZ0bShlLnNjYWxpbmcsaS5zY2FsaW5nLFwibGFiZWxcIixuLnNjYWxpbmcpfX0se2tleTpcImNoZWNrTWFzc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwIT09dC5tYXNzJiZ0Lm1hc3M8PTApe3ZhciBpPVwiXCI7dm9pZCAwIT09ZSYmKGk9XCIgaW4gbm9kZSBpZDogXCIrZSksY29uc29sZS5lcnJvcihcIiVjTmVnYXRpdmUgb3IgemVybyBtYXNzIGRpc2FsbG93ZWRcIitpK1wiLCBzZXR0aW5nIG1hc3MgdG8gMS5cIixnbSksdC5tYXNzPTF9fX1dKSx0fSgpO2Z1bmN0aW9uIFBfKHQsZSl7dmFyIGk9dm9pZCAwIT09dHUmJm9oKHQpfHx0W1wiQEBpdGVyYXRvclwiXTtpZighaSl7aWYoaHUodCl8fChpPWZ1bmN0aW9uKHQsZSl7dmFyIGk7aWYoIXQpcmV0dXJuO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiBEXyh0LGUpO3ZhciBvPWF1KGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKS5jYWxsKGksOCwtMSk7XCJPYmplY3RcIj09PW8mJnQuY29uc3RydWN0b3ImJihvPXQuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW98fFwiU2V0XCI9PT1vKXJldHVybiBqYSh0KTtpZihcIkFyZ3VtZW50c1wiPT09b3x8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobykpcmV0dXJuIERfKHQsZSl9KHQpKXx8ZSYmdCYmXCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoKXtpJiYodD1pKTt2YXIgbz0wLG49ZnVuY3Rpb24oKXt9O3JldHVybntzOm4sbjpmdW5jdGlvbigpe3JldHVybiBvPj10Lmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6dFtvKytdfX0sZTpmdW5jdGlvbih0KXt0aHJvdyB0fSxmOm59fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgcixzPSEwLGE9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtpPWkuY2FsbCh0KX0sbjpmdW5jdGlvbigpe3ZhciB0PWkubmV4dCgpO3JldHVybiBzPXQuZG9uZSx0fSxlOmZ1bmN0aW9uKHQpe2E9ITAscj10fSxmOmZ1bmN0aW9uKCl7dHJ5e3N8fG51bGw9PWkucmV0dXJufHxpLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyByfX19fWZ1bmN0aW9uIERfKHQsZSl7KG51bGw9PWV8fGU+dC5sZW5ndGgpJiYoZT10Lmxlbmd0aCk7Zm9yKHZhciBpPTAsbz1uZXcgQXJyYXkoZSk7aTxlO2krKylvW2ldPXRbaV07cmV0dXJuIG99dmFyIEJfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyxuKXt2YXIgcixzPXRoaXM7aWYoWGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLmltYWdlcz1pLHRoaXMuZ3JvdXBzPW8sdGhpcy5sYXlvdXRFbmdpbmU9bix0aGlzLmJvZHkuZnVuY3Rpb25zLmNyZWF0ZU5vZGU9Rm8ocj10aGlzLmNyZWF0ZSkuY2FsbChyLHRoaXMpLHRoaXMubm9kZXNMaXN0ZW5lcnM9e2FkZDpmdW5jdGlvbih0LGUpe3MuYWRkKGUuaXRlbXMpfSx1cGRhdGU6ZnVuY3Rpb24odCxlKXtzLnVwZGF0ZShlLml0ZW1zLGUuZGF0YSxlLm9sZERhdGEpfSxyZW1vdmU6ZnVuY3Rpb24odCxlKXtzLnJlbW92ZShlLml0ZW1zKX19LHRoaXMuZGVmYXVsdE9wdGlvbnM9e2JvcmRlcldpZHRoOjEsYm9yZGVyV2lkdGhTZWxlY3RlZDp2b2lkIDAsYnJva2VuSW1hZ2U6dm9pZCAwLGNvbG9yOntib3JkZXI6XCIjMkI3Q0U5XCIsYmFja2dyb3VuZDpcIiM5N0MyRkNcIixoaWdobGlnaHQ6e2JvcmRlcjpcIiMyQjdDRTlcIixiYWNrZ3JvdW5kOlwiI0QyRTVGRlwifSxob3Zlcjp7Ym9yZGVyOlwiIzJCN0NFOVwiLGJhY2tncm91bmQ6XCIjRDJFNUZGXCJ9fSxvcGFjaXR5OnZvaWQgMCxmaXhlZDp7eDohMSx5OiExfSxmb250Ontjb2xvcjpcIiMzNDM0MzRcIixzaXplOjE0LGZhY2U6XCJhcmlhbFwiLGJhY2tncm91bmQ6XCJub25lXCIsc3Ryb2tlV2lkdGg6MCxzdHJva2VDb2xvcjpcIiNmZmZmZmZcIixhbGlnbjpcImNlbnRlclwiLHZhZGp1c3Q6MCxtdWx0aTohMSxib2xkOnttb2Q6XCJib2xkXCJ9LGJvbGRpdGFsOnttb2Q6XCJib2xkIGl0YWxpY1wifSxpdGFsOnttb2Q6XCJpdGFsaWNcIn0sbW9ubzp7bW9kOlwiXCIsc2l6ZToxNSxmYWNlOlwibW9ub3NwYWNlXCIsdmFkanVzdDoyfX0sZ3JvdXA6dm9pZCAwLGhpZGRlbjohMSxpY29uOntmYWNlOlwiRm9udEF3ZXNvbWVcIixjb2RlOnZvaWQgMCxzaXplOjUwLGNvbG9yOlwiIzJCN0NFOVwifSxpbWFnZTp2b2lkIDAsaW1hZ2VQYWRkaW5nOnt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0sbGFiZWw6dm9pZCAwLGxhYmVsSGlnaGxpZ2h0Qm9sZDohMCxsZXZlbDp2b2lkIDAsbWFyZ2luOnt0b3A6NSxyaWdodDo1LGJvdHRvbTo1LGxlZnQ6NX0sbWFzczoxLHBoeXNpY3M6ITAsc2NhbGluZzp7bWluOjEwLG1heDozMCxsYWJlbDp7ZW5hYmxlZDohMSxtaW46MTQsbWF4OjMwLG1heFZpc2libGU6MzAsZHJhd1RocmVzaG9sZDo1fSxjdXN0b21TY2FsaW5nRnVuY3Rpb246ZnVuY3Rpb24odCxlLGksbyl7aWYoZT09PXQpcmV0dXJuLjU7dmFyIG49MS8oZS10KTtyZXR1cm4gTWF0aC5tYXgoMCwoby10KSpuKX19LHNoYWRvdzp7ZW5hYmxlZDohMSxjb2xvcjpcInJnYmEoMCwwLDAsMC41KVwiLHNpemU6MTAseDo1LHk6NX0sc2hhcGU6XCJlbGxpcHNlXCIsc2hhcGVQcm9wZXJ0aWVzOntib3JkZXJEYXNoZXM6ITEsYm9yZGVyUmFkaXVzOjYsaW50ZXJwb2xhdGlvbjohMCx1c2VJbWFnZVNpemU6ITEsdXNlQm9yZGVyV2l0aEltYWdlOiExLGNvb3JkaW5hdGVPcmlnaW46XCJjZW50ZXJcIn0sc2l6ZToyNSx0aXRsZTp2b2lkIDAsdmFsdWU6dm9pZCAwLHg6dm9pZCAwLHk6dm9pZCAwfSx0aGlzLmRlZmF1bHRPcHRpb25zLm1hc3M8PTApdGhyb3dcIkludGVybmFsIGVycm9yOiBtYXNzIGluIGRlZmF1bHRPcHRpb25zIG9mIE5vZGVzSGFuZGxlciBtYXkgbm90IGJlIHplcm8gb3IgbmVnYXRpdmVcIjt0aGlzLm9wdGlvbnM9SnkodGhpcy5kZWZhdWx0T3B0aW9ucyksdGhpcy5iaW5kRXZlbnRMaXN0ZW5lcnMoKX1yZXR1cm4gJGwodCxbe2tleTpcImJpbmRFdmVudExpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZSxpPXRoaXM7dGhpcy5ib2R5LmVtaXR0ZXIub24oXCJyZWZyZXNoTm9kZXNcIixGbyh0PXRoaXMucmVmcmVzaCkuY2FsbCh0LHRoaXMpKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcInJlZnJlc2hcIixGbyhlPXRoaXMucmVmcmVzaCkuY2FsbChlLHRoaXMpKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcImRlc3Ryb3lcIiwoZnVuY3Rpb24oKXtXeShpLm5vZGVzTGlzdGVuZXJzLChmdW5jdGlvbih0LGUpe2kuYm9keS5kYXRhLm5vZGVzJiZpLmJvZHkuZGF0YS5ub2Rlcy5vZmYoZSx0KX0pKSxkZWxldGUgaS5ib2R5LmZ1bmN0aW9ucy5jcmVhdGVOb2RlLGRlbGV0ZSBpLm5vZGVzTGlzdGVuZXJzLmFkZCxkZWxldGUgaS5ub2Rlc0xpc3RlbmVycy51cGRhdGUsZGVsZXRlIGkubm9kZXNMaXN0ZW5lcnMucmVtb3ZlLGRlbGV0ZSBpLm5vZGVzTGlzdGVuZXJzfSkpfX0se2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10KXtpZihNXy5wYXJzZU9wdGlvbnModGhpcy5vcHRpb25zLHQpLHZvaWQgMCE9PXQub3BhY2l0eSYmKEN3KHQub3BhY2l0eSl8fCFNdyh0Lm9wYWNpdHkpfHx0Lm9wYWNpdHk8MHx8dC5vcGFjaXR5PjE/Y29uc29sZS5lcnJvcihcIkludmFsaWQgb3B0aW9uIGZvciBub2RlIG9wYWNpdHkuIFZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxLCBmb3VuZDogXCIrdC5vcGFjaXR5KTp0aGlzLm9wdGlvbnMub3BhY2l0eT10Lm9wYWNpdHkpLHZvaWQgMCE9PXQuc2hhcGUpZm9yKHZhciBlIGluIHRoaXMuYm9keS5ub2RlcylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ib2R5Lm5vZGVzLGUpJiZ0aGlzLmJvZHkubm9kZXNbZV0udXBkYXRlU2hhcGUoKTtpZih2b2lkIDAhPT10LmZvbnR8fHZvaWQgMCE9PXQud2lkdGhDb25zdHJhaW50fHx2b2lkIDAhPT10LmhlaWdodENvbnN0cmFpbnQpZm9yKHZhciBpPTAsbz1tdSh0aGlzLmJvZHkubm9kZXMpO2k8by5sZW5ndGg7aSsrKXt2YXIgbj1vW2ldO3RoaXMuYm9keS5ub2Rlc1tuXS51cGRhdGVMYWJlbE1vZHVsZSgpLHRoaXMuYm9keS5ub2Rlc1tuXS5uZWVkc1JlZnJlc2goKX1pZih2b2lkIDAhPT10LnNpemUpZm9yKHZhciByIGluIHRoaXMuYm9keS5ub2RlcylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ib2R5Lm5vZGVzLHIpJiZ0aGlzLmJvZHkubm9kZXNbcl0ubmVlZHNSZWZyZXNoKCk7dm9pZCAwPT09dC5oaWRkZW4mJnZvaWQgMD09PXQucGh5c2ljc3x8dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKX19fSx7a2V5Olwic2V0RGF0YVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbz10aGlzLmJvZHkuZGF0YS5ub2RlcztpZihlLmlzRGF0YVZpZXdMaWtlKFwiaWRcIix0KSl0aGlzLmJvZHkuZGF0YS5ub2Rlcz10O2Vsc2UgaWYoaHUodCkpdGhpcy5ib2R5LmRhdGEubm9kZXM9bmV3IGUuRGF0YVNldCx0aGlzLmJvZHkuZGF0YS5ub2Rlcy5hZGQodCk7ZWxzZXtpZih0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheSBvciBEYXRhU2V0IGV4cGVjdGVkXCIpO3RoaXMuYm9keS5kYXRhLm5vZGVzPW5ldyBlLkRhdGFTZXR9aWYobyYmV3kodGhpcy5ub2Rlc0xpc3RlbmVycywoZnVuY3Rpb24odCxlKXtvLm9mZihlLHQpfSkpLHRoaXMuYm9keS5ub2Rlcz17fSx0aGlzLmJvZHkuZGF0YS5ub2Rlcyl7dmFyIG49dGhpcztXeSh0aGlzLm5vZGVzTGlzdGVuZXJzLChmdW5jdGlvbih0LGUpe24uYm9keS5kYXRhLm5vZGVzLm9uKGUsdCl9KSk7dmFyIHI9dGhpcy5ib2R5LmRhdGEubm9kZXMuZ2V0SWRzKCk7dGhpcy5hZGQociwhMCl9ITE9PT1pJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX0se2tleTpcImFkZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxpPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbz1bXSxuPTA7bjx0Lmxlbmd0aDtuKyspe2U9dFtuXTt2YXIgcj10aGlzLmJvZHkuZGF0YS5ub2Rlcy5nZXQoZSkscz10aGlzLmNyZWF0ZShyKTtvLnB1c2gocyksdGhpcy5ib2R5Lm5vZGVzW2VdPXN9dGhpcy5sYXlvdXRFbmdpbmUucG9zaXRpb25Jbml0aWFsbHkobyksITE9PT1pJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX0se2tleTpcInVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIG89dGhpcy5ib2R5Lm5vZGVzLG49ITEscj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgcz10W3JdLGE9b1tzXSxoPWVbcl07dm9pZCAwIT09YT9hLnNldE9wdGlvbnMoaCkmJihuPSEwKToobj0hMCxhPXRoaXMuY3JlYXRlKGgpLG9bc109YSl9bnx8dm9pZCAwPT09aXx8KG49TncoZSkuY2FsbChlLChmdW5jdGlvbih0LGUpe3ZhciBvPWlbZV07cmV0dXJuIG8mJm8ubGV2ZWwhPT10LmxldmVsfSkpKSwhMD09PW4/dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKTp0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFVcGRhdGVkXCIpfX0se2tleTpcInJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmJvZHkubm9kZXMsaT0wO2k8dC5sZW5ndGg7aSsrKXtkZWxldGUgZVt0W2ldXX10aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX0se2tleTpcImNyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpNXztyZXR1cm4gbmV3IGUodCx0aGlzLmJvZHksdGhpcy5pbWFnZXMsdGhpcy5ncm91cHMsdGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnMpfX0se2tleTpcInJlZnJlc2hcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO1d5KHRoaXMuYm9keS5ub2RlcywoZnVuY3Rpb24oaSxvKXt2YXIgbj10LmJvZHkuZGF0YS5ub2Rlcy5nZXQobyk7dm9pZCAwIT09biYmKCEwPT09ZSYmaS5zZXRPcHRpb25zKHt4Om51bGwseTpudWxsfSksaS5zZXRPcHRpb25zKHtmaXhlZDohMX0pLGkuc2V0T3B0aW9ucyhuKSl9KSl9fSx7a2V5OlwiZ2V0UG9zaXRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9e307aWYodm9pZCAwIT09dCl7aWYoITA9PT1odSh0KSl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspaWYodm9pZCAwIT09dGhpcy5ib2R5Lm5vZGVzW3RbaV1dKXt2YXIgbz10aGlzLmJvZHkubm9kZXNbdFtpXV07ZVt0W2ldXT17eDpNYXRoLnJvdW5kKG8ueCkseTpNYXRoLnJvdW5kKG8ueSl9fX1lbHNlIGlmKHZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1t0XSl7dmFyIG49dGhpcy5ib2R5Lm5vZGVzW3RdO2VbdF09e3g6TWF0aC5yb3VuZChuLngpLHk6TWF0aC5yb3VuZChuLnkpfX19ZWxzZSBmb3IodmFyIHI9MDtyPHRoaXMuYm9keS5ub2RlSW5kaWNlcy5sZW5ndGg7cisrKXt2YXIgcz10aGlzLmJvZHkubm9kZXNbdGhpcy5ib2R5Lm5vZGVJbmRpY2VzW3JdXTtlW3RoaXMuYm9keS5ub2RlSW5kaWNlc1tyXV09e3g6TWF0aC5yb3VuZChzLngpLHk6TWF0aC5yb3VuZChzLnkpfX1yZXR1cm4gZX19LHtrZXk6XCJnZXRQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKG51bGw9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIGlkIHdhcyBzcGVjaWZpZWQgZm9yIGdldFBvc2l0aW9uIG1ldGhvZC5cIik7aWYobnVsbD09dGhpcy5ib2R5Lm5vZGVzW3RdKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIk5vZGVJZCBwcm92aWRlZCBmb3IgZ2V0UG9zaXRpb24gZG9lcyBub3QgZXhpc3QuIFByb3ZpZGVkOiBcIi5jb25jYXQodCkpO3JldHVybnt4Ok1hdGgucm91bmQodGhpcy5ib2R5Lm5vZGVzW3RdLngpLHk6TWF0aC5yb3VuZCh0aGlzLmJvZHkubm9kZXNbdF0ueSl9fX0se2tleTpcInN0b3JlUG9zaXRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlPVtdLGk9dGhpcy5ib2R5LmRhdGEubm9kZXMuZ2V0RGF0YVNldCgpLG89UF8oaS5nZXQoKSk7dHJ5e2ZvcihvLnMoKTshKHQ9by5uKCkpLmRvbmU7KXt2YXIgbj10LnZhbHVlLHI9bi5pZCxzPXRoaXMuYm9keS5ub2Rlc1tyXSxhPU1hdGgucm91bmQocy54KSxoPU1hdGgucm91bmQocy55KTtuLng9PT1hJiZuLnk9PT1ofHxlLnB1c2goe2lkOnIseDphLHk6aH0pfX1jYXRjaCh0KXtvLmUodCl9ZmluYWxseXtvLmYoKX1pLnVwZGF0ZShlKX19LHtrZXk6XCJnZXRCb3VuZGluZ0JveFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1t0XSlyZXR1cm4gdGhpcy5ib2R5Lm5vZGVzW3RdLnNoYXBlLmJvdW5kaW5nQm94fX0se2tleTpcImdldENvbm5lY3RlZE5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT1bXTtpZih2b2lkIDAhPT10aGlzLmJvZHkubm9kZXNbdF0pZm9yKHZhciBvPXRoaXMuYm9keS5ub2Rlc1t0XSxuPXt9LHI9MDtyPG8uZWRnZXMubGVuZ3RoO3IrKyl7dmFyIHM9by5lZGdlc1tyXTtcInRvXCIhPT1lJiZzLnRvSWQ9PW8uaWQ/dm9pZCAwPT09bltzLmZyb21JZF0mJihpLnB1c2gocy5mcm9tSWQpLG5bcy5mcm9tSWRdPSEwKTpcImZyb21cIiE9PWUmJnMuZnJvbUlkPT1vLmlkJiZ2b2lkIDA9PT1uW3MudG9JZF0mJihpLnB1c2gocy50b0lkKSxuW3MudG9JZF09ITApfXJldHVybiBpfX0se2tleTpcImdldENvbm5lY3RlZEVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9W107aWYodm9pZCAwIT09dGhpcy5ib2R5Lm5vZGVzW3RdKWZvcih2YXIgaT10aGlzLmJvZHkubm9kZXNbdF0sbz0wO288aS5lZGdlcy5sZW5ndGg7bysrKWUucHVzaChpLmVkZ2VzW29dLmlkKTtlbHNlIGNvbnNvbGUuZXJyb3IoXCJOb2RlSWQgcHJvdmlkZWQgZm9yIGdldENvbm5lY3RlZEVkZ2VzIGRvZXMgbm90IGV4aXN0LiBQcm92aWRlZDogXCIsdCk7cmV0dXJuIGV9fSx7a2V5OlwibW92ZU5vZGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89dGhpczt2b2lkIDAhPT10aGlzLmJvZHkubm9kZXNbdF0/KHRoaXMuYm9keS5ub2Rlc1t0XS54PU51bWJlcihlKSx0aGlzLmJvZHkubm9kZXNbdF0ueT1OdW1iZXIoaSksYnYoKGZ1bmN0aW9uKCl7by5ib2R5LmVtaXR0ZXIuZW1pdChcInN0YXJ0U2ltdWxhdGlvblwiKX0pLDApKTpjb25zb2xlLmVycm9yKFwiTm9kZSBpZCBzdXBwbGllZCB0byBtb3ZlTm9kZSBkb2VzIG5vdCBleGlzdC4gUHJvdmlkZWQ6IFwiLHQpfX1dKSx0fSgpLElfPVZ0LHpfPXgsRl89WCxOXz1aZSxBXz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmKElfKHQsXCJ2YWx1ZVwiKXx8SV8odCxcIndyaXRhYmxlXCIpKX0sUl89YixqXz1Ecjt4aSh7dGFyZ2V0OlwiUmVmbGVjdFwiLHN0YXQ6ITB9LHtnZXQ6ZnVuY3Rpb24gdChlLGkpe3ZhciBvLG4scj1hcmd1bWVudHMubGVuZ3RoPDM/ZTphcmd1bWVudHNbMl07cmV0dXJuIE5fKGUpPT09cj9lW2ldOihvPVJfLmYoZSxpKSk/QV8obyk/by52YWx1ZTp2b2lkIDA9PT1vLmdldD92b2lkIDA6el8oby5nZXQscik6Rl8obj1qXyhlKSk/dChuLGkscik6dm9pZCAwfX0pO3ZhciBMXz1HLlJlZmxlY3QuZ2V0LEhfPWJsO2Z1bmN0aW9uIFdfKHQsZSl7Zm9yKDshT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJm51bGwhPT0odD1Iayh0KSk7KTtyZXR1cm4gdH1mdW5jdGlvbiBWXygpe3JldHVybiBWXz1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmTF8/TF86ZnVuY3Rpb24odCxlLGkpe3ZhciBvPVdfKHQsZSk7aWYobyl7dmFyIG49SF8obyxlKTtyZXR1cm4gbi5nZXQ/bi5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoPDM/dDppKTpuLnZhbHVlfX0sVl8uYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBxXz14aSxVXz1NYXRoLmh5cG90LFlfPU1hdGguYWJzLFhfPU1hdGguc3FydDtxXyh7dGFyZ2V0OlwiTWF0aFwiLHN0YXQ6ITAsZm9yY2VkOiEhVV8mJlVfKDEvMCxOYU4pIT09MS8wfSx7aHlwb3Q6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGksbyxuPTAscj0wLHM9YXJndW1lbnRzLmxlbmd0aCxhPTA7cjxzOylhPChpPVlfKGFyZ3VtZW50c1tyKytdKSk/KG49bioobz1hL2kpKm8rMSxhPWkpOm4rPWk+MD8obz1pL2EpKm86aTtyZXR1cm4gYT09PTEvMD8xLzA6YSpYXyhuKX19KTt2YXIgR189Ry5NYXRoLmh5cG90O2Z1bmN0aW9uIEtfKHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyICRfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe1hsKHRoaXMsdCl9cmV0dXJuICRsKHQsbnVsbCxbe2tleTpcInRyYW5zZm9ybVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aHUodCl8fCh0PVt0XSk7Zm9yKHZhciBpPWUucG9pbnQueCxvPWUucG9pbnQueSxuPWUuYW5nbGUscj1lLmxlbmd0aCxzPTA7czx0Lmxlbmd0aDsrK3Mpe3ZhciBhPXRbc10saD1hLngqTWF0aC5jb3MobiktYS55Kk1hdGguc2luKG4pLGQ9YS54Kk1hdGguc2luKG4pK2EueSpNYXRoLmNvcyhuKTthLng9aStyKmgsYS55PW8rcipkfX19LHtrZXk6XCJkcmF3UGF0aFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dC5iZWdpblBhdGgoKSx0Lm1vdmVUbyhlWzBdLngsZVswXS55KTtmb3IodmFyIGk9MTtpPGUubGVuZ3RoOysraSl0LmxpbmVUbyhlW2ldLngsZVtpXS55KTt0LmNsb3NlUGF0aCgpfX1dKSx0fSgpLFpfPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9S18oaSk7ZnVuY3Rpb24gaSgpe3JldHVybiBYbCh0aGlzLGkpLGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiAkbChpLG51bGwsW3trZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihlLmltYWdlKXt0LnNhdmUoKSx0LnRyYW5zbGF0ZShlLnBvaW50LngsZS5wb2ludC55KSx0LnJvdGF0ZShNYXRoLlBJLzIrZS5hbmdsZSk7dmFyIGk9bnVsbCE9ZS5pbWFnZVdpZHRoP2UuaW1hZ2VXaWR0aDplLmltYWdlLndpZHRoLG89bnVsbCE9ZS5pbWFnZUhlaWdodD9lLmltYWdlSGVpZ2h0OmUuaW1hZ2UuaGVpZ2h0O2UuaW1hZ2UuZHJhd0ltYWdlQXRQb3NpdGlvbih0LDEsLWkvMiwwLGksbyksdC5yZXN0b3JlKCl9cmV0dXJuITF9fV0pLGl9KCRfKSxRXz1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPUtfKGkpO2Z1bmN0aW9uIGkoKXtyZXR1cm4gWGwodGhpcyxpKSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gJGwoaSxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4OjAseTowfSx7eDotMSx5Oi4zfSx7eDotLjkseTowfSx7eDotMSx5Oi0uM31dO3JldHVybiAkXy50cmFuc2Zvcm0oaSxlKSwkXy5kcmF3UGF0aCh0LGkpLCEwfX1dKSxpfSgkXyksSl89ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4Oi0xLHk6MH0se3g6MCx5Oi4zfSx7eDotLjQseTowfSx7eDowLHk6LS4zfV07cmV0dXJuICRfLnRyYW5zZm9ybShpLGUpLCRfLmRyYXdQYXRoKHQsaSksITB9fV0pLHR9KCksdHg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9e3g6LS40LHk6MH07JF8udHJhbnNmb3JtKGksZSksdC5zdHJva2VTdHlsZT10LmZpbGxTdHlsZSx0LmZpbGxTdHlsZT1cInJnYmEoMCwgMCwgMCwgMClcIjt2YXIgbz1NYXRoLlBJLG49ZS5hbmdsZS1vLzIscj1lLmFuZ2xlK28vMjtyZXR1cm4gdC5iZWdpblBhdGgoKSx0LmFyYyhpLngsaS55LC40KmUubGVuZ3RoLG4sciwhMSksdC5zdHJva2UoKSwhMH19XSksdH0oKSxleD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtYbCh0aGlzLHQpfXJldHVybiAkbCh0LG51bGwsW3trZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT17eDotLjMseTowfTskXy50cmFuc2Zvcm0oaSxlKSx0LnN0cm9rZVN0eWxlPXQuZmlsbFN0eWxlLHQuZmlsbFN0eWxlPVwicmdiYSgwLCAwLCAwLCAwKVwiO3ZhciBvPU1hdGguUEksbj1lLmFuZ2xlK28vMixyPWUuYW5nbGUrMypvLzI7cmV0dXJuIHQuYmVnaW5QYXRoKCksdC5hcmMoaS54LGkueSwuNCplLmxlbmd0aCxuLHIsITEpLHQuc3Ryb2tlKCksITB9fV0pLHR9KCksaXg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4Oi4wMix5OjB9LHt4Oi0xLHk6LjN9LHt4Oi0xLHk6LS4zfV07cmV0dXJuICRfLnRyYW5zZm9ybShpLGUpLCRfLmRyYXdQYXRoKHQsaSksITB9fV0pLHR9KCksb3g9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4OjAseTouM30se3g6MCx5Oi0uM30se3g6LTEseTowfV07cmV0dXJuICRfLnRyYW5zZm9ybShpLGUpLCRfLmRyYXdQYXRoKHQsaSksITB9fV0pLHR9KCksbng9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9e3g6LS40LHk6MH07cmV0dXJuICRfLnRyYW5zZm9ybShpLGUpLE5vKHQsaS54LGkueSwuNCplLmxlbmd0aCksITB9fV0pLHR9KCkscng9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4OjAseTouNX0se3g6MCx5Oi0uNX0se3g6LS4xNSx5Oi0uNX0se3g6LS4xNSx5Oi41fV07cmV0dXJuICRfLnRyYW5zZm9ybShpLGUpLCRfLmRyYXdQYXRoKHQsaSksITB9fV0pLHR9KCksc3g9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4OjAseTouM30se3g6MCx5Oi0uM30se3g6LS42LHk6LS4zfSx7eDotLjYseTouM31dO3JldHVybiAkXy50cmFuc2Zvcm0oaSxlKSwkXy5kcmF3UGF0aCh0LGkpLCEwfX1dKSx0fSgpLGF4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe1hsKHRoaXMsdCl9cmV0dXJuICRsKHQsbnVsbCxbe2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPVt7eDowLHk6MH0se3g6LS41LHk6LS4zfSx7eDotMSx5OjB9LHt4Oi0uNSx5Oi4zfV07cmV0dXJuICRfLnRyYW5zZm9ybShpLGUpLCRfLmRyYXdQYXRoKHQsaSksITB9fV0pLHR9KCksaHg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxudWxsLFt7a2V5OlwiZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W3t4Oi0xLHk6LjN9LHt4Oi0uNSx5OjB9LHt4Oi0xLHk6LS4zfSx7eDowLHk6MH1dO3JldHVybiAkXy50cmFuc2Zvcm0oaSxlKSwkXy5kcmF3UGF0aCh0LGkpLCEwfX1dKSx0fSgpLGR4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe1hsKHRoaXMsdCl9cmV0dXJuICRsKHQsbnVsbCxbe2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpO3N3aXRjaChlLnR5cGUmJihpPWUudHlwZS50b0xvd2VyQ2FzZSgpKSxpKXtjYXNlXCJpbWFnZVwiOnJldHVybiBaXy5kcmF3KHQsZSk7Y2FzZVwiY2lyY2xlXCI6cmV0dXJuIG54LmRyYXcodCxlKTtjYXNlXCJib3hcIjpyZXR1cm4gc3guZHJhdyh0LGUpO2Nhc2VcImNyb3dcIjpyZXR1cm4gSl8uZHJhdyh0LGUpO2Nhc2VcImN1cnZlXCI6cmV0dXJuIHR4LmRyYXcodCxlKTtjYXNlXCJkaWFtb25kXCI6cmV0dXJuIGF4LmRyYXcodCxlKTtjYXNlXCJpbnZfY3VydmVcIjpyZXR1cm4gZXguZHJhdyh0LGUpO2Nhc2VcInRyaWFuZ2xlXCI6cmV0dXJuIGl4LmRyYXcodCxlKTtjYXNlXCJpbnZfdHJpYW5nbGVcIjpyZXR1cm4gb3guZHJhdyh0LGUpO2Nhc2VcImJhclwiOnJldHVybiByeC5kcmF3KHQsZSk7Y2FzZVwidmVlXCI6cmV0dXJuIGh4LmRyYXcodCxlKTtkZWZhdWx0OnJldHVybiBRXy5kcmF3KHQsZSl9fX1dKSx0fSgpO2Z1bmN0aW9uIGx4KHQsZSl7dmFyIGk9bXUodCk7aWYoZGwpe3ZhciBvPWRsKHQpO2UmJihvPVlmKG8pLmNhbGwobywoZnVuY3Rpb24oZSl7cmV0dXJuIHdsKHQsZSkuZW51bWVyYWJsZX0pKSksaS5wdXNoLmFwcGx5KGksbyl9cmV0dXJuIGl9ZnVuY3Rpb24gY3godCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIGksbyxuPW51bGwhPWFyZ3VtZW50c1tlXT9hcmd1bWVudHNbZV06e307ZSUyP0Z1KGk9bHgoT2JqZWN0KG4pLCEwKSkuY2FsbChpLChmdW5jdGlvbihlKXtabCh0LGUsbltlXSl9KSk6RGw/UmwodCxEbChuKSk6RnUobz1seChPYmplY3QobikpKS5jYWxsKG8sKGZ1bmN0aW9uKGUpe1lsKHQsZSx3bChuLGUpKX0pKX1yZXR1cm4gdH12YXIgdXg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsaSxvKXtYbCh0aGlzLHQpLHRoaXMuX2JvZHk9aSx0aGlzLl9sYWJlbE1vZHVsZT1vLHRoaXMuY29sb3I9e30sdGhpcy5jb2xvckRpcnR5PSEwLHRoaXMuaG92ZXJXaWR0aD0xLjUsdGhpcy5zZWxlY3Rpb25XaWR0aD0yLHRoaXMuc2V0T3B0aW9ucyhlKSx0aGlzLmZyb21Qb2ludD10aGlzLmZyb20sdGhpcy50b1BvaW50PXRoaXMudG99cmV0dXJuICRsKHQsW3trZXk6XCJjb25uZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZyb209dGhpcy5fYm9keS5ub2Rlc1t0aGlzLm9wdGlvbnMuZnJvbV0sdGhpcy50bz10aGlzLl9ib2R5Lm5vZGVzW3RoaXMub3B0aW9ucy50b119fSx7a2V5OlwiY2xlYW51cFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fSx7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMub3B0aW9ucz10LHRoaXMuZnJvbT10aGlzLl9ib2R5Lm5vZGVzW3RoaXMub3B0aW9ucy5mcm9tXSx0aGlzLnRvPXRoaXMuX2JvZHkubm9kZXNbdGhpcy5vcHRpb25zLnRvXSx0aGlzLmlkPXRoaXMub3B0aW9ucy5pZH19LHtrZXk6XCJkcmF3TGluZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8pe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTp0aGlzLmdldFZpYU5vZGUoKTt0LnN0cm9rZVN0eWxlPXRoaXMuZ2V0Q29sb3IodCxlKSx0LmxpbmVXaWR0aD1lLndpZHRoLCExIT09ZS5kYXNoZXM/dGhpcy5fZHJhd0Rhc2hlZExpbmUodCxlLG4pOnRoaXMuX2RyYXdMaW5lKHQsZSxuKX19LHtrZXk6XCJfZHJhd0xpbmVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4pe2lmKHRoaXMuZnJvbSE9dGhpcy50byl0aGlzLl9saW5lKHQsZSxpLG8sbik7ZWxzZXt2YXIgcj0kYyh0aGlzLl9nZXRDaXJjbGVEYXRhKHQpLDMpLHM9clswXSxhPXJbMV0saD1yWzJdO3RoaXMuX2NpcmNsZSh0LGUscyxhLGgpfX19LHtrZXk6XCJfZHJhd0Rhc2hlZExpbmVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4pe3QubGluZUNhcD1cInJvdW5kXCI7dmFyIHI9aHUoZS5kYXNoZXMpP2UuZGFzaGVzOls1LDVdO2lmKHZvaWQgMCE9PXQuc2V0TGluZURhc2gpe2lmKHQuc2F2ZSgpLHQuc2V0TGluZURhc2gociksdC5saW5lRGFzaE9mZnNldD0wLHRoaXMuZnJvbSE9dGhpcy50byl0aGlzLl9saW5lKHQsZSxpKTtlbHNle3ZhciBzPSRjKHRoaXMuX2dldENpcmNsZURhdGEodCksMyksYT1zWzBdLGg9c1sxXSxkPXNbMl07dGhpcy5fY2lyY2xlKHQsZSxhLGgsZCl9dC5zZXRMaW5lRGFzaChbMF0pLHQubGluZURhc2hPZmZzZXQ9MCx0LnJlc3RvcmUoKX1lbHNle2lmKHRoaXMuZnJvbSE9dGhpcy50bylMbyh0LHRoaXMuZnJvbS54LHRoaXMuZnJvbS55LHRoaXMudG8ueCx0aGlzLnRvLnkscik7ZWxzZXt2YXIgbD0kYyh0aGlzLl9nZXRDaXJjbGVEYXRhKHQpLDMpLGM9bFswXSx1PWxbMV0sZj1sWzJdO3RoaXMuX2NpcmNsZSh0LGUsYyx1LGYpfXRoaXMuZW5hYmxlU2hhZG93KHQsZSksdC5zdHJva2UoKSx0aGlzLmRpc2FibGVTaGFkb3codCxlKX19fSx7a2V5OlwiZmluZEJvcmRlclBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0aGlzLmZyb20hPXRoaXMudG8/dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uKHQsZSxpKTp0aGlzLl9maW5kQm9yZGVyUG9zaXRpb25DaXJjbGUodCxlLGkpfX0se2tleTpcImZpbmRCb3JkZXJQb3NpdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLmZyb20hPXRoaXMudG8pcmV0dXJue2Zyb206dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uKHRoaXMuZnJvbSx0KSx0bzp0aGlzLl9maW5kQm9yZGVyUG9zaXRpb24odGhpcy50byx0KX07dmFyIGUsaT0kYyhhdShlPXRoaXMuX2dldENpcmNsZURhdGEodCkpLmNhbGwoZSwwLDIpLDIpLG89aVswXSxuPWlbMV07cmV0dXJue2Zyb206dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uQ2lyY2xlKHRoaXMuZnJvbSx0LHt4Om8seTpuLGxvdzouMjUsaGlnaDouNixkaXJlY3Rpb246LTF9KSx0bzp0aGlzLl9maW5kQm9yZGVyUG9zaXRpb25DaXJjbGUodGhpcy5mcm9tLHQse3g6byx5Om4sbG93Oi42LGhpZ2g6LjgsZGlyZWN0aW9uOjF9KX19fSx7a2V5OlwiX2dldENpcmNsZURhdGFcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5zaXplO3ZvaWQgMCE9PXQmJnZvaWQgMD09PXRoaXMuZnJvbS5zaGFwZS53aWR0aCYmdGhpcy5mcm9tLnNoYXBlLnJlc2l6ZSh0KTt2YXIgaT1payh0LHRoaXMub3B0aW9ucy5zZWxmUmVmZXJlbmNlLmFuZ2xlLGUsdGhpcy5mcm9tKTtyZXR1cm5baS54LGkueSxlXX19LHtrZXk6XCJfcG9pbnRPbkNpcmNsZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8pe3ZhciBuPTIqbypNYXRoLlBJO3JldHVybnt4OnQraSpNYXRoLmNvcyhuKSx5OmUtaSpNYXRoLnNpbihuKX19fSx7a2V5OlwiX2ZpbmRCb3JkZXJQb3NpdGlvbkNpcmNsZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgbyxuPWkueCxyPWkueSxzPWkubG93LGE9aS5oaWdoLGg9aS5kaXJlY3Rpb24sZD10aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5zaXplLGw9LjUqKHMrYSksYz0wOyEwPT09dGhpcy5vcHRpb25zLmFycm93U3RyaWtldGhyb3VnaCYmKC0xPT09aD9jPXRoaXMub3B0aW9ucy5lbmRQb2ludE9mZnNldC5mcm9tOjE9PT1oJiYoYz10aGlzLm9wdGlvbnMuZW5kUG9pbnRPZmZzZXQudG8pKTt2YXIgdT0wO2Rve2w9LjUqKHMrYSksbz10aGlzLl9wb2ludE9uQ2lyY2xlKG4scixkLGwpO3ZhciBmPU1hdGguYXRhbjIodC55LW8ueSx0Lngtby54KSxwPXQuZGlzdGFuY2VUb0JvcmRlcihlLGYpK2MtTWF0aC5zcXJ0KE1hdGgucG93KG8ueC10LngsMikrTWF0aC5wb3coby55LXQueSwyKSk7aWYoTWF0aC5hYnMocCk8LjA1KWJyZWFrO3A+MD9oPjA/cz1sOmE9bDpoPjA/YT1sOnM9bCwrK3V9d2hpbGUoczw9YSYmdTwxMCk7cmV0dXJuIGN4KGN4KHt9LG8pLHt9LHt0Omx9KX19LHtrZXk6XCJnZXRMaW5lV2lkdGhcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiEwPT09dD9NYXRoLm1heCh0aGlzLnNlbGVjdGlvbldpZHRoLC4zL3RoaXMuX2JvZHkudmlldy5zY2FsZSk6ITA9PT1lP01hdGgubWF4KHRoaXMuaG92ZXJXaWR0aCwuMy90aGlzLl9ib2R5LnZpZXcuc2NhbGUpOk1hdGgubWF4KHRoaXMub3B0aW9ucy53aWR0aCwuMy90aGlzLl9ib2R5LnZpZXcuc2NhbGUpfX0se2tleTpcImdldENvbG9yXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZighMSE9PWUuaW5oZXJpdHNDb2xvcil7aWYoXCJib3RoXCI9PT1lLmluaGVyaXRzQ29sb3ImJnRoaXMuZnJvbS5pZCE9PXRoaXMudG8uaWQpe3ZhciBpPXQuY3JlYXRlTGluZWFyR3JhZGllbnQodGhpcy5mcm9tLngsdGhpcy5mcm9tLnksdGhpcy50by54LHRoaXMudG8ueSksbz10aGlzLmZyb20ub3B0aW9ucy5jb2xvci5oaWdobGlnaHQuYm9yZGVyLG49dGhpcy50by5vcHRpb25zLmNvbG9yLmhpZ2hsaWdodC5ib3JkZXI7cmV0dXJuITE9PT10aGlzLmZyb20uc2VsZWN0ZWQmJiExPT09dGhpcy50by5zZWxlY3RlZD8obz1xeSh0aGlzLmZyb20ub3B0aW9ucy5jb2xvci5ib3JkZXIsZS5vcGFjaXR5KSxuPXF5KHRoaXMudG8ub3B0aW9ucy5jb2xvci5ib3JkZXIsZS5vcGFjaXR5KSk6ITA9PT10aGlzLmZyb20uc2VsZWN0ZWQmJiExPT09dGhpcy50by5zZWxlY3RlZD9uPXRoaXMudG8ub3B0aW9ucy5jb2xvci5ib3JkZXI6ITE9PT10aGlzLmZyb20uc2VsZWN0ZWQmJiEwPT09dGhpcy50by5zZWxlY3RlZCYmKG89dGhpcy5mcm9tLm9wdGlvbnMuY29sb3IuYm9yZGVyKSxpLmFkZENvbG9yU3RvcCgwLG8pLGkuYWRkQ29sb3JTdG9wKDEsbiksaX1yZXR1cm5cInRvXCI9PT1lLmluaGVyaXRzQ29sb3I/cXkodGhpcy50by5vcHRpb25zLmNvbG9yLmJvcmRlcixlLm9wYWNpdHkpOnF5KHRoaXMuZnJvbS5vcHRpb25zLmNvbG9yLmJvcmRlcixlLm9wYWNpdHkpfXJldHVybiBxeShlLmNvbG9yLGUub3BhY2l0eSl9fSx7a2V5OlwiX2NpcmNsZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbil7dGhpcy5lbmFibGVTaGFkb3codCxlKTt2YXIgcj0wLHM9MipNYXRoLlBJO2lmKCF0aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5yZW5kZXJCZWhpbmRUaGVOb2RlKXt2YXIgYT10aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5hbmdsZSxoPXRoaXMub3B0aW9ucy5zZWxmUmVmZXJlbmNlLmFuZ2xlK01hdGguUEksZD10aGlzLl9maW5kQm9yZGVyUG9zaXRpb25DaXJjbGUodGhpcy5mcm9tLHQse3g6aSx5Om8sbG93OmEsaGlnaDpoLGRpcmVjdGlvbjotMX0pLGw9dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uQ2lyY2xlKHRoaXMuZnJvbSx0LHt4OmkseTpvLGxvdzphLGhpZ2g6aCxkaXJlY3Rpb246MX0pO3I9TWF0aC5hdGFuMihkLnktbyxkLngtaSkscz1NYXRoLmF0YW4yKGwueS1vLGwueC1pKX10LmJlZ2luUGF0aCgpLHQuYXJjKGksbyxuLHIscywhMSksdC5zdHJva2UoKSx0aGlzLmRpc2FibGVTaGFkb3codCxlKX19LHtrZXk6XCJnZXREaXN0YW5jZVRvRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXtpZih0aGlzLmZyb20hPXRoaXMudG8pcmV0dXJuIHRoaXMuX2dldERpc3RhbmNlVG9FZGdlKHQsZSxpLG8sbixyKTt2YXIgcz0kYyh0aGlzLl9nZXRDaXJjbGVEYXRhKHZvaWQgMCksMyksYT1zWzBdLGg9c1sxXSxkPXNbMl0sbD1hLW4sYz1oLXI7cmV0dXJuIE1hdGguYWJzKE1hdGguc3FydChsKmwrYypjKS1kKX19LHtrZXk6XCJfZ2V0RGlzdGFuY2VUb0xpbmVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7dmFyIHM9aS10LGE9by1lLGg9KChuLXQpKnMrKHItZSkqYSkvKHMqcythKmEpO2g+MT9oPTE6aDwwJiYoaD0wKTt2YXIgZD10K2gqcy1uLGw9ZStoKmEtcjtyZXR1cm4gTWF0aC5zcXJ0KGQqZCtsKmwpfX0se2tleTpcImdldEFycm93RGF0YVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXt2YXIgcyxhLGgsZCxsLGMsdSxmPXIud2lkdGg7XCJmcm9tXCI9PT1lPyhoPXRoaXMuZnJvbSxkPXRoaXMudG8sbD1yLmZyb21BcnJvd1NjYWxlPDAsYz1NYXRoLmFicyhyLmZyb21BcnJvd1NjYWxlKSx1PXIuZnJvbUFycm93VHlwZSk6XCJ0b1wiPT09ZT8oaD10aGlzLnRvLGQ9dGhpcy5mcm9tLGw9ci50b0Fycm93U2NhbGU8MCxjPU1hdGguYWJzKHIudG9BcnJvd1NjYWxlKSx1PXIudG9BcnJvd1R5cGUpOihoPXRoaXMudG8sZD10aGlzLmZyb20sbD1yLm1pZGRsZUFycm93U2NhbGU8MCxjPU1hdGguYWJzKHIubWlkZGxlQXJyb3dTY2FsZSksdT1yLm1pZGRsZUFycm93VHlwZSk7dmFyIHA9MTUqYyszKmY7aWYoaCE9ZCl7dmFyIHY9cC9HXyhoLngtZC54LGgueS1kLnkpO2lmKFwibWlkZGxlXCIhPT1lKWlmKCEwPT09dGhpcy5vcHRpb25zLnNtb290aC5lbmFibGVkKXt2YXIgZz10aGlzLl9maW5kQm9yZGVyUG9zaXRpb24oaCx0LHt2aWE6aX0pLHk9dGhpcy5nZXRQb2ludChnLnQrdiooXCJmcm9tXCI9PT1lPzE6LTEpLGkpO3M9TWF0aC5hdGFuMihnLnkteS55LGcueC15LngpLGE9Z31lbHNlIHM9TWF0aC5hdGFuMihoLnktZC55LGgueC1kLngpLGE9dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uKGgsdCk7ZWxzZXt2YXIgbT0obD8tdjp2KS8yLGI9dGhpcy5nZXRQb2ludCguNSttLGkpLHc9dGhpcy5nZXRQb2ludCguNS1tLGkpO3M9TWF0aC5hdGFuMihiLnktdy55LGIueC13LngpLGE9dGhpcy5nZXRQb2ludCguNSxpKX19ZWxzZXt2YXIgaz0kYyh0aGlzLl9nZXRDaXJjbGVEYXRhKHQpLDMpLF89a1swXSx4PWtbMV0sRT1rWzJdO2lmKFwiZnJvbVwiPT09ZSl7dmFyIE89dGhpcy5vcHRpb25zLnNlbGZSZWZlcmVuY2UuYW5nbGUsQz10aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5hbmdsZStNYXRoLlBJLFM9dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uQ2lyY2xlKHRoaXMuZnJvbSx0LHt4Ol8seTp4LGxvdzpPLGhpZ2g6QyxkaXJlY3Rpb246LTF9KTtzPS0yKlMudCpNYXRoLlBJKzEuNSpNYXRoLlBJKy4xKk1hdGguUEksYT1TfWVsc2UgaWYoXCJ0b1wiPT09ZSl7dmFyIFQ9dGhpcy5vcHRpb25zLnNlbGZSZWZlcmVuY2UuYW5nbGUsTT10aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5hbmdsZStNYXRoLlBJLFA9dGhpcy5fZmluZEJvcmRlclBvc2l0aW9uQ2lyY2xlKHRoaXMuZnJvbSx0LHt4Ol8seTp4LGxvdzpULGhpZ2g6TSxkaXJlY3Rpb246MX0pO3M9LTIqUC50Kk1hdGguUEkrMS41Kk1hdGguUEktMS4xKk1hdGguUEksYT1QfWVsc2V7dmFyIEQ9dGhpcy5vcHRpb25zLnNlbGZSZWZlcmVuY2UuYW5nbGUvKDIqTWF0aC5QSSk7YT10aGlzLl9wb2ludE9uQ2lyY2xlKF8seCxFLEQpLHM9LTIqRCpNYXRoLlBJKzEuNSpNYXRoLlBJKy4xKk1hdGguUEl9fXJldHVybntwb2ludDphLGNvcmU6e3g6YS54LS45KnAqTWF0aC5jb3MocykseTphLnktLjkqcCpNYXRoLnNpbihzKX0sYW5nbGU6cyxsZW5ndGg6cCx0eXBlOnV9fX0se2tleTpcImRyYXdBcnJvd0hlYWRcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4pe3Quc3Ryb2tlU3R5bGU9dGhpcy5nZXRDb2xvcih0LGUpLHQuZmlsbFN0eWxlPXQuc3Ryb2tlU3R5bGUsdC5saW5lV2lkdGg9ZS53aWR0aCxkeC5kcmF3KHQsbikmJih0aGlzLmVuYWJsZVNoYWRvdyh0LGUpLFB2KHQpLmNhbGwodCksdGhpcy5kaXNhYmxlU2hhZG93KHQsZSkpfX0se2tleTpcImVuYWJsZVNoYWRvd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7ITA9PT1lLnNoYWRvdyYmKHQuc2hhZG93Q29sb3I9ZS5zaGFkb3dDb2xvcix0LnNoYWRvd0JsdXI9ZS5zaGFkb3dTaXplLHQuc2hhZG93T2Zmc2V0WD1lLnNoYWRvd1gsdC5zaGFkb3dPZmZzZXRZPWUuc2hhZG93WSl9fSx7a2V5OlwiZGlzYWJsZVNoYWRvd1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7ITA9PT1lLnNoYWRvdyYmKHQuc2hhZG93Q29sb3I9XCJyZ2JhKDAsMCwwLDApXCIsdC5zaGFkb3dCbHVyPTAsdC5zaGFkb3dPZmZzZXRYPTAsdC5zaGFkb3dPZmZzZXRZPTApfX0se2tleTpcImRyYXdCYWNrZ3JvdW5kXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZighMSE9PWUuYmFja2dyb3VuZCl7dmFyIGk9e3N0cm9rZVN0eWxlOnQuc3Ryb2tlU3R5bGUsbGluZVdpZHRoOnQubGluZVdpZHRoLGRhc2hlczp0LmRhc2hlc307dC5zdHJva2VTdHlsZT1lLmJhY2tncm91bmRDb2xvcix0LmxpbmVXaWR0aD1lLmJhY2tncm91bmRTaXplLHRoaXMuc2V0U3Ryb2tlRGFzaGVkKHQsZS5iYWNrZ3JvdW5kRGFzaGVzKSx0LnN0cm9rZSgpLHQuc3Ryb2tlU3R5bGU9aS5zdHJva2VTdHlsZSx0LmxpbmVXaWR0aD1pLmxpbmVXaWR0aCx0LmRhc2hlcz1pLmRhc2hlcyx0aGlzLnNldFN0cm9rZURhc2hlZCh0LGUuZGFzaGVzKX19fSx7a2V5Olwic2V0U3Ryb2tlRGFzaGVkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZighMSE9PWUpaWYodm9pZCAwIT09dC5zZXRMaW5lRGFzaCl7dmFyIGk9aHUoZSk/ZTpbNSw1XTt0LnNldExpbmVEYXNoKGkpfWVsc2UgY29uc29sZS53YXJuKFwic2V0TGluZURhc2ggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuIFRoZSBkYXNoZWQgc3Ryb2tlIGNhbm5vdCBiZSB1c2VkLlwiKTtlbHNlIHZvaWQgMCE9PXQuc2V0TGluZURhc2g/dC5zZXRMaW5lRGFzaChbXSk6Y29uc29sZS53YXJuKFwic2V0TGluZURhc2ggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuIFRoZSBkYXNoZWQgc3Ryb2tlIGNhbm5vdCBiZSB1c2VkLlwiKX19XSksdH0oKTtmdW5jdGlvbiBmeCh0LGUpe3ZhciBpPW11KHQpO2lmKGRsKXt2YXIgbz1kbCh0KTtlJiYobz1ZZihvKS5jYWxsKG8sKGZ1bmN0aW9uKGUpe3JldHVybiB3bCh0LGUpLmVudW1lcmFibGV9KSkpLGkucHVzaC5hcHBseShpLG8pfXJldHVybiBpfWZ1bmN0aW9uIHB4KHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBpLG8sbj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9GdShpPWZ4KE9iamVjdChuKSwhMCkpLmNhbGwoaSwoZnVuY3Rpb24oZSl7WmwodCxlLG5bZV0pfSkpOkRsP1JsKHQsRGwobikpOkZ1KG89ZngoT2JqZWN0KG4pKSkuY2FsbChvLChmdW5jdGlvbihlKXtZbCh0LGUsd2wobixlKSl9KSl9cmV0dXJuIHR9ZnVuY3Rpb24gdngodCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgZ3g9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT12eChpKTtmdW5jdGlvbiBpKHQsbyxuKXtyZXR1cm4gWGwodGhpcyxpKSxlLmNhbGwodGhpcyx0LG8sbil9cmV0dXJuICRsKGksW3trZXk6XCJfZmluZEJvcmRlclBvc2l0aW9uQmV6aWVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaSxvLG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnRoaXMuX2dldFZpYUNvb3JkaW5hdGVzKCkscj0xMCxzPS4yLGE9ITEsaD0xLGQ9MCxsPXRoaXMudG8sYz10aGlzLm9wdGlvbnMuZW5kUG9pbnRPZmZzZXQ/dGhpcy5vcHRpb25zLmVuZFBvaW50T2Zmc2V0LnRvOjA7dC5pZD09PXRoaXMuZnJvbS5pZCYmKGw9dGhpcy5mcm9tLGE9ITAsYz10aGlzLm9wdGlvbnMuZW5kUG9pbnRPZmZzZXQ/dGhpcy5vcHRpb25zLmVuZFBvaW50T2Zmc2V0LmZyb206MCksITE9PT10aGlzLm9wdGlvbnMuYXJyb3dTdHJpa2V0aHJvdWdoJiYoYz0wKTt2YXIgdT0wO2Rve289LjUqKGQraCksaT10aGlzLmdldFBvaW50KG8sbik7dmFyIGY9TWF0aC5hdGFuMihsLnktaS55LGwueC1pLngpLHA9bC5kaXN0YW5jZVRvQm9yZGVyKGUsZikrYyx2PU1hdGguc3FydChNYXRoLnBvdyhpLngtbC54LDIpK01hdGgucG93KGkueS1sLnksMikpLGc9cC12O2lmKE1hdGguYWJzKGcpPHMpYnJlYWs7ZzwwPyExPT09YT9kPW86aD1vOiExPT09YT9oPW86ZD1vLCsrdX13aGlsZShkPD1oJiZ1PHIpO3JldHVybiBweChweCh7fSxpKSx7fSx7dDpvfSl9fSx7a2V5OlwiX2dldERpc3RhbmNlVG9CZXppZXJFZGdlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIscyl7dmFyIGEsaCxkLGwsYyx1PTFlOSxmPXQscD1lO2ZvcihoPTE7aDwxMDtoKyspZD0uMSpoLGw9TWF0aC5wb3coMS1kLDIpKnQrMipkKigxLWQpKnMueCtNYXRoLnBvdyhkLDIpKmksYz1NYXRoLnBvdygxLWQsMikqZSsyKmQqKDEtZCkqcy55K01hdGgucG93KGQsMikqbyxoPjAmJih1PShhPXRoaXMuX2dldERpc3RhbmNlVG9MaW5lKGYscCxsLGMsbixyKSk8dT9hOnUpLGY9bCxwPWM7cmV0dXJuIHV9fSx7a2V5OlwiX2JlemllckN1cnZlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyl7dC5iZWdpblBhdGgoKSx0Lm1vdmVUbyh0aGlzLmZyb21Qb2ludC54LHRoaXMuZnJvbVBvaW50LnkpLG51bGwhPWkmJm51bGwhPWkueD9udWxsIT1vJiZudWxsIT1vLng/dC5iZXppZXJDdXJ2ZVRvKGkueCxpLnksby54LG8ueSx0aGlzLnRvUG9pbnQueCx0aGlzLnRvUG9pbnQueSk6dC5xdWFkcmF0aWNDdXJ2ZVRvKGkueCxpLnksdGhpcy50b1BvaW50LngsdGhpcy50b1BvaW50LnkpOnQubGluZVRvKHRoaXMudG9Qb2ludC54LHRoaXMudG9Qb2ludC55KSx0aGlzLmRyYXdCYWNrZ3JvdW5kKHQsZSksdGhpcy5lbmFibGVTaGFkb3codCxlKSx0LnN0cm9rZSgpLHRoaXMuZGlzYWJsZVNoYWRvdyh0LGUpfX0se2tleTpcImdldFZpYU5vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9nZXRWaWFDb29yZGluYXRlcygpfX1dKSxpfSh1eCk7ZnVuY3Rpb24geXgodCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgbXg9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT15eChpKTtmdW5jdGlvbiBpKHQsbyxuKXt2YXIgcjtyZXR1cm4gWGwodGhpcyxpKSwocj1lLmNhbGwodGhpcyx0LG8sbikpLnZpYT1yLnZpYSxyLl9ib3VuZEZ1bmN0aW9uPWZ1bmN0aW9uKCl7ci5wb3NpdGlvbkJlemllck5vZGUoKX0sci5fYm9keS5lbWl0dGVyLm9uKFwiX3JlcG9zaXRpb25CZXppZXJOb2Rlc1wiLHIuX2JvdW5kRnVuY3Rpb24pLHJ9cmV0dXJuICRsKGksW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7Vl8oSGsoaS5wcm90b3R5cGUpLFwic2V0T3B0aW9uc1wiLHRoaXMpLmNhbGwodGhpcyx0KTt2YXIgZT0hMTt0aGlzLm9wdGlvbnMucGh5c2ljcyE9PXQucGh5c2ljcyYmKGU9ITApLHRoaXMub3B0aW9ucz10LHRoaXMuaWQ9dGhpcy5vcHRpb25zLmlkLHRoaXMuZnJvbT10aGlzLl9ib2R5Lm5vZGVzW3RoaXMub3B0aW9ucy5mcm9tXSx0aGlzLnRvPXRoaXMuX2JvZHkubm9kZXNbdGhpcy5vcHRpb25zLnRvXSx0aGlzLnNldHVwU3VwcG9ydE5vZGUoKSx0aGlzLmNvbm5lY3QoKSwhMD09PWUmJih0aGlzLnZpYS5zZXRPcHRpb25zKHtwaHlzaWNzOnRoaXMub3B0aW9ucy5waHlzaWNzfSksdGhpcy5wb3NpdGlvbkJlemllck5vZGUoKSl9fSx7a2V5OlwiY29ubmVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5mcm9tPXRoaXMuX2JvZHkubm9kZXNbdGhpcy5vcHRpb25zLmZyb21dLHRoaXMudG89dGhpcy5fYm9keS5ub2Rlc1t0aGlzLm9wdGlvbnMudG9dLHZvaWQgMD09PXRoaXMuZnJvbXx8dm9pZCAwPT09dGhpcy50b3x8ITE9PT10aGlzLm9wdGlvbnMucGh5c2ljc3x8dGhpcy5mcm9tLmlkPT09dGhpcy50by5pZD90aGlzLnZpYS5zZXRPcHRpb25zKHtwaHlzaWNzOiExfSk6dGhpcy52aWEuc2V0T3B0aW9ucyh7cGh5c2ljczohMH0pfX0se2tleTpcImNsZWFudXBcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ib2R5LmVtaXR0ZXIub2ZmKFwiX3JlcG9zaXRpb25CZXppZXJOb2Rlc1wiLHRoaXMuX2JvdW5kRnVuY3Rpb24pLHZvaWQgMCE9PXRoaXMudmlhJiYoZGVsZXRlIHRoaXMuX2JvZHkubm9kZXNbdGhpcy52aWEuaWRdLHRoaXMudmlhPXZvaWQgMCwhMCl9fSx7a2V5Olwic2V0dXBTdXBwb3J0Tm9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodm9pZCAwPT09dGhpcy52aWEpe3ZhciB0PVwiZWRnZUlkOlwiK3RoaXMuaWQsZT10aGlzLl9ib2R5LmZ1bmN0aW9ucy5jcmVhdGVOb2RlKHtpZDp0LHNoYXBlOlwiY2lyY2xlXCIscGh5c2ljczohMCxoaWRkZW46ITB9KTt0aGlzLl9ib2R5Lm5vZGVzW3RdPWUsdGhpcy52aWE9ZSx0aGlzLnZpYS5wYXJlbnRFZGdlSWQ9dGhpcy5pZCx0aGlzLnBvc2l0aW9uQmV6aWVyTm9kZSgpfX19LHtrZXk6XCJwb3NpdGlvbkJlemllck5vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZvaWQgMCE9PXRoaXMudmlhJiZ2b2lkIDAhPT10aGlzLmZyb20mJnZvaWQgMCE9PXRoaXMudG8/KHRoaXMudmlhLng9LjUqKHRoaXMuZnJvbS54K3RoaXMudG8ueCksdGhpcy52aWEueT0uNSoodGhpcy5mcm9tLnkrdGhpcy50by55KSk6dm9pZCAwIT09dGhpcy52aWEmJih0aGlzLnZpYS54PTAsdGhpcy52aWEueT0wKX19LHtrZXk6XCJfbGluZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXt0aGlzLl9iZXppZXJDdXJ2ZSh0LGUsaSl9fSx7a2V5OlwiX2dldFZpYUNvb3JkaW5hdGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWF9fSx7a2V5OlwiZ2V0VmlhTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlhfX0se2tleTpcImdldFBvaW50XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMudmlhO2lmKHRoaXMuZnJvbT09PXRoaXMudG8pe3ZhciBpPXRoaXMuX2dldENpcmNsZURhdGEoKSxvPSRjKGksMyksbj1vWzBdLHI9b1sxXSxzPW9bMl0sYT0yKk1hdGguUEkqKDEtdCk7cmV0dXJue3g6bitzKk1hdGguc2luKGEpLHk6citzLXMqKDEtTWF0aC5jb3MoYSkpfX1yZXR1cm57eDpNYXRoLnBvdygxLXQsMikqdGhpcy5mcm9tUG9pbnQueCsyKnQqKDEtdCkqZS54K01hdGgucG93KHQsMikqdGhpcy50b1BvaW50LngseTpNYXRoLnBvdygxLXQsMikqdGhpcy5mcm9tUG9pbnQueSsyKnQqKDEtdCkqZS55K01hdGgucG93KHQsMikqdGhpcy50b1BvaW50Lnl9fX0se2tleTpcIl9maW5kQm9yZGVyUG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9maW5kQm9yZGVyUG9zaXRpb25CZXppZXIodCxlLHRoaXMudmlhKX19LHtrZXk6XCJfZ2V0RGlzdGFuY2VUb0VkZ2VcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7cmV0dXJuIHRoaXMuX2dldERpc3RhbmNlVG9CZXppZXJFZGdlKHQsZSxpLG8sbixyLHRoaXMudmlhKX19XSksaX0oZ3gpO2Z1bmN0aW9uIGJ4KHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyIHd4PWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9YngoaSk7ZnVuY3Rpb24gaSh0LG8sbil7cmV0dXJuIFhsKHRoaXMsaSksZS5jYWxsKHRoaXMsdCxvLG4pfXJldHVybiAkbChpLFt7a2V5OlwiX2xpbmVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dGhpcy5fYmV6aWVyQ3VydmUodCxlLGkpfX0se2tleTpcImdldFZpYU5vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9nZXRWaWFDb29yZGluYXRlcygpfX0se2tleTpcIl9nZXRWaWFDb29yZGluYXRlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZSxpPXRoaXMub3B0aW9ucy5zbW9vdGgucm91bmRuZXNzLG89dGhpcy5vcHRpb25zLnNtb290aC50eXBlLG49TWF0aC5hYnModGhpcy5mcm9tLngtdGhpcy50by54KSxyPU1hdGguYWJzKHRoaXMuZnJvbS55LXRoaXMudG8ueSk7aWYoXCJkaXNjcmV0ZVwiPT09b3x8XCJkaWFnb25hbENyb3NzXCI9PT1vKXt2YXIgcyxhO3M9YT1uPD1yP2kqcjppKm4sdGhpcy5mcm9tLng+dGhpcy50by54JiYocz0tcyksdGhpcy5mcm9tLnk+PXRoaXMudG8ueSYmKGE9LWEpO3ZhciBoPXRoaXMuZnJvbS54K3MsZD10aGlzLmZyb20ueSthO3JldHVyblwiZGlzY3JldGVcIj09PW8mJihuPD1yP2g9bjxpKnI/dGhpcy5mcm9tLng6aDpkPXI8aSpuP3RoaXMuZnJvbS55OmQpLHt4OmgseTpkfX1pZihcInN0cmFpZ2h0Q3Jvc3NcIj09PW8pe3ZhciBsPSgxLWkpKm4sYz0oMS1pKSpyO3JldHVybiBuPD1yPyhsPTAsdGhpcy5mcm9tLnk8dGhpcy50by55JiYoYz0tYykpOih0aGlzLmZyb20ueDx0aGlzLnRvLngmJihsPS1sKSxjPTApLHt4OnRoaXMudG8ueCtsLHk6dGhpcy50by55K2N9fWlmKFwiaG9yaXpvbnRhbFwiPT09byl7dmFyIHU9KDEtaSkqbjtyZXR1cm4gdGhpcy5mcm9tLng8dGhpcy50by54JiYodT0tdSkse3g6dGhpcy50by54K3UseTp0aGlzLmZyb20ueX19aWYoXCJ2ZXJ0aWNhbFwiPT09byl7dmFyIGY9KDEtaSkqcjtyZXR1cm4gdGhpcy5mcm9tLnk8dGhpcy50by55JiYoZj0tZikse3g6dGhpcy5mcm9tLngseTp0aGlzLnRvLnkrZn19aWYoXCJjdXJ2ZWRDV1wiPT09byl7bj10aGlzLnRvLngtdGhpcy5mcm9tLngscj10aGlzLmZyb20ueS10aGlzLnRvLnk7dmFyIHA9TWF0aC5zcXJ0KG4qbityKnIpLHY9TWF0aC5QSSxnPShNYXRoLmF0YW4yKHIsbikrKC41KmkrLjUpKnYpJSgyKnYpO3JldHVybnt4OnRoaXMuZnJvbS54KyguNSppKy41KSpwKk1hdGguc2luKGcpLHk6dGhpcy5mcm9tLnkrKC41KmkrLjUpKnAqTWF0aC5jb3MoZyl9fWlmKFwiY3VydmVkQ0NXXCI9PT1vKXtuPXRoaXMudG8ueC10aGlzLmZyb20ueCxyPXRoaXMuZnJvbS55LXRoaXMudG8ueTt2YXIgeT1NYXRoLnNxcnQobipuK3IqciksbT1NYXRoLlBJLGI9KE1hdGguYXRhbjIocixuKSsoLjUqLWkrLjUpKm0pJSgyKm0pO3JldHVybnt4OnRoaXMuZnJvbS54KyguNSppKy41KSp5Kk1hdGguc2luKGIpLHk6dGhpcy5mcm9tLnkrKC41KmkrLjUpKnkqTWF0aC5jb3MoYil9fXQ9ZT1uPD1yP2kqcjppKm4sdGhpcy5mcm9tLng+dGhpcy50by54JiYodD0tdCksdGhpcy5mcm9tLnk+PXRoaXMudG8ueSYmKGU9LWUpO3ZhciB3PXRoaXMuZnJvbS54K3Qsaz10aGlzLmZyb20ueStlO3JldHVybiBuPD1yP3c9dGhpcy5mcm9tLng8PXRoaXMudG8ueD90aGlzLnRvLng8dz90aGlzLnRvLng6dzp0aGlzLnRvLng+dz90aGlzLnRvLng6dzprPXRoaXMuZnJvbS55Pj10aGlzLnRvLnk/dGhpcy50by55Pms/dGhpcy50by55Oms6dGhpcy50by55PGs/dGhpcy50by55Omsse3g6dyx5Omt9fX0se2tleTpcIl9maW5kQm9yZGVyUG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtyZXR1cm4gdGhpcy5fZmluZEJvcmRlclBvc2l0aW9uQmV6aWVyKHQsZSxpLnZpYSl9fSx7a2V5OlwiX2dldERpc3RhbmNlVG9FZGdlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyxuLHIpe3ZhciBzPWFyZ3VtZW50cy5sZW5ndGg+NiYmdm9pZCAwIT09YXJndW1lbnRzWzZdP2FyZ3VtZW50c1s2XTp0aGlzLl9nZXRWaWFDb29yZGluYXRlcygpO3JldHVybiB0aGlzLl9nZXREaXN0YW5jZVRvQmV6aWVyRWRnZSh0LGUsaSxvLG4scixzKX19LHtrZXk6XCJnZXRQb2ludFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLl9nZXRWaWFDb29yZGluYXRlcygpLGk9dCxvPU1hdGgucG93KDEtaSwyKSp0aGlzLmZyb21Qb2ludC54KzIqaSooMS1pKSplLngrTWF0aC5wb3coaSwyKSp0aGlzLnRvUG9pbnQueCxuPU1hdGgucG93KDEtaSwyKSp0aGlzLmZyb21Qb2ludC55KzIqaSooMS1pKSplLnkrTWF0aC5wb3coaSwyKSp0aGlzLnRvUG9pbnQueTtyZXR1cm57eDpvLHk6bn19fV0pLGl9KGd4KTtmdW5jdGlvbiBreCh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBfeD1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPWt4KGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcIl9nZXREaXN0YW5jZVRvQmV6aWVyRWRnZTJcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scixzLGEpe2Zvcih2YXIgaD0xZTksZD10LGw9ZSxjPVswLDAsMCwwXSx1PTE7dTwxMDt1Kyspe3ZhciBmPS4xKnU7Y1swXT1NYXRoLnBvdygxLWYsMyksY1sxXT0zKmYqTWF0aC5wb3coMS1mLDIpLGNbMl09MypNYXRoLnBvdyhmLDIpKigxLWYpLGNbM109TWF0aC5wb3coZiwzKTt2YXIgcD1jWzBdKnQrY1sxXSpzLngrY1syXSphLngrY1szXSppLHY9Y1swXSplK2NbMV0qcy55K2NbMl0qYS55K2NbM10qbztpZih1PjApe3ZhciBnPXRoaXMuX2dldERpc3RhbmNlVG9MaW5lKGQsbCxwLHYsbixyKTtoPWc8aD9nOmh9ZD1wLGw9dn1yZXR1cm4gaH19XSksaX0oZ3gpO2Z1bmN0aW9uIHh4KHQpe3ZhciBlPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCF6aylyZXR1cm4hMTtpZih6ay5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHprKEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGksbz1Iayh0KTtpZihlKXt2YXIgbj1Iayh0aGlzKS5jb25zdHJ1Y3RvcjtpPXprKG8sYXJndW1lbnRzLG4pfWVsc2UgaT1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gamsodGhpcyxpKX19dmFyIEV4PWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9eHgoaSk7ZnVuY3Rpb24gaSh0LG8sbil7cmV0dXJuIFhsKHRoaXMsaSksZS5jYWxsKHRoaXMsdCxvLG4pfXJldHVybiAkbChpLFt7a2V5OlwiX2xpbmVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89aVswXSxuPWlbMV07dGhpcy5fYmV6aWVyQ3VydmUodCxlLG8sbil9fSx7a2V5OlwiX2dldFZpYUNvb3JkaW5hdGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlLGksbyxuPXRoaXMuZnJvbS54LXRoaXMudG8ueCxyPXRoaXMuZnJvbS55LXRoaXMudG8ueSxzPXRoaXMub3B0aW9ucy5zbW9vdGgucm91bmRuZXNzO3JldHVybihNYXRoLmFicyhuKT5NYXRoLmFicyhyKXx8ITA9PT10aGlzLm9wdGlvbnMuc21vb3RoLmZvcmNlRGlyZWN0aW9ufHxcImhvcml6b250YWxcIj09PXRoaXMub3B0aW9ucy5zbW9vdGguZm9yY2VEaXJlY3Rpb24pJiZcInZlcnRpY2FsXCIhPT10aGlzLm9wdGlvbnMuc21vb3RoLmZvcmNlRGlyZWN0aW9uPyhlPXRoaXMuZnJvbS55LG89dGhpcy50by55LHQ9dGhpcy5mcm9tLngtcypuLGk9dGhpcy50by54K3Mqbik6KGU9dGhpcy5mcm9tLnktcypyLG89dGhpcy50by55K3Mqcix0PXRoaXMuZnJvbS54LGk9dGhpcy50by54KSxbe3g6dCx5OmV9LHt4OmkseTpvfV19fSx7a2V5OlwiZ2V0VmlhTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2dldFZpYUNvb3JkaW5hdGVzKCl9fSx7a2V5OlwiX2ZpbmRCb3JkZXJQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2ZpbmRCb3JkZXJQb3NpdGlvbkJlemllcih0LGUpfX0se2tleTpcIl9nZXREaXN0YW5jZVRvRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbixyKXt2YXIgcz1hcmd1bWVudHMubGVuZ3RoPjYmJnZvaWQgMCE9PWFyZ3VtZW50c1s2XT9hcmd1bWVudHNbNl06dGhpcy5fZ2V0VmlhQ29vcmRpbmF0ZXMoKSxhPSRjKHMsMiksaD1hWzBdLGQ9YVsxXTtyZXR1cm4gdGhpcy5fZ2V0RGlzdGFuY2VUb0JlemllckVkZ2UyKHQsZSxpLG8sbixyLGgsZCl9fSx7a2V5OlwiZ2V0UG9pbnRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5fZ2V0VmlhQ29vcmRpbmF0ZXMoKSxpPSRjKGUsMiksbz1pWzBdLG49aVsxXSxyPXQscz1bTWF0aC5wb3coMS1yLDMpLDMqcipNYXRoLnBvdygxLXIsMiksMypNYXRoLnBvdyhyLDIpKigxLXIpLE1hdGgucG93KHIsMyldLGE9c1swXSp0aGlzLmZyb21Qb2ludC54K3NbMV0qby54K3NbMl0qbi54K3NbM10qdGhpcy50b1BvaW50LngsaD1zWzBdKnRoaXMuZnJvbVBvaW50Lnkrc1sxXSpvLnkrc1syXSpuLnkrc1szXSp0aGlzLnRvUG9pbnQueTtyZXR1cm57eDphLHk6aH19fV0pLGl9KF94KTtmdW5jdGlvbiBPeCh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBDeD1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPU94KGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcIl9saW5lXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0LmJlZ2luUGF0aCgpLHQubW92ZVRvKHRoaXMuZnJvbVBvaW50LngsdGhpcy5mcm9tUG9pbnQueSksdC5saW5lVG8odGhpcy50b1BvaW50LngsdGhpcy50b1BvaW50LnkpLHRoaXMuZW5hYmxlU2hhZG93KHQsZSksdC5zdHJva2UoKSx0aGlzLmRpc2FibGVTaGFkb3codCxlKX19LHtrZXk6XCJnZXRWaWFOb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OlwiZ2V0UG9pbnRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm57eDooMS10KSp0aGlzLmZyb21Qb2ludC54K3QqdGhpcy50b1BvaW50LngseTooMS10KSp0aGlzLmZyb21Qb2ludC55K3QqdGhpcy50b1BvaW50Lnl9fX0se2tleTpcIl9maW5kQm9yZGVyUG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMudG8sbz10aGlzLmZyb207dC5pZD09PXRoaXMuZnJvbS5pZCYmKGk9dGhpcy5mcm9tLG89dGhpcy50byk7dmFyIG49TWF0aC5hdGFuMihpLnktby55LGkueC1vLngpLHI9aS54LW8ueCxzPWkueS1vLnksYT1NYXRoLnNxcnQocipyK3MqcyksaD0oYS10LmRpc3RhbmNlVG9Cb3JkZXIoZSxuKSkvYTtyZXR1cm57eDooMS1oKSpvLngraCppLngseTooMS1oKSpvLnkraCppLnksdDowfX19LHtrZXk6XCJfZ2V0RGlzdGFuY2VUb0VkZ2VcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4scil7cmV0dXJuIHRoaXMuX2dldERpc3RhbmNlVG9MaW5lKHQsZSxpLG8sbixyKX19XSksaX0odXgpLFN4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyxuLHIpe2lmKFhsKHRoaXMsdCksdm9pZCAwPT09aSl0aHJvdyBuZXcgRXJyb3IoXCJObyBib2R5IHByb3ZpZGVkXCIpO3RoaXMub3B0aW9ucz1KeShuKSx0aGlzLmdsb2JhbE9wdGlvbnM9bix0aGlzLmRlZmF1bHRPcHRpb25zPXIsdGhpcy5ib2R5PWksdGhpcy5pbWFnZWxpc3Q9byx0aGlzLmlkPXZvaWQgMCx0aGlzLmZyb21JZD12b2lkIDAsdGhpcy50b0lkPXZvaWQgMCx0aGlzLnNlbGVjdGVkPSExLHRoaXMuaG92ZXI9ITEsdGhpcy5sYWJlbERpcnR5PSEwLHRoaXMuYmFzZVdpZHRoPXRoaXMub3B0aW9ucy53aWR0aCx0aGlzLmJhc2VGb250U2l6ZT10aGlzLm9wdGlvbnMuZm9udC5zaXplLHRoaXMuZnJvbT12b2lkIDAsdGhpcy50bz12b2lkIDAsdGhpcy5lZGdlVHlwZT12b2lkIDAsdGhpcy5jb25uZWN0ZWQ9ITEsdGhpcy5sYWJlbE1vZHVsZT1uZXcgZ2sodGhpcy5ib2R5LHRoaXMub3B0aW9ucywhMCksdGhpcy5zZXRPcHRpb25zKGUpfXJldHVybiAkbCh0LFt7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUpe3ZhciBpPXZvaWQgMCE9PWUucGh5c2ljcyYmdGhpcy5vcHRpb25zLnBoeXNpY3MhPT1lLnBoeXNpY3N8fHZvaWQgMCE9PWUuaGlkZGVuJiYodGhpcy5vcHRpb25zLmhpZGRlbnx8ITEpIT09KGUuaGlkZGVufHwhMSl8fHZvaWQgMCE9PWUuZnJvbSYmdGhpcy5vcHRpb25zLmZyb20hPT1lLmZyb218fHZvaWQgMCE9PWUudG8mJnRoaXMub3B0aW9ucy50byE9PWUudG87dC5wYXJzZU9wdGlvbnModGhpcy5vcHRpb25zLGUsITAsdGhpcy5nbG9iYWxPcHRpb25zKSx2b2lkIDAhPT1lLmlkJiYodGhpcy5pZD1lLmlkKSx2b2lkIDAhPT1lLmZyb20mJih0aGlzLmZyb21JZD1lLmZyb20pLHZvaWQgMCE9PWUudG8mJih0aGlzLnRvSWQ9ZS50byksdm9pZCAwIT09ZS50aXRsZSYmKHRoaXMudGl0bGU9ZS50aXRsZSksdm9pZCAwIT09ZS52YWx1ZSYmKGUudmFsdWU9WXcoZS52YWx1ZSkpO3ZhciBvPVtlLHRoaXMub3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zXTtyZXR1cm4gdGhpcy5jaG9vc2VyPUp3KFwiZWRnZVwiLG8pLHRoaXMudXBkYXRlTGFiZWxNb2R1bGUoZSksaT10aGlzLnVwZGF0ZUVkZ2VUeXBlKCl8fGksdGhpcy5fc2V0SW50ZXJhY3Rpb25XaWR0aHMoKSx0aGlzLmNvbm5lY3QoKSxpfX19LHtrZXk6XCJnZXRGb3JtYXR0aW5nVmFsdWVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD0hMD09PXRoaXMub3B0aW9ucy5hcnJvd3MudG98fCEwPT09dGhpcy5vcHRpb25zLmFycm93cy50by5lbmFibGVkLGU9ITA9PT10aGlzLm9wdGlvbnMuYXJyb3dzLmZyb218fCEwPT09dGhpcy5vcHRpb25zLmFycm93cy5mcm9tLmVuYWJsZWQsaT0hMD09PXRoaXMub3B0aW9ucy5hcnJvd3MubWlkZGxlfHwhMD09PXRoaXMub3B0aW9ucy5hcnJvd3MubWlkZGxlLmVuYWJsZWQsbz10aGlzLm9wdGlvbnMuY29sb3IuaW5oZXJpdCxuPXt0b0Fycm93OnQsdG9BcnJvd1NjYWxlOnRoaXMub3B0aW9ucy5hcnJvd3MudG8uc2NhbGVGYWN0b3IsdG9BcnJvd1R5cGU6dGhpcy5vcHRpb25zLmFycm93cy50by50eXBlLHRvQXJyb3dTcmM6dGhpcy5vcHRpb25zLmFycm93cy50by5zcmMsdG9BcnJvd0ltYWdlV2lkdGg6dGhpcy5vcHRpb25zLmFycm93cy50by5pbWFnZVdpZHRoLHRvQXJyb3dJbWFnZUhlaWdodDp0aGlzLm9wdGlvbnMuYXJyb3dzLnRvLmltYWdlSGVpZ2h0LG1pZGRsZUFycm93OmksbWlkZGxlQXJyb3dTY2FsZTp0aGlzLm9wdGlvbnMuYXJyb3dzLm1pZGRsZS5zY2FsZUZhY3RvcixtaWRkbGVBcnJvd1R5cGU6dGhpcy5vcHRpb25zLmFycm93cy5taWRkbGUudHlwZSxtaWRkbGVBcnJvd1NyYzp0aGlzLm9wdGlvbnMuYXJyb3dzLm1pZGRsZS5zcmMsbWlkZGxlQXJyb3dJbWFnZVdpZHRoOnRoaXMub3B0aW9ucy5hcnJvd3MubWlkZGxlLmltYWdlV2lkdGgsbWlkZGxlQXJyb3dJbWFnZUhlaWdodDp0aGlzLm9wdGlvbnMuYXJyb3dzLm1pZGRsZS5pbWFnZUhlaWdodCxmcm9tQXJyb3c6ZSxmcm9tQXJyb3dTY2FsZTp0aGlzLm9wdGlvbnMuYXJyb3dzLmZyb20uc2NhbGVGYWN0b3IsZnJvbUFycm93VHlwZTp0aGlzLm9wdGlvbnMuYXJyb3dzLmZyb20udHlwZSxmcm9tQXJyb3dTcmM6dGhpcy5vcHRpb25zLmFycm93cy5mcm9tLnNyYyxmcm9tQXJyb3dJbWFnZVdpZHRoOnRoaXMub3B0aW9ucy5hcnJvd3MuZnJvbS5pbWFnZVdpZHRoLGZyb21BcnJvd0ltYWdlSGVpZ2h0OnRoaXMub3B0aW9ucy5hcnJvd3MuZnJvbS5pbWFnZUhlaWdodCxhcnJvd1N0cmlrZXRocm91Z2g6dGhpcy5vcHRpb25zLmFycm93U3RyaWtldGhyb3VnaCxjb2xvcjpvP3ZvaWQgMDp0aGlzLm9wdGlvbnMuY29sb3IuY29sb3IsaW5oZXJpdHNDb2xvcjpvLG9wYWNpdHk6dGhpcy5vcHRpb25zLmNvbG9yLm9wYWNpdHksaGlkZGVuOnRoaXMub3B0aW9ucy5oaWRkZW4sbGVuZ3RoOnRoaXMub3B0aW9ucy5sZW5ndGgsc2hhZG93OnRoaXMub3B0aW9ucy5zaGFkb3cuZW5hYmxlZCxzaGFkb3dDb2xvcjp0aGlzLm9wdGlvbnMuc2hhZG93LmNvbG9yLHNoYWRvd1NpemU6dGhpcy5vcHRpb25zLnNoYWRvdy5zaXplLHNoYWRvd1g6dGhpcy5vcHRpb25zLnNoYWRvdy54LHNoYWRvd1k6dGhpcy5vcHRpb25zLnNoYWRvdy55LGRhc2hlczp0aGlzLm9wdGlvbnMuZGFzaGVzLHdpZHRoOnRoaXMub3B0aW9ucy53aWR0aCxiYWNrZ3JvdW5kOnRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kLmVuYWJsZWQsYmFja2dyb3VuZENvbG9yOnRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kLmNvbG9yLGJhY2tncm91bmRTaXplOnRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kLnNpemUsYmFja2dyb3VuZERhc2hlczp0aGlzLm9wdGlvbnMuYmFja2dyb3VuZC5kYXNoZXN9O2lmKHRoaXMuc2VsZWN0ZWR8fHRoaXMuaG92ZXIpaWYoITA9PT10aGlzLmNob29zZXIpe2lmKHRoaXMuc2VsZWN0ZWQpe3ZhciByPXRoaXMub3B0aW9ucy5zZWxlY3Rpb25XaWR0aDtcImZ1bmN0aW9uXCI9PXR5cGVvZiByP24ud2lkdGg9cihuLndpZHRoKTpcIm51bWJlclwiPT10eXBlb2YgciYmKG4ud2lkdGgrPXIpLG4ud2lkdGg9TWF0aC5tYXgobi53aWR0aCwuMy90aGlzLmJvZHkudmlldy5zY2FsZSksbi5jb2xvcj10aGlzLm9wdGlvbnMuY29sb3IuaGlnaGxpZ2h0LG4uc2hhZG93PXRoaXMub3B0aW9ucy5zaGFkb3cuZW5hYmxlZH1lbHNlIGlmKHRoaXMuaG92ZXIpe3ZhciBzPXRoaXMub3B0aW9ucy5ob3ZlcldpZHRoO1wiZnVuY3Rpb25cIj09dHlwZW9mIHM/bi53aWR0aD1zKG4ud2lkdGgpOlwibnVtYmVyXCI9PXR5cGVvZiBzJiYobi53aWR0aCs9cyksbi53aWR0aD1NYXRoLm1heChuLndpZHRoLC4zL3RoaXMuYm9keS52aWV3LnNjYWxlKSxuLmNvbG9yPXRoaXMub3B0aW9ucy5jb2xvci5ob3ZlcixuLnNoYWRvdz10aGlzLm9wdGlvbnMuc2hhZG93LmVuYWJsZWR9fWVsc2VcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNob29zZXImJih0aGlzLmNob29zZXIobix0aGlzLm9wdGlvbnMuaWQsdGhpcy5zZWxlY3RlZCx0aGlzLmhvdmVyKSx2b2lkIDAhPT1uLmNvbG9yJiYobi5pbmhlcml0c0NvbG9yPSExKSwhMT09PW4uc2hhZG93JiYobi5zaGFkb3dDb2xvcj09PXRoaXMub3B0aW9ucy5zaGFkb3cuY29sb3ImJm4uc2hhZG93U2l6ZT09PXRoaXMub3B0aW9ucy5zaGFkb3cuc2l6ZSYmbi5zaGFkb3dYPT09dGhpcy5vcHRpb25zLnNoYWRvdy54JiZuLnNoYWRvd1k9PT10aGlzLm9wdGlvbnMuc2hhZG93Lnl8fChuLnNoYWRvdz0hMCkpKTtlbHNlIG4uc2hhZG93PXRoaXMub3B0aW9ucy5zaGFkb3cuZW5hYmxlZCxuLndpZHRoPU1hdGgubWF4KG4ud2lkdGgsLjMvdGhpcy5ib2R5LnZpZXcuc2NhbGUpO3JldHVybiBufX0se2tleTpcInVwZGF0ZUxhYmVsTW9kdWxlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9W3QsdGhpcy5vcHRpb25zLHRoaXMuZ2xvYmFsT3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zXTt0aGlzLmxhYmVsTW9kdWxlLnVwZGF0ZSh0aGlzLm9wdGlvbnMsZSksdm9pZCAwIT09dGhpcy5sYWJlbE1vZHVsZS5iYXNlU2l6ZSYmKHRoaXMuYmFzZUZvbnRTaXplPXRoaXMubGFiZWxNb2R1bGUuYmFzZVNpemUpfX0se2tleTpcInVwZGF0ZUVkZ2VUeXBlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMuc21vb3RoLGU9ITEsaT0hMDtyZXR1cm4gdm9pZCAwIT09dGhpcy5lZGdlVHlwZSYmKCh0aGlzLmVkZ2VUeXBlIGluc3RhbmNlb2YgbXgmJiEwPT09dC5lbmFibGVkJiZcImR5bmFtaWNcIj09PXQudHlwZXx8dGhpcy5lZGdlVHlwZSBpbnN0YW5jZW9mIEV4JiYhMD09PXQuZW5hYmxlZCYmXCJjdWJpY0JlemllclwiPT09dC50eXBlfHx0aGlzLmVkZ2VUeXBlIGluc3RhbmNlb2Ygd3gmJiEwPT09dC5lbmFibGVkJiZcImR5bmFtaWNcIiE9PXQudHlwZSYmXCJjdWJpY0JlemllclwiIT09dC50eXBlfHx0aGlzLmVkZ2VUeXBlIGluc3RhbmNlb2YgQ3gmJiExPT09dC50eXBlLmVuYWJsZWQpJiYoaT0hMSksITA9PT1pJiYoZT10aGlzLmNsZWFudXAoKSkpLCEwPT09aT8hMD09PXQuZW5hYmxlZD9cImR5bmFtaWNcIj09PXQudHlwZT8oZT0hMCx0aGlzLmVkZ2VUeXBlPW5ldyBteCh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpKTpcImN1YmljQmV6aWVyXCI9PT10LnR5cGU/dGhpcy5lZGdlVHlwZT1uZXcgRXgodGhpcy5vcHRpb25zLHRoaXMuYm9keSx0aGlzLmxhYmVsTW9kdWxlKTp0aGlzLmVkZ2VUeXBlPW5ldyB3eCh0aGlzLm9wdGlvbnMsdGhpcy5ib2R5LHRoaXMubGFiZWxNb2R1bGUpOnRoaXMuZWRnZVR5cGU9bmV3IEN4KHRoaXMub3B0aW9ucyx0aGlzLmJvZHksdGhpcy5sYWJlbE1vZHVsZSk6dGhpcy5lZGdlVHlwZS5zZXRPcHRpb25zKHRoaXMub3B0aW9ucyksZX19LHtrZXk6XCJjb25uZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmRpc2Nvbm5lY3QoKSx0aGlzLmZyb209dGhpcy5ib2R5Lm5vZGVzW3RoaXMuZnJvbUlkXXx8dm9pZCAwLHRoaXMudG89dGhpcy5ib2R5Lm5vZGVzW3RoaXMudG9JZF18fHZvaWQgMCx0aGlzLmNvbm5lY3RlZD12b2lkIDAhPT10aGlzLmZyb20mJnZvaWQgMCE9PXRoaXMudG8sITA9PT10aGlzLmNvbm5lY3RlZD8odGhpcy5mcm9tLmF0dGFjaEVkZ2UodGhpcyksdGhpcy50by5hdHRhY2hFZGdlKHRoaXMpKToodGhpcy5mcm9tJiZ0aGlzLmZyb20uZGV0YWNoRWRnZSh0aGlzKSx0aGlzLnRvJiZ0aGlzLnRvLmRldGFjaEVkZ2UodGhpcykpLHRoaXMuZWRnZVR5cGUuY29ubmVjdCgpfX0se2tleTpcImRpc2Nvbm5lY3RcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuZnJvbSYmKHRoaXMuZnJvbS5kZXRhY2hFZGdlKHRoaXMpLHRoaXMuZnJvbT12b2lkIDApLHRoaXMudG8mJih0aGlzLnRvLmRldGFjaEVkZ2UodGhpcyksdGhpcy50bz12b2lkIDApLHRoaXMuY29ubmVjdGVkPSExfX0se2tleTpcImdldFRpdGxlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aXRsZX19LHtrZXk6XCJpc1NlbGVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3RlZH19LHtrZXk6XCJnZXRWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZX19LHtrZXk6XCJzZXRWYWx1ZVJhbmdlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe2lmKHZvaWQgMCE9PXRoaXMub3B0aW9ucy52YWx1ZSl7dmFyIG89dGhpcy5vcHRpb25zLnNjYWxpbmcuY3VzdG9tU2NhbGluZ0Z1bmN0aW9uKHQsZSxpLHRoaXMub3B0aW9ucy52YWx1ZSksbj10aGlzLm9wdGlvbnMuc2NhbGluZy5tYXgtdGhpcy5vcHRpb25zLnNjYWxpbmcubWluO2lmKCEwPT09dGhpcy5vcHRpb25zLnNjYWxpbmcubGFiZWwuZW5hYmxlZCl7dmFyIHI9dGhpcy5vcHRpb25zLnNjYWxpbmcubGFiZWwubWF4LXRoaXMub3B0aW9ucy5zY2FsaW5nLmxhYmVsLm1pbjt0aGlzLm9wdGlvbnMuZm9udC5zaXplPXRoaXMub3B0aW9ucy5zY2FsaW5nLmxhYmVsLm1pbitvKnJ9dGhpcy5vcHRpb25zLndpZHRoPXRoaXMub3B0aW9ucy5zY2FsaW5nLm1pbitvKm59ZWxzZSB0aGlzLm9wdGlvbnMud2lkdGg9dGhpcy5iYXNlV2lkdGgsdGhpcy5vcHRpb25zLmZvbnQuc2l6ZT10aGlzLmJhc2VGb250U2l6ZTt0aGlzLl9zZXRJbnRlcmFjdGlvbldpZHRocygpLHRoaXMudXBkYXRlTGFiZWxNb2R1bGUoKX19LHtrZXk6XCJfc2V0SW50ZXJhY3Rpb25XaWR0aHNcIix2YWx1ZTpmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMub3B0aW9ucy5ob3ZlcldpZHRoP3RoaXMuZWRnZVR5cGUuaG92ZXJXaWR0aD10aGlzLm9wdGlvbnMuaG92ZXJXaWR0aCh0aGlzLm9wdGlvbnMud2lkdGgpOnRoaXMuZWRnZVR5cGUuaG92ZXJXaWR0aD10aGlzLm9wdGlvbnMuaG92ZXJXaWR0aCt0aGlzLm9wdGlvbnMud2lkdGgsXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zLnNlbGVjdGlvbldpZHRoP3RoaXMuZWRnZVR5cGUuc2VsZWN0aW9uV2lkdGg9dGhpcy5vcHRpb25zLnNlbGVjdGlvbldpZHRoKHRoaXMub3B0aW9ucy53aWR0aCk6dGhpcy5lZGdlVHlwZS5zZWxlY3Rpb25XaWR0aD10aGlzLm9wdGlvbnMuc2VsZWN0aW9uV2lkdGgrdGhpcy5vcHRpb25zLndpZHRofX0se2tleTpcImRyYXdcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEZvcm1hdHRpbmdWYWx1ZXMoKTtpZighZS5oaWRkZW4pe3ZhciBpPXRoaXMuZWRnZVR5cGUuZ2V0VmlhTm9kZSgpO3RoaXMuZWRnZVR5cGUuZHJhd0xpbmUodCxlLHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixpKSx0aGlzLmRyYXdMYWJlbCh0LGkpfX19LHtrZXk6XCJkcmF3QXJyb3dzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRGb3JtYXR0aW5nVmFsdWVzKCk7aWYoIWUuaGlkZGVuKXt2YXIgaT10aGlzLmVkZ2VUeXBlLmdldFZpYU5vZGUoKSxvPXt9O3RoaXMuZWRnZVR5cGUuZnJvbVBvaW50PXRoaXMuZWRnZVR5cGUuZnJvbSx0aGlzLmVkZ2VUeXBlLnRvUG9pbnQ9dGhpcy5lZGdlVHlwZS50byxlLmZyb21BcnJvdyYmKG8uZnJvbT10aGlzLmVkZ2VUeXBlLmdldEFycm93RGF0YSh0LFwiZnJvbVwiLGksdGhpcy5zZWxlY3RlZCx0aGlzLmhvdmVyLGUpLCExPT09ZS5hcnJvd1N0cmlrZXRocm91Z2gmJih0aGlzLmVkZ2VUeXBlLmZyb21Qb2ludD1vLmZyb20uY29yZSksZS5mcm9tQXJyb3dTcmMmJihvLmZyb20uaW1hZ2U9dGhpcy5pbWFnZWxpc3QubG9hZChlLmZyb21BcnJvd1NyYykpLGUuZnJvbUFycm93SW1hZ2VXaWR0aCYmKG8uZnJvbS5pbWFnZVdpZHRoPWUuZnJvbUFycm93SW1hZ2VXaWR0aCksZS5mcm9tQXJyb3dJbWFnZUhlaWdodCYmKG8uZnJvbS5pbWFnZUhlaWdodD1lLmZyb21BcnJvd0ltYWdlSGVpZ2h0KSksZS50b0Fycm93JiYoby50bz10aGlzLmVkZ2VUeXBlLmdldEFycm93RGF0YSh0LFwidG9cIixpLHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixlKSwhMT09PWUuYXJyb3dTdHJpa2V0aHJvdWdoJiYodGhpcy5lZGdlVHlwZS50b1BvaW50PW8udG8uY29yZSksZS50b0Fycm93U3JjJiYoby50by5pbWFnZT10aGlzLmltYWdlbGlzdC5sb2FkKGUudG9BcnJvd1NyYykpLGUudG9BcnJvd0ltYWdlV2lkdGgmJihvLnRvLmltYWdlV2lkdGg9ZS50b0Fycm93SW1hZ2VXaWR0aCksZS50b0Fycm93SW1hZ2VIZWlnaHQmJihvLnRvLmltYWdlSGVpZ2h0PWUudG9BcnJvd0ltYWdlSGVpZ2h0KSksZS5taWRkbGVBcnJvdyYmKG8ubWlkZGxlPXRoaXMuZWRnZVR5cGUuZ2V0QXJyb3dEYXRhKHQsXCJtaWRkbGVcIixpLHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixlKSxlLm1pZGRsZUFycm93U3JjJiYoby5taWRkbGUuaW1hZ2U9dGhpcy5pbWFnZWxpc3QubG9hZChlLm1pZGRsZUFycm93U3JjKSksZS5taWRkbGVBcnJvd0ltYWdlV2lkdGgmJihvLm1pZGRsZS5pbWFnZVdpZHRoPWUubWlkZGxlQXJyb3dJbWFnZVdpZHRoKSxlLm1pZGRsZUFycm93SW1hZ2VIZWlnaHQmJihvLm1pZGRsZS5pbWFnZUhlaWdodD1lLm1pZGRsZUFycm93SW1hZ2VIZWlnaHQpKSxlLmZyb21BcnJvdyYmdGhpcy5lZGdlVHlwZS5kcmF3QXJyb3dIZWFkKHQsZSx0aGlzLnNlbGVjdGVkLHRoaXMuaG92ZXIsby5mcm9tKSxlLm1pZGRsZUFycm93JiZ0aGlzLmVkZ2VUeXBlLmRyYXdBcnJvd0hlYWQodCxlLHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixvLm1pZGRsZSksZS50b0Fycm93JiZ0aGlzLmVkZ2VUeXBlLmRyYXdBcnJvd0hlYWQodCxlLHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcixvLnRvKX19fSx7a2V5OlwiZHJhd0xhYmVsXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZih2b2lkIDAhPT10aGlzLm9wdGlvbnMubGFiZWwpe3ZhciBpLG89dGhpcy5mcm9tLG49dGhpcy50bztpZih0aGlzLmxhYmVsTW9kdWxlLmRpZmZlcmVudFN0YXRlKHRoaXMuc2VsZWN0ZWQsdGhpcy5ob3ZlcikmJnRoaXMubGFiZWxNb2R1bGUuZ2V0VGV4dFNpemUodCx0aGlzLnNlbGVjdGVkLHRoaXMuaG92ZXIpLG8uaWQhPW4uaWQpe3RoaXMubGFiZWxNb2R1bGUucG9pbnRUb1NlbGY9ITEsaT10aGlzLmVkZ2VUeXBlLmdldFBvaW50KC41LGUpLHQuc2F2ZSgpO3ZhciByPXRoaXMuX2dldFJvdGF0aW9uKHQpOzAhPXIuYW5nbGUmJih0LnRyYW5zbGF0ZShyLngsci55KSx0LnJvdGF0ZShyLmFuZ2xlKSksdGhpcy5sYWJlbE1vZHVsZS5kcmF3KHQsaS54LGkueSx0aGlzLnNlbGVjdGVkLHRoaXMuaG92ZXIpLHQucmVzdG9yZSgpfWVsc2V7dGhpcy5sYWJlbE1vZHVsZS5wb2ludFRvU2VsZj0hMDt2YXIgcz1payh0LHRoaXMub3B0aW9ucy5zZWxmUmVmZXJlbmNlLmFuZ2xlLHRoaXMub3B0aW9ucy5zZWxmUmVmZXJlbmNlLnNpemUsbyk7aT10aGlzLl9wb2ludE9uQ2lyY2xlKHMueCxzLnksdGhpcy5vcHRpb25zLnNlbGZSZWZlcmVuY2Uuc2l6ZSx0aGlzLm9wdGlvbnMuc2VsZlJlZmVyZW5jZS5hbmdsZSksdGhpcy5sYWJlbE1vZHVsZS5kcmF3KHQsaS54LGkueSx0aGlzLnNlbGVjdGVkLHRoaXMuaG92ZXIpfX19fSx7a2V5OlwiZ2V0SXRlbXNPblBvaW50XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9W107aWYodGhpcy5sYWJlbE1vZHVsZS52aXNpYmxlKCkpe3ZhciBpPXRoaXMuX2dldFJvdGF0aW9uKCk7dGsodGhpcy5sYWJlbE1vZHVsZS5nZXRTaXplKCksdCxpKSYmZS5wdXNoKHtlZGdlSWQ6dGhpcy5pZCxsYWJlbElkOjB9KX12YXIgbz17bGVmdDp0LngsdG9wOnQueX07cmV0dXJuIHRoaXMuaXNPdmVybGFwcGluZ1dpdGgobykmJmUucHVzaCh7ZWRnZUlkOnRoaXMuaWR9KSxlfX0se2tleTpcImlzT3ZlcmxhcHBpbmdXaXRoXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy5jb25uZWN0ZWQpe3ZhciBlPXRoaXMuZnJvbS54LGk9dGhpcy5mcm9tLnksbz10aGlzLnRvLngsbj10aGlzLnRvLnkscj10LmxlZnQscz10LnRvcDtyZXR1cm4gdGhpcy5lZGdlVHlwZS5nZXREaXN0YW5jZVRvRWRnZShlLGksbyxuLHIscyk8MTB9cmV0dXJuITF9fSx7a2V5OlwiX2dldFJvdGF0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5lZGdlVHlwZS5nZXRWaWFOb2RlKCksaT10aGlzLmVkZ2VUeXBlLmdldFBvaW50KC41LGUpO3ZvaWQgMCE9PXQmJnRoaXMubGFiZWxNb2R1bGUuY2FsY3VsYXRlTGFiZWxTaXplKHQsdGhpcy5zZWxlY3RlZCx0aGlzLmhvdmVyLGkueCxpLnkpO3ZhciBvPXt4OmkueCx5OnRoaXMubGFiZWxNb2R1bGUuc2l6ZS55TGluZSxhbmdsZTowfTtpZighdGhpcy5sYWJlbE1vZHVsZS52aXNpYmxlKCkpcmV0dXJuIG87aWYoXCJob3Jpem9udGFsXCI9PT10aGlzLm9wdGlvbnMuZm9udC5hbGlnbilyZXR1cm4gbzt2YXIgbj10aGlzLmZyb20ueS10aGlzLnRvLnkscj10aGlzLmZyb20ueC10aGlzLnRvLngscz1NYXRoLmF0YW4yKG4scik7cmV0dXJuKHM8LTEmJnI8MHx8cz4wJiZyPDApJiYocys9TWF0aC5QSSksby5hbmdsZT1zLG99fSx7a2V5OlwiX3BvaW50T25DaXJjbGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvKXtyZXR1cm57eDp0K2kqTWF0aC5jb3MobykseTplLWkqTWF0aC5zaW4obyl9fX0se2tleTpcInNlbGVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RlZD0hMH19LHtrZXk6XCJ1bnNlbGVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RlZD0hMX19LHtrZXk6XCJjbGVhbnVwXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlVHlwZS5jbGVhbnVwKCl9fSx7a2V5OlwicmVtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNsZWFudXAoKSx0aGlzLmRpc2Nvbm5lY3QoKSxkZWxldGUgdGhpcy5ib2R5LmVkZ2VzW3RoaXMuaWRdfX0se2tleTpcImVuZFBvaW50c1ZhbGlkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5ib2R5Lm5vZGVzW3RoaXMuZnJvbUlkXSYmdm9pZCAwIT09dGhpcy5ib2R5Lm5vZGVzW3RoaXMudG9JZF19fV0sW3trZXk6XCJwYXJzZU9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl0sbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106e30sbj1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSYmYXJndW1lbnRzWzRdLHI9W1wiZW5kUG9pbnRPZmZzZXRcIixcImFycm93U3RyaWtldGhyb3VnaFwiLFwiaWRcIixcImZyb21cIixcImhpZGRlblwiLFwiaG92ZXJXaWR0aFwiLFwibGFiZWxIaWdobGlnaHRCb2xkXCIsXCJsZW5ndGhcIixcImxpbmVcIixcIm9wYWNpdHlcIixcInBoeXNpY3NcIixcInNjYWxpbmdcIixcInNlbGVjdGlvbldpZHRoXCIsXCJzZWxmUmVmZXJlbmNlU2l6ZVwiLFwic2VsZlJlZmVyZW5jZVwiLFwidG9cIixcInRpdGxlXCIsXCJ2YWx1ZVwiLFwid2lkdGhcIixcImZvbnRcIixcImNob3NlblwiLFwid2lkdGhDb25zdHJhaW50XCJdO2lmKE55KHIsdCxlLGkpLHZvaWQgMCE9PWUuZW5kUG9pbnRPZmZzZXQmJnZvaWQgMCE9PWUuZW5kUG9pbnRPZmZzZXQuZnJvbSYmKE13KGUuZW5kUG9pbnRPZmZzZXQuZnJvbSk/dC5lbmRQb2ludE9mZnNldC5mcm9tPWUuZW5kUG9pbnRPZmZzZXQuZnJvbToodC5lbmRQb2ludE9mZnNldC5mcm9tPXZvaWQgMCE9PW8uZW5kUG9pbnRPZmZzZXQuZnJvbT9vLmVuZFBvaW50T2Zmc2V0LmZyb206MCxjb25zb2xlLmVycm9yKFwiZW5kUG9pbnRPZmZzZXQuZnJvbSBpcyBub3QgYSB2YWxpZCBudW1iZXJcIikpKSx2b2lkIDAhPT1lLmVuZFBvaW50T2Zmc2V0JiZ2b2lkIDAhPT1lLmVuZFBvaW50T2Zmc2V0LnRvJiYoTXcoZS5lbmRQb2ludE9mZnNldC50byk/dC5lbmRQb2ludE9mZnNldC50bz1lLmVuZFBvaW50T2Zmc2V0LnRvOih0LmVuZFBvaW50T2Zmc2V0LnRvPXZvaWQgMCE9PW8uZW5kUG9pbnRPZmZzZXQudG8/by5lbmRQb2ludE9mZnNldC50bzowLGNvbnNvbGUuZXJyb3IoXCJlbmRQb2ludE9mZnNldC50byBpcyBub3QgYSB2YWxpZCBudW1iZXJcIikpKSxlayhlLmxhYmVsKT90LmxhYmVsPWUubGFiZWw6ZWsodC5sYWJlbCl8fCh0LmxhYmVsPXZvaWQgMCksdG0odCxlLFwic21vb3RoXCIsbyksdG0odCxlLFwic2hhZG93XCIsbyksdG0odCxlLFwiYmFja2dyb3VuZFwiLG8pLHZvaWQgMCE9PWUuZGFzaGVzJiZudWxsIT09ZS5kYXNoZXM/dC5kYXNoZXM9ZS5kYXNoZXM6ITA9PT1pJiZudWxsPT09ZS5kYXNoZXMmJih0LmRhc2hlcz1IcChvLmRhc2hlcykpLHZvaWQgMCE9PWUuc2NhbGluZyYmbnVsbCE9PWUuc2NhbGluZz8odm9pZCAwIT09ZS5zY2FsaW5nLm1pbiYmKHQuc2NhbGluZy5taW49ZS5zY2FsaW5nLm1pbiksdm9pZCAwIT09ZS5zY2FsaW5nLm1heCYmKHQuc2NhbGluZy5tYXg9ZS5zY2FsaW5nLm1heCksdG0odC5zY2FsaW5nLGUuc2NhbGluZyxcImxhYmVsXCIsby5zY2FsaW5nKSk6ITA9PT1pJiZudWxsPT09ZS5zY2FsaW5nJiYodC5zY2FsaW5nPUhwKG8uc2NhbGluZykpLHZvaWQgMCE9PWUuYXJyb3dzJiZudWxsIT09ZS5hcnJvd3MpaWYoXCJzdHJpbmdcIj09dHlwZW9mIGUuYXJyb3dzKXt2YXIgcz1lLmFycm93cy50b0xvd2VyQ2FzZSgpO3QuYXJyb3dzLnRvLmVuYWJsZWQ9LTEhPXpwKHMpLmNhbGwocyxcInRvXCIpLHQuYXJyb3dzLm1pZGRsZS5lbmFibGVkPS0xIT16cChzKS5jYWxsKHMsXCJtaWRkbGVcIiksdC5hcnJvd3MuZnJvbS5lbmFibGVkPS0xIT16cChzKS5jYWxsKHMsXCJmcm9tXCIpfWVsc2V7aWYoXCJvYmplY3RcIiE9PVFjKGUuYXJyb3dzKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYXJyb3cgbmV3T3B0aW9ucyBjYW4gb25seSBiZSBhbiBvYmplY3Qgb3IgYSBzdHJpbmcuIFJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uLiBZb3UgdXNlZDpcIitodihlLmFycm93cykpO3RtKHQuYXJyb3dzLGUuYXJyb3dzLFwidG9cIixvLmFycm93cyksdG0odC5hcnJvd3MsZS5hcnJvd3MsXCJtaWRkbGVcIixvLmFycm93cyksdG0odC5hcnJvd3MsZS5hcnJvd3MsXCJmcm9tXCIsby5hcnJvd3MpfWVsc2UhMD09PWkmJm51bGw9PT1lLmFycm93cyYmKHQuYXJyb3dzPUhwKG8uYXJyb3dzKSk7aWYodm9pZCAwIT09ZS5jb2xvciYmbnVsbCE9PWUuY29sb3Ipe3ZhciBhPUJ5KGUuY29sb3IpP3tjb2xvcjplLmNvbG9yLGhpZ2hsaWdodDplLmNvbG9yLGhvdmVyOmUuY29sb3IsaW5oZXJpdDohMSxvcGFjaXR5OjF9OmUuY29sb3IsaD10LmNvbG9yO2lmKG4pUnkoaCxvLmNvbG9yLCExLGkpO2Vsc2UgZm9yKHZhciBkIGluIGgpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGgsZCkmJmRlbGV0ZSBoW2RdO2lmKEJ5KGgpKWguY29sb3I9aCxoLmhpZ2hsaWdodD1oLGguaG92ZXI9aCxoLmluaGVyaXQ9ITEsdm9pZCAwPT09YS5vcGFjaXR5JiYoaC5vcGFjaXR5PTEpO2Vsc2V7dmFyIGw9ITE7dm9pZCAwIT09YS5jb2xvciYmKGguY29sb3I9YS5jb2xvcixsPSEwKSx2b2lkIDAhPT1hLmhpZ2hsaWdodCYmKGguaGlnaGxpZ2h0PWEuaGlnaGxpZ2h0LGw9ITApLHZvaWQgMCE9PWEuaG92ZXImJihoLmhvdmVyPWEuaG92ZXIsbD0hMCksdm9pZCAwIT09YS5pbmhlcml0JiYoaC5pbmhlcml0PWEuaW5oZXJpdCksdm9pZCAwIT09YS5vcGFjaXR5JiYoaC5vcGFjaXR5PU1hdGgubWluKDEsTWF0aC5tYXgoMCxhLm9wYWNpdHkpKSksITA9PT1sP2guaW5oZXJpdD0hMTp2b2lkIDA9PT1oLmluaGVyaXQmJihoLmluaGVyaXQ9XCJmcm9tXCIpfX1lbHNlITA9PT1pJiZudWxsPT09ZS5jb2xvciYmKHQuY29sb3I9Snkoby5jb2xvcikpOyEwPT09aSYmbnVsbD09PWUuZm9udCYmKHQuZm9udD1KeShvLmZvbnQpKSxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcInNlbGZSZWZlcmVuY2VTaXplXCIpJiYoY29uc29sZS53YXJuKFwiVGhlIHNlbGZSZWZlcmVuY2VTaXplIHByb3BlcnR5IGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2Ugc2VsZlJlZmVyZW5jZSBwcm9wZXJ0eSBpbnN0ZWFkLiBUaGUgc2VsZlJlZmVyZW5jZSBjYW4gYmUgc2V0IGxpa2UgdGhpc2Ugc2VsZlJlZmVyZW5jZTp7c2l6ZTozMCwgYW5nbGU6TWF0aC5QSSAvIDR9XCIpLHQuc2VsZlJlZmVyZW5jZS5zaXplPWUuc2VsZlJlZmVyZW5jZVNpemUpfX1dKSx0fSgpLFR4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7dmFyIG4scj10aGlzO1hsKHRoaXMsdCksdGhpcy5ib2R5PWUsdGhpcy5pbWFnZXM9aSx0aGlzLmdyb3Vwcz1vLHRoaXMuYm9keS5mdW5jdGlvbnMuY3JlYXRlRWRnZT1GbyhuPXRoaXMuY3JlYXRlKS5jYWxsKG4sdGhpcyksdGhpcy5lZGdlc0xpc3RlbmVycz17YWRkOmZ1bmN0aW9uKHQsZSl7ci5hZGQoZS5pdGVtcyl9LHVwZGF0ZTpmdW5jdGlvbih0LGUpe3IudXBkYXRlKGUuaXRlbXMpfSxyZW1vdmU6ZnVuY3Rpb24odCxlKXtyLnJlbW92ZShlLml0ZW1zKX19LHRoaXMub3B0aW9ucz17fSx0aGlzLmRlZmF1bHRPcHRpb25zPXthcnJvd3M6e3RvOntlbmFibGVkOiExLHNjYWxlRmFjdG9yOjEsdHlwZTpcImFycm93XCJ9LG1pZGRsZTp7ZW5hYmxlZDohMSxzY2FsZUZhY3RvcjoxLHR5cGU6XCJhcnJvd1wifSxmcm9tOntlbmFibGVkOiExLHNjYWxlRmFjdG9yOjEsdHlwZTpcImFycm93XCJ9fSxlbmRQb2ludE9mZnNldDp7ZnJvbTowLHRvOjB9LGFycm93U3RyaWtldGhyb3VnaDohMCxjb2xvcjp7Y29sb3I6XCIjODQ4NDg0XCIsaGlnaGxpZ2h0OlwiIzg0ODQ4NFwiLGhvdmVyOlwiIzg0ODQ4NFwiLGluaGVyaXQ6XCJmcm9tXCIsb3BhY2l0eToxfSxkYXNoZXM6ITEsZm9udDp7Y29sb3I6XCIjMzQzNDM0XCIsc2l6ZToxNCxmYWNlOlwiYXJpYWxcIixiYWNrZ3JvdW5kOlwibm9uZVwiLHN0cm9rZVdpZHRoOjIsc3Ryb2tlQ29sb3I6XCIjZmZmZmZmXCIsYWxpZ246XCJob3Jpem9udGFsXCIsbXVsdGk6ITEsdmFkanVzdDowLGJvbGQ6e21vZDpcImJvbGRcIn0sYm9sZGl0YWw6e21vZDpcImJvbGQgaXRhbGljXCJ9LGl0YWw6e21vZDpcIml0YWxpY1wifSxtb25vOnttb2Q6XCJcIixzaXplOjE1LGZhY2U6XCJjb3VyaWVyIG5ld1wiLHZhZGp1c3Q6Mn19LGhpZGRlbjohMSxob3ZlcldpZHRoOjEuNSxsYWJlbDp2b2lkIDAsbGFiZWxIaWdobGlnaHRCb2xkOiEwLGxlbmd0aDp2b2lkIDAscGh5c2ljczohMCxzY2FsaW5nOnttaW46MSxtYXg6MTUsbGFiZWw6e2VuYWJsZWQ6ITAsbWluOjE0LG1heDozMCxtYXhWaXNpYmxlOjMwLGRyYXdUaHJlc2hvbGQ6NX0sY3VzdG9tU2NhbGluZ0Z1bmN0aW9uOmZ1bmN0aW9uKHQsZSxpLG8pe2lmKGU9PT10KXJldHVybi41O3ZhciBuPTEvKGUtdCk7cmV0dXJuIE1hdGgubWF4KDAsKG8tdCkqbil9fSxzZWxlY3Rpb25XaWR0aDoxLjUsc2VsZlJlZmVyZW5jZTp7c2l6ZToyMCxhbmdsZTpNYXRoLlBJLzQscmVuZGVyQmVoaW5kVGhlTm9kZTohMH0sc2hhZG93OntlbmFibGVkOiExLGNvbG9yOlwicmdiYSgwLDAsMCwwLjUpXCIsc2l6ZToxMCx4OjUseTo1fSxiYWNrZ3JvdW5kOntlbmFibGVkOiExLGNvbG9yOlwicmdiYSgxMTEsMTExLDExMSwxKVwiLHNpemU6MTAsZGFzaGVzOiExfSxzbW9vdGg6e2VuYWJsZWQ6ITAsdHlwZTpcImR5bmFtaWNcIixmb3JjZURpcmVjdGlvbjpcIm5vbmVcIixyb3VuZG5lc3M6LjV9LHRpdGxlOnZvaWQgMCx3aWR0aDoxLHZhbHVlOnZvaWQgMH0sUnkodGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnMpLHRoaXMuYmluZEV2ZW50TGlzdGVuZXJzKCl9cmV0dXJuICRsKHQsW3trZXk6XCJiaW5kRXZlbnRMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0LGUsaT10aGlzO3RoaXMuYm9keS5lbWl0dGVyLm9uKFwiX2ZvcmNlRGlzYWJsZUR5bmFtaWNDdXJ2ZXNcIiwoZnVuY3Rpb24odCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtcImR5bmFtaWNcIj09PXQmJih0PVwiY29udGludW91c1wiKTt2YXIgbz0hMTtmb3IodmFyIG4gaW4gaS5ib2R5LmVkZ2VzKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpLmJvZHkuZWRnZXMsbikpe3ZhciByPWkuYm9keS5lZGdlc1tuXSxzPWkuYm9keS5kYXRhLmVkZ2VzLmdldChuKTtpZihudWxsIT1zKXt2YXIgYT1zLnNtb290aDt2b2lkIDAhPT1hJiYhMD09PWEuZW5hYmxlZCYmXCJkeW5hbWljXCI9PT1hLnR5cGUmJih2b2lkIDA9PT10P3Iuc2V0T3B0aW9ucyh7c21vb3RoOiExfSk6ci5zZXRPcHRpb25zKHtzbW9vdGg6e3R5cGU6dH19KSxvPSEwKX19ITA9PT1lJiYhMD09PW8mJmkuYm9keS5lbWl0dGVyLmVtaXQoXCJfZGF0YUNoYW5nZWRcIil9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJfZGF0YVVwZGF0ZWRcIiwoZnVuY3Rpb24oKXtpLnJlY29ubmVjdEVkZ2VzKCl9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJyZWZyZXNoRWRnZXNcIixGbyh0PXRoaXMucmVmcmVzaCkuY2FsbCh0LHRoaXMpKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcInJlZnJlc2hcIixGbyhlPXRoaXMucmVmcmVzaCkuY2FsbChlLHRoaXMpKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcImRlc3Ryb3lcIiwoZnVuY3Rpb24oKXtXeShpLmVkZ2VzTGlzdGVuZXJzLChmdW5jdGlvbih0LGUpe2kuYm9keS5kYXRhLmVkZ2VzJiZpLmJvZHkuZGF0YS5lZGdlcy5vZmYoZSx0KX0pKSxkZWxldGUgaS5ib2R5LmZ1bmN0aW9ucy5jcmVhdGVFZGdlLGRlbGV0ZSBpLmVkZ2VzTGlzdGVuZXJzLmFkZCxkZWxldGUgaS5lZGdlc0xpc3RlbmVycy51cGRhdGUsZGVsZXRlIGkuZWRnZXNMaXN0ZW5lcnMucmVtb3ZlLGRlbGV0ZSBpLmVkZ2VzTGlzdGVuZXJzfSkpfX0se2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10KXtTeC5wYXJzZU9wdGlvbnModGhpcy5vcHRpb25zLHQsITAsdGhpcy5kZWZhdWx0T3B0aW9ucywhMCk7dmFyIGU9ITE7aWYodm9pZCAwIT09dC5zbW9vdGgpZm9yKHZhciBpIGluIHRoaXMuYm9keS5lZGdlcylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ib2R5LmVkZ2VzLGkpJiYoZT10aGlzLmJvZHkuZWRnZXNbaV0udXBkYXRlRWRnZVR5cGUoKXx8ZSk7aWYodm9pZCAwIT09dC5mb250KWZvcih2YXIgbyBpbiB0aGlzLmJvZHkuZWRnZXMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYm9keS5lZGdlcyxvKSYmdGhpcy5ib2R5LmVkZ2VzW29dLnVwZGF0ZUxhYmVsTW9kdWxlKCk7dm9pZCAwPT09dC5oaWRkZW4mJnZvaWQgMD09PXQucGh5c2ljcyYmITAhPT1lfHx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX19LHtrZXk6XCJzZXREYXRhXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxvPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj10aGlzLmJvZHkuZGF0YS5lZGdlcztpZihlLmlzRGF0YVZpZXdMaWtlKFwiaWRcIix0KSl0aGlzLmJvZHkuZGF0YS5lZGdlcz10O2Vsc2UgaWYoaHUodCkpdGhpcy5ib2R5LmRhdGEuZWRnZXM9bmV3IGUuRGF0YVNldCx0aGlzLmJvZHkuZGF0YS5lZGdlcy5hZGQodCk7ZWxzZXtpZih0KXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcnJheSBvciBEYXRhU2V0IGV4cGVjdGVkXCIpO3RoaXMuYm9keS5kYXRhLmVkZ2VzPW5ldyBlLkRhdGFTZXR9aWYobiYmV3kodGhpcy5lZGdlc0xpc3RlbmVycywoZnVuY3Rpb24odCxlKXtuLm9mZihlLHQpfSkpLHRoaXMuYm9keS5lZGdlcz17fSx0aGlzLmJvZHkuZGF0YS5lZGdlcyl7V3kodGhpcy5lZGdlc0xpc3RlbmVycywoZnVuY3Rpb24odCxlKXtpLmJvZHkuZGF0YS5lZGdlcy5vbihlLHQpfSkpO3ZhciByPXRoaXMuYm9keS5kYXRhLmVkZ2VzLmdldElkcygpO3RoaXMuYWRkKHIsITApfXRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfYWRqdXN0RWRnZXNGb3JIaWVyYXJjaGljYWxMYXlvdXRcIiksITE9PT1vJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX0se2tleTpcImFkZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLGk9dGhpcy5ib2R5LmVkZ2VzLG89dGhpcy5ib2R5LmRhdGEuZWRnZXMsbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dLHM9aVtyXTtzJiZzLmRpc2Nvbm5lY3QoKTt2YXIgYT1vLmdldChyLHtzaG93SW50ZXJuYWxJZHM6ITB9KTtpW3JdPXRoaXMuY3JlYXRlKGEpfXRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfYWRqdXN0RWRnZXNGb3JIaWVyYXJjaGljYWxMYXlvdXRcIiksITE9PT1lJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX0se2tleTpcInVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmJvZHkuZWRnZXMsaT10aGlzLmJvZHkuZGF0YS5lZGdlcyxvPSExLG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXSxzPWkuZ2V0KHIpLGE9ZVtyXTt2b2lkIDAhPT1hPyhhLmRpc2Nvbm5lY3QoKSxvPWEuc2V0T3B0aW9ucyhzKXx8byxhLmNvbm5lY3QoKSk6KHRoaXMuYm9keS5lZGdlc1tyXT10aGlzLmNyZWF0ZShzKSxvPSEwKX0hMD09PW8/KHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfYWRqdXN0RWRnZXNGb3JIaWVyYXJjaGljYWxMYXlvdXRcIiksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKSk6dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhVXBkYXRlZFwiKX19LHtrZXk6XCJyZW1vdmVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdKXx8YXJndW1lbnRzWzFdO2lmKDAhPT10Lmxlbmd0aCl7dmFyIGk9dGhpcy5ib2R5LmVkZ2VzO1d5KHQsKGZ1bmN0aW9uKHQpe3ZhciBlPWlbdF07dm9pZCAwIT09ZSYmZS5yZW1vdmUoKX0pKSxlJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX19LHtrZXk6XCJyZWZyZXNoXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO1d5KHRoaXMuYm9keS5lZGdlcywoZnVuY3Rpb24oZSxpKXt2YXIgbz10LmJvZHkuZGF0YS5lZGdlcy5nZXQoaSk7dm9pZCAwIT09byYmZS5zZXRPcHRpb25zKG8pfSkpfX0se2tleTpcImNyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgU3godCx0aGlzLmJvZHksdGhpcy5pbWFnZXMsdGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnMpfX0se2tleTpcInJlY29ubmVjdEVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuYm9keS5ub2RlcyxpPXRoaXMuYm9keS5lZGdlcztmb3IodCBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpJiYoZVt0XS5lZGdlcz1bXSk7Zm9yKHQgaW4gaSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaSx0KSl7dmFyIG89aVt0XTtvLmZyb209bnVsbCxvLnRvPW51bGwsby5jb25uZWN0KCl9fX0se2tleTpcImdldENvbm5lY3RlZE5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9W107aWYodm9pZCAwIT09dGhpcy5ib2R5LmVkZ2VzW3RdKXt2YXIgaT10aGlzLmJvZHkuZWRnZXNbdF07dm9pZCAwIT09aS5mcm9tSWQmJmUucHVzaChpLmZyb21JZCksdm9pZCAwIT09aS50b0lkJiZlLnB1c2goaS50b0lkKX1yZXR1cm4gZX19LHtrZXk6XCJfdXBkYXRlU3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2FkZE1pc3NpbmdFZGdlcygpLHRoaXMuX3JlbW92ZUludmFsaWRFZGdlcygpfX0se2tleTpcIl9yZW1vdmVJbnZhbGlkRWRnZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1bXTtXeSh0aGlzLmJvZHkuZWRnZXMsKGZ1bmN0aW9uKGksbyl7dmFyIG49dC5ib2R5Lm5vZGVzW2kudG9JZF0scj10LmJvZHkubm9kZXNbaS5mcm9tSWRdO3ZvaWQgMCE9PW4mJiEwPT09bi5pc0NsdXN0ZXJ8fHZvaWQgMCE9PXImJiEwPT09ci5pc0NsdXN0ZXJ8fHZvaWQgMCE9PW4mJnZvaWQgMCE9PXJ8fGUucHVzaChvKX0pKSx0aGlzLnJlbW92ZShlLCExKX19LHtrZXk6XCJfYWRkTWlzc2luZ0VkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmJvZHkuZGF0YS5lZGdlcztpZihudWxsIT10KXt2YXIgZT10aGlzLmJvZHkuZWRnZXMsaT1bXTtGdSh0KS5jYWxsKHQsKGZ1bmN0aW9uKHQsbyl7dm9pZCAwPT09ZVtvXSYmaS5wdXNoKG8pfSkpLHRoaXMuYWRkKGksITApfX19XSksdH0oKSxNeD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpLG8pe1hsKHRoaXMsdCksdGhpcy5ib2R5PWUsdGhpcy5waHlzaWNzQm9keT1pLHRoaXMuYmFybmVzSHV0VHJlZSx0aGlzLnNldE9wdGlvbnMobyksdGhpcy5fcm5nPV95KFwiQkFSTkVTIEhVVCBTT0xWRVJcIil9cmV0dXJuICRsKHQsW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zPXQsdGhpcy50aGV0YUludmVyc2VkPTEvdGhpcy5vcHRpb25zLnRoZXRhLHRoaXMub3ZlcmxhcEF2b2lkYW5jZUZhY3Rvcj0xLU1hdGgubWF4KDAsTWF0aC5taW4oMSx0aGlzLm9wdGlvbnMuYXZvaWRPdmVybGFwKSl9fSx7a2V5Olwic29sdmVcIix2YWx1ZTpmdW5jdGlvbigpe2lmKDAhPT10aGlzLm9wdGlvbnMuZ3Jhdml0YXRpb25hbENvbnN0YW50JiZ0aGlzLnBoeXNpY3NCb2R5LnBoeXNpY3NOb2RlSW5kaWNlcy5sZW5ndGg+MCl7dmFyIHQsZT10aGlzLmJvZHkubm9kZXMsaT10aGlzLnBoeXNpY3NCb2R5LnBoeXNpY3NOb2RlSW5kaWNlcyxvPWkubGVuZ3RoLG49dGhpcy5fZm9ybUJhcm5lc0h1dFRyZWUoZSxpKTt0aGlzLmJhcm5lc0h1dFRyZWU9bjtmb3IodmFyIHI9MDtyPG87cisrKSh0PWVbaVtyXV0pLm9wdGlvbnMubWFzcz4wJiZ0aGlzLl9nZXRGb3JjZUNvbnRyaWJ1dGlvbnMobi5yb290LHQpfX19LHtrZXk6XCJfZ2V0Rm9yY2VDb250cmlidXRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLl9nZXRGb3JjZUNvbnRyaWJ1dGlvbih0LmNoaWxkcmVuLk5XLGUpLHRoaXMuX2dldEZvcmNlQ29udHJpYnV0aW9uKHQuY2hpbGRyZW4uTkUsZSksdGhpcy5fZ2V0Rm9yY2VDb250cmlidXRpb24odC5jaGlsZHJlbi5TVyxlKSx0aGlzLl9nZXRGb3JjZUNvbnRyaWJ1dGlvbih0LmNoaWxkcmVuLlNFLGUpfX0se2tleTpcIl9nZXRGb3JjZUNvbnRyaWJ1dGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodC5jaGlsZHJlbkNvdW50PjApe3ZhciBpPXQuY2VudGVyT2ZNYXNzLngtZS54LG89dC5jZW50ZXJPZk1hc3MueS1lLnksbj1NYXRoLnNxcnQoaSppK28qbyk7bip0LmNhbGNTaXplPnRoaXMudGhldGFJbnZlcnNlZD90aGlzLl9jYWxjdWxhdGVGb3JjZXMobixpLG8sZSx0KTo0PT09dC5jaGlsZHJlbkNvdW50P3RoaXMuX2dldEZvcmNlQ29udHJpYnV0aW9ucyh0LGUpOnQuY2hpbGRyZW4uZGF0YS5pZCE9ZS5pZCYmdGhpcy5fY2FsY3VsYXRlRm9yY2VzKG4saSxvLGUsdCl9fX0se2tleTpcIl9jYWxjdWxhdGVGb3JjZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4pezA9PT10JiYoZT10PS4xKSx0aGlzLm92ZXJsYXBBdm9pZGFuY2VGYWN0b3I8MSYmby5zaGFwZS5yYWRpdXMmJih0PU1hdGgubWF4KC4xK3RoaXMub3ZlcmxhcEF2b2lkYW5jZUZhY3RvcipvLnNoYXBlLnJhZGl1cyx0LW8uc2hhcGUucmFkaXVzKSk7dmFyIHI9dGhpcy5vcHRpb25zLmdyYXZpdGF0aW9uYWxDb25zdGFudCpuLm1hc3Mqby5vcHRpb25zLm1hc3MvTWF0aC5wb3codCwzKSxzPWUqcixhPWkqcjt0aGlzLnBoeXNpY3NCb2R5LmZvcmNlc1tvLmlkXS54Kz1zLHRoaXMucGh5c2ljc0JvZHkuZm9yY2VzW28uaWRdLnkrPWF9fSx7a2V5OlwiX2Zvcm1CYXJuZXNIdXRUcmVlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGksbz1lLmxlbmd0aCxuPXRbZVswXV0ueCxyPXRbZVswXV0ueSxzPXRbZVswXV0ueCxhPXRbZVswXV0ueSxoPTE7aDxvO2grKyl7dmFyIGQ9dFtlW2hdXSxsPWQueCxjPWQueTtkLm9wdGlvbnMubWFzcz4wJiYobDxuJiYobj1sKSxsPnMmJihzPWwpLGM8ciYmKHI9YyksYz5hJiYoYT1jKSl9dmFyIHU9TWF0aC5hYnMocy1uKS1NYXRoLmFicyhhLXIpO3U+MD8oci09LjUqdSxhKz0uNSp1KToobis9LjUqdSxzLT0uNSp1KTt2YXIgZj1NYXRoLm1heCgxZS01LE1hdGguYWJzKHMtbikpLHA9LjUqZix2PS41KihuK3MpLGc9LjUqKHIrYSkseT17cm9vdDp7Y2VudGVyT2ZNYXNzOnt4OjAseTowfSxtYXNzOjAscmFuZ2U6e21pblg6di1wLG1heFg6ditwLG1pblk6Zy1wLG1heFk6ZytwfSxzaXplOmYsY2FsY1NpemU6MS9mLGNoaWxkcmVuOntkYXRhOm51bGx9LG1heFdpZHRoOjAsbGV2ZWw6MCxjaGlsZHJlbkNvdW50OjR9fTt0aGlzLl9zcGxpdEJyYW5jaCh5LnJvb3QpO2Zvcih2YXIgbT0wO208bzttKyspKGk9dFtlW21dXSkub3B0aW9ucy5tYXNzPjAmJnRoaXMuX3BsYWNlSW5UcmVlKHkucm9vdCxpKTtyZXR1cm4geX19LHtrZXk6XCJfdXBkYXRlQnJhbmNoTWFzc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dC5jZW50ZXJPZk1hc3Msbz10Lm1hc3MrZS5vcHRpb25zLm1hc3Msbj0xL287aS54PWkueCp0Lm1hc3MrZS54KmUub3B0aW9ucy5tYXNzLGkueCo9bixpLnk9aS55KnQubWFzcytlLnkqZS5vcHRpb25zLm1hc3MsaS55Kj1uLHQubWFzcz1vO3ZhciByPU1hdGgubWF4KE1hdGgubWF4KGUuaGVpZ2h0LGUucmFkaXVzKSxlLndpZHRoKTt0Lm1heFdpZHRoPXQubWF4V2lkdGg8cj9yOnQubWF4V2lkdGh9fSx7a2V5OlwiX3BsYWNlSW5UcmVlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpezE9PWkmJnZvaWQgMCE9PWl8fHRoaXMuX3VwZGF0ZUJyYW5jaE1hc3ModCxlKTt2YXIgbyxuPXQuY2hpbGRyZW4uTlcucmFuZ2U7bz1uLm1heFg+ZS54P24ubWF4WT5lLnk/XCJOV1wiOlwiU1dcIjpuLm1heFk+ZS55P1wiTkVcIjpcIlNFXCIsdGhpcy5fcGxhY2VJblJlZ2lvbih0LGUsbyl9fSx7a2V5OlwiX3BsYWNlSW5SZWdpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89dC5jaGlsZHJlbltpXTtzd2l0Y2goby5jaGlsZHJlbkNvdW50KXtjYXNlIDA6by5jaGlsZHJlbi5kYXRhPWUsby5jaGlsZHJlbkNvdW50PTEsdGhpcy5fdXBkYXRlQnJhbmNoTWFzcyhvLGUpO2JyZWFrO2Nhc2UgMTpvLmNoaWxkcmVuLmRhdGEueD09PWUueCYmby5jaGlsZHJlbi5kYXRhLnk9PT1lLnk/KGUueCs9dGhpcy5fcm5nKCksZS55Kz10aGlzLl9ybmcoKSk6KHRoaXMuX3NwbGl0QnJhbmNoKG8pLHRoaXMuX3BsYWNlSW5UcmVlKG8sZSkpO2JyZWFrO2Nhc2UgNDp0aGlzLl9wbGFjZUluVHJlZShvLGUpfX19LHtrZXk6XCJfc3BsaXRCcmFuY2hcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1udWxsOzE9PT10LmNoaWxkcmVuQ291bnQmJihlPXQuY2hpbGRyZW4uZGF0YSx0Lm1hc3M9MCx0LmNlbnRlck9mTWFzcy54PTAsdC5jZW50ZXJPZk1hc3MueT0wKSx0LmNoaWxkcmVuQ291bnQ9NCx0LmNoaWxkcmVuLmRhdGE9bnVsbCx0aGlzLl9pbnNlcnRSZWdpb24odCxcIk5XXCIpLHRoaXMuX2luc2VydFJlZ2lvbih0LFwiTkVcIiksdGhpcy5faW5zZXJ0UmVnaW9uKHQsXCJTV1wiKSx0aGlzLl9pbnNlcnRSZWdpb24odCxcIlNFXCIpLG51bGwhPWUmJnRoaXMuX3BsYWNlSW5UcmVlKHQsZSl9fSx7a2V5OlwiX2luc2VydFJlZ2lvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGksbyxuLHIscz0uNSp0LnNpemU7c3dpdGNoKGUpe2Nhc2VcIk5XXCI6aT10LnJhbmdlLm1pblgsbz10LnJhbmdlLm1pblgrcyxuPXQucmFuZ2UubWluWSxyPXQucmFuZ2UubWluWStzO2JyZWFrO2Nhc2VcIk5FXCI6aT10LnJhbmdlLm1pblgrcyxvPXQucmFuZ2UubWF4WCxuPXQucmFuZ2UubWluWSxyPXQucmFuZ2UubWluWStzO2JyZWFrO2Nhc2VcIlNXXCI6aT10LnJhbmdlLm1pblgsbz10LnJhbmdlLm1pblgrcyxuPXQucmFuZ2UubWluWStzLHI9dC5yYW5nZS5tYXhZO2JyZWFrO2Nhc2VcIlNFXCI6aT10LnJhbmdlLm1pblgrcyxvPXQucmFuZ2UubWF4WCxuPXQucmFuZ2UubWluWStzLHI9dC5yYW5nZS5tYXhZfXQuY2hpbGRyZW5bZV09e2NlbnRlck9mTWFzczp7eDowLHk6MH0sbWFzczowLHJhbmdlOnttaW5YOmksbWF4WDpvLG1pblk6bixtYXhZOnJ9LHNpemU6LjUqdC5zaXplLGNhbGNTaXplOjIqdC5jYWxjU2l6ZSxjaGlsZHJlbjp7ZGF0YTpudWxsfSxtYXhXaWR0aDowLGxldmVsOnQubGV2ZWwrMSxjaGlsZHJlbkNvdW50OjB9fX0se2tleTpcIl9kZWJ1Z1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dm9pZCAwIT09dGhpcy5iYXJuZXNIdXRUcmVlJiYodC5saW5lV2lkdGg9MSx0aGlzLl9kcmF3QnJhbmNoKHRoaXMuYmFybmVzSHV0VHJlZS5yb290LHQsZSkpfX0se2tleTpcIl9kcmF3QnJhbmNoXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZvaWQgMD09PWkmJihpPVwiI0ZGMDAwMFwiKSw0PT09dC5jaGlsZHJlbkNvdW50JiYodGhpcy5fZHJhd0JyYW5jaCh0LmNoaWxkcmVuLk5XLGUpLHRoaXMuX2RyYXdCcmFuY2godC5jaGlsZHJlbi5ORSxlKSx0aGlzLl9kcmF3QnJhbmNoKHQuY2hpbGRyZW4uU0UsZSksdGhpcy5fZHJhd0JyYW5jaCh0LmNoaWxkcmVuLlNXLGUpKSxlLnN0cm9rZVN0eWxlPWksZS5iZWdpblBhdGgoKSxlLm1vdmVUbyh0LnJhbmdlLm1pblgsdC5yYW5nZS5taW5ZKSxlLmxpbmVUbyh0LnJhbmdlLm1heFgsdC5yYW5nZS5taW5ZKSxlLnN0cm9rZSgpLGUuYmVnaW5QYXRoKCksZS5tb3ZlVG8odC5yYW5nZS5tYXhYLHQucmFuZ2UubWluWSksZS5saW5lVG8odC5yYW5nZS5tYXhYLHQucmFuZ2UubWF4WSksZS5zdHJva2UoKSxlLmJlZ2luUGF0aCgpLGUubW92ZVRvKHQucmFuZ2UubWF4WCx0LnJhbmdlLm1heFkpLGUubGluZVRvKHQucmFuZ2UubWluWCx0LnJhbmdlLm1heFkpLGUuc3Ryb2tlKCksZS5iZWdpblBhdGgoKSxlLm1vdmVUbyh0LnJhbmdlLm1pblgsdC5yYW5nZS5tYXhZKSxlLmxpbmVUbyh0LnJhbmdlLm1pblgsdC5yYW5nZS5taW5ZKSxlLnN0cm9rZSgpfX1dKSx0fSgpLFB4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7WGwodGhpcyx0KSx0aGlzLl9ybmc9X3koXCJSRVBVTFNJT04gU09MVkVSXCIpLHRoaXMuYm9keT1lLHRoaXMucGh5c2ljc0JvZHk9aSx0aGlzLnNldE9wdGlvbnMobyl9cmV0dXJuICRsKHQsW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zPXR9fSx7a2V5Olwic29sdmVcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCxlLGksbyxuLHIscyxhLGg9dGhpcy5ib2R5Lm5vZGVzLGQ9dGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXMsbD10aGlzLnBoeXNpY3NCb2R5LmZvcmNlcyxjPXRoaXMub3B0aW9ucy5ub2RlRGlzdGFuY2UsdT0tMi8zL2MsZj0wO2Y8ZC5sZW5ndGgtMTtmKyspe3M9aFtkW2ZdXTtmb3IodmFyIHA9ZisxO3A8ZC5sZW5ndGg7cCsrKXQ9KGE9aFtkW3BdXSkueC1zLngsZT1hLnktcy55LDA9PT0oaT1NYXRoLnNxcnQodCp0K2UqZSkpJiYodD1pPS4xKnRoaXMuX3JuZygpKSxpPDIqYyYmKHI9aTwuNSpjPzE6dSppKzEuMzMzMzMzMzMzMzMzMzMzMyxvPXQqKHIvPWkpLG49ZSpyLGxbcy5pZF0ueC09byxsW3MuaWRdLnktPW4sbFthLmlkXS54Kz1vLGxbYS5pZF0ueSs9bil9fX1dKSx0fSgpLER4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7WGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLnBoeXNpY3NCb2R5PWksdGhpcy5zZXRPcHRpb25zKG8pfXJldHVybiAkbCh0LFt7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMub3B0aW9ucz10LHRoaXMub3ZlcmxhcEF2b2lkYW5jZUZhY3Rvcj1NYXRoLm1heCgwLE1hdGgubWluKDEsdGhpcy5vcHRpb25zLmF2b2lkT3ZlcmxhcHx8MCkpfX0se2tleTpcInNvbHZlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ib2R5Lm5vZGVzLGU9dGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXMsaT10aGlzLnBoeXNpY3NCb2R5LmZvcmNlcyxvPXRoaXMub3B0aW9ucy5ub2RlRGlzdGFuY2Usbj0wO248ZS5sZW5ndGgtMTtuKyspZm9yKHZhciByPXRbZVtuXV0scz1uKzE7czxlLmxlbmd0aDtzKyspe3ZhciBhPXRbZVtzXV07aWYoci5sZXZlbD09PWEubGV2ZWwpe3ZhciBoPW8rdGhpcy5vdmVybGFwQXZvaWRhbmNlRmFjdG9yKigoci5zaGFwZS5yYWRpdXN8fDApLzIrKGEuc2hhcGUucmFkaXVzfHwwKS8yKSxkPWEueC1yLngsbD1hLnktci55LGM9TWF0aC5zcXJ0KGQqZCtsKmwpLHU9dm9pZCAwO3U9YzxoPy1NYXRoLnBvdyguMDUqYywyKStNYXRoLnBvdyguMDUqaCwyKTowLDAhPT1jJiYodS89Yyk7dmFyIGY9ZCp1LHA9bCp1O2lbci5pZF0ueC09ZixpW3IuaWRdLnktPXAsaVthLmlkXS54Kz1mLGlbYS5pZF0ueSs9cH19fX1dKSx0fSgpLEJ4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7WGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLnBoeXNpY3NCb2R5PWksdGhpcy5zZXRPcHRpb25zKG8pfXJldHVybiAkbCh0LFt7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMub3B0aW9ucz10fX0se2tleTpcInNvbHZlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQsZSxpLG8sbixyPXRoaXMucGh5c2ljc0JvZHkucGh5c2ljc0VkZ2VJbmRpY2VzLHM9dGhpcy5ib2R5LmVkZ2VzLGE9MDthPHIubGVuZ3RoO2ErKykhMD09PShlPXNbclthXV0pLmNvbm5lY3RlZCYmZS50b0lkIT09ZS5mcm9tSWQmJnZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1tlLnRvSWRdJiZ2b2lkIDAhPT10aGlzLmJvZHkubm9kZXNbZS5mcm9tSWRdJiYodm9pZCAwIT09ZS5lZGdlVHlwZS52aWE/KHQ9dm9pZCAwPT09ZS5vcHRpb25zLmxlbmd0aD90aGlzLm9wdGlvbnMuc3ByaW5nTGVuZ3RoOmUub3B0aW9ucy5sZW5ndGgsaT1lLnRvLG89ZS5lZGdlVHlwZS52aWEsbj1lLmZyb20sdGhpcy5fY2FsY3VsYXRlU3ByaW5nRm9yY2UoaSxvLC41KnQpLHRoaXMuX2NhbGN1bGF0ZVNwcmluZ0ZvcmNlKG8sbiwuNSp0KSk6KHQ9dm9pZCAwPT09ZS5vcHRpb25zLmxlbmd0aD8xLjUqdGhpcy5vcHRpb25zLnNwcmluZ0xlbmd0aDplLm9wdGlvbnMubGVuZ3RoLHRoaXMuX2NhbGN1bGF0ZVNwcmluZ0ZvcmNlKGUuZnJvbSxlLnRvLHQpKSl9fSx7a2V5OlwiX2NhbGN1bGF0ZVNwcmluZ0ZvcmNlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPXQueC1lLngsbj10LnktZS55LHI9TWF0aC5tYXgoTWF0aC5zcXJ0KG8qbytuKm4pLC4wMSkscz10aGlzLm9wdGlvbnMuc3ByaW5nQ29uc3RhbnQqKGktcikvcixhPW8qcyxoPW4qczt2b2lkIDAhPT10aGlzLnBoeXNpY3NCb2R5LmZvcmNlc1t0LmlkXSYmKHRoaXMucGh5c2ljc0JvZHkuZm9yY2VzW3QuaWRdLngrPWEsdGhpcy5waHlzaWNzQm9keS5mb3JjZXNbdC5pZF0ueSs9aCksdm9pZCAwIT09dGhpcy5waHlzaWNzQm9keS5mb3JjZXNbZS5pZF0mJih0aGlzLnBoeXNpY3NCb2R5LmZvcmNlc1tlLmlkXS54LT1hLHRoaXMucGh5c2ljc0JvZHkuZm9yY2VzW2UuaWRdLnktPWgpfX1dKSx0fSgpLEl4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7WGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLnBoeXNpY3NCb2R5PWksdGhpcy5zZXRPcHRpb25zKG8pfXJldHVybiAkbCh0LFt7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMub3B0aW9ucz10fX0se2tleTpcInNvbHZlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQsZSxpLG8sbixyLHMsYSxoLGQsbD10aGlzLmJvZHkuZWRnZXMsYz0uNSx1PXRoaXMucGh5c2ljc0JvZHkucGh5c2ljc0VkZ2VJbmRpY2VzLGY9dGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXMscD10aGlzLnBoeXNpY3NCb2R5LmZvcmNlcyx2PTA7djxmLmxlbmd0aDt2Kyspe3ZhciBnPWZbdl07cFtnXS5zcHJpbmdGeD0wLHBbZ10uc3ByaW5nRnk9MH1mb3IodmFyIHk9MDt5PHUubGVuZ3RoO3krKykhMD09PShlPWxbdVt5XV0pLmNvbm5lY3RlZCYmKHQ9dm9pZCAwPT09ZS5vcHRpb25zLmxlbmd0aD90aGlzLm9wdGlvbnMuc3ByaW5nTGVuZ3RoOmUub3B0aW9ucy5sZW5ndGgsaT1lLmZyb20ueC1lLnRvLngsbz1lLmZyb20ueS1lLnRvLnksYT0wPT09KGE9TWF0aC5zcXJ0KGkqaStvKm8pKT8uMDE6YSxuPWkqKHM9dGhpcy5vcHRpb25zLnNwcmluZ0NvbnN0YW50Kih0LWEpL2EpLHI9bypzLGUudG8ubGV2ZWwhPWUuZnJvbS5sZXZlbD8odm9pZCAwIT09cFtlLnRvSWRdJiYocFtlLnRvSWRdLnNwcmluZ0Z4LT1uLHBbZS50b0lkXS5zcHJpbmdGeS09ciksdm9pZCAwIT09cFtlLmZyb21JZF0mJihwW2UuZnJvbUlkXS5zcHJpbmdGeCs9bixwW2UuZnJvbUlkXS5zcHJpbmdGeSs9cikpOih2b2lkIDAhPT1wW2UudG9JZF0mJihwW2UudG9JZF0ueC09YypuLHBbZS50b0lkXS55LT1jKnIpLHZvaWQgMCE9PXBbZS5mcm9tSWRdJiYocFtlLmZyb21JZF0ueCs9YypuLHBbZS5mcm9tSWRdLnkrPWMqcikpKTtzPTE7Zm9yKHZhciBtPTA7bTxmLmxlbmd0aDttKyspe3ZhciBiPWZbbV07aD1NYXRoLm1pbihzLE1hdGgubWF4KC1zLHBbYl0uc3ByaW5nRngpKSxkPU1hdGgubWluKHMsTWF0aC5tYXgoLXMscFtiXS5zcHJpbmdGeSkpLHBbYl0ueCs9aCxwW2JdLnkrPWR9Zm9yKHZhciB3PTAsaz0wLF89MDtfPGYubGVuZ3RoO18rKyl7dmFyIHg9ZltfXTt3Kz1wW3hdLngsays9cFt4XS55fWZvcih2YXIgRT13L2YubGVuZ3RoLE89ay9mLmxlbmd0aCxDPTA7QzxmLmxlbmd0aDtDKyspe3ZhciBTPWZbQ107cFtTXS54LT1FLHBbU10ueS09T319fV0pLHR9KCkseng9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsaSxvKXtYbCh0aGlzLHQpLHRoaXMuYm9keT1lLHRoaXMucGh5c2ljc0JvZHk9aSx0aGlzLnNldE9wdGlvbnMobyl9cmV0dXJuICRsKHQsW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zPXR9fSx7a2V5Olwic29sdmVcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCxlLGksbyxuPXRoaXMuYm9keS5ub2RlcyxyPXRoaXMucGh5c2ljc0JvZHkucGh5c2ljc05vZGVJbmRpY2VzLHM9dGhpcy5waHlzaWNzQm9keS5mb3JjZXMsYT0wO2E8ci5sZW5ndGg7YSsrKXt0PS0obz1uW3JbYV1dKS54LGU9LW8ueSxpPU1hdGguc3FydCh0KnQrZSplKSx0aGlzLl9jYWxjdWxhdGVGb3JjZXMoaSx0LGUscyxvKX19fSx7a2V5OlwiX2NhbGN1bGF0ZUZvcmNlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbil7dmFyIHI9MD09PXQ/MDp0aGlzLm9wdGlvbnMuY2VudHJhbEdyYXZpdHkvdDtvW24uaWRdLng9ZSpyLG9bbi5pZF0ueT1pKnJ9fV0pLHR9KCk7ZnVuY3Rpb24gRngodCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgTng9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1GeChpKTtmdW5jdGlvbiBpKHQsbyxuKXt2YXIgcjtyZXR1cm4gWGwodGhpcyxpKSwocj1lLmNhbGwodGhpcyx0LG8sbikpLl9ybmc9X3koXCJGT1JDRSBBVExBUyAyIEJBU0VEIFJFUFVMU0lPTiBTT0xWRVJcIikscn1yZXR1cm4gJGwoaSxbe2tleTpcIl9jYWxjdWxhdGVGb3JjZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4pezA9PT10JiYoZT10PS4xKnRoaXMuX3JuZygpKSx0aGlzLm92ZXJsYXBBdm9pZGFuY2VGYWN0b3I8MSYmby5zaGFwZS5yYWRpdXMmJih0PU1hdGgubWF4KC4xK3RoaXMub3ZlcmxhcEF2b2lkYW5jZUZhY3RvcipvLnNoYXBlLnJhZGl1cyx0LW8uc2hhcGUucmFkaXVzKSk7dmFyIHI9by5lZGdlcy5sZW5ndGgrMSxzPXRoaXMub3B0aW9ucy5ncmF2aXRhdGlvbmFsQ29uc3RhbnQqbi5tYXNzKm8ub3B0aW9ucy5tYXNzKnIvTWF0aC5wb3codCwyKSxhPWUqcyxoPWkqczt0aGlzLnBoeXNpY3NCb2R5LmZvcmNlc1tvLmlkXS54Kz1hLHRoaXMucGh5c2ljc0JvZHkuZm9yY2VzW28uaWRdLnkrPWh9fV0pLGl9KE14KTtmdW5jdGlvbiBBeCh0KXt2YXIgZT1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhemspcmV0dXJuITE7aWYoemsuc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh6ayhCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBpLG89SGsodCk7aWYoZSl7dmFyIG49SGsodGhpcykuY29uc3RydWN0b3I7aT16ayhvLGFyZ3VtZW50cyxuKX1lbHNlIGk9by5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGprKHRoaXMsaSl9fXZhciBSeCxqeD1mdW5jdGlvbih0KXtSayhpLHQpO3ZhciBlPUF4KGkpO2Z1bmN0aW9uIGkodCxvLG4pe3JldHVybiBYbCh0aGlzLGkpLGUuY2FsbCh0aGlzLHQsbyxuKX1yZXR1cm4gJGwoaSxbe2tleTpcIl9jYWxjdWxhdGVGb3JjZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvLG4pe2lmKHQ+MCl7dmFyIHI9bi5lZGdlcy5sZW5ndGgrMSxzPXRoaXMub3B0aW9ucy5jZW50cmFsR3Jhdml0eSpyKm4ub3B0aW9ucy5tYXNzO29bbi5pZF0ueD1lKnMsb1tuLmlkXS55PWkqc319fV0pLGl9KHp4KSxMeD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7WGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLnBoeXNpY3NCb2R5PXtwaHlzaWNzTm9kZUluZGljZXM6W10scGh5c2ljc0VkZ2VJbmRpY2VzOltdLGZvcmNlczp7fSx2ZWxvY2l0aWVzOnt9fSx0aGlzLnBoeXNpY3NFbmFibGVkPSEwLHRoaXMuc2ltdWxhdGlvbkludGVydmFsPTFlMy82MCx0aGlzLnJlcXVpcmVzVGltZW91dD0hMCx0aGlzLnByZXZpb3VzU3RhdGVzPXt9LHRoaXMucmVmZXJlbmNlU3RhdGU9e30sdGhpcy5mcmVlemVDYWNoZT17fSx0aGlzLnJlbmRlclRpbWVyPXZvaWQgMCx0aGlzLmFkYXB0aXZlVGltZXN0ZXA9ITEsdGhpcy5hZGFwdGl2ZVRpbWVzdGVwRW5hYmxlZD0hMSx0aGlzLmFkYXB0aXZlQ291bnRlcj0wLHRoaXMuYWRhcHRpdmVJbnRlcnZhbD0zLHRoaXMuc3RhYmlsaXplZD0hMSx0aGlzLnN0YXJ0ZWRTdGFiaWxpemF0aW9uPSExLHRoaXMuc3RhYmlsaXphdGlvbkl0ZXJhdGlvbnM9MCx0aGlzLnJlYWR5PSExLHRoaXMub3B0aW9ucz17fSx0aGlzLmRlZmF1bHRPcHRpb25zPXtlbmFibGVkOiEwLGJhcm5lc0h1dDp7dGhldGE6LjUsZ3Jhdml0YXRpb25hbENvbnN0YW50Oi0yZTMsY2VudHJhbEdyYXZpdHk6LjMsc3ByaW5nTGVuZ3RoOjk1LHNwcmluZ0NvbnN0YW50Oi4wNCxkYW1waW5nOi4wOSxhdm9pZE92ZXJsYXA6MH0sZm9yY2VBdGxhczJCYXNlZDp7dGhldGE6LjUsZ3Jhdml0YXRpb25hbENvbnN0YW50Oi01MCxjZW50cmFsR3Jhdml0eTouMDEsc3ByaW5nQ29uc3RhbnQ6LjA4LHNwcmluZ0xlbmd0aDoxMDAsZGFtcGluZzouNCxhdm9pZE92ZXJsYXA6MH0scmVwdWxzaW9uOntjZW50cmFsR3Jhdml0eTouMixzcHJpbmdMZW5ndGg6MjAwLHNwcmluZ0NvbnN0YW50Oi4wNSxub2RlRGlzdGFuY2U6MTAwLGRhbXBpbmc6LjA5LGF2b2lkT3ZlcmxhcDowfSxoaWVyYXJjaGljYWxSZXB1bHNpb246e2NlbnRyYWxHcmF2aXR5OjAsc3ByaW5nTGVuZ3RoOjEwMCxzcHJpbmdDb25zdGFudDouMDEsbm9kZURpc3RhbmNlOjEyMCxkYW1waW5nOi4wOX0sbWF4VmVsb2NpdHk6NTAsbWluVmVsb2NpdHk6Ljc1LHNvbHZlcjpcImJhcm5lc0h1dFwiLHN0YWJpbGl6YXRpb246e2VuYWJsZWQ6ITAsaXRlcmF0aW9uczoxZTMsdXBkYXRlSW50ZXJ2YWw6NTAsb25seUR5bmFtaWNFZGdlczohMSxmaXQ6ITB9LHRpbWVzdGVwOi41LGFkYXB0aXZlVGltZXN0ZXA6ITAsd2luZDp7eDowLHk6MH19LGZvKHRoaXMub3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zKSx0aGlzLnRpbWVzdGVwPS41LHRoaXMubGF5b3V0RmFpbGVkPSExLHRoaXMuYmluZEV2ZW50TGlzdGVuZXJzKCl9cmV0dXJuICRsKHQsW3trZXk6XCJiaW5kRXZlbnRMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5ib2R5LmVtaXR0ZXIub24oXCJpbml0UGh5c2ljc1wiLChmdW5jdGlvbigpe3QuaW5pdFBoeXNpY3MoKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9sYXlvdXRGYWlsZWRcIiwoZnVuY3Rpb24oKXt0LmxheW91dEZhaWxlZD0hMH0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcInJlc2V0UGh5c2ljc1wiLChmdW5jdGlvbigpe3Quc3RvcFNpbXVsYXRpb24oKSx0LnJlYWR5PSExfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiZGlzYWJsZVBoeXNpY3NcIiwoZnVuY3Rpb24oKXt0LnBoeXNpY3NFbmFibGVkPSExLHQuc3RvcFNpbXVsYXRpb24oKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcInJlc3RvcmVQaHlzaWNzXCIsKGZ1bmN0aW9uKCl7dC5zZXRPcHRpb25zKHQub3B0aW9ucyksITA9PT10LnJlYWR5JiZ0LnN0YXJ0U2ltdWxhdGlvbigpfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwic3RhcnRTaW11bGF0aW9uXCIsKGZ1bmN0aW9uKCl7ITA9PT10LnJlYWR5JiZ0LnN0YXJ0U2ltdWxhdGlvbigpfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwic3RvcFNpbXVsYXRpb25cIiwoZnVuY3Rpb24oKXt0LnN0b3BTaW11bGF0aW9uKCl9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJkZXN0cm95XCIsKGZ1bmN0aW9uKCl7dC5zdG9wU2ltdWxhdGlvbighMSksdC5ib2R5LmVtaXR0ZXIub2ZmKCl9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJfZGF0YUNoYW5nZWRcIiwoZnVuY3Rpb24oKXt0LnVwZGF0ZVBoeXNpY3NEYXRhKCl9KSl9fSx7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXQpaWYoITE9PT10KXRoaXMub3B0aW9ucy5lbmFibGVkPSExLHRoaXMucGh5c2ljc0VuYWJsZWQ9ITEsdGhpcy5zdG9wU2ltdWxhdGlvbigpO2Vsc2UgaWYoITA9PT10KXRoaXMub3B0aW9ucy5lbmFibGVkPSEwLHRoaXMucGh5c2ljc0VuYWJsZWQ9ITAsdGhpcy5zdGFydFNpbXVsYXRpb24oKTtlbHNle3RoaXMucGh5c2ljc0VuYWJsZWQ9ITAsQXkoW1wic3RhYmlsaXphdGlvblwiXSx0aGlzLm9wdGlvbnMsdCksdG0odGhpcy5vcHRpb25zLHQsXCJzdGFiaWxpemF0aW9uXCIpLHZvaWQgMD09PXQuZW5hYmxlZCYmKHRoaXMub3B0aW9ucy5lbmFibGVkPSEwKSwhMT09PXRoaXMub3B0aW9ucy5lbmFibGVkJiYodGhpcy5waHlzaWNzRW5hYmxlZD0hMSx0aGlzLnN0b3BTaW11bGF0aW9uKCkpO3ZhciBlPXRoaXMub3B0aW9ucy53aW5kO2UmJigoXCJudW1iZXJcIiE9dHlwZW9mIGUueHx8Q3coZS54KSkmJihlLng9MCksKFwibnVtYmVyXCIhPXR5cGVvZiBlLnl8fEN3KGUueSkpJiYoZS55PTApKSx0aGlzLnRpbWVzdGVwPXRoaXMub3B0aW9ucy50aW1lc3RlcH10aGlzLmluaXQoKX19LHtrZXk6XCJpbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdDtcImZvcmNlQXRsYXMyQmFzZWRcIj09PXRoaXMub3B0aW9ucy5zb2x2ZXI/KHQ9dGhpcy5vcHRpb25zLmZvcmNlQXRsYXMyQmFzZWQsdGhpcy5ub2Rlc1NvbHZlcj1uZXcgTngodGhpcy5ib2R5LHRoaXMucGh5c2ljc0JvZHksdCksdGhpcy5lZGdlc1NvbHZlcj1uZXcgQngodGhpcy5ib2R5LHRoaXMucGh5c2ljc0JvZHksdCksdGhpcy5ncmF2aXR5U29sdmVyPW5ldyBqeCh0aGlzLmJvZHksdGhpcy5waHlzaWNzQm9keSx0KSk6XCJyZXB1bHNpb25cIj09PXRoaXMub3B0aW9ucy5zb2x2ZXI/KHQ9dGhpcy5vcHRpb25zLnJlcHVsc2lvbix0aGlzLm5vZGVzU29sdmVyPW5ldyBQeCh0aGlzLmJvZHksdGhpcy5waHlzaWNzQm9keSx0KSx0aGlzLmVkZ2VzU29sdmVyPW5ldyBCeCh0aGlzLmJvZHksdGhpcy5waHlzaWNzQm9keSx0KSx0aGlzLmdyYXZpdHlTb2x2ZXI9bmV3IHp4KHRoaXMuYm9keSx0aGlzLnBoeXNpY3NCb2R5LHQpKTpcImhpZXJhcmNoaWNhbFJlcHVsc2lvblwiPT09dGhpcy5vcHRpb25zLnNvbHZlcj8odD10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsUmVwdWxzaW9uLHRoaXMubm9kZXNTb2x2ZXI9bmV3IER4KHRoaXMuYm9keSx0aGlzLnBoeXNpY3NCb2R5LHQpLHRoaXMuZWRnZXNTb2x2ZXI9bmV3IEl4KHRoaXMuYm9keSx0aGlzLnBoeXNpY3NCb2R5LHQpLHRoaXMuZ3Jhdml0eVNvbHZlcj1uZXcgengodGhpcy5ib2R5LHRoaXMucGh5c2ljc0JvZHksdCkpOih0PXRoaXMub3B0aW9ucy5iYXJuZXNIdXQsdGhpcy5ub2Rlc1NvbHZlcj1uZXcgTXgodGhpcy5ib2R5LHRoaXMucGh5c2ljc0JvZHksdCksdGhpcy5lZGdlc1NvbHZlcj1uZXcgQngodGhpcy5ib2R5LHRoaXMucGh5c2ljc0JvZHksdCksdGhpcy5ncmF2aXR5U29sdmVyPW5ldyB6eCh0aGlzLmJvZHksdGhpcy5waHlzaWNzQm9keSx0KSksdGhpcy5tb2RlbE9wdGlvbnM9dH19LHtrZXk6XCJpbml0UGh5c2ljc1wiLHZhbHVlOmZ1bmN0aW9uKCl7ITA9PT10aGlzLnBoeXNpY3NFbmFibGVkJiYhMD09PXRoaXMub3B0aW9ucy5lbmFibGVkPyEwPT09dGhpcy5vcHRpb25zLnN0YWJpbGl6YXRpb24uZW5hYmxlZD90aGlzLnN0YWJpbGl6ZSgpOih0aGlzLnN0YWJpbGl6ZWQ9ITEsdGhpcy5yZWFkeT0hMCx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiZml0XCIse30sdGhpcy5sYXlvdXRGYWlsZWQpLHRoaXMuc3RhcnRTaW11bGF0aW9uKCkpOih0aGlzLnJlYWR5PSEwLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJmaXRcIikpfX0se2tleTpcInN0YXJ0U2ltdWxhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ7ITA9PT10aGlzLnBoeXNpY3NFbmFibGVkJiYhMD09PXRoaXMub3B0aW9ucy5lbmFibGVkPyh0aGlzLnN0YWJpbGl6ZWQ9ITEsdGhpcy5hZGFwdGl2ZVRpbWVzdGVwPSExLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVzaXplTm9kZXNcIiksdm9pZCAwPT09dGhpcy52aWV3RnVuY3Rpb24mJih0aGlzLnZpZXdGdW5jdGlvbj1Gbyh0PXRoaXMuc2ltdWxhdGlvblN0ZXApLmNhbGwodCx0aGlzKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcImluaXRSZWRyYXdcIix0aGlzLnZpZXdGdW5jdGlvbiksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9zdGFydFJlbmRlcmluZ1wiKSkpOnRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVkcmF3XCIpfX0se2tleTpcInN0b3BTaW11bGF0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3RoaXMuc3RhYmlsaXplZD0hMCwhMD09PXQmJnRoaXMuX2VtaXRTdGFiaWxpemVkKCksdm9pZCAwIT09dGhpcy52aWV3RnVuY3Rpb24mJih0aGlzLmJvZHkuZW1pdHRlci5vZmYoXCJpbml0UmVkcmF3XCIsdGhpcy52aWV3RnVuY3Rpb24pLHRoaXMudmlld0Z1bmN0aW9uPXZvaWQgMCwhMD09PXQmJnRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfc3RvcFJlbmRlcmluZ1wiKSl9fSx7a2V5Olwic2ltdWxhdGlvblN0ZXBcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXh1KCk7dGhpcy5waHlzaWNzVGljaygpLCh4dSgpLXQ8LjQqdGhpcy5zaW11bGF0aW9uSW50ZXJ2YWx8fCEwPT09dGhpcy5ydW5Eb3VibGVTcGVlZCkmJiExPT09dGhpcy5zdGFiaWxpemVkJiYodGhpcy5waHlzaWNzVGljaygpLHRoaXMucnVuRG91YmxlU3BlZWQ9ITApLCEwPT09dGhpcy5zdGFiaWxpemVkJiZ0aGlzLnN0b3BTaW11bGF0aW9uKCl9fSx7a2V5OlwiX2VtaXRTdGFiaWxpemVkXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnRoaXMuc3RhYmlsaXphdGlvbkl0ZXJhdGlvbnM7KHRoaXMuc3RhYmlsaXphdGlvbkl0ZXJhdGlvbnM+MXx8ITA9PT10aGlzLnN0YXJ0ZWRTdGFiaWxpemF0aW9uKSYmYnYoKGZ1bmN0aW9uKCl7dC5ib2R5LmVtaXR0ZXIuZW1pdChcInN0YWJpbGl6ZWRcIix7aXRlcmF0aW9uczplfSksdC5zdGFydGVkU3RhYmlsaXphdGlvbj0hMSx0LnN0YWJpbGl6YXRpb25JdGVyYXRpb25zPTB9KSwwKX19LHtrZXk6XCJwaHlzaWNzU3RlcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ncmF2aXR5U29sdmVyLnNvbHZlKCksdGhpcy5ub2Rlc1NvbHZlci5zb2x2ZSgpLHRoaXMuZWRnZXNTb2x2ZXIuc29sdmUoKSx0aGlzLm1vdmVOb2RlcygpfX0se2tleTpcImFkanVzdFRpbWVTdGVwXCIsdmFsdWU6ZnVuY3Rpb24oKXshMD09PXRoaXMuX2V2YWx1YXRlU3RlcFF1YWxpdHkoKT90aGlzLnRpbWVzdGVwPTEuMip0aGlzLnRpbWVzdGVwOnRoaXMudGltZXN0ZXAvMS4yPHRoaXMub3B0aW9ucy50aW1lc3RlcD90aGlzLnRpbWVzdGVwPXRoaXMub3B0aW9ucy50aW1lc3RlcDoodGhpcy5hZGFwdGl2ZUNvdW50ZXI9LTEsdGhpcy50aW1lc3RlcD1NYXRoLm1heCh0aGlzLm9wdGlvbnMudGltZXN0ZXAsdGhpcy50aW1lc3RlcC8xLjIpKX19LHtrZXk6XCJwaHlzaWNzVGlja1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5fc3RhcnRTdGFiaWxpemluZygpLCEwIT09dGhpcy5zdGFiaWxpemVkKXtpZighMD09PXRoaXMuYWRhcHRpdmVUaW1lc3RlcCYmITA9PT10aGlzLmFkYXB0aXZlVGltZXN0ZXBFbmFibGVkKXRoaXMuYWRhcHRpdmVDb3VudGVyJXRoaXMuYWRhcHRpdmVJbnRlcnZhbD09MD8odGhpcy50aW1lc3RlcD0yKnRoaXMudGltZXN0ZXAsdGhpcy5waHlzaWNzU3RlcCgpLHRoaXMucmV2ZXJ0KCksdGhpcy50aW1lc3RlcD0uNSp0aGlzLnRpbWVzdGVwLHRoaXMucGh5c2ljc1N0ZXAoKSx0aGlzLnBoeXNpY3NTdGVwKCksdGhpcy5hZGp1c3RUaW1lU3RlcCgpKTp0aGlzLnBoeXNpY3NTdGVwKCksdGhpcy5hZGFwdGl2ZUNvdW50ZXIrPTE7ZWxzZSB0aGlzLnRpbWVzdGVwPXRoaXMub3B0aW9ucy50aW1lc3RlcCx0aGlzLnBoeXNpY3NTdGVwKCk7ITA9PT10aGlzLnN0YWJpbGl6ZWQmJnRoaXMucmV2ZXJ0KCksdGhpcy5zdGFiaWxpemF0aW9uSXRlcmF0aW9ucysrfX19LHtrZXk6XCJ1cGRhdGVQaHlzaWNzRGF0YVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5waHlzaWNzQm9keS5mb3JjZXM9e30sdGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXM9W10sdGhpcy5waHlzaWNzQm9keS5waHlzaWNzRWRnZUluZGljZXM9W107dmFyIHQ9dGhpcy5ib2R5Lm5vZGVzLGU9dGhpcy5ib2R5LmVkZ2VzO2Zvcih2YXIgaSBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGkpJiYhMD09PXRbaV0ub3B0aW9ucy5waHlzaWNzJiZ0aGlzLnBoeXNpY3NCb2R5LnBoeXNpY3NOb2RlSW5kaWNlcy5wdXNoKHRbaV0uaWQpO2Zvcih2YXIgbyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pJiYhMD09PWVbb10ub3B0aW9ucy5waHlzaWNzJiZ0aGlzLnBoeXNpY3NCb2R5LnBoeXNpY3NFZGdlSW5kaWNlcy5wdXNoKGVbb10uaWQpO2Zvcih2YXIgbj0wO248dGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXMubGVuZ3RoO24rKyl7dmFyIHI9dGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXNbbl07dGhpcy5waHlzaWNzQm9keS5mb3JjZXNbcl09e3g6MCx5OjB9LHZvaWQgMD09PXRoaXMucGh5c2ljc0JvZHkudmVsb2NpdGllc1tyXSYmKHRoaXMucGh5c2ljc0JvZHkudmVsb2NpdGllc1tyXT17eDowLHk6MH0pfWZvcih2YXIgcyBpbiB0aGlzLnBoeXNpY3NCb2R5LnZlbG9jaXRpZXMpdm9pZCAwPT09dFtzXSYmZGVsZXRlIHRoaXMucGh5c2ljc0JvZHkudmVsb2NpdGllc1tzXX19LHtrZXk6XCJyZXZlcnRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PW11KHRoaXMucHJldmlvdXNTdGF0ZXMpLGU9dGhpcy5ib2R5Lm5vZGVzLGk9dGhpcy5waHlzaWNzQm9keS52ZWxvY2l0aWVzO3RoaXMucmVmZXJlbmNlU3RhdGU9e307Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBuPXRbb107dm9pZCAwIT09ZVtuXT8hMD09PWVbbl0ub3B0aW9ucy5waHlzaWNzJiYodGhpcy5yZWZlcmVuY2VTdGF0ZVtuXT17cG9zaXRpb25zOnt4OmVbbl0ueCx5OmVbbl0ueX19LGlbbl0ueD10aGlzLnByZXZpb3VzU3RhdGVzW25dLnZ4LGlbbl0ueT10aGlzLnByZXZpb3VzU3RhdGVzW25dLnZ5LGVbbl0ueD10aGlzLnByZXZpb3VzU3RhdGVzW25dLngsZVtuXS55PXRoaXMucHJldmlvdXNTdGF0ZXNbbl0ueSk6ZGVsZXRlIHRoaXMucHJldmlvdXNTdGF0ZXNbbl19fX0se2tleTpcIl9ldmFsdWF0ZVN0ZXBRdWFsaXR5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlLGk9dGhpcy5ib2R5Lm5vZGVzLG89dGhpcy5yZWZlcmVuY2VTdGF0ZTtmb3IodmFyIG4gaW4gdGhpcy5yZWZlcmVuY2VTdGF0ZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5yZWZlcmVuY2VTdGF0ZSxuKSYmdm9pZCAwIT09aVtuXSYmKHQ9aVtuXS54LW9bbl0ucG9zaXRpb25zLngsZT1pW25dLnktb1tuXS5wb3NpdGlvbnMueSxNYXRoLnNxcnQoTWF0aC5wb3codCwyKStNYXRoLnBvdyhlLDIpKT4uMykpcmV0dXJuITE7cmV0dXJuITB9fSx7a2V5OlwibW92ZU5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5waHlzaWNzQm9keS5waHlzaWNzTm9kZUluZGljZXMsZT0wLGk9MCxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBuPXRbb10scj10aGlzLl9wZXJmb3JtU3RlcChuKTtlPU1hdGgubWF4KGUsciksaSs9cn10aGlzLmFkYXB0aXZlVGltZXN0ZXBFbmFibGVkPWkvdC5sZW5ndGg8NSx0aGlzLnN0YWJpbGl6ZWQ9ZTx0aGlzLm9wdGlvbnMubWluVmVsb2NpdHl9fSx7a2V5OlwiY2FsY3VsYXRlQ29tcG9uZW50VmVsb2NpdHlcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dCs9KGUtdGhpcy5tb2RlbE9wdGlvbnMuZGFtcGluZyp0KS9pKnRoaXMudGltZXN0ZXA7dmFyIG89dGhpcy5vcHRpb25zLm1heFZlbG9jaXR5fHwxZTk7cmV0dXJuIE1hdGguYWJzKHQpPm8mJih0PXQ+MD9vOi1vKSx0fX0se2tleTpcIl9wZXJmb3JtU3RlcFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYm9keS5ub2Rlc1t0XSxpPXRoaXMucGh5c2ljc0JvZHkuZm9yY2VzW3RdO3RoaXMub3B0aW9ucy53aW5kJiYoaS54Kz10aGlzLm9wdGlvbnMud2luZC54LGkueSs9dGhpcy5vcHRpb25zLndpbmQueSk7dmFyIG89dGhpcy5waHlzaWNzQm9keS52ZWxvY2l0aWVzW3RdO3JldHVybiB0aGlzLnByZXZpb3VzU3RhdGVzW3RdPXt4OmUueCx5OmUueSx2eDpvLngsdnk6by55fSwhMT09PWUub3B0aW9ucy5maXhlZC54PyhvLng9dGhpcy5jYWxjdWxhdGVDb21wb25lbnRWZWxvY2l0eShvLngsaS54LGUub3B0aW9ucy5tYXNzKSxlLngrPW8ueCp0aGlzLnRpbWVzdGVwKTooaS54PTAsby54PTApLCExPT09ZS5vcHRpb25zLmZpeGVkLnk/KG8ueT10aGlzLmNhbGN1bGF0ZUNvbXBvbmVudFZlbG9jaXR5KG8ueSxpLnksZS5vcHRpb25zLm1hc3MpLGUueSs9by55KnRoaXMudGltZXN0ZXApOihpLnk9MCxvLnk9MCksTWF0aC5zcXJ0KE1hdGgucG93KG8ueCwyKStNYXRoLnBvdyhvLnksMikpfX0se2tleTpcIl9mcmVlemVOb2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5ib2R5Lm5vZGVzO2Zvcih2YXIgZSBpbiB0KWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpJiZ0W2VdLngmJnRbZV0ueSl7dmFyIGk9dFtlXS5vcHRpb25zLmZpeGVkO3RoaXMuZnJlZXplQ2FjaGVbZV09e3g6aS54LHk6aS55fSxpLng9ITAsaS55PSEwfX19LHtrZXk6XCJfcmVzdG9yZUZyb3plbk5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmJvZHkubm9kZXM7Zm9yKHZhciBlIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJnZvaWQgMCE9PXRoaXMuZnJlZXplQ2FjaGVbZV0mJih0W2VdLm9wdGlvbnMuZml4ZWQueD10aGlzLmZyZWV6ZUNhY2hlW2VdLngsdFtlXS5vcHRpb25zLmZpeGVkLnk9dGhpcy5mcmVlemVDYWNoZVtlXS55KTt0aGlzLmZyZWV6ZUNhY2hlPXt9fX0se2tleTpcInN0YWJpbGl6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLm9wdGlvbnMuc3RhYmlsaXphdGlvbi5pdGVyYXRpb25zO1wibnVtYmVyXCIhPXR5cGVvZiBlJiYoZT10aGlzLm9wdGlvbnMuc3RhYmlsaXphdGlvbi5pdGVyYXRpb25zLGNvbnNvbGUuZXJyb3IoXCJUaGUgc3RhYmlsaXplIG1ldGhvZCBuZWVkcyBhIG51bWVyaWMgYW1vdW50IG9mIGl0ZXJhdGlvbnMuIFN3aXRjaGluZyB0byBkZWZhdWx0OiBcIixlKSksMCE9PXRoaXMucGh5c2ljc0JvZHkucGh5c2ljc05vZGVJbmRpY2VzLmxlbmd0aD8odGhpcy5hZGFwdGl2ZVRpbWVzdGVwPXRoaXMub3B0aW9ucy5hZGFwdGl2ZVRpbWVzdGVwLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVzaXplTm9kZXNcIiksdGhpcy5zdG9wU2ltdWxhdGlvbigpLHRoaXMuc3RhYmlsaXplZD0hMSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2Jsb2NrUmVkcmF3XCIpLHRoaXMudGFyZ2V0SXRlcmF0aW9ucz1lLCEwPT09dGhpcy5vcHRpb25zLnN0YWJpbGl6YXRpb24ub25seUR5bmFtaWNFZGdlcyYmdGhpcy5fZnJlZXplTm9kZXMoKSx0aGlzLnN0YWJpbGl6YXRpb25JdGVyYXRpb25zPTAsYnYoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuX3N0YWJpbGl6YXRpb25CYXRjaCgpfSksMCkpOnRoaXMucmVhZHk9ITB9fSx7a2V5OlwiX3N0YXJ0U3RhYmlsaXppbmdcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiEwIT09dGhpcy5zdGFydGVkU3RhYmlsaXphdGlvbiYmKHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJzdGFydFN0YWJpbGl6aW5nXCIpLHRoaXMuc3RhcnRlZFN0YWJpbGl6YXRpb249ITAsITApfX0se2tleTpcIl9zdGFiaWxpemF0aW9uQmF0Y2hcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1mdW5jdGlvbigpe3JldHVybiExPT09dC5zdGFiaWxpemVkJiZ0LnN0YWJpbGl6YXRpb25JdGVyYXRpb25zPHQudGFyZ2V0SXRlcmF0aW9uc30saT1mdW5jdGlvbigpe3QuYm9keS5lbWl0dGVyLmVtaXQoXCJzdGFiaWxpemF0aW9uUHJvZ3Jlc3NcIix7aXRlcmF0aW9uczp0LnN0YWJpbGl6YXRpb25JdGVyYXRpb25zLHRvdGFsOnQudGFyZ2V0SXRlcmF0aW9uc30pfTt0aGlzLl9zdGFydFN0YWJpbGl6aW5nKCkmJmkoKTtmb3IodmFyIG8sbj0wO2UoKSYmbjx0aGlzLm9wdGlvbnMuc3RhYmlsaXphdGlvbi51cGRhdGVJbnRlcnZhbDspdGhpcy5waHlzaWNzVGljaygpLG4rKzsoaSgpLGUoKSk/YnYoRm8obz10aGlzLl9zdGFiaWxpemF0aW9uQmF0Y2gpLmNhbGwobyx0aGlzKSwwKTp0aGlzLl9maW5hbGl6ZVN0YWJpbGl6YXRpb24oKX19LHtrZXk6XCJfZmluYWxpemVTdGFiaWxpemF0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2FsbG93UmVkcmF3XCIpLCEwPT09dGhpcy5vcHRpb25zLnN0YWJpbGl6YXRpb24uZml0JiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiZml0XCIpLCEwPT09dGhpcy5vcHRpb25zLnN0YWJpbGl6YXRpb24ub25seUR5bmFtaWNFZGdlcyYmdGhpcy5fcmVzdG9yZUZyb3plbk5vZGVzKCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInN0YWJpbGl6YXRpb25JdGVyYXRpb25zRG9uZVwiKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIiksITA9PT10aGlzLnN0YWJpbGl6ZWQ/dGhpcy5fZW1pdFN0YWJpbGl6ZWQoKTp0aGlzLnN0YXJ0U2ltdWxhdGlvbigpLHRoaXMucmVhZHk9ITB9fSx7a2V5OlwiX2RyYXdGb3JjZXNcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHRoaXMucGh5c2ljc0JvZHkucGh5c2ljc05vZGVJbmRpY2VzLmxlbmd0aDtlKyspe3ZhciBpPXRoaXMucGh5c2ljc0JvZHkucGh5c2ljc05vZGVJbmRpY2VzW2VdLG89dGhpcy5ib2R5Lm5vZGVzW2ldLG49dGhpcy5waHlzaWNzQm9keS5mb3JjZXNbaV0scj1NYXRoLnNxcnQoTWF0aC5wb3cobi54LDIpK01hdGgucG93KG4ueCwyKSkscz1NYXRoLm1pbihNYXRoLm1heCg1LHIpLDE1KSxhPTMqcyxoPUt5KCgxODAtMTgwKk1hdGgubWluKDEsTWF0aC5tYXgoMCwuMDMqcikpKS8zNjAsMSwxKSxkPXt4Om8ueCsyMCpuLngseTpvLnkrMjAqbi55fTt0LmxpbmVXaWR0aD1zLHQuc3Ryb2tlU3R5bGU9aCx0LmJlZ2luUGF0aCgpLHQubW92ZVRvKG8ueCxvLnkpLHQubGluZVRvKGQueCxkLnkpLHQuc3Ryb2tlKCk7dmFyIGw9TWF0aC5hdGFuMihuLnksbi54KTt0LmZpbGxTdHlsZT1oLGR4LmRyYXcodCx7dHlwZTpcImFycm93XCIscG9pbnQ6ZCxhbmdsZTpsLGxlbmd0aDphfSksUHYodCkuY2FsbCh0KX19fV0pLHR9KCksSHg9bmV3IFVpbnQ4QXJyYXkoMTYpO2Z1bmN0aW9uIFd4KCl7aWYoIVJ4JiYhKFJ4PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBjcnlwdG8mJmNyeXB0by5nZXRSYW5kb21WYWx1ZXMmJmNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgbXNDcnlwdG8mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyYmbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pKSl0aHJvdyBuZXcgRXJyb3IoXCJjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZFwiKTtyZXR1cm4gUngoSHgpfXZhciBWeD0vXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7ZnVuY3Rpb24gcXgodCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJlZ4LnRlc3QodCl9Zm9yKHZhciBVeD1bXSxZeD0wO1l4PDI1NjsrK1l4KVV4LnB1c2goKFl4KzI1NikudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7ZnVuY3Rpb24gWHgodCxlLGkpe3ZhciBvPSh0PXR8fHt9KS5yYW5kb218fCh0LnJuZ3x8V3gpKCk7aWYob1s2XT0xNSZvWzZdfDY0LG9bOF09NjMmb1s4XXwxMjgsZSl7aT1pfHwwO2Zvcih2YXIgbj0wO248MTY7KytuKWVbaStuXT1vW25dO3JldHVybiBlfXJldHVybiBmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCxpPShVeFt0W2UrMF1dK1V4W3RbZSsxXV0rVXhbdFtlKzJdXStVeFt0W2UrM11dK1wiLVwiK1V4W3RbZSs0XV0rVXhbdFtlKzVdXStcIi1cIitVeFt0W2UrNl1dK1V4W3RbZSs3XV0rXCItXCIrVXhbdFtlKzhdXStVeFt0W2UrOV1dK1wiLVwiK1V4W3RbZSsxMF1dK1V4W3RbZSsxMV1dK1V4W3RbZSsxMl1dK1V4W3RbZSsxM11dK1V4W3RbZSsxNF1dK1V4W3RbZSsxNV1dKS50b0xvd2VyQ2FzZSgpO2lmKCFxeChpKSl0aHJvdyBUeXBlRXJyb3IoXCJTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWRcIik7cmV0dXJuIGl9KG8pfXZhciBHeD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtYbCh0aGlzLHQpfXJldHVybiAkbCh0LG51bGwsW3trZXk6XCJnZXRSYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGk9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOltdLG89MWU5LG49LTFlOSxyPTFlOSxzPS0xZTk7aWYoaS5sZW5ndGg+MClmb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKylyPihlPXRbaVthXV0pLnNoYXBlLmJvdW5kaW5nQm94LmxlZnQmJihyPWUuc2hhcGUuYm91bmRpbmdCb3gubGVmdCksczxlLnNoYXBlLmJvdW5kaW5nQm94LnJpZ2h0JiYocz1lLnNoYXBlLmJvdW5kaW5nQm94LnJpZ2h0KSxvPmUuc2hhcGUuYm91bmRpbmdCb3gudG9wJiYobz1lLnNoYXBlLmJvdW5kaW5nQm94LnRvcCksbjxlLnNoYXBlLmJvdW5kaW5nQm94LmJvdHRvbSYmKG49ZS5zaGFwZS5ib3VuZGluZ0JveC5ib3R0b20pO3JldHVybiAxZTk9PT1yJiYtMWU5PT09cyYmMWU5PT09byYmLTFlOT09PW4mJihvPTAsbj0wLHI9MCxzPTApLHttaW5YOnIsbWF4WDpzLG1pblk6byxtYXhZOm59fX0se2tleTpcImdldFJhbmdlQ29yZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGk9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOltdLG89MWU5LG49LTFlOSxyPTFlOSxzPS0xZTk7aWYoaS5sZW5ndGg+MClmb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKylyPihlPXRbaVthXV0pLngmJihyPWUueCksczxlLngmJihzPWUueCksbz5lLnkmJihvPWUueSksbjxlLnkmJihuPWUueSk7cmV0dXJuIDFlOT09PXImJi0xZTk9PT1zJiYxZTk9PT1vJiYtMWU5PT09biYmKG89MCxuPTAscj0wLHM9MCkse21pblg6cixtYXhYOnMsbWluWTpvLG1heFk6bn19fSx7a2V5OlwiZmluZENlbnRlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybnt4Oi41Kih0Lm1heFgrdC5taW5YKSx5Oi41Kih0Lm1heFkrdC5taW5ZKX19fSx7a2V5OlwiY2xvbmVPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT17fTtyZXR1cm4gdm9pZCAwPT09ZXx8XCJub2RlXCI9PT1lPyhSeShpLHQub3B0aW9ucywhMCksaS54PXQueCxpLnk9dC55LGkuYW1vdW50T2ZDb25uZWN0aW9ucz10LmVkZ2VzLmxlbmd0aCk6UnkoaSx0Lm9wdGlvbnMsITApLGl9fV0pLHR9KCk7ZnVuY3Rpb24gS3godCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgJHg9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1LeChpKTtmdW5jdGlvbiBpKHQsbyxuLHIscyxhKXt2YXIgaDtyZXR1cm4gWGwodGhpcyxpKSwoaD1lLmNhbGwodGhpcyx0LG8sbixyLHMsYSkpLmlzQ2x1c3Rlcj0hMCxoLmNvbnRhaW5lZE5vZGVzPXt9LGguY29udGFpbmVkRWRnZXM9e30saH1yZXR1cm4gJGwoaSxbe2tleTpcIl9vcGVuQ2hpbGRDbHVzdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxpPXRoaXMuYm9keS5ub2Rlc1t0XTtpZih2b2lkIDA9PT10aGlzLmNvbnRhaW5lZE5vZGVzW3RdKXRocm93IG5ldyBFcnJvcihcIm5vZGUgd2l0aCBpZDogXCIrdCtcIiBub3QgaW4gY3VycmVudCBjbHVzdGVyXCIpO2lmKCFpLmlzQ2x1c3Rlcil0aHJvdyBuZXcgRXJyb3IoXCJub2RlIHdpdGggaWQ6IFwiK3QrXCIgaXMgbm90IGEgY2x1c3RlclwiKTtkZWxldGUgdGhpcy5jb250YWluZWROb2Rlc1t0XSxXeShpLmVkZ2VzLChmdW5jdGlvbih0KXtkZWxldGUgZS5jb250YWluZWRFZGdlc1t0LmlkXX0pKSxXeShpLmNvbnRhaW5lZE5vZGVzLChmdW5jdGlvbih0LGkpe2UuY29udGFpbmVkTm9kZXNbaV09dH0pKSxpLmNvbnRhaW5lZE5vZGVzPXt9LFd5KGkuY29udGFpbmVkRWRnZXMsKGZ1bmN0aW9uKHQsaSl7ZS5jb250YWluZWRFZGdlc1tpXT10fSkpLGkuY29udGFpbmVkRWRnZXM9e30sV3koaS5lZGdlcywoZnVuY3Rpb24odCl7V3koZS5lZGdlcywoZnVuY3Rpb24oaSl7dmFyIG8sbixyPXpwKG89aS5jbHVzdGVyaW5nRWRnZVJlcGxhY2luZ0lkcykuY2FsbChvLHQuaWQpOy0xIT09ciYmKFd5KHQuY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHMsKGZ1bmN0aW9uKHQpe2kuY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHMucHVzaCh0KSxlLmJvZHkuZWRnZXNbdF0uZWRnZVJlcGxhY2VkQnlJZD1pLmlkfSkpLHVmKG49aS5jbHVzdGVyaW5nRWRnZVJlcGxhY2luZ0lkcykuY2FsbChuLHIsMSkpfSkpfSkpLGkuZWRnZXM9W119fV0pLGl9KE1fKSxaeD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIGk9dGhpcztYbCh0aGlzLHQpLHRoaXMuYm9keT1lLHRoaXMuY2x1c3RlcmVkTm9kZXM9e30sdGhpcy5jbHVzdGVyZWRFZGdlcz17fSx0aGlzLm9wdGlvbnM9e30sdGhpcy5kZWZhdWx0T3B0aW9ucz17fSxmbyh0aGlzLm9wdGlvbnMsdGhpcy5kZWZhdWx0T3B0aW9ucyksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJfcmVzZXREYXRhXCIsKGZ1bmN0aW9uKCl7aS5jbHVzdGVyZWROb2Rlcz17fSxpLmNsdXN0ZXJlZEVkZ2VzPXt9fSkpfXJldHVybiAkbCh0LFt7a2V5OlwiY2x1c3RlckJ5SHVic2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09dD90PXRoaXMuX2dldEh1YlNpemUoKTpcIm9iamVjdFwiPT09UWModCkmJihlPXRoaXMuX2NoZWNrT3B0aW9ucyh0KSx0PXRoaXMuX2dldEh1YlNpemUoKSk7Zm9yKHZhciBpPVtdLG89MDtvPHRoaXMuYm9keS5ub2RlSW5kaWNlcy5sZW5ndGg7bysrKXt2YXIgbj10aGlzLmJvZHkubm9kZXNbdGhpcy5ib2R5Lm5vZGVJbmRpY2VzW29dXTtuLmVkZ2VzLmxlbmd0aD49dCYmaS5wdXNoKG4uaWQpfWZvcih2YXIgcj0wO3I8aS5sZW5ndGg7cisrKXRoaXMuY2x1c3RlckJ5Q29ubmVjdGlvbihpW3JdLGUsITApO3RoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfZGF0YUNoYW5nZWRcIil9fSx7a2V5OlwiY2x1c3RlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxpPSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV07aWYodm9pZCAwPT09ZS5qb2luQ29uZGl0aW9uKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjYWxsIGNsdXN0ZXJCeU5vZGVEYXRhIHdpdGhvdXQgYSBqb2luQ29uZGl0aW9uIGZ1bmN0aW9uIGluIHRoZSBvcHRpb25zLlwiKTtlPXRoaXMuX2NoZWNrT3B0aW9ucyhlKTt2YXIgbz17fSxuPXt9O1d5KHRoaXMuYm9keS5ub2RlcywoZnVuY3Rpb24oaSxyKXtpLm9wdGlvbnMmJiEwPT09ZS5qb2luQ29uZGl0aW9uKGkub3B0aW9ucykmJihvW3JdPWksV3koaS5lZGdlcywoZnVuY3Rpb24oZSl7dm9pZCAwPT09dC5jbHVzdGVyZWRFZGdlc1tlLmlkXSYmKG5bZS5pZF09ZSl9KSkpfSkpLHRoaXMuX2NsdXN0ZXIobyxuLGUsaSl9fSx7a2V5OlwiY2x1c3RlckJ5RWRnZUNvdW50XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLG89IShhcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSl8fGFyZ3VtZW50c1syXTtlPXRoaXMuX2NoZWNrT3B0aW9ucyhlKTtmb3IodmFyIG4scixzLGE9W10saD17fSxkPWZ1bmN0aW9uKG8pe3ZhciBkPXt9LGw9e30sYz1pLmJvZHkubm9kZUluZGljZXNbb10sdT1pLmJvZHkubm9kZXNbY107aWYodm9pZCAwPT09aFtjXSl7cz0wLHI9W107Zm9yKHZhciBmPTA7Zjx1LmVkZ2VzLmxlbmd0aDtmKyspbj11LmVkZ2VzW2ZdLHZvaWQgMD09PWkuY2x1c3RlcmVkRWRnZXNbbi5pZF0mJihuLnRvSWQhPT1uLmZyb21JZCYmcysrLHIucHVzaChuKSk7aWYocz09PXQpe2Zvcih2YXIgcD1mdW5jdGlvbih0KXtpZih2b2lkIDA9PT1lLmpvaW5Db25kaXRpb258fG51bGw9PT1lLmpvaW5Db25kaXRpb24pcmV0dXJuITA7dmFyIGk9R3guY2xvbmVPcHRpb25zKHQpO3JldHVybiBlLmpvaW5Db25kaXRpb24oaSl9LHY9ITAsZz0wO2c8ci5sZW5ndGg7ZysrKXtuPXJbZ107dmFyIHk9aS5fZ2V0Q29ubmVjdGVkSWQobixjKTtpZighcCh1KSl7dj0hMTticmVha31sW24uaWRdPW4sZFtjXT11LGRbeV09aS5ib2R5Lm5vZGVzW3ldLGhbY109ITB9aWYobXUoZCkubGVuZ3RoPjAmJm11KGwpLmxlbmd0aD4wJiYhMD09PXYpe3ZhciBtPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDxhLmxlbmd0aDsrK3QpZm9yKHZhciBlIGluIGQpaWYodm9pZCAwIT09YVt0XS5ub2Rlc1tlXSlyZXR1cm4gYVt0XX0oKTtpZih2b2lkIDAhPT1tKXtmb3IodmFyIGIgaW4gZCl2b2lkIDA9PT1tLm5vZGVzW2JdJiYobS5ub2Rlc1tiXT1kW2JdKTtmb3IodmFyIHcgaW4gbCl2b2lkIDA9PT1tLmVkZ2VzW3ddJiYobS5lZGdlc1t3XT1sW3ddKX1lbHNlIGEucHVzaCh7bm9kZXM6ZCxlZGdlczpsfSl9fX19LGw9MDtsPHRoaXMuYm9keS5ub2RlSW5kaWNlcy5sZW5ndGg7bCsrKWQobCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspdGhpcy5fY2x1c3RlcihhW2NdLm5vZGVzLGFbY10uZWRnZXMsZSwhMSk7ITA9PT1vJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX0se2tleTpcImNsdXN0ZXJPdXRsaWVyc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV07dGhpcy5jbHVzdGVyQnlFZGdlQ291bnQoMSx0LGUpfX0se2tleTpcImNsdXN0ZXJCcmlkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTt0aGlzLmNsdXN0ZXJCeUVkZ2VDb3VudCgyLHQsZSl9fSx7a2V5OlwiY2x1c3RlckJ5Q29ubmVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGksbz0hKGFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdKXx8YXJndW1lbnRzWzJdO2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IEVycm9yKFwiTm8gbm9kZUlkIHN1cHBsaWVkIHRvIGNsdXN0ZXJCeUNvbm5lY3Rpb24hXCIpO2lmKHZvaWQgMD09PXRoaXMuYm9keS5ub2Rlc1t0XSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgbm9kZUlkIGdpdmVuIHRvIGNsdXN0ZXJCeUNvbm5lY3Rpb24gZG9lcyBub3QgZXhpc3QhXCIpO3ZhciBuPXRoaXMuYm9keS5ub2Rlc1t0XTt2b2lkIDA9PT0oZT10aGlzLl9jaGVja09wdGlvbnMoZSxuKSkuY2x1c3Rlck5vZGVQcm9wZXJ0aWVzLngmJihlLmNsdXN0ZXJOb2RlUHJvcGVydGllcy54PW4ueCksdm9pZCAwPT09ZS5jbHVzdGVyTm9kZVByb3BlcnRpZXMueSYmKGUuY2x1c3Rlck5vZGVQcm9wZXJ0aWVzLnk9bi55KSx2b2lkIDA9PT1lLmNsdXN0ZXJOb2RlUHJvcGVydGllcy5maXhlZCYmKGUuY2x1c3Rlck5vZGVQcm9wZXJ0aWVzLmZpeGVkPXt9LGUuY2x1c3Rlck5vZGVQcm9wZXJ0aWVzLmZpeGVkLng9bi5vcHRpb25zLmZpeGVkLngsZS5jbHVzdGVyTm9kZVByb3BlcnRpZXMuZml4ZWQueT1uLm9wdGlvbnMuZml4ZWQueSk7dmFyIHI9e30scz17fSxhPW4uaWQsaD1HeC5jbG9uZU9wdGlvbnMobik7clthXT1uO2Zvcih2YXIgZD0wO2Q8bi5lZGdlcy5sZW5ndGg7ZCsrKXt2YXIgbD1uLmVkZ2VzW2RdO2lmKHZvaWQgMD09PXRoaXMuY2x1c3RlcmVkRWRnZXNbbC5pZF0pe3ZhciBjPXRoaXMuX2dldENvbm5lY3RlZElkKGwsYSk7aWYodm9pZCAwPT09dGhpcy5jbHVzdGVyZWROb2Rlc1tjXSlpZihjIT09YSlpZih2b2lkIDA9PT1lLmpvaW5Db25kaXRpb24pc1tsLmlkXT1sLHJbY109dGhpcy5ib2R5Lm5vZGVzW2NdO2Vsc2V7dmFyIHU9R3guY2xvbmVPcHRpb25zKHRoaXMuYm9keS5ub2Rlc1tjXSk7ITA9PT1lLmpvaW5Db25kaXRpb24oaCx1KSYmKHNbbC5pZF09bCxyW2NdPXRoaXMuYm9keS5ub2Rlc1tjXSl9ZWxzZSBzW2wuaWRdPWx9fXZhciBmPXZ1KGk9bXUocikpLmNhbGwoaSwoZnVuY3Rpb24odCl7cmV0dXJuIHJbdF0uaWR9KSk7Zm9yKHZhciBwIGluIHIpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIscCkpZm9yKHZhciB2PXJbcF0sZz0wO2c8di5lZGdlcy5sZW5ndGg7ZysrKXt2YXIgeT12LmVkZ2VzW2ddO3pwKGYpLmNhbGwoZix0aGlzLl9nZXRDb25uZWN0ZWRJZCh5LHYuaWQpKT4tMSYmKHNbeS5pZF09eSl9dGhpcy5fY2x1c3RlcihyLHMsZSxvKX19LHtrZXk6XCJfY3JlYXRlQ2x1c3RlckVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGksbyl7Zm9yKHZhciBuLHIscyxhLGgsZCxsPW11KHQpLGM9W10sdT0wO3U8bC5sZW5ndGg7dSsrKXtzPXRbcj1sW3VdXTtmb3IodmFyIGY9MDtmPHMuZWRnZXMubGVuZ3RoO2YrKyluPXMuZWRnZXNbZl0sdm9pZCAwPT09dGhpcy5jbHVzdGVyZWRFZGdlc1tuLmlkXSYmKG4udG9JZD09bi5mcm9tSWQ/ZVtuLmlkXT1uOm4udG9JZD09cj8oYT1pLmlkLGQ9aD1uLmZyb21JZCk6KGE9bi50b0lkLGg9aS5pZCxkPWEpLHZvaWQgMD09PXRbZF0mJmMucHVzaCh7ZWRnZTpuLGZyb21JZDpoLHRvSWQ6YX0pKX1mb3IodmFyIHA9W10sdj1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHAubGVuZ3RoO2UrKyl7dmFyIGk9cFtlXSxvPXQuZnJvbUlkPT09aS5mcm9tSWQmJnQudG9JZD09PWkudG9JZCxuPXQuZnJvbUlkPT09aS50b0lkJiZ0LnRvSWQ9PT1pLmZyb21JZDtpZihvfHxuKXJldHVybiBpfXJldHVybiBudWxsfSxnPTA7ZzxjLmxlbmd0aDtnKyspe3ZhciB5PWNbZ10sbT15LmVkZ2UsYj12KHkpO251bGw9PT1iPyhiPXRoaXMuX2NyZWF0ZUNsdXN0ZXJlZEVkZ2UoeS5mcm9tSWQseS50b0lkLG0sbykscC5wdXNoKGIpKTpiLmNsdXN0ZXJpbmdFZGdlUmVwbGFjaW5nSWRzLnB1c2gobS5pZCksdGhpcy5ib2R5LmVkZ2VzW20uaWRdLmVkZ2VSZXBsYWNlZEJ5SWQ9Yi5pZCx0aGlzLl9iYWNrdXBFZGdlT3B0aW9ucyhtKSxtLnNldE9wdGlvbnMoe3BoeXNpY3M6ITF9KX19fSx7a2V5OlwiX2NoZWNrT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O3JldHVybiB2b2lkIDA9PT10LmNsdXN0ZXJFZGdlUHJvcGVydGllcyYmKHQuY2x1c3RlckVkZ2VQcm9wZXJ0aWVzPXt9KSx2b2lkIDA9PT10LmNsdXN0ZXJOb2RlUHJvcGVydGllcyYmKHQuY2x1c3Rlck5vZGVQcm9wZXJ0aWVzPXt9KSx0fX0se2tleTpcIl9jbHVzdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe3ZhciBvPSEoYXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10pfHxhcmd1bWVudHNbM10sbj1bXTtmb3IodmFyIHIgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmdm9pZCAwIT09dGhpcy5jbHVzdGVyZWROb2Rlc1tyXSYmbi5wdXNoKHIpO2Zvcih2YXIgcz0wO3M8bi5sZW5ndGg7KytzKWRlbGV0ZSB0W25bc11dO2lmKDAhPW11KHQpLmxlbmd0aCYmKDEhPW11KHQpLmxlbmd0aHx8MT09aS5jbHVzdGVyTm9kZVByb3BlcnRpZXMuYWxsb3dTaW5nbGVOb2RlQ2x1c3Rlcikpe3ZhciBhPVJ5KHt9LGkuY2x1c3Rlck5vZGVQcm9wZXJ0aWVzKTtpZih2b2lkIDAhPT1pLnByb2Nlc3NQcm9wZXJ0aWVzKXt2YXIgaD1bXTtmb3IodmFyIGQgaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxkKSl7dmFyIGw9R3guY2xvbmVPcHRpb25zKHRbZF0pO2gucHVzaChsKX12YXIgYz1bXTtmb3IodmFyIHUgaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx1KSYmXCJjbHVzdGVyRWRnZTpcIiE9PXUuc3Vic3RyKDAsMTIpKXt2YXIgZj1HeC5jbG9uZU9wdGlvbnMoZVt1XSxcImVkZ2VcIik7Yy5wdXNoKGYpfWlmKCEoYT1pLnByb2Nlc3NQcm9wZXJ0aWVzKGEsaCxjKSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHByb2Nlc3NQcm9wZXJ0aWVzIGZ1bmN0aW9uIGRvZXMgbm90IHJldHVybiBwcm9wZXJ0aWVzIVwiKX12b2lkIDA9PT1hLmlkJiYoYS5pZD1cImNsdXN0ZXI6XCIrWHgoKSk7dmFyIHA9YS5pZDt2b2lkIDA9PT1hLmxhYmVsJiYoYS5sYWJlbD1cImNsdXN0ZXJcIik7dmFyIHY9dm9pZCAwO3ZvaWQgMD09PWEueCYmKHY9dGhpcy5fZ2V0Q2x1c3RlclBvc2l0aW9uKHQpLGEueD12LngpLHZvaWQgMD09PWEueSYmKHZvaWQgMD09PXYmJih2PXRoaXMuX2dldENsdXN0ZXJQb3NpdGlvbih0KSksYS55PXYueSksYS5pZD1wO3ZhciBnPXRoaXMuYm9keS5mdW5jdGlvbnMuY3JlYXRlTm9kZShhLCR4KTtnLmNvbnRhaW5lZE5vZGVzPXQsZy5jb250YWluZWRFZGdlcz1lLGcuY2x1c3RlckVkZ2VQcm9wZXJ0aWVzPWkuY2x1c3RlckVkZ2VQcm9wZXJ0aWVzLHRoaXMuYm9keS5ub2Rlc1thLmlkXT1nLHRoaXMuX2NsdXN0ZXJFZGdlcyh0LGUsYSxpLmNsdXN0ZXJFZGdlUHJvcGVydGllcyksYS5pZD12b2lkIDAsITA9PT1vJiZ0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFDaGFuZ2VkXCIpfX19LHtrZXk6XCJfYmFja3VwRWRnZU9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt2b2lkIDA9PT10aGlzLmNsdXN0ZXJlZEVkZ2VzW3QuaWRdJiYodGhpcy5jbHVzdGVyZWRFZGdlc1t0LmlkXT17cGh5c2ljczp0Lm9wdGlvbnMucGh5c2ljc30pfX0se2tleTpcIl9yZXN0b3JlRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuY2x1c3RlcmVkRWRnZXNbdC5pZF07dm9pZCAwIT09ZSYmKHQuc2V0T3B0aW9ucyh7cGh5c2ljczplLnBoeXNpY3N9KSxkZWxldGUgdGhpcy5jbHVzdGVyZWRFZGdlc1t0LmlkXSl9fSx7a2V5OlwiaXNDbHVzdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1t0XT8hMD09PXRoaXMuYm9keS5ub2Rlc1t0XS5pc0NsdXN0ZXI6KGNvbnNvbGUuZXJyb3IoXCJOb2RlIGRvZXMgbm90IGV4aXN0LlwiKSwhMSl9fSx7a2V5OlwiX2dldENsdXN0ZXJQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxpPW11KHQpLG89dFtpWzBdXS54LG49dFtpWzBdXS54LHI9dFtpWzBdXS55LHM9dFtpWzBdXS55LGE9MTthPGkubGVuZ3RoO2ErKylvPShlPXRbaVthXV0pLng8bz9lLng6byxuPWUueD5uP2UueDpuLHI9ZS55PHI/ZS55OnIscz1lLnk+cz9lLnk6cztyZXR1cm57eDouNSoobytuKSx5Oi41KihyK3MpfX19LHtrZXk6XCJvcGVuQ2x1c3RlclwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9IShhcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSl8fGFyZ3VtZW50c1syXTtpZih2b2lkIDA9PT10KXRocm93IG5ldyBFcnJvcihcIk5vIGNsdXN0ZXJOb2RlSWQgc3VwcGxpZWQgdG8gb3BlbkNsdXN0ZXIuXCIpO3ZhciBvPXRoaXMuYm9keS5ub2Rlc1t0XTtpZih2b2lkIDA9PT1vKXRocm93IG5ldyBFcnJvcihcIlRoZSBjbHVzdGVyTm9kZUlkIHN1cHBsaWVkIHRvIG9wZW5DbHVzdGVyIGRvZXMgbm90IGV4aXN0LlwiKTtpZighMCE9PW8uaXNDbHVzdGVyfHx2b2lkIDA9PT1vLmNvbnRhaW5lZE5vZGVzfHx2b2lkIDA9PT1vLmNvbnRhaW5lZEVkZ2VzKXRocm93IG5ldyBFcnJvcihcIlRoZSBub2RlOlwiK3QrXCIgaXMgbm90IGEgdmFsaWQgY2x1c3Rlci5cIik7dmFyIG49dGhpcy5maW5kTm9kZSh0KSxyPXpwKG4pLmNhbGwobix0KS0xO2lmKHI+PTApe3ZhciBzPW5bcl0sYT10aGlzLmJvZHkubm9kZXNbc107cmV0dXJuIGEuX29wZW5DaGlsZENsdXN0ZXIodCksZGVsZXRlIHRoaXMuYm9keS5ub2Rlc1t0XSx2b2lkKCEwPT09aSYmdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKSl9dmFyIGg9by5jb250YWluZWROb2RlcyxkPW8uY29udGFpbmVkRWRnZXM7aWYodm9pZCAwIT09ZSYmdm9pZCAwIT09ZS5yZWxlYXNlRnVuY3Rpb24mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUucmVsZWFzZUZ1bmN0aW9uKXt2YXIgbD17fSxjPXt4Om8ueCx5Om8ueX07Zm9yKHZhciB1IGluIGgpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGgsdSkpe3ZhciBmPXRoaXMuYm9keS5ub2Rlc1t1XTtsW3VdPXt4OmYueCx5OmYueX19dmFyIHA9ZS5yZWxlYXNlRnVuY3Rpb24oYyxsKTtmb3IodmFyIHYgaW4gaClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaCx2KSl7dmFyIGc9dGhpcy5ib2R5Lm5vZGVzW3ZdO3ZvaWQgMCE9PXBbdl0mJihnLng9dm9pZCAwPT09cFt2XS54P28ueDpwW3ZdLngsZy55PXZvaWQgMD09PXBbdl0ueT9vLnk6cFt2XS55KX19ZWxzZSBXeShoLChmdW5jdGlvbih0KXshMT09PXQub3B0aW9ucy5maXhlZC54JiYodC54PW8ueCksITE9PT10Lm9wdGlvbnMuZml4ZWQueSYmKHQueT1vLnkpfSkpO2Zvcih2YXIgeSBpbiBoKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChoLHkpKXt2YXIgbT10aGlzLmJvZHkubm9kZXNbeV07bS52eD1vLnZ4LG0udnk9by52eSxtLnNldE9wdGlvbnMoe3BoeXNpY3M6ITB9KSxkZWxldGUgdGhpcy5jbHVzdGVyZWROb2Rlc1t5XX1mb3IodmFyIGI9W10sdz0wO3c8by5lZGdlcy5sZW5ndGg7dysrKWIucHVzaChvLmVkZ2VzW3ddKTtmb3IodmFyIGs9MDtrPGIubGVuZ3RoO2srKyl7Zm9yKHZhciBfPWJba10seD10aGlzLl9nZXRDb25uZWN0ZWRJZChfLHQpLEU9dGhpcy5jbHVzdGVyZWROb2Rlc1t4XSxPPTA7TzxfLmNsdXN0ZXJpbmdFZGdlUmVwbGFjaW5nSWRzLmxlbmd0aDtPKyspe3ZhciBDPV8uY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHNbT10sUz10aGlzLmJvZHkuZWRnZXNbQ107aWYodm9pZCAwIT09UylpZih2b2lkIDAhPT1FKXt2YXIgVD10aGlzLmJvZHkubm9kZXNbRS5jbHVzdGVySWRdO1QuY29udGFpbmVkRWRnZXNbUy5pZF09UyxkZWxldGUgZFtTLmlkXTt2YXIgTT1TLmZyb21JZCxQPVMudG9JZDtTLnRvSWQ9PXg/UD1FLmNsdXN0ZXJJZDpNPUUuY2x1c3RlcklkLHRoaXMuX2NyZWF0ZUNsdXN0ZXJlZEVkZ2UoTSxQLFMsVC5jbHVzdGVyRWRnZVByb3BlcnRpZXMse2hpZGRlbjohMSxwaHlzaWNzOiEwfSl9ZWxzZSB0aGlzLl9yZXN0b3JlRWRnZShTKX1fLnJlbW92ZSgpfWZvcih2YXIgRCBpbiBkKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLEQpJiZ0aGlzLl9yZXN0b3JlRWRnZShkW0RdKTtkZWxldGUgdGhpcy5ib2R5Lm5vZGVzW3RdLCEwPT09aSYmdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKX19LHtrZXk6XCJnZXROb2Rlc0luQ2x1c3RlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVtdO2lmKCEwPT09dGhpcy5pc0NsdXN0ZXIodCkpe3ZhciBpPXRoaXMuYm9keS5ub2Rlc1t0XS5jb250YWluZWROb2Rlcztmb3IodmFyIG8gaW4gaSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaSxvKSYmZS5wdXNoKHRoaXMuYm9keS5ub2Rlc1tvXS5pZCl9cmV0dXJuIGV9fSx7a2V5OlwiZmluZE5vZGVcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGUsaT1bXSxvPTA7dm9pZCAwIT09dGhpcy5jbHVzdGVyZWROb2Rlc1t0XSYmbzwxMDA7KXtpZih2b2lkIDA9PT0oZT10aGlzLmJvZHkubm9kZXNbdF0pKXJldHVybltdO2kucHVzaChlLmlkKSx0PXRoaXMuY2x1c3RlcmVkTm9kZXNbdF0uY2x1c3RlcklkLG8rK31yZXR1cm4gdm9pZCAwPT09KGU9dGhpcy5ib2R5Lm5vZGVzW3RdKT9bXTooaS5wdXNoKGUuaWQpLFV1KGkpLmNhbGwoaSksaSl9fSx7a2V5OlwidXBkYXRlQ2x1c3RlcmVkTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJObyBjbHVzdGVyZWROb2RlSWQgc3VwcGxpZWQgdG8gdXBkYXRlQ2x1c3RlcmVkTm9kZS5cIik7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBuZXdPcHRpb25zIHN1cHBsaWVkIHRvIHVwZGF0ZUNsdXN0ZXJlZE5vZGUuXCIpO2lmKHZvaWQgMD09PXRoaXMuYm9keS5ub2Rlc1t0XSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY2x1c3RlcmVkTm9kZUlkIHN1cHBsaWVkIHRvIHVwZGF0ZUNsdXN0ZXJlZE5vZGUgZG9lcyBub3QgZXhpc3QuXCIpO3RoaXMuYm9keS5ub2Rlc1t0XS5zZXRPcHRpb25zKGUpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfZGF0YUNoYW5nZWRcIil9fSx7a2V5OlwidXBkYXRlRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJObyBzdGFydEVkZ2VJZCBzdXBwbGllZCB0byB1cGRhdGVFZGdlLlwiKTtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcIk5vIG5ld09wdGlvbnMgc3VwcGxpZWQgdG8gdXBkYXRlRWRnZS5cIik7aWYodm9pZCAwPT09dGhpcy5ib2R5LmVkZ2VzW3RdKXRocm93IG5ldyBFcnJvcihcIlRoZSBzdGFydEVkZ2VJZCBzdXBwbGllZCB0byB1cGRhdGVFZGdlIGRvZXMgbm90IGV4aXN0LlwiKTtmb3IodmFyIGk9dGhpcy5nZXRDbHVzdGVyZWRFZGdlcyh0KSxvPTA7bzxpLmxlbmd0aDtvKyspe3RoaXMuYm9keS5lZGdlc1tpW29dXS5zZXRPcHRpb25zKGUpfXRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfZGF0YUNoYW5nZWRcIil9fSx7a2V5OlwiZ2V0Q2x1c3RlcmVkRWRnZXNcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10saT0wO3ZvaWQgMCE9PXQmJnZvaWQgMCE9PXRoaXMuYm9keS5lZGdlc1t0XSYmaTwxMDA7KWUucHVzaCh0aGlzLmJvZHkuZWRnZXNbdF0uaWQpLHQ9dGhpcy5ib2R5LmVkZ2VzW3RdLmVkZ2VSZXBsYWNlZEJ5SWQsaSsrO3JldHVybiBVdShlKS5jYWxsKGUpLGV9fSx7a2V5OlwiZ2V0QmFzZUVkZ2VcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRCYXNlRWRnZXModClbMF19fSx7a2V5OlwiZ2V0QmFzZUVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVt0XSxpPVtdLG89W10sbj0wO2UubGVuZ3RoPjAmJm48MTAwOyl7dmFyIHI9ZS5wb3AoKTtpZih2b2lkIDAhPT1yKXt2YXIgcz10aGlzLmJvZHkuZWRnZXNbcl07aWYodm9pZCAwIT09cyl7bisrO3ZhciBhPXMuY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHM7aWYodm9pZCAwPT09YSlvLnB1c2gocik7ZWxzZSBmb3IodmFyIGg9MDtoPGEubGVuZ3RoOysraCl7dmFyIGQ9YVtoXTstMT09PXpwKGUpLmNhbGwoZSxhKSYmLTE9PT16cChpKS5jYWxsKGksYSkmJmUucHVzaChkKX1pLnB1c2gocil9fX1yZXR1cm4gb319LHtrZXk6XCJfZ2V0Q29ubmVjdGVkSWRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0LnRvSWQhPWU/dC50b0lkOih0LmZyb21JZCx0LmZyb21JZCl9fSx7a2V5OlwiX2dldEh1YlNpemVcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9MCxpPTAsbz0wLG49MDtuPHRoaXMuYm9keS5ub2RlSW5kaWNlcy5sZW5ndGg7bisrKXt2YXIgcj10aGlzLmJvZHkubm9kZXNbdGhpcy5ib2R5Lm5vZGVJbmRpY2VzW25dXTtyLmVkZ2VzLmxlbmd0aD5vJiYobz1yLmVkZ2VzLmxlbmd0aCksdCs9ci5lZGdlcy5sZW5ndGgsZSs9TWF0aC5wb3coci5lZGdlcy5sZW5ndGgsMiksaSs9MX10Lz1pO3ZhciBzPShlLz1pKS1NYXRoLnBvdyh0LDIpLGE9TWF0aC5zcXJ0KHMpLGg9TWF0aC5mbG9vcih0KzIqYSk7cmV0dXJuIGg+byYmKGg9byksaH19LHtrZXk6XCJfY3JlYXRlQ2x1c3RlcmVkRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpLG8sbil7dmFyIHI9R3guY2xvbmVPcHRpb25zKGksXCJlZGdlXCIpO1J5KHIsbyksci5mcm9tPXQsci50bz1lLHIuaWQ9XCJjbHVzdGVyRWRnZTpcIitYeCgpLHZvaWQgMCE9PW4mJlJ5KHIsbik7dmFyIHM9dGhpcy5ib2R5LmZ1bmN0aW9ucy5jcmVhdGVFZGdlKHIpO3JldHVybiBzLmNsdXN0ZXJpbmdFZGdlUmVwbGFjaW5nSWRzPVtpLmlkXSxzLmNvbm5lY3QoKSx0aGlzLmJvZHkuZWRnZXNbcy5pZF09cyxzfX0se2tleTpcIl9jbHVzdGVyRWRnZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvKXtpZihlIGluc3RhbmNlb2YgU3gpe3ZhciBuPWUscj17fTtyW24uaWRdPW4sZT1yfWlmKHQgaW5zdGFuY2VvZiBNXyl7dmFyIHM9dCxhPXt9O2Fbcy5pZF09cyx0PWF9aWYobnVsbD09aSl0aHJvdyBuZXcgRXJyb3IoXCJfY2x1c3RlckVkZ2VzOiBwYXJhbWV0ZXIgY2x1c3Rlck5vZGUgcmVxdWlyZWRcIik7Zm9yKHZhciBoIGluIHZvaWQgMD09PW8mJihvPWkuY2x1c3RlckVkZ2VQcm9wZXJ0aWVzKSx0aGlzLl9jcmVhdGVDbHVzdGVyRWRnZXModCxlLGksbyksZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxoKSYmdm9pZCAwIT09dGhpcy5ib2R5LmVkZ2VzW2hdKXt2YXIgZD10aGlzLmJvZHkuZWRnZXNbaF07dGhpcy5fYmFja3VwRWRnZU9wdGlvbnMoZCksZC5zZXRPcHRpb25zKHtwaHlzaWNzOiExfSl9Zm9yKHZhciBsIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbCkmJih0aGlzLmNsdXN0ZXJlZE5vZGVzW2xdPXtjbHVzdGVySWQ6aS5pZCxub2RlOnRoaXMuYm9keS5ub2Rlc1tsXX0sdGhpcy5ib2R5Lm5vZGVzW2xdLnNldE9wdGlvbnMoe3BoeXNpY3M6ITF9KSl9fSx7a2V5OlwiX2dldENsdXN0ZXJOb2RlRm9yTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXQpe3ZhciBlPXRoaXMuY2x1c3RlcmVkTm9kZXNbdF07aWYodm9pZCAwIT09ZSl7dmFyIGk9ZS5jbHVzdGVySWQ7aWYodm9pZCAwIT09aSlyZXR1cm4gdGhpcy5ib2R5Lm5vZGVzW2ldfX19fSx7a2V5OlwiX2ZpbHRlclwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9W107cmV0dXJuIFd5KHQsKGZ1bmN0aW9uKHQpe2UodCkmJmkucHVzaCh0KX0pKSxpfX0se2tleTpcIl91cGRhdGVTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLGk9W10sbz17fSxuPWZ1bmN0aW9uKHQpe1d5KGUuYm9keS5ub2RlcywoZnVuY3Rpb24oZSl7ITA9PT1lLmlzQ2x1c3RlciYmdChlKX0pKX07Zm9yKHQgaW4gdGhpcy5jbHVzdGVyZWROb2Rlcyl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY2x1c3RlcmVkTm9kZXMsdCkpdm9pZCAwPT09dGhpcy5ib2R5Lm5vZGVzW3RdJiZpLnB1c2godCl9bigoZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTxpLmxlbmd0aDtlKyspZGVsZXRlIHQuY29udGFpbmVkTm9kZXNbaVtlXV19KSk7Zm9yKHZhciByPTA7cjxpLmxlbmd0aDtyKyspZGVsZXRlIHRoaXMuY2x1c3RlcmVkTm9kZXNbaVtyXV07V3kodGhpcy5jbHVzdGVyZWRFZGdlcywoZnVuY3Rpb24odCl7dmFyIGk9ZS5ib2R5LmVkZ2VzW3RdO3ZvaWQgMCE9PWkmJmkuZW5kUG9pbnRzVmFsaWQoKXx8KG9bdF09dCl9KSksbigoZnVuY3Rpb24odCl7V3kodC5jb250YWluZWRFZGdlcywoZnVuY3Rpb24odCxlKXt0LmVuZFBvaW50c1ZhbGlkKCl8fG9bZV18fChvW2VdPWUpfSkpfSkpLFd5KHRoaXMuYm9keS5lZGdlcywoZnVuY3Rpb24odCxpKXt2YXIgbj0hMCxyPXQuY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHM7aWYodm9pZCAwIT09cil7dmFyIHM9MDtXeShyLChmdW5jdGlvbih0KXt2YXIgaT1lLmJvZHkuZWRnZXNbdF07dm9pZCAwIT09aSYmaS5lbmRQb2ludHNWYWxpZCgpJiYocys9MSl9KSksbj1zPjB9dC5lbmRQb2ludHNWYWxpZCgpJiZufHwob1tpXT1pKX0pKSxuKChmdW5jdGlvbih0KXtXeShvLChmdW5jdGlvbihpKXtkZWxldGUgdC5jb250YWluZWRFZGdlc1tpXSxXeSh0LmVkZ2VzLChmdW5jdGlvbihuLHIpe24uaWQhPT1pP24uY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHM9ZS5fZmlsdGVyKG4uY2x1c3RlcmluZ0VkZ2VSZXBsYWNpbmdJZHMsKGZ1bmN0aW9uKHQpe3JldHVybiFvW3RdfSkpOnQuZWRnZXNbcl09bnVsbH0pKSx0LmVkZ2VzPWUuX2ZpbHRlcih0LmVkZ2VzLChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXR9KSl9KSl9KSksV3kobywoZnVuY3Rpb24odCl7ZGVsZXRlIGUuY2x1c3RlcmVkRWRnZXNbdF19KSksV3kobywoZnVuY3Rpb24odCl7ZGVsZXRlIGUuYm9keS5lZGdlc1t0XX0pKSxXeShtdSh0aGlzLmJvZHkuZWRnZXMpLChmdW5jdGlvbih0KXt2YXIgaT1lLmJvZHkuZWRnZXNbdF0sbz1lLl9pc0NsdXN0ZXJlZE5vZGUoaS5mcm9tSWQpfHxlLl9pc0NsdXN0ZXJlZE5vZGUoaS50b0lkKTtpZihvIT09ZS5faXNDbHVzdGVyZWRFZGdlKGkuaWQpKWlmKG8pe3ZhciBuPWUuX2dldENsdXN0ZXJOb2RlRm9yTm9kZShpLmZyb21JZCk7dm9pZCAwIT09biYmZS5fY2x1c3RlckVkZ2VzKGUuYm9keS5ub2Rlc1tpLmZyb21JZF0saSxuKTt2YXIgcj1lLl9nZXRDbHVzdGVyTm9kZUZvck5vZGUoaS50b0lkKTt2b2lkIDAhPT1yJiZlLl9jbHVzdGVyRWRnZXMoZS5ib2R5Lm5vZGVzW2kudG9JZF0saSxyKX1lbHNlIGRlbGV0ZSBlLl9jbHVzdGVyRWRnZXNbdF0sZS5fcmVzdG9yZUVkZ2UoaSl9KSk7Zm9yKHZhciBzPSExLGE9ITAsaD1mdW5jdGlvbigpe3ZhciB0PVtdO24oKGZ1bmN0aW9uKGUpe3ZhciBpPW11KGUuY29udGFpbmVkTm9kZXMpLmxlbmd0aCxvPSEwPT09ZS5vcHRpb25zLmFsbG93U2luZ2xlTm9kZUNsdXN0ZXI7KG8mJmk8MXx8IW8mJmk8MikmJnQucHVzaChlLmlkKX0pKTtmb3IodmFyIGk9MDtpPHQubGVuZ3RoOysraSllLm9wZW5DbHVzdGVyKHRbaV0se30sITEpO2E9dC5sZW5ndGg+MCxzPXN8fGF9O2E7KWgoKTtzJiZ0aGlzLl91cGRhdGVTdGF0ZSgpfX0se2tleTpcIl9pc0NsdXN0ZXJlZE5vZGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dGhpcy5jbHVzdGVyZWROb2Rlc1t0XX19LHtrZXk6XCJfaXNDbHVzdGVyZWRFZGdlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuY2x1c3RlcmVkRWRnZXNbdF19fV0pLHR9KCk7ZnVuY3Rpb24gUXgodCxlKXt2YXIgaT12b2lkIDAhPT10dSYmb2godCl8fHRbXCJAQGl0ZXJhdG9yXCJdO2lmKCFpKXtpZihodSh0KXx8KGk9ZnVuY3Rpb24odCxlKXt2YXIgaTtpZighdClyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpcmV0dXJuIEp4KHQsZSk7dmFyIG89YXUoaT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpLmNhbGwoaSw4LC0xKTtcIk9iamVjdFwiPT09byYmdC5jb25zdHJ1Y3RvciYmKG89dC5jb25zdHJ1Y3Rvci5uYW1lKTtpZihcIk1hcFwiPT09b3x8XCJTZXRcIj09PW8pcmV0dXJuIGphKHQpO2lmKFwiQXJndW1lbnRzXCI9PT1vfHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChvKSlyZXR1cm4gSngodCxlKX0odCkpfHxlJiZ0JiZcIm51bWJlclwiPT10eXBlb2YgdC5sZW5ndGgpe2kmJih0PWkpO3ZhciBvPTAsbj1mdW5jdGlvbigpe307cmV0dXJue3M6bixuOmZ1bmN0aW9uKCl7cmV0dXJuIG8+PXQubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTp0W28rK119fSxlOmZ1bmN0aW9uKHQpe3Rocm93IHR9LGY6bn19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciByLHM9ITAsYT0hMTtyZXR1cm57czpmdW5jdGlvbigpe2k9aS5jYWxsKHQpfSxuOmZ1bmN0aW9uKCl7dmFyIHQ9aS5uZXh0KCk7cmV0dXJuIHM9dC5kb25lLHR9LGU6ZnVuY3Rpb24odCl7YT0hMCxyPXR9LGY6ZnVuY3Rpb24oKXt0cnl7c3x8bnVsbD09aS5yZXR1cm58fGkucmV0dXJuKCl9ZmluYWxseXtpZihhKXRocm93IHJ9fX19ZnVuY3Rpb24gSngodCxlKXsobnVsbD09ZXx8ZT50Lmxlbmd0aCkmJihlPXQubGVuZ3RoKTtmb3IodmFyIGk9MCxvPW5ldyBBcnJheShlKTtpPGU7aSsrKW9baV09dFtpXTtyZXR1cm4gb312YXIgdEU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsaSl7dmFyIG87WGwodGhpcyx0KSx2b2lkIDAhPT13aW5kb3cmJihvPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSksd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT12b2lkIDA9PT1vP2Z1bmN0aW9uKHQpe3QoKX06byx0aGlzLmJvZHk9ZSx0aGlzLmNhbnZhcz1pLHRoaXMucmVkcmF3UmVxdWVzdGVkPSExLHRoaXMucmVuZGVyVGltZXI9dm9pZCAwLHRoaXMucmVxdWlyZXNUaW1lb3V0PSEwLHRoaXMucmVuZGVyaW5nQWN0aXZlPSExLHRoaXMucmVuZGVyUmVxdWVzdHM9MCx0aGlzLmFsbG93UmVkcmF3PSEwLHRoaXMuZHJhZ2dpbmc9ITEsdGhpcy56b29taW5nPSExLHRoaXMub3B0aW9ucz17fSx0aGlzLmRlZmF1bHRPcHRpb25zPXtoaWRlRWRnZXNPbkRyYWc6ITEsaGlkZUVkZ2VzT25ab29tOiExLGhpZGVOb2Rlc09uRHJhZzohMX0sZm8odGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnMpLHRoaXMuX2RldGVybWluZUJyb3dzZXJNZXRob2QoKSx0aGlzLmJpbmRFdmVudExpc3RlbmVycygpfXJldHVybiAkbCh0LFt7a2V5OlwiYmluZEV2ZW50TGlzdGVuZXJzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXM7dGhpcy5ib2R5LmVtaXR0ZXIub24oXCJkcmFnU3RhcnRcIiwoZnVuY3Rpb24oKXtlLmRyYWdnaW5nPSEwfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiZHJhZ0VuZFwiLChmdW5jdGlvbigpe2UuZHJhZ2dpbmc9ITF9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJ6b29tXCIsKGZ1bmN0aW9uKCl7ZS56b29taW5nPSEwLHdpbmRvdy5jbGVhclRpbWVvdXQoZS56b29tVGltZW91dElkKSxlLnpvb21UaW1lb3V0SWQ9YnYoKGZ1bmN0aW9uKCl7dmFyIHQ7ZS56b29taW5nPSExLEZvKHQ9ZS5fcmVxdWVzdFJlZHJhdykuY2FsbCh0LGUpKCl9KSwyNTApfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiX3Jlc2l6ZU5vZGVzXCIsKGZ1bmN0aW9uKCl7ZS5fcmVzaXplTm9kZXMoKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9yZWRyYXdcIiwoZnVuY3Rpb24oKXshMT09PWUucmVuZGVyaW5nQWN0aXZlJiZlLl9yZWRyYXcoKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9ibG9ja1JlZHJhd1wiLChmdW5jdGlvbigpe2UuYWxsb3dSZWRyYXc9ITF9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJfYWxsb3dSZWRyYXdcIiwoZnVuY3Rpb24oKXtlLmFsbG93UmVkcmF3PSEwLGUucmVkcmF3UmVxdWVzdGVkPSExfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiX3JlcXVlc3RSZWRyYXdcIixGbyh0PXRoaXMuX3JlcXVlc3RSZWRyYXcpLmNhbGwodCx0aGlzKSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJfc3RhcnRSZW5kZXJpbmdcIiwoZnVuY3Rpb24oKXtlLnJlbmRlclJlcXVlc3RzKz0xLGUucmVuZGVyaW5nQWN0aXZlPSEwLGUuX3N0YXJ0UmVuZGVyaW5nKCl9KSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJfc3RvcFJlbmRlcmluZ1wiLChmdW5jdGlvbigpe2UucmVuZGVyUmVxdWVzdHMtPTEsZS5yZW5kZXJpbmdBY3RpdmU9ZS5yZW5kZXJSZXF1ZXN0cz4wLGUucmVuZGVyVGltZXI9dm9pZCAwfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiZGVzdHJveVwiLChmdW5jdGlvbigpe2UucmVuZGVyUmVxdWVzdHM9MCxlLmFsbG93UmVkcmF3PSExLGUucmVuZGVyaW5nQWN0aXZlPSExLCEwPT09ZS5yZXF1aXJlc1RpbWVvdXQ/Y2xlYXJUaW1lb3V0KGUucmVuZGVyVGltZXIpOndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShlLnJlbmRlclRpbWVyKSxlLmJvZHkuZW1pdHRlci5vZmYoKX0pKX19LHtrZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwIT09dCl7TnkoW1wiaGlkZUVkZ2VzT25EcmFnXCIsXCJoaWRlRWRnZXNPblpvb21cIixcImhpZGVOb2Rlc09uRHJhZ1wiXSx0aGlzLm9wdGlvbnMsdCl9fX0se2tleTpcIl9yZXF1ZXN0TmV4dEZyYW1lXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXt2YXIgaSxvPXdpbmRvdztyZXR1cm4hMD09PXRoaXMucmVxdWlyZXNUaW1lb3V0P2k9YnYodCxlKTpvLnJlcXVlc3RBbmltYXRpb25GcmFtZSYmKGk9by5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodCkpLGl9fX0se2tleTpcIl9zdGFydFJlbmRlcmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ7ITA9PT10aGlzLnJlbmRlcmluZ0FjdGl2ZSYmKHZvaWQgMD09PXRoaXMucmVuZGVyVGltZXImJih0aGlzLnJlbmRlclRpbWVyPXRoaXMuX3JlcXVlc3ROZXh0RnJhbWUoRm8odD10aGlzLl9yZW5kZXJTdGVwKS5jYWxsKHQsdGhpcyksdGhpcy5zaW11bGF0aW9uSW50ZXJ2YWwpKSl9fSx7a2V5OlwiX3JlbmRlclN0ZXBcIix2YWx1ZTpmdW5jdGlvbigpeyEwPT09dGhpcy5yZW5kZXJpbmdBY3RpdmUmJih0aGlzLnJlbmRlclRpbWVyPXZvaWQgMCwhMD09PXRoaXMucmVxdWlyZXNUaW1lb3V0JiZ0aGlzLl9zdGFydFJlbmRlcmluZygpLHRoaXMuX3JlZHJhdygpLCExPT09dGhpcy5yZXF1aXJlc1RpbWVvdXQmJnRoaXMuX3N0YXJ0UmVuZGVyaW5nKCkpfX0se2tleTpcInJlZHJhd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInNldFNpemVcIiksdGhpcy5fcmVkcmF3KCl9fSx7a2V5OlwiX3JlcXVlc3RSZWRyYXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7ITAhPT10aGlzLnJlZHJhd1JlcXVlc3RlZCYmITE9PT10aGlzLnJlbmRlcmluZ0FjdGl2ZSYmITA9PT10aGlzLmFsbG93UmVkcmF3JiYodGhpcy5yZWRyYXdSZXF1ZXN0ZWQ9ITAsdGhpcy5fcmVxdWVzdE5leHRGcmFtZSgoZnVuY3Rpb24oKXt0Ll9yZWRyYXcoITEpfSksMCkpfX0se2tleTpcIl9yZWRyYXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07aWYoITA9PT10aGlzLmFsbG93UmVkcmF3KXt0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiaW5pdFJlZHJhd1wiKSx0aGlzLnJlZHJhd1JlcXVlc3RlZD0hMTt2YXIgZT17ZHJhd0V4dGVybmFsTGFiZWxzOm51bGx9OzAhPT10aGlzLmNhbnZhcy5mcmFtZS5jYW52YXMud2lkdGgmJjAhPT10aGlzLmNhbnZhcy5mcmFtZS5jYW52YXMuaGVpZ2h0fHx0aGlzLmNhbnZhcy5zZXRTaXplKCksdGhpcy5jYW52YXMuc2V0VHJhbnNmb3JtKCk7dmFyIGk9dGhpcy5jYW52YXMuZ2V0Q29udGV4dCgpLG89dGhpcy5jYW52YXMuZnJhbWUuY2FudmFzLmNsaWVudFdpZHRoLG49dGhpcy5jYW52YXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodDtpZihpLmNsZWFyUmVjdCgwLDAsbyxuKSwwPT09dGhpcy5jYW52YXMuZnJhbWUuY2xpZW50V2lkdGgpcmV0dXJuO2lmKGkuc2F2ZSgpLGkudHJhbnNsYXRlKHRoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uLngsdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24ueSksaS5zY2FsZSh0aGlzLmJvZHkudmlldy5zY2FsZSx0aGlzLmJvZHkudmlldy5zY2FsZSksaS5iZWdpblBhdGgoKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiYmVmb3JlRHJhd2luZ1wiLGkpLGkuY2xvc2VQYXRoKCksITE9PT10JiYoITE9PT10aGlzLmRyYWdnaW5nfHwhMD09PXRoaXMuZHJhZ2dpbmcmJiExPT09dGhpcy5vcHRpb25zLmhpZGVFZGdlc09uRHJhZykmJighMT09PXRoaXMuem9vbWluZ3x8ITA9PT10aGlzLnpvb21pbmcmJiExPT09dGhpcy5vcHRpb25zLmhpZGVFZGdlc09uWm9vbSkmJnRoaXMuX2RyYXdFZGdlcyhpKSwhMT09PXRoaXMuZHJhZ2dpbmd8fCEwPT09dGhpcy5kcmFnZ2luZyYmITE9PT10aGlzLm9wdGlvbnMuaGlkZU5vZGVzT25EcmFnKXt2YXIgcj10aGlzLl9kcmF3Tm9kZXMoaSx0KSxzPXIuZHJhd0V4dGVybmFsTGFiZWxzO2UuZHJhd0V4dGVybmFsTGFiZWxzPXN9ITE9PT10JiYoITE9PT10aGlzLmRyYWdnaW5nfHwhMD09PXRoaXMuZHJhZ2dpbmcmJiExPT09dGhpcy5vcHRpb25zLmhpZGVFZGdlc09uRHJhZykmJighMT09PXRoaXMuem9vbWluZ3x8ITA9PT10aGlzLnpvb21pbmcmJiExPT09dGhpcy5vcHRpb25zLmhpZGVFZGdlc09uWm9vbSkmJnRoaXMuX2RyYXdBcnJvd3MoaSksbnVsbCE9ZS5kcmF3RXh0ZXJuYWxMYWJlbHMmJmUuZHJhd0V4dGVybmFsTGFiZWxzKCksITE9PT10JiZ0aGlzLl9kcmF3U2VsZWN0aW9uQm94KGkpLGkuYmVnaW5QYXRoKCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcImFmdGVyRHJhd2luZ1wiLGkpLGkuY2xvc2VQYXRoKCksaS5yZXN0b3JlKCksITA9PT10JiZpLmNsZWFyUmVjdCgwLDAsbyxuKX19fSx7a2V5OlwiX3Jlc2l6ZU5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNhbnZhcy5zZXRUcmFuc2Zvcm0oKTt2YXIgdD10aGlzLmNhbnZhcy5nZXRDb250ZXh0KCk7dC5zYXZlKCksdC50cmFuc2xhdGUodGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24ueCx0aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbi55KSx0LnNjYWxlKHRoaXMuYm9keS52aWV3LnNjYWxlLHRoaXMuYm9keS52aWV3LnNjYWxlKTt2YXIgZSxpPXRoaXMuYm9keS5ub2Rlcztmb3IodmFyIG8gaW4gaSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaSxvKSYmKChlPWlbb10pLnJlc2l6ZSh0KSxlLnVwZGF0ZUJvdW5kaW5nQm94KHQsZS5zZWxlY3RlZCkpO3QucmVzdG9yZSgpfX0se2tleTpcIl9kcmF3Tm9kZXNcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGUsaSxvPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj10aGlzLmJvZHkubm9kZXMscj10aGlzLmJvZHkubm9kZUluZGljZXMscz1bXSxhPVtdLGg9MjAsZD10aGlzLmNhbnZhcy5ET010b0NhbnZhcyh7eDotaCx5Oi1ofSksbD10aGlzLmNhbnZhcy5ET010b0NhbnZhcyh7eDp0aGlzLmNhbnZhcy5mcmFtZS5jYW52YXMuY2xpZW50V2lkdGgraCx5OnRoaXMuY2FudmFzLmZyYW1lLmNhbnZhcy5jbGllbnRIZWlnaHQraH0pLGM9e3RvcDpkLnksbGVmdDpkLngsYm90dG9tOmwueSxyaWdodDpsLnh9LHU9W10sZj0wO2Y8ci5sZW5ndGg7ZisrKWlmKChlPW5bcltmXV0pLmhvdmVyKWEucHVzaChyW2ZdKTtlbHNlIGlmKGUuaXNTZWxlY3RlZCgpKXMucHVzaChyW2ZdKTtlbHNlIGlmKCEwPT09byl7dmFyIHA9ZS5kcmF3KHQpO251bGwhPXAuZHJhd0V4dGVybmFsTGFiZWwmJnUucHVzaChwLmRyYXdFeHRlcm5hbExhYmVsKX1lbHNlIGlmKCEwPT09ZS5pc0JvdW5kaW5nQm94T3ZlcmxhcHBpbmdXaXRoKGMpKXt2YXIgdj1lLmRyYXcodCk7bnVsbCE9di5kcmF3RXh0ZXJuYWxMYWJlbCYmdS5wdXNoKHYuZHJhd0V4dGVybmFsTGFiZWwpfWVsc2UgZS51cGRhdGVCb3VuZGluZ0JveCh0LGUuc2VsZWN0ZWQpO3ZhciBnPXMubGVuZ3RoLHk9YS5sZW5ndGg7Zm9yKGk9MDtpPGc7aSsrKXt2YXIgbT0oZT1uW3NbaV1dKS5kcmF3KHQpO251bGwhPW0uZHJhd0V4dGVybmFsTGFiZWwmJnUucHVzaChtLmRyYXdFeHRlcm5hbExhYmVsKX1mb3IoaT0wO2k8eTtpKyspe3ZhciBiPShlPW5bYVtpXV0pLmRyYXcodCk7bnVsbCE9Yi5kcmF3RXh0ZXJuYWxMYWJlbCYmdS5wdXNoKGIuZHJhd0V4dGVybmFsTGFiZWwpfXJldHVybntkcmF3RXh0ZXJuYWxMYWJlbHM6ZnVuY3Rpb24oKXt2YXIgdCxlPVF4KHUpO3RyeXtmb3IoZS5zKCk7ISh0PWUubigpKS5kb25lOyl7KDAsdC52YWx1ZSkoKX19Y2F0Y2godCl7ZS5lKHQpfWZpbmFsbHl7ZS5mKCl9fX19fSx7a2V5OlwiX2RyYXdFZGdlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmJvZHkuZWRnZXMsaT10aGlzLmJvZHkuZWRnZUluZGljZXMsbz0wO288aS5sZW5ndGg7bysrKXt2YXIgbj1lW2lbb11dOyEwPT09bi5jb25uZWN0ZWQmJm4uZHJhdyh0KX19fSx7a2V5OlwiX2RyYXdBcnJvd3NcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5ib2R5LmVkZ2VzLGk9dGhpcy5ib2R5LmVkZ2VJbmRpY2VzLG89MDtvPGkubGVuZ3RoO28rKyl7dmFyIG49ZVtpW29dXTshMD09PW4uY29ubmVjdGVkJiZuLmRyYXdBcnJvd3ModCl9fX0se2tleTpcIl9kZXRlcm1pbmVCcm93c2VyTWV0aG9kXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXt2YXIgdD1uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7dGhpcy5yZXF1aXJlc1RpbWVvdXQ9ITEsKC0xIT16cCh0KS5jYWxsKHQsXCJtc2llIDkuMFwiKXx8LTEhPXpwKHQpLmNhbGwodCxcInNhZmFyaVwiKSYmenAodCkuY2FsbCh0LFwiY2hyb21lXCIpPD0tMSkmJih0aGlzLnJlcXVpcmVzVGltZW91dD0hMCl9ZWxzZSB0aGlzLnJlcXVpcmVzVGltZW91dD0hMH19LHtrZXk6XCJfZHJhd1NlbGVjdGlvbkJveFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMuYm9keS5zZWxlY3Rpb25Cb3guc2hvdyl7dC5iZWdpblBhdGgoKTt2YXIgZT10aGlzLmJvZHkuc2VsZWN0aW9uQm94LnBvc2l0aW9uLmVuZC54LXRoaXMuYm9keS5zZWxlY3Rpb25Cb3gucG9zaXRpb24uc3RhcnQueCxpPXRoaXMuYm9keS5zZWxlY3Rpb25Cb3gucG9zaXRpb24uZW5kLnktdGhpcy5ib2R5LnNlbGVjdGlvbkJveC5wb3NpdGlvbi5zdGFydC55O3QucmVjdCh0aGlzLmJvZHkuc2VsZWN0aW9uQm94LnBvc2l0aW9uLnN0YXJ0LngsdGhpcy5ib2R5LnNlbGVjdGlvbkJveC5wb3NpdGlvbi5zdGFydC55LGUsaSksdC5maWxsU3R5bGU9XCJyZ2JhKDE1MSwgMTk0LCAyNTIsIDAuMilcIix0LmZpbGxSZWN0KHRoaXMuYm9keS5zZWxlY3Rpb25Cb3gucG9zaXRpb24uc3RhcnQueCx0aGlzLmJvZHkuc2VsZWN0aW9uQm94LnBvc2l0aW9uLnN0YXJ0LnksZSxpKSx0LnN0cm9rZVN0eWxlPVwicmdiYSgxNTEsIDE5NCwgMjUyLCAxKVwiLHQuc3Ryb2tlKCl9ZWxzZSB0LmNsb3NlUGF0aCgpfX1dKSx0fSgpLGVFPUcuc2V0SW50ZXJ2YWw7ZnVuY3Rpb24gaUUodCxlKXtlLmlucHV0SGFuZGxlcj1mdW5jdGlvbih0KXt0LmlzRmlyc3QmJmUodCl9LHQub24oXCJoYW1tZXIuaW5wdXRcIixlLmlucHV0SGFuZGxlcil9ZnVuY3Rpb24gb0UodCxlKXtyZXR1cm4gZS5pbnB1dEhhbmRsZXI9ZnVuY3Rpb24odCl7dC5pc0ZpbmFsJiZlKHQpfSx0Lm9uKFwiaGFtbWVyLmlucHV0XCIsZS5pbnB1dEhhbmRsZXIpfXZhciBuRT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7WGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLnBpeGVsUmF0aW89MSx0aGlzLmNhbWVyYVN0YXRlPXt9LHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5jYW52YXNWaWV3Q2VudGVyPXt9LHRoaXMuX2NsZWFudXBDYWxsYmFja3M9W10sdGhpcy5vcHRpb25zPXt9LHRoaXMuZGVmYXVsdE9wdGlvbnM9e2F1dG9SZXNpemU6ITAsaGVpZ2h0OlwiMTAwJVwiLHdpZHRoOlwiMTAwJVwifSxmbyh0aGlzLm9wdGlvbnMsdGhpcy5kZWZhdWx0T3B0aW9ucyksdGhpcy5iaW5kRXZlbnRMaXN0ZW5lcnMoKX1yZXR1cm4gJGwodCxbe2tleTpcImJpbmRFdmVudExpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzO3RoaXMuYm9keS5lbWl0dGVyLm9uY2UoXCJyZXNpemVcIiwoZnVuY3Rpb24odCl7MCE9PXQud2lkdGgmJihlLmJvZHkudmlldy50cmFuc2xhdGlvbi54PS41KnQud2lkdGgpLDAhPT10LmhlaWdodCYmKGUuYm9keS52aWV3LnRyYW5zbGF0aW9uLnk9LjUqdC5oZWlnaHQpfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwic2V0U2l6ZVwiLEZvKHQ9dGhpcy5zZXRTaXplKS5jYWxsKHQsdGhpcykpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiZGVzdHJveVwiLChmdW5jdGlvbigpe2UuaGFtbWVyRnJhbWUuZGVzdHJveSgpLGUuaGFtbWVyLmRlc3Ryb3koKSxlLl9jbGVhblVwKCl9KSl9fSx7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGksbyxuLHIscz10aGlzO2lmKHZvaWQgMCE9PXQpe055KFtcIndpZHRoXCIsXCJoZWlnaHRcIixcImF1dG9SZXNpemVcIl0sdGhpcy5vcHRpb25zLHQpfWlmKHRoaXMuX2NsZWFuVXAoKSwhMD09PXRoaXMub3B0aW9ucy5hdXRvUmVzaXplKXt2YXIgYTtpZih3aW5kb3cuUmVzaXplT2JzZXJ2ZXIpe3ZhciBoPW5ldyBSZXNpemVPYnNlcnZlcigoZnVuY3Rpb24oKXshMD09PXMuc2V0U2l6ZSgpJiZzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIil9KSksZD10aGlzLmZyYW1lO2gub2JzZXJ2ZShkKSx0aGlzLl9jbGVhbnVwQ2FsbGJhY2tzLnB1c2goKGZ1bmN0aW9uKCl7aC51bm9ic2VydmUoZCl9KSl9ZWxzZXt2YXIgbD1lRSgoZnVuY3Rpb24oKXshMD09PXMuc2V0U2l6ZSgpJiZzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIil9KSwxZTMpO3RoaXMuX2NsZWFudXBDYWxsYmFja3MucHVzaCgoZnVuY3Rpb24oKXtjbGVhckludGVydmFsKGwpfSkpfXZhciBjPUZvKGE9dGhpcy5fb25SZXNpemUpLmNhbGwoYSx0aGlzKTtlPXdpbmRvdyxpPVwicmVzaXplXCIsbz1jLGUuYWRkRXZlbnRMaXN0ZW5lcj8odm9pZCAwPT09biYmKG49ITEpLFwibW91c2V3aGVlbFwiPT09aSYmemYocj1uYXZpZ2F0b3IudXNlckFnZW50KS5jYWxsKHIsXCJGaXJlZm94XCIpJiYoaT1cIkRPTU1vdXNlU2Nyb2xsXCIpLGUuYWRkRXZlbnRMaXN0ZW5lcihpLG8sbikpOmUuYXR0YWNoRXZlbnQoXCJvblwiK2ksbyksdGhpcy5fY2xlYW51cENhbGxiYWNrcy5wdXNoKChmdW5jdGlvbigpeyFmdW5jdGlvbih0LGUsaSxvKXt2YXIgbjt0LnJlbW92ZUV2ZW50TGlzdGVuZXI/KHZvaWQgMD09PW8mJihvPSExKSxcIm1vdXNld2hlZWxcIj09PWUmJnpmKG49bmF2aWdhdG9yLnVzZXJBZ2VudCkuY2FsbChuLFwiRmlyZWZveFwiKSYmKGU9XCJET01Nb3VzZVNjcm9sbFwiKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxpLG8pKTp0LmRldGFjaEV2ZW50KFwib25cIitlLGkpfSh3aW5kb3csXCJyZXNpemVcIixjKX0pKX19fSx7a2V5OlwiX2NsZWFuVXBcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0LGUsaTtGdSh0PVV1KGU9dWYoaT10aGlzLl9jbGVhbnVwQ2FsbGJhY2tzKS5jYWxsKGksMCkpLmNhbGwoZSkpLmNhbGwodCwoZnVuY3Rpb24odCl7dHJ5e3QoKX1jYXRjaCh0KXtjb25zb2xlLmVycm9yKHQpfX0pKX19LHtrZXk6XCJfb25SZXNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2V0U2l6ZSgpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVkcmF3XCIpfX0se2tleTpcIl9nZXRDYW1lcmFTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnRoaXMucGl4ZWxSYXRpbzshMD09PXRoaXMuaW5pdGlhbGl6ZWQmJih0aGlzLmNhbWVyYVN0YXRlLnByZXZpb3VzV2lkdGg9dGhpcy5mcmFtZS5jYW52YXMud2lkdGgvdCx0aGlzLmNhbWVyYVN0YXRlLnByZXZpb3VzSGVpZ2h0PXRoaXMuZnJhbWUuY2FudmFzLmhlaWdodC90LHRoaXMuY2FtZXJhU3RhdGUuc2NhbGU9dGhpcy5ib2R5LnZpZXcuc2NhbGUsdGhpcy5jYW1lcmFTdGF0ZS5wb3NpdGlvbj10aGlzLkRPTXRvQ2FudmFzKHt4Oi41KnRoaXMuZnJhbWUuY2FudmFzLndpZHRoL3QseTouNSp0aGlzLmZyYW1lLmNhbnZhcy5oZWlnaHQvdH0pKX19LHtrZXk6XCJfc2V0Q2FtZXJhU3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHZvaWQgMCE9PXRoaXMuY2FtZXJhU3RhdGUuc2NhbGUmJjAhPT10aGlzLmZyYW1lLmNhbnZhcy5jbGllbnRXaWR0aCYmMCE9PXRoaXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodCYmMCE9PXRoaXMucGl4ZWxSYXRpbyYmdGhpcy5jYW1lcmFTdGF0ZS5wcmV2aW91c1dpZHRoPjAmJnRoaXMuY2FtZXJhU3RhdGUucHJldmlvdXNIZWlnaHQ+MCl7dmFyIHQ9dGhpcy5mcmFtZS5jYW52YXMud2lkdGgvdGhpcy5waXhlbFJhdGlvL3RoaXMuY2FtZXJhU3RhdGUucHJldmlvdXNXaWR0aCxlPXRoaXMuZnJhbWUuY2FudmFzLmhlaWdodC90aGlzLnBpeGVsUmF0aW8vdGhpcy5jYW1lcmFTdGF0ZS5wcmV2aW91c0hlaWdodCxpPXRoaXMuY2FtZXJhU3RhdGUuc2NhbGU7MSE9dCYmMSE9ZT9pPS41KnRoaXMuY2FtZXJhU3RhdGUuc2NhbGUqKHQrZSk6MSE9dD9pPXRoaXMuY2FtZXJhU3RhdGUuc2NhbGUqdDoxIT1lJiYoaT10aGlzLmNhbWVyYVN0YXRlLnNjYWxlKmUpLHRoaXMuYm9keS52aWV3LnNjYWxlPWk7dmFyIG89dGhpcy5ET010b0NhbnZhcyh7eDouNSp0aGlzLmZyYW1lLmNhbnZhcy5jbGllbnRXaWR0aCx5Oi41KnRoaXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodH0pLG49e3g6by54LXRoaXMuY2FtZXJhU3RhdGUucG9zaXRpb24ueCx5Om8ueS10aGlzLmNhbWVyYVN0YXRlLnBvc2l0aW9uLnl9O3RoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uLngrPW4ueCp0aGlzLmJvZHkudmlldy5zY2FsZSx0aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbi55Kz1uLnkqdGhpcy5ib2R5LnZpZXcuc2NhbGV9fX0se2tleTpcIl9wcmVwYXJlVmFsdWVcIix2YWx1ZTpmdW5jdGlvbih0KXtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdCtcInB4XCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKC0xIT09enAodCkuY2FsbCh0LFwiJVwiKXx8LTEhPT16cCh0KS5jYWxsKHQsXCJweFwiKSlyZXR1cm4gdDtpZigtMT09PXpwKHQpLmNhbGwodCxcIiVcIikpcmV0dXJuIHQrXCJweFwifXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCB1c2UgdGhlIHZhbHVlIHN1cHBsaWVkIGZvciB3aWR0aCBvciBoZWlnaHQ6XCIrdCl9fSx7a2V5OlwiX2NyZWF0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmJvZHkuY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKTspdGhpcy5ib2R5LmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmJvZHkuY29udGFpbmVyLmZpcnN0Q2hpbGQpO2lmKHRoaXMuZnJhbWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmZyYW1lLmNsYXNzTmFtZT1cInZpcy1uZXR3b3JrXCIsdGhpcy5mcmFtZS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIsdGhpcy5mcmFtZS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLHRoaXMuZnJhbWUudGFiSW5kZXg9MCx0aGlzLmZyYW1lLmNhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLHRoaXMuZnJhbWUuY2FudmFzLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIix0aGlzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMuZnJhbWUuY2FudmFzKSx0aGlzLmZyYW1lLmNhbnZhcy5nZXRDb250ZXh0KXRoaXMuX3NldFBpeGVsUmF0aW8oKSx0aGlzLnNldFRyYW5zZm9ybSgpO2Vsc2V7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTt0LnN0eWxlLmNvbG9yPVwicmVkXCIsdC5zdHlsZS5mb250V2VpZ2h0PVwiYm9sZFwiLHQuc3R5bGUucGFkZGluZz1cIjEwcHhcIix0LmlubmVyVGV4dD1cIkVycm9yOiB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBIVE1MIGNhbnZhc1wiLHRoaXMuZnJhbWUuY2FudmFzLmFwcGVuZENoaWxkKHQpfXRoaXMuYm9keS5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5mcmFtZSksdGhpcy5ib2R5LnZpZXcuc2NhbGU9MSx0aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbj17eDouNSp0aGlzLmZyYW1lLmNhbnZhcy5jbGllbnRXaWR0aCx5Oi41KnRoaXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodH0sdGhpcy5fYmluZEhhbW1lcigpfX0se2tleTpcIl9iaW5kSGFtbWVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3ZvaWQgMCE9PXRoaXMuaGFtbWVyJiZ0aGlzLmhhbW1lci5kZXN0cm95KCksdGhpcy5kcmFnPXt9LHRoaXMucGluY2g9e30sdGhpcy5oYW1tZXI9bmV3IHBtKHRoaXMuZnJhbWUuY2FudmFzKSx0aGlzLmhhbW1lci5nZXQoXCJwaW5jaFwiKS5zZXQoe2VuYWJsZTohMH0pLHRoaXMuaGFtbWVyLmdldChcInBhblwiKS5zZXQoe3RocmVzaG9sZDo1LGRpcmVjdGlvbjpwbS5ESVJFQ1RJT05fQUxMfSksaUUodGhpcy5oYW1tZXIsKGZ1bmN0aW9uKGUpe3QuYm9keS5ldmVudExpc3RlbmVycy5vblRvdWNoKGUpfSkpLHRoaXMuaGFtbWVyLm9uKFwidGFwXCIsKGZ1bmN0aW9uKGUpe3QuYm9keS5ldmVudExpc3RlbmVycy5vblRhcChlKX0pKSx0aGlzLmhhbW1lci5vbihcImRvdWJsZXRhcFwiLChmdW5jdGlvbihlKXt0LmJvZHkuZXZlbnRMaXN0ZW5lcnMub25Eb3VibGVUYXAoZSl9KSksdGhpcy5oYW1tZXIub24oXCJwcmVzc1wiLChmdW5jdGlvbihlKXt0LmJvZHkuZXZlbnRMaXN0ZW5lcnMub25Ib2xkKGUpfSkpLHRoaXMuaGFtbWVyLm9uKFwicGFuc3RhcnRcIiwoZnVuY3Rpb24oZSl7dC5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uRHJhZ1N0YXJ0KGUpfSkpLHRoaXMuaGFtbWVyLm9uKFwicGFubW92ZVwiLChmdW5jdGlvbihlKXt0LmJvZHkuZXZlbnRMaXN0ZW5lcnMub25EcmFnKGUpfSkpLHRoaXMuaGFtbWVyLm9uKFwicGFuZW5kXCIsKGZ1bmN0aW9uKGUpe3QuYm9keS5ldmVudExpc3RlbmVycy5vbkRyYWdFbmQoZSl9KSksdGhpcy5oYW1tZXIub24oXCJwaW5jaFwiLChmdW5jdGlvbihlKXt0LmJvZHkuZXZlbnRMaXN0ZW5lcnMub25QaW5jaChlKX0pKSx0aGlzLmZyYW1lLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwoZnVuY3Rpb24oZSl7dC5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uTW91c2VXaGVlbChlKX0pKSx0aGlzLmZyYW1lLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsKGZ1bmN0aW9uKGUpe3QuYm9keS5ldmVudExpc3RlbmVycy5vbk1vdXNlTW92ZShlKX0pKSx0aGlzLmZyYW1lLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwoZnVuY3Rpb24oZSl7dC5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uQ29udGV4dChlKX0pKSx0aGlzLmhhbW1lckZyYW1lPW5ldyBwbSh0aGlzLmZyYW1lKSxvRSh0aGlzLmhhbW1lckZyYW1lLChmdW5jdGlvbihlKXt0LmJvZHkuZXZlbnRMaXN0ZW5lcnMub25SZWxlYXNlKGUpfSkpfX0se2tleTpcInNldFNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLm9wdGlvbnMud2lkdGgsZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5vcHRpb25zLmhlaWdodDt0PXRoaXMuX3ByZXBhcmVWYWx1ZSh0KSxlPXRoaXMuX3ByZXBhcmVWYWx1ZShlKTt2YXIgaT0hMSxvPXRoaXMuZnJhbWUuY2FudmFzLndpZHRoLG49dGhpcy5mcmFtZS5jYW52YXMuaGVpZ2h0LHI9dGhpcy5waXhlbFJhdGlvO2lmKHRoaXMuX3NldFBpeGVsUmF0aW8oKSx0IT10aGlzLm9wdGlvbnMud2lkdGh8fGUhPXRoaXMub3B0aW9ucy5oZWlnaHR8fHRoaXMuZnJhbWUuc3R5bGUud2lkdGghPXR8fHRoaXMuZnJhbWUuc3R5bGUuaGVpZ2h0IT1lKXRoaXMuX2dldENhbWVyYVN0YXRlKHIpLHRoaXMuZnJhbWUuc3R5bGUud2lkdGg9dCx0aGlzLmZyYW1lLnN0eWxlLmhlaWdodD1lLHRoaXMuZnJhbWUuY2FudmFzLnN0eWxlLndpZHRoPVwiMTAwJVwiLHRoaXMuZnJhbWUuY2FudmFzLnN0eWxlLmhlaWdodD1cIjEwMCVcIix0aGlzLmZyYW1lLmNhbnZhcy53aWR0aD1NYXRoLnJvdW5kKHRoaXMuZnJhbWUuY2FudmFzLmNsaWVudFdpZHRoKnRoaXMucGl4ZWxSYXRpbyksdGhpcy5mcmFtZS5jYW52YXMuaGVpZ2h0PU1hdGgucm91bmQodGhpcy5mcmFtZS5jYW52YXMuY2xpZW50SGVpZ2h0KnRoaXMucGl4ZWxSYXRpbyksdGhpcy5vcHRpb25zLndpZHRoPXQsdGhpcy5vcHRpb25zLmhlaWdodD1lLHRoaXMuY2FudmFzVmlld0NlbnRlcj17eDouNSp0aGlzLmZyYW1lLmNsaWVudFdpZHRoLHk6LjUqdGhpcy5mcmFtZS5jbGllbnRIZWlnaHR9LGk9ITA7ZWxzZXt2YXIgcz1NYXRoLnJvdW5kKHRoaXMuZnJhbWUuY2FudmFzLmNsaWVudFdpZHRoKnRoaXMucGl4ZWxSYXRpbyksYT1NYXRoLnJvdW5kKHRoaXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodCp0aGlzLnBpeGVsUmF0aW8pO3RoaXMuZnJhbWUuY2FudmFzLndpZHRoPT09cyYmdGhpcy5mcmFtZS5jYW52YXMuaGVpZ2h0PT09YXx8dGhpcy5fZ2V0Q2FtZXJhU3RhdGUociksdGhpcy5mcmFtZS5jYW52YXMud2lkdGghPT1zJiYodGhpcy5mcmFtZS5jYW52YXMud2lkdGg9cyxpPSEwKSx0aGlzLmZyYW1lLmNhbnZhcy5oZWlnaHQhPT1hJiYodGhpcy5mcmFtZS5jYW52YXMuaGVpZ2h0PWEsaT0hMCl9cmV0dXJuITA9PT1pJiYodGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInJlc2l6ZVwiLHt3aWR0aDpNYXRoLnJvdW5kKHRoaXMuZnJhbWUuY2FudmFzLndpZHRoL3RoaXMucGl4ZWxSYXRpbyksaGVpZ2h0Ok1hdGgucm91bmQodGhpcy5mcmFtZS5jYW52YXMuaGVpZ2h0L3RoaXMucGl4ZWxSYXRpbyksb2xkV2lkdGg6TWF0aC5yb3VuZChvL3RoaXMucGl4ZWxSYXRpbyksb2xkSGVpZ2h0Ok1hdGgucm91bmQobi90aGlzLnBpeGVsUmF0aW8pfSksdGhpcy5fc2V0Q2FtZXJhU3RhdGUoKSksdGhpcy5pbml0aWFsaXplZD0hMCxpfX0se2tleTpcImdldENvbnRleHRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZyYW1lLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIil9fSx7a2V5OlwiX2RldGVybWluZVBpeGVsUmF0aW9cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0Q29udGV4dCgpO2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGdldCBjYW52YXggY29udGV4dFwiKTt2YXIgZT0xO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJihlPXdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfHwxKSxlLyh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW98fHQuYmFja2luZ1N0b3JlUGl4ZWxSYXRpb3x8MSl9fSx7a2V5OlwiX3NldFBpeGVsUmF0aW9cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucGl4ZWxSYXRpbz10aGlzLl9kZXRlcm1pbmVQaXhlbFJhdGlvKCl9fSx7a2V5Olwic2V0VHJhbnNmb3JtXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldENvbnRleHQoKTtpZih2b2lkIDA9PT10KXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBnZXQgY2FudmF4IGNvbnRleHRcIik7dC5zZXRUcmFuc2Zvcm0odGhpcy5waXhlbFJhdGlvLDAsMCx0aGlzLnBpeGVsUmF0aW8sMCwwKX19LHtrZXk6XCJfWGNvbnZlcnRET010b0NhbnZhc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybih0LXRoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uLngpL3RoaXMuYm9keS52aWV3LnNjYWxlfX0se2tleTpcIl9YY29udmVydENhbnZhc1RvRE9NXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdGhpcy5ib2R5LnZpZXcuc2NhbGUrdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24ueH19LHtrZXk6XCJfWWNvbnZlcnRET010b0NhbnZhc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybih0LXRoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uLnkpL3RoaXMuYm9keS52aWV3LnNjYWxlfX0se2tleTpcIl9ZY29udmVydENhbnZhc1RvRE9NXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdGhpcy5ib2R5LnZpZXcuc2NhbGUrdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24ueX19LHtrZXk6XCJjYW52YXNUb0RPTVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybnt4OnRoaXMuX1hjb252ZXJ0Q2FudmFzVG9ET00odC54KSx5OnRoaXMuX1ljb252ZXJ0Q2FudmFzVG9ET00odC55KX19fSx7a2V5OlwiRE9NdG9DYW52YXNcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm57eDp0aGlzLl9YY29udmVydERPTXRvQ2FudmFzKHQueCkseTp0aGlzLl9ZY29udmVydERPTXRvQ2FudmFzKHQueSl9fX1dKSx0fSgpO2Z1bmN0aW9uIHJFKHQsZSl7dmFyIGk9Zm8oe25vZGVzOmUsbWluWm9vbUxldmVsOk51bWJlci5NSU5fVkFMVUUsbWF4Wm9vbUxldmVsOjF9LG51bGwhPXQ/dDp7fSk7aWYoIWh1KGkubm9kZXMpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJOb2RlcyBoYXMgdG8gYmUgYW4gYXJyYXkgb2YgaWRzLlwiKTtpZigwPT09aS5ub2Rlcy5sZW5ndGgmJihpLm5vZGVzPWUpLCEoXCJudW1iZXJcIj09dHlwZW9mIGkubWluWm9vbUxldmVsJiZpLm1pblpvb21MZXZlbD4wKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiTWluIHpvb20gbGV2ZWwgaGFzIHRvIGJlIGEgbnVtYmVyIGhpZ2hlciB0aGFuIHplcm8uXCIpO2lmKCEoXCJudW1iZXJcIj09dHlwZW9mIGkubWF4Wm9vbUxldmVsJiZpLm1pblpvb21MZXZlbDw9aS5tYXhab29tTGV2ZWwpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJNYXggem9vbSBsZXZlbCBoYXMgdG8gYmUgYSBudW1iZXIgaGlnaGVyIHRoYW4gbWluIHpvb20gbGV2ZWwuXCIpO3JldHVybiBpfXZhciBzRT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpKXt2YXIgbyxuLHI9dGhpcztYbCh0aGlzLHQpLHRoaXMuYm9keT1lLHRoaXMuY2FudmFzPWksdGhpcy5hbmltYXRpb25TcGVlZD0xL3RoaXMucmVuZGVyUmVmcmVzaFJhdGUsdGhpcy5hbmltYXRpb25FYXNpbmdGdW5jdGlvbj1cImVhc2VJbk91dFF1aW50XCIsdGhpcy5lYXNpbmdUaW1lPTAsdGhpcy5zb3VyY2VTY2FsZT0wLHRoaXMudGFyZ2V0U2NhbGU9MCx0aGlzLnNvdXJjZVRyYW5zbGF0aW9uPTAsdGhpcy50YXJnZXRUcmFuc2xhdGlvbj0wLHRoaXMubG9ja2VkT25Ob2RlSWQ9dm9pZCAwLHRoaXMubG9ja2VkT25Ob2RlT2Zmc2V0PXZvaWQgMCx0aGlzLnRvdWNoVGltZT0wLHRoaXMudmlld0Z1bmN0aW9uPXZvaWQgMCx0aGlzLmJvZHkuZW1pdHRlci5vbihcImZpdFwiLEZvKG89dGhpcy5maXQpLmNhbGwobyx0aGlzKSksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJhbmltYXRpb25GaW5pc2hlZFwiLChmdW5jdGlvbigpe3IuYm9keS5lbWl0dGVyLmVtaXQoXCJfc3RvcFJlbmRlcmluZ1wiKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcInVubG9ja05vZGVcIixGbyhuPXRoaXMucmVsZWFzZU5vZGUpLmNhbGwobix0aGlzKSl9cmV0dXJuICRsKHQsW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307dGhpcy5vcHRpb25zPXR9fSx7a2V5OlwiZml0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXTt0PXJFKHQsdGhpcy5ib2R5Lm5vZGVJbmRpY2VzKTt2YXIgaSxvLG49dGhpcy5jYW52YXMuZnJhbWUuY2FudmFzLmNsaWVudFdpZHRoLHI9dGhpcy5jYW52YXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodDtpZigwPT09bnx8MD09PXIpbz0xLGk9R3guZ2V0UmFuZ2UodGhpcy5ib2R5Lm5vZGVzLHQubm9kZXMpO2Vsc2UgaWYoITA9PT1lKXt2YXIgcz0wO2Zvcih2YXIgYSBpbiB0aGlzLmJvZHkubm9kZXMpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYm9keS5ub2RlcyxhKSl7dmFyIGg9dGhpcy5ib2R5Lm5vZGVzW2FdOyEwPT09aC5wcmVkZWZpbmVkUG9zaXRpb24mJihzKz0xKX1pZihzPi41KnRoaXMuYm9keS5ub2RlSW5kaWNlcy5sZW5ndGgpcmV0dXJuIHZvaWQgdGhpcy5maXQodCwhMSk7aT1HeC5nZXRSYW5nZSh0aGlzLmJvZHkubm9kZXMsdC5ub2Rlcyk7dmFyIGQ9dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLmxlbmd0aDtvPTEyLjY2Mi8oZCs3LjQxNDcpKy4wOTY0ODIyO3ZhciBsPU1hdGgubWluKG4vNjAwLHIvNjAwKTtvKj1sfWVsc2V7dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZXNpemVOb2Rlc1wiKSxpPUd4LmdldFJhbmdlKHRoaXMuYm9keS5ub2Rlcyx0Lm5vZGVzKTt2YXIgYz0xLjEqTWF0aC5hYnMoaS5tYXhYLWkubWluWCksdT0xLjEqTWF0aC5hYnMoaS5tYXhZLWkubWluWSksZj1uL2MscD1yL3U7bz1mPD1wP2Y6cH1vPnQubWF4Wm9vbUxldmVsP289dC5tYXhab29tTGV2ZWw6bzx0Lm1pblpvb21MZXZlbCYmKG89dC5taW5ab29tTGV2ZWwpO3ZhciB2PUd4LmZpbmRDZW50ZXIoaSksZz17cG9zaXRpb246dixzY2FsZTpvLGFuaW1hdGlvbjp0LmFuaW1hdGlvbn07dGhpcy5tb3ZlVG8oZyl9fSx7a2V5OlwiZm9jdXNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307aWYodm9pZCAwIT09dGhpcy5ib2R5Lm5vZGVzW3RdKXt2YXIgaT17eDp0aGlzLmJvZHkubm9kZXNbdF0ueCx5OnRoaXMuYm9keS5ub2Rlc1t0XS55fTtlLnBvc2l0aW9uPWksZS5sb2NrZWRPbk5vZGU9dCx0aGlzLm1vdmVUbyhlKX1lbHNlIGNvbnNvbGUuZXJyb3IoXCJOb2RlOiBcIit0K1wiIGNhbm5vdCBiZSBmb3VuZC5cIil9fSx7a2V5OlwibW92ZVRvXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwIT09dCl7aWYobnVsbCE9dC5vZmZzZXQpe2lmKG51bGwhPXQub2Zmc2V0Lngpe2lmKHQub2Zmc2V0Lng9K3Qub2Zmc2V0LngsIU13KHQub2Zmc2V0LngpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBvcHRpb24gXCJvZmZzZXQueFwiIGhhcyB0byBiZSBhIGZpbml0ZSBudW1iZXIuJyl9ZWxzZSB0Lm9mZnNldC54PTA7aWYobnVsbCE9dC5vZmZzZXQueSl7aWYodC5vZmZzZXQueT0rdC5vZmZzZXQueSwhTXcodC5vZmZzZXQueSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIG9wdGlvbiBcIm9mZnNldC55XCIgaGFzIHRvIGJlIGEgZmluaXRlIG51bWJlci4nKX1lbHNlIHQub2Zmc2V0Lng9MH1lbHNlIHQub2Zmc2V0PXt4OjAseTowfTtpZihudWxsIT10LnBvc2l0aW9uKXtpZihudWxsIT10LnBvc2l0aW9uLngpe2lmKHQucG9zaXRpb24ueD0rdC5wb3NpdGlvbi54LCFNdyh0LnBvc2l0aW9uLngpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBvcHRpb24gXCJwb3NpdGlvbi54XCIgaGFzIHRvIGJlIGEgZmluaXRlIG51bWJlci4nKX1lbHNlIHQucG9zaXRpb24ueD0wO2lmKG51bGwhPXQucG9zaXRpb24ueSl7aWYodC5wb3NpdGlvbi55PSt0LnBvc2l0aW9uLnksIU13KHQucG9zaXRpb24ueSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIG9wdGlvbiBcInBvc2l0aW9uLnlcIiBoYXMgdG8gYmUgYSBmaW5pdGUgbnVtYmVyLicpfWVsc2UgdC5wb3NpdGlvbi54PTB9ZWxzZSB0LnBvc2l0aW9uPXRoaXMuZ2V0Vmlld1Bvc2l0aW9uKCk7aWYobnVsbCE9dC5zY2FsZSl7aWYodC5zY2FsZT0rdC5zY2FsZSwhKHQuc2NhbGU+MCkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIG9wdGlvbiBcInNjYWxlXCIgaGFzIHRvIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiB6ZXJvLicpfWVsc2UgdC5zY2FsZT10aGlzLmJvZHkudmlldy5zY2FsZTt2b2lkIDA9PT10LmFuaW1hdGlvbiYmKHQuYW5pbWF0aW9uPXtkdXJhdGlvbjowfSksITE9PT10LmFuaW1hdGlvbiYmKHQuYW5pbWF0aW9uPXtkdXJhdGlvbjowfSksITA9PT10LmFuaW1hdGlvbiYmKHQuYW5pbWF0aW9uPXt9KSx2b2lkIDA9PT10LmFuaW1hdGlvbi5kdXJhdGlvbiYmKHQuYW5pbWF0aW9uLmR1cmF0aW9uPTFlMyksdm9pZCAwPT09dC5hbmltYXRpb24uZWFzaW5nRnVuY3Rpb24mJih0LmFuaW1hdGlvbi5lYXNpbmdGdW5jdGlvbj1cImVhc2VJbk91dFF1YWRcIiksdGhpcy5hbmltYXRlVmlldyh0KX1lbHNlIHQ9e319fSx7a2V5OlwiYW5pbWF0ZVZpZXdcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10KXt0aGlzLmFuaW1hdGlvbkVhc2luZ0Z1bmN0aW9uPXQuYW5pbWF0aW9uLmVhc2luZ0Z1bmN0aW9uLHRoaXMucmVsZWFzZU5vZGUoKSwhMD09PXQubG9ja2VkJiYodGhpcy5sb2NrZWRPbk5vZGVJZD10LmxvY2tlZE9uTm9kZSx0aGlzLmxvY2tlZE9uTm9kZU9mZnNldD10Lm9mZnNldCksMCE9dGhpcy5lYXNpbmdUaW1lJiZ0aGlzLl90cmFuc2l0aW9uUmVkcmF3KCEwKSx0aGlzLnNvdXJjZVNjYWxlPXRoaXMuYm9keS52aWV3LnNjYWxlLHRoaXMuc291cmNlVHJhbnNsYXRpb249dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24sdGhpcy50YXJnZXRTY2FsZT10LnNjYWxlLHRoaXMuYm9keS52aWV3LnNjYWxlPXRoaXMudGFyZ2V0U2NhbGU7dmFyIGUsaSxvPXRoaXMuY2FudmFzLkRPTXRvQ2FudmFzKHt4Oi41KnRoaXMuY2FudmFzLmZyYW1lLmNhbnZhcy5jbGllbnRXaWR0aCx5Oi41KnRoaXMuY2FudmFzLmZyYW1lLmNhbnZhcy5jbGllbnRIZWlnaHR9KSxuPW8ueC10LnBvc2l0aW9uLngscj1vLnktdC5wb3NpdGlvbi55O2lmKHRoaXMudGFyZ2V0VHJhbnNsYXRpb249e3g6dGhpcy5zb3VyY2VUcmFuc2xhdGlvbi54K24qdGhpcy50YXJnZXRTY2FsZSt0Lm9mZnNldC54LHk6dGhpcy5zb3VyY2VUcmFuc2xhdGlvbi55K3IqdGhpcy50YXJnZXRTY2FsZSt0Lm9mZnNldC55fSwwPT09dC5hbmltYXRpb24uZHVyYXRpb24paWYobnVsbCE9dGhpcy5sb2NrZWRPbk5vZGVJZCl0aGlzLnZpZXdGdW5jdGlvbj1GbyhlPXRoaXMuX2xvY2tlZFJlZHJhdykuY2FsbChlLHRoaXMpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiaW5pdFJlZHJhd1wiLHRoaXMudmlld0Z1bmN0aW9uKTtlbHNlIHRoaXMuYm9keS52aWV3LnNjYWxlPXRoaXMudGFyZ2V0U2NhbGUsdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb249dGhpcy50YXJnZXRUcmFuc2xhdGlvbix0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIik7ZWxzZSB0aGlzLmFuaW1hdGlvblNwZWVkPTEvKDYwKnQuYW5pbWF0aW9uLmR1cmF0aW9uKi4wMDEpfHwxLzYwLHRoaXMuYW5pbWF0aW9uRWFzaW5nRnVuY3Rpb249dC5hbmltYXRpb24uZWFzaW5nRnVuY3Rpb24sdGhpcy52aWV3RnVuY3Rpb249Rm8oaT10aGlzLl90cmFuc2l0aW9uUmVkcmF3KS5jYWxsKGksdGhpcyksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJpbml0UmVkcmF3XCIsdGhpcy52aWV3RnVuY3Rpb24pLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfc3RhcnRSZW5kZXJpbmdcIil9fX0se2tleTpcIl9sb2NrZWRSZWRyYXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuYm9keS5ub2Rlc1t0aGlzLmxvY2tlZE9uTm9kZUlkXS54LGU9dGhpcy5ib2R5Lm5vZGVzW3RoaXMubG9ja2VkT25Ob2RlSWRdLnksaT10aGlzLmNhbnZhcy5ET010b0NhbnZhcyh7eDouNSp0aGlzLmNhbnZhcy5mcmFtZS5jYW52YXMuY2xpZW50V2lkdGgseTouNSp0aGlzLmNhbnZhcy5mcmFtZS5jYW52YXMuY2xpZW50SGVpZ2h0fSksbz1pLngtdCxuPWkueS1lLHI9dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24scz17eDpyLngrbyp0aGlzLmJvZHkudmlldy5zY2FsZSt0aGlzLmxvY2tlZE9uTm9kZU9mZnNldC54LHk6ci55K24qdGhpcy5ib2R5LnZpZXcuc2NhbGUrdGhpcy5sb2NrZWRPbk5vZGVPZmZzZXQueX07dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb249c319LHtrZXk6XCJyZWxlYXNlTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5sb2NrZWRPbk5vZGVJZCYmdm9pZCAwIT09dGhpcy52aWV3RnVuY3Rpb24mJih0aGlzLmJvZHkuZW1pdHRlci5vZmYoXCJpbml0UmVkcmF3XCIsdGhpcy52aWV3RnVuY3Rpb24pLHRoaXMubG9ja2VkT25Ob2RlSWQ9dm9pZCAwLHRoaXMubG9ja2VkT25Ob2RlT2Zmc2V0PXZvaWQgMCl9fSx7a2V5OlwiX3RyYW5zaXRpb25SZWRyYXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07dGhpcy5lYXNpbmdUaW1lKz10aGlzLmFuaW1hdGlvblNwZWVkLHRoaXMuZWFzaW5nVGltZT0hMD09PXQ/MTp0aGlzLmVhc2luZ1RpbWU7dmFyIGU9ZW1bdGhpcy5hbmltYXRpb25FYXNpbmdGdW5jdGlvbl0odGhpcy5lYXNpbmdUaW1lKTtpZih0aGlzLmJvZHkudmlldy5zY2FsZT10aGlzLnNvdXJjZVNjYWxlKyh0aGlzLnRhcmdldFNjYWxlLXRoaXMuc291cmNlU2NhbGUpKmUsdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb249e3g6dGhpcy5zb3VyY2VUcmFuc2xhdGlvbi54Kyh0aGlzLnRhcmdldFRyYW5zbGF0aW9uLngtdGhpcy5zb3VyY2VUcmFuc2xhdGlvbi54KSplLHk6dGhpcy5zb3VyY2VUcmFuc2xhdGlvbi55Kyh0aGlzLnRhcmdldFRyYW5zbGF0aW9uLnktdGhpcy5zb3VyY2VUcmFuc2xhdGlvbi55KSplfSx0aGlzLmVhc2luZ1RpbWU+PTEpe3ZhciBpO2lmKHRoaXMuYm9keS5lbWl0dGVyLm9mZihcImluaXRSZWRyYXdcIix0aGlzLnZpZXdGdW5jdGlvbiksdGhpcy5lYXNpbmdUaW1lPTAsbnVsbCE9dGhpcy5sb2NrZWRPbk5vZGVJZCl0aGlzLnZpZXdGdW5jdGlvbj1GbyhpPXRoaXMuX2xvY2tlZFJlZHJhdykuY2FsbChpLHRoaXMpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiaW5pdFJlZHJhd1wiLHRoaXMudmlld0Z1bmN0aW9uKTt0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiYW5pbWF0aW9uRmluaXNoZWRcIil9fX0se2tleTpcImdldFNjYWxlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ib2R5LnZpZXcuc2NhbGV9fSx7a2V5OlwiZ2V0Vmlld1Bvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYW52YXMuRE9NdG9DYW52YXMoe3g6LjUqdGhpcy5jYW52YXMuZnJhbWUuY2FudmFzLmNsaWVudFdpZHRoLHk6LjUqdGhpcy5jYW52YXMuZnJhbWUuY2FudmFzLmNsaWVudEhlaWdodH0pfX1dKSx0fSgpO2Z1bmN0aW9uIGFFKHQpe3ZhciBlLGk9dCYmdC5wcmV2ZW50RGVmYXVsdHx8ITEsbz10JiZ0LmNvbnRhaW5lcnx8d2luZG93LG49e30scj17a2V5ZG93bjp7fSxrZXl1cDp7fX0scz17fTtmb3IoZT05NztlPD0xMjI7ZSsrKXNbU3RyaW5nLmZyb21DaGFyQ29kZShlKV09e2NvZGU6ZS05Nys2NSxzaGlmdDohMX07Zm9yKGU9NjU7ZTw9OTA7ZSsrKXNbU3RyaW5nLmZyb21DaGFyQ29kZShlKV09e2NvZGU6ZSxzaGlmdDohMH07Zm9yKGU9MDtlPD05O2UrKylzW1wiXCIrZV09e2NvZGU6NDgrZSxzaGlmdDohMX07Zm9yKGU9MTtlPD0xMjtlKyspc1tcIkZcIitlXT17Y29kZToxMTErZSxzaGlmdDohMX07Zm9yKGU9MDtlPD05O2UrKylzW1wibnVtXCIrZV09e2NvZGU6OTYrZSxzaGlmdDohMX07c1tcIm51bSpcIl09e2NvZGU6MTA2LHNoaWZ0OiExfSxzW1wibnVtK1wiXT17Y29kZToxMDcsc2hpZnQ6ITF9LHNbXCJudW0tXCJdPXtjb2RlOjEwOSxzaGlmdDohMX0sc1tcIm51bS9cIl09e2NvZGU6MTExLHNoaWZ0OiExfSxzW1wibnVtLlwiXT17Y29kZToxMTAsc2hpZnQ6ITF9LHMubGVmdD17Y29kZTozNyxzaGlmdDohMX0scy51cD17Y29kZTozOCxzaGlmdDohMX0scy5yaWdodD17Y29kZTozOSxzaGlmdDohMX0scy5kb3duPXtjb2RlOjQwLHNoaWZ0OiExfSxzLnNwYWNlPXtjb2RlOjMyLHNoaWZ0OiExfSxzLmVudGVyPXtjb2RlOjEzLHNoaWZ0OiExfSxzLnNoaWZ0PXtjb2RlOjE2LHNoaWZ0OnZvaWQgMH0scy5lc2M9e2NvZGU6Mjcsc2hpZnQ6ITF9LHMuYmFja3NwYWNlPXtjb2RlOjgsc2hpZnQ6ITF9LHMudGFiPXtjb2RlOjksc2hpZnQ6ITF9LHMuY3RybD17Y29kZToxNyxzaGlmdDohMX0scy5hbHQ9e2NvZGU6MTgsc2hpZnQ6ITF9LHMuZGVsZXRlPXtjb2RlOjQ2LHNoaWZ0OiExfSxzLnBhZ2V1cD17Y29kZTozMyxzaGlmdDohMX0scy5wYWdlZG93bj17Y29kZTozNCxzaGlmdDohMX0sc1tcIj1cIl09e2NvZGU6MTg3LHNoaWZ0OiExfSxzW1wiLVwiXT17Y29kZToxODksc2hpZnQ6ITF9LHNbXCJdXCJdPXtjb2RlOjIyMSxzaGlmdDohMX0sc1tcIltcIl09e2NvZGU6MjE5LHNoaWZ0OiExfTt2YXIgYT1mdW5jdGlvbih0KXtkKHQsXCJrZXlkb3duXCIpfSxoPWZ1bmN0aW9uKHQpe2QodCxcImtleXVwXCIpfSxkPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwIT09cltlXVt0LmtleUNvZGVdKXtmb3IodmFyIG89cltlXVt0LmtleUNvZGVdLG49MDtuPG8ubGVuZ3RoO24rKykodm9pZCAwPT09b1tuXS5zaGlmdHx8MT09b1tuXS5zaGlmdCYmMT09dC5zaGlmdEtleXx8MD09b1tuXS5zaGlmdCYmMD09dC5zaGlmdEtleSkmJm9bbl0uZm4odCk7MT09aSYmdC5wcmV2ZW50RGVmYXVsdCgpfX07cmV0dXJuIG4uYmluZD1mdW5jdGlvbih0LGUsaSl7aWYodm9pZCAwPT09aSYmKGk9XCJrZXlkb3duXCIpLHZvaWQgMD09PXNbdF0pdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQga2V5OiBcIit0KTt2b2lkIDA9PT1yW2ldW3NbdF0uY29kZV0mJihyW2ldW3NbdF0uY29kZV09W10pLHJbaV1bc1t0XS5jb2RlXS5wdXNoKHtmbjplLHNoaWZ0OnNbdF0uc2hpZnR9KX0sbi5iaW5kQWxsPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBpIGluIHZvaWQgMD09PWUmJihlPVwia2V5ZG93blwiKSxzKXMuaGFzT3duUHJvcGVydHkoaSkmJm4uYmluZChpLHQsZSl9LG4uZ2V0S2V5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiBzKWlmKHMuaGFzT3duUHJvcGVydHkoZSkpe2lmKDE9PXQuc2hpZnRLZXkmJjE9PXNbZV0uc2hpZnQmJnQua2V5Q29kZT09c1tlXS5jb2RlKXJldHVybiBlO2lmKDA9PXQuc2hpZnRLZXkmJjA9PXNbZV0uc2hpZnQmJnQua2V5Q29kZT09c1tlXS5jb2RlKXJldHVybiBlO2lmKHQua2V5Q29kZT09c1tlXS5jb2RlJiZcInNoaWZ0XCI9PWUpcmV0dXJuIGV9cmV0dXJuXCJ1bmtub3duIGtleSwgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWRcIn0sbi51bmJpbmQ9ZnVuY3Rpb24odCxlLGkpe2lmKHZvaWQgMD09PWkmJihpPVwia2V5ZG93blwiKSx2b2lkIDA9PT1zW3RdKXRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIGtleTogXCIrdCk7aWYodm9pZCAwIT09ZSl7dmFyIG89W10sbj1yW2ldW3NbdF0uY29kZV07aWYodm9pZCAwIT09bilmb3IodmFyIGE9MDthPG4ubGVuZ3RoO2ErKyluW2FdLmZuPT1lJiZuW2FdLnNoaWZ0PT1zW3RdLnNoaWZ0fHxvLnB1c2gocltpXVtzW3RdLmNvZGVdW2FdKTtyW2ldW3NbdF0uY29kZV09b31lbHNlIHJbaV1bc1t0XS5jb2RlXT1bXX0sbi5yZXNldD1mdW5jdGlvbigpe3I9e2tleWRvd246e30sa2V5dXA6e319fSxuLmRlc3Ryb3k9ZnVuY3Rpb24oKXtyPXtrZXlkb3duOnt9LGtleXVwOnt9fSxvLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsYSwhMCksby5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIixoLCEwKX0sby5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGEsITApLG8uYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsaCwhMCksbn12YXIgaEU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsaSl7dmFyIG89dGhpcztYbCh0aGlzLHQpLHRoaXMuYm9keT1lLHRoaXMuY2FudmFzPWksdGhpcy5pY29uc0NyZWF0ZWQ9ITEsdGhpcy5uYXZpZ2F0aW9uSGFtbWVycz1bXSx0aGlzLmJvdW5kRnVuY3Rpb25zPXt9LHRoaXMudG91Y2hUaW1lPTAsdGhpcy5hY3RpdmF0ZWQ9ITEsdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJhY3RpdmF0ZVwiLChmdW5jdGlvbigpe28uYWN0aXZhdGVkPSEwLG8uY29uZmlndXJlS2V5Ym9hcmRCaW5kaW5ncygpfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiZGVhY3RpdmF0ZVwiLChmdW5jdGlvbigpe28uYWN0aXZhdGVkPSExLG8uY29uZmlndXJlS2V5Ym9hcmRCaW5kaW5ncygpfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiZGVzdHJveVwiLChmdW5jdGlvbigpe3ZvaWQgMCE9PW8ua2V5Y2hhcm0mJm8ua2V5Y2hhcm0uZGVzdHJveSgpfSkpLHRoaXMub3B0aW9ucz17fX1yZXR1cm4gJGwodCxbe2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt2b2lkIDAhPT10JiYodGhpcy5vcHRpb25zPXQsdGhpcy5jcmVhdGUoKSl9fSx7a2V5OlwiY3JlYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXshMD09PXRoaXMub3B0aW9ucy5uYXZpZ2F0aW9uQnV0dG9ucz8hMT09PXRoaXMuaWNvbnNDcmVhdGVkJiZ0aGlzLmxvYWROYXZpZ2F0aW9uRWxlbWVudHMoKTohMD09PXRoaXMuaWNvbnNDcmVhdGVkJiZ0aGlzLmNsZWFuTmF2aWdhdGlvbigpLHRoaXMuY29uZmlndXJlS2V5Ym9hcmRCaW5kaW5ncygpfX0se2tleTpcImNsZWFuTmF2aWdhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoMCE9dGhpcy5uYXZpZ2F0aW9uSGFtbWVycy5sZW5ndGgpe2Zvcih2YXIgdD0wO3Q8dGhpcy5uYXZpZ2F0aW9uSGFtbWVycy5sZW5ndGg7dCsrKXRoaXMubmF2aWdhdGlvbkhhbW1lcnNbdF0uZGVzdHJveSgpO3RoaXMubmF2aWdhdGlvbkhhbW1lcnM9W119dGhpcy5uYXZpZ2F0aW9uRE9NJiZ0aGlzLm5hdmlnYXRpb25ET00ud3JhcHBlciYmdGhpcy5uYXZpZ2F0aW9uRE9NLndyYXBwZXIucGFyZW50Tm9kZSYmdGhpcy5uYXZpZ2F0aW9uRE9NLndyYXBwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5hdmlnYXRpb25ET00ud3JhcHBlciksdGhpcy5pY29uc0NyZWF0ZWQ9ITF9fSx7a2V5OlwibG9hZE5hdmlnYXRpb25FbGVtZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmNsZWFuTmF2aWdhdGlvbigpLHRoaXMubmF2aWdhdGlvbkRPTT17fTt2YXIgZT1bXCJ1cFwiLFwiZG93blwiLFwibGVmdFwiLFwicmlnaHRcIixcInpvb21JblwiLFwiem9vbU91dFwiLFwiem9vbUV4dGVuZHNcIl0saT1bXCJfbW92ZVVwXCIsXCJfbW92ZURvd25cIixcIl9tb3ZlTGVmdFwiLFwiX21vdmVSaWdodFwiLFwiX3pvb21JblwiLFwiX3pvb21PdXRcIixcIl9maXRcIl07dGhpcy5uYXZpZ2F0aW9uRE9NLndyYXBwZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLm5hdmlnYXRpb25ET00ud3JhcHBlci5jbGFzc05hbWU9XCJ2aXMtbmF2aWdhdGlvblwiLHRoaXMuY2FudmFzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMubmF2aWdhdGlvbkRPTS53cmFwcGVyKTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dGhpcy5uYXZpZ2F0aW9uRE9NW2Vbb11dPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5uYXZpZ2F0aW9uRE9NW2Vbb11dLmNsYXNzTmFtZT1cInZpcy1idXR0b24gdmlzLVwiK2Vbb10sdGhpcy5uYXZpZ2F0aW9uRE9NLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5uYXZpZ2F0aW9uRE9NW2Vbb11dKTt2YXIgbixyLHM9bmV3IHBtKHRoaXMubmF2aWdhdGlvbkRPTVtlW29dXSk7aWYoXCJfZml0XCI9PT1pW29dKWlFKHMsRm8obj10aGlzLl9maXQpLmNhbGwobix0aGlzKSk7ZWxzZSBpRShzLEZvKHI9dGhpcy5iaW5kVG9SZWRyYXcpLmNhbGwocix0aGlzLGlbb10pKTt0aGlzLm5hdmlnYXRpb25IYW1tZXJzLnB1c2gocyl9dmFyIGE9bmV3IHBtKHRoaXMuY2FudmFzLmZyYW1lKTtvRShhLChmdW5jdGlvbigpe3QuX3N0b3BNb3ZlbWVudCgpfSkpLHRoaXMubmF2aWdhdGlvbkhhbW1lcnMucHVzaChhKSx0aGlzLmljb25zQ3JlYXRlZD0hMH19LHtrZXk6XCJiaW5kVG9SZWRyYXdcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZTt2b2lkIDA9PT10aGlzLmJvdW5kRnVuY3Rpb25zW3RdJiYodGhpcy5ib3VuZEZ1bmN0aW9uc1t0XT1GbyhlPXRoaXNbdF0pLmNhbGwoZSx0aGlzKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcImluaXRSZWRyYXdcIix0aGlzLmJvdW5kRnVuY3Rpb25zW3RdKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3N0YXJ0UmVuZGVyaW5nXCIpKX19LHtrZXk6XCJ1bmJpbmRGcm9tUmVkcmF3XCIsdmFsdWU6ZnVuY3Rpb24odCl7dm9pZCAwIT09dGhpcy5ib3VuZEZ1bmN0aW9uc1t0XSYmKHRoaXMuYm9keS5lbWl0dGVyLm9mZihcImluaXRSZWRyYXdcIix0aGlzLmJvdW5kRnVuY3Rpb25zW3RdKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3N0b3BSZW5kZXJpbmdcIiksZGVsZXRlIHRoaXMuYm91bmRGdW5jdGlvbnNbdF0pfX0se2tleTpcIl9maXRcIix2YWx1ZTpmdW5jdGlvbigpeyhuZXcgRGF0ZSkudmFsdWVPZigpLXRoaXMudG91Y2hUaW1lPjcwMCYmKHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJmaXRcIix7ZHVyYXRpb246NzAwfSksdGhpcy50b3VjaFRpbWU9KG5ldyBEYXRlKS52YWx1ZU9mKCkpfX0se2tleTpcIl9zdG9wTW92ZW1lbnRcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLmJvdW5kRnVuY3Rpb25zKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmJvdW5kRnVuY3Rpb25zLHQpJiYodGhpcy5ib2R5LmVtaXR0ZXIub2ZmKFwiaW5pdFJlZHJhd1wiLHRoaXMuYm91bmRGdW5jdGlvbnNbdF0pLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfc3RvcFJlbmRlcmluZ1wiKSk7dGhpcy5ib3VuZEZ1bmN0aW9ucz17fX19LHtrZXk6XCJfbW92ZVVwXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbi55Kz10aGlzLm9wdGlvbnMua2V5Ym9hcmQuc3BlZWQueX19LHtrZXk6XCJfbW92ZURvd25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uLnktPXRoaXMub3B0aW9ucy5rZXlib2FyZC5zcGVlZC55fX0se2tleTpcIl9tb3ZlTGVmdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24ueCs9dGhpcy5vcHRpb25zLmtleWJvYXJkLnNwZWVkLnh9fSx7a2V5OlwiX21vdmVSaWdodFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24ueC09dGhpcy5vcHRpb25zLmtleWJvYXJkLnNwZWVkLnh9fSx7a2V5OlwiX3pvb21JblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5ib2R5LnZpZXcuc2NhbGUsZT10aGlzLmJvZHkudmlldy5zY2FsZSooMSt0aGlzLm9wdGlvbnMua2V5Ym9hcmQuc3BlZWQuem9vbSksaT10aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbixvPWUvdCxuPSgxLW8pKnRoaXMuY2FudmFzLmNhbnZhc1ZpZXdDZW50ZXIueCtpLngqbyxyPSgxLW8pKnRoaXMuY2FudmFzLmNhbnZhc1ZpZXdDZW50ZXIueStpLnkqbzt0aGlzLmJvZHkudmlldy5zY2FsZT1lLHRoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uPXt4Om4seTpyfSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiem9vbVwiLHtkaXJlY3Rpb246XCIrXCIsc2NhbGU6dGhpcy5ib2R5LnZpZXcuc2NhbGUscG9pbnRlcjpudWxsfSl9fSx7a2V5OlwiX3pvb21PdXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuYm9keS52aWV3LnNjYWxlLGU9dGhpcy5ib2R5LnZpZXcuc2NhbGUvKDErdGhpcy5vcHRpb25zLmtleWJvYXJkLnNwZWVkLnpvb20pLGk9dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24sbz1lL3Qsbj0oMS1vKSp0aGlzLmNhbnZhcy5jYW52YXNWaWV3Q2VudGVyLngraS54Km8scj0oMS1vKSp0aGlzLmNhbnZhcy5jYW52YXNWaWV3Q2VudGVyLnkraS55Km87dGhpcy5ib2R5LnZpZXcuc2NhbGU9ZSx0aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbj17eDpuLHk6cn0sdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInpvb21cIix7ZGlyZWN0aW9uOlwiLVwiLHNjYWxlOnRoaXMuYm9keS52aWV3LnNjYWxlLHBvaW50ZXI6bnVsbH0pfX0se2tleTpcImNvbmZpZ3VyZUtleWJvYXJkQmluZGluZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0LGUsaSxvLG4scixzLGEsaCxkLGwsYyx1LGYscCx2LGcseSxtLGIsdyxrLF8seCxFPXRoaXM7KHZvaWQgMCE9PXRoaXMua2V5Y2hhcm0mJnRoaXMua2V5Y2hhcm0uZGVzdHJveSgpLCEwPT09dGhpcy5vcHRpb25zLmtleWJvYXJkLmVuYWJsZWQpJiYoITA9PT10aGlzLm9wdGlvbnMua2V5Ym9hcmQuYmluZFRvV2luZG93P3RoaXMua2V5Y2hhcm09YUUoe2NvbnRhaW5lcjp3aW5kb3cscHJldmVudERlZmF1bHQ6ITB9KTp0aGlzLmtleWNoYXJtPWFFKHtjb250YWluZXI6dGhpcy5jYW52YXMuZnJhbWUscHJldmVudERlZmF1bHQ6ITB9KSx0aGlzLmtleWNoYXJtLnJlc2V0KCksITA9PT10aGlzLmFjdGl2YXRlZCYmKEZvKHQ9dGhpcy5rZXljaGFybSkuY2FsbCh0LFwidXBcIiwoZnVuY3Rpb24oKXtFLmJpbmRUb1JlZHJhdyhcIl9tb3ZlVXBcIil9KSxcImtleWRvd25cIiksRm8oZT10aGlzLmtleWNoYXJtKS5jYWxsKGUsXCJkb3duXCIsKGZ1bmN0aW9uKCl7RS5iaW5kVG9SZWRyYXcoXCJfbW92ZURvd25cIil9KSxcImtleWRvd25cIiksRm8oaT10aGlzLmtleWNoYXJtKS5jYWxsKGksXCJsZWZ0XCIsKGZ1bmN0aW9uKCl7RS5iaW5kVG9SZWRyYXcoXCJfbW92ZUxlZnRcIil9KSxcImtleWRvd25cIiksRm8obz10aGlzLmtleWNoYXJtKS5jYWxsKG8sXCJyaWdodFwiLChmdW5jdGlvbigpe0UuYmluZFRvUmVkcmF3KFwiX21vdmVSaWdodFwiKX0pLFwia2V5ZG93blwiKSxGbyhuPXRoaXMua2V5Y2hhcm0pLmNhbGwobixcIj1cIiwoZnVuY3Rpb24oKXtFLmJpbmRUb1JlZHJhdyhcIl96b29tSW5cIil9KSxcImtleWRvd25cIiksRm8ocj10aGlzLmtleWNoYXJtKS5jYWxsKHIsXCJudW0rXCIsKGZ1bmN0aW9uKCl7RS5iaW5kVG9SZWRyYXcoXCJfem9vbUluXCIpfSksXCJrZXlkb3duXCIpLEZvKHM9dGhpcy5rZXljaGFybSkuY2FsbChzLFwibnVtLVwiLChmdW5jdGlvbigpe0UuYmluZFRvUmVkcmF3KFwiX3pvb21PdXRcIil9KSxcImtleWRvd25cIiksRm8oYT10aGlzLmtleWNoYXJtKS5jYWxsKGEsXCItXCIsKGZ1bmN0aW9uKCl7RS5iaW5kVG9SZWRyYXcoXCJfem9vbU91dFwiKX0pLFwia2V5ZG93blwiKSxGbyhoPXRoaXMua2V5Y2hhcm0pLmNhbGwoaCxcIltcIiwoZnVuY3Rpb24oKXtFLmJpbmRUb1JlZHJhdyhcIl96b29tT3V0XCIpfSksXCJrZXlkb3duXCIpLEZvKGQ9dGhpcy5rZXljaGFybSkuY2FsbChkLFwiXVwiLChmdW5jdGlvbigpe0UuYmluZFRvUmVkcmF3KFwiX3pvb21JblwiKX0pLFwia2V5ZG93blwiKSxGbyhsPXRoaXMua2V5Y2hhcm0pLmNhbGwobCxcInBhZ2V1cFwiLChmdW5jdGlvbigpe0UuYmluZFRvUmVkcmF3KFwiX3pvb21JblwiKX0pLFwia2V5ZG93blwiKSxGbyhjPXRoaXMua2V5Y2hhcm0pLmNhbGwoYyxcInBhZ2Vkb3duXCIsKGZ1bmN0aW9uKCl7RS5iaW5kVG9SZWRyYXcoXCJfem9vbU91dFwiKX0pLFwia2V5ZG93blwiKSxGbyh1PXRoaXMua2V5Y2hhcm0pLmNhbGwodSxcInVwXCIsKGZ1bmN0aW9uKCl7RS51bmJpbmRGcm9tUmVkcmF3KFwiX21vdmVVcFwiKX0pLFwia2V5dXBcIiksRm8oZj10aGlzLmtleWNoYXJtKS5jYWxsKGYsXCJkb3duXCIsKGZ1bmN0aW9uKCl7RS51bmJpbmRGcm9tUmVkcmF3KFwiX21vdmVEb3duXCIpfSksXCJrZXl1cFwiKSxGbyhwPXRoaXMua2V5Y2hhcm0pLmNhbGwocCxcImxlZnRcIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfbW92ZUxlZnRcIil9KSxcImtleXVwXCIpLEZvKHY9dGhpcy5rZXljaGFybSkuY2FsbCh2LFwicmlnaHRcIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfbW92ZVJpZ2h0XCIpfSksXCJrZXl1cFwiKSxGbyhnPXRoaXMua2V5Y2hhcm0pLmNhbGwoZyxcIj1cIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfem9vbUluXCIpfSksXCJrZXl1cFwiKSxGbyh5PXRoaXMua2V5Y2hhcm0pLmNhbGwoeSxcIm51bStcIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfem9vbUluXCIpfSksXCJrZXl1cFwiKSxGbyhtPXRoaXMua2V5Y2hhcm0pLmNhbGwobSxcIm51bS1cIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfem9vbU91dFwiKX0pLFwia2V5dXBcIiksRm8oYj10aGlzLmtleWNoYXJtKS5jYWxsKGIsXCItXCIsKGZ1bmN0aW9uKCl7RS51bmJpbmRGcm9tUmVkcmF3KFwiX3pvb21PdXRcIil9KSxcImtleXVwXCIpLEZvKHc9dGhpcy5rZXljaGFybSkuY2FsbCh3LFwiW1wiLChmdW5jdGlvbigpe0UudW5iaW5kRnJvbVJlZHJhdyhcIl96b29tT3V0XCIpfSksXCJrZXl1cFwiKSxGbyhrPXRoaXMua2V5Y2hhcm0pLmNhbGwoayxcIl1cIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfem9vbUluXCIpfSksXCJrZXl1cFwiKSxGbyhfPXRoaXMua2V5Y2hhcm0pLmNhbGwoXyxcInBhZ2V1cFwiLChmdW5jdGlvbigpe0UudW5iaW5kRnJvbVJlZHJhdyhcIl96b29tSW5cIil9KSxcImtleXVwXCIpLEZvKHg9dGhpcy5rZXljaGFybSkuY2FsbCh4LFwicGFnZWRvd25cIiwoZnVuY3Rpb24oKXtFLnVuYmluZEZyb21SZWRyYXcoXCJfem9vbU91dFwiKX0pLFwia2V5dXBcIikpKX19XSksdH0oKTtmdW5jdGlvbiBkRSh0LGUpe3ZhciBpPXZvaWQgMCE9PXR1JiZvaCh0KXx8dFtcIkBAaXRlcmF0b3JcIl07aWYoIWkpe2lmKGh1KHQpfHwoaT1mdW5jdGlvbih0LGUpe3ZhciBpO2lmKCF0KXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gbEUodCxlKTt2YXIgbz1hdShpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkuY2FsbChpLDgsLTEpO1wiT2JqZWN0XCI9PT1vJiZ0LmNvbnN0cnVjdG9yJiYobz10LmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1vfHxcIlNldFwiPT09bylyZXR1cm4gamEodCk7aWYoXCJBcmd1bWVudHNcIj09PW98fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG8pKXJldHVybiBsRSh0LGUpfSh0KSl8fGUmJnQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aCl7aSYmKHQ9aSk7dmFyIG89MCxuPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpuLG46ZnVuY3Rpb24oKXtyZXR1cm4gbz49dC5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbbysrXX19LGU6ZnVuY3Rpb24odCl7dGhyb3cgdH0sZjpufX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIHIscz0hMCxhPSExO3JldHVybntzOmZ1bmN0aW9uKCl7aT1pLmNhbGwodCl9LG46ZnVuY3Rpb24oKXt2YXIgdD1pLm5leHQoKTtyZXR1cm4gcz10LmRvbmUsdH0sZTpmdW5jdGlvbih0KXthPSEwLHI9dH0sZjpmdW5jdGlvbigpe3RyeXtzfHxudWxsPT1pLnJldHVybnx8aS5yZXR1cm4oKX1maW5hbGx5e2lmKGEpdGhyb3cgcn19fX1mdW5jdGlvbiBsRSh0LGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO2Zvcih2YXIgaT0wLG89bmV3IEFycmF5KGUpO2k8ZTtpKyspb1tpXT10W2ldO3JldHVybiBvfXZhciBjRT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpLG8pe3ZhciBuLHIscyxhLGgsZCxsLGMsdSxmLHAsdixnO1hsKHRoaXMsdCksdGhpcy5ib2R5PWUsdGhpcy5jYW52YXM9aSx0aGlzLnNlbGVjdGlvbkhhbmRsZXI9byx0aGlzLm5hdmlnYXRpb25IYW5kbGVyPW5ldyBoRShlLGkpLHRoaXMuYm9keS5ldmVudExpc3RlbmVycy5vblRhcD1GbyhuPXRoaXMub25UYXApLmNhbGwobix0aGlzKSx0aGlzLmJvZHkuZXZlbnRMaXN0ZW5lcnMub25Ub3VjaD1GbyhyPXRoaXMub25Ub3VjaCkuY2FsbChyLHRoaXMpLHRoaXMuYm9keS5ldmVudExpc3RlbmVycy5vbkRvdWJsZVRhcD1GbyhzPXRoaXMub25Eb3VibGVUYXApLmNhbGwocyx0aGlzKSx0aGlzLmJvZHkuZXZlbnRMaXN0ZW5lcnMub25Ib2xkPUZvKGE9dGhpcy5vbkhvbGQpLmNhbGwoYSx0aGlzKSx0aGlzLmJvZHkuZXZlbnRMaXN0ZW5lcnMub25EcmFnU3RhcnQ9Rm8oaD10aGlzLm9uRHJhZ1N0YXJ0KS5jYWxsKGgsdGhpcyksdGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uRHJhZz1GbyhkPXRoaXMub25EcmFnKS5jYWxsKGQsdGhpcyksdGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uRHJhZ0VuZD1GbyhsPXRoaXMub25EcmFnRW5kKS5jYWxsKGwsdGhpcyksdGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uTW91c2VXaGVlbD1GbyhjPXRoaXMub25Nb3VzZVdoZWVsKS5jYWxsKGMsdGhpcyksdGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uUGluY2g9Rm8odT10aGlzLm9uUGluY2gpLmNhbGwodSx0aGlzKSx0aGlzLmJvZHkuZXZlbnRMaXN0ZW5lcnMub25Nb3VzZU1vdmU9Rm8oZj10aGlzLm9uTW91c2VNb3ZlKS5jYWxsKGYsdGhpcyksdGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uUmVsZWFzZT1GbyhwPXRoaXMub25SZWxlYXNlKS5jYWxsKHAsdGhpcyksdGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzLm9uQ29udGV4dD1Gbyh2PXRoaXMub25Db250ZXh0KS5jYWxsKHYsdGhpcyksdGhpcy50b3VjaFRpbWU9MCx0aGlzLmRyYWc9e30sdGhpcy5waW5jaD17fSx0aGlzLnBvcHVwPXZvaWQgMCx0aGlzLnBvcHVwT2JqPXZvaWQgMCx0aGlzLnBvcHVwVGltZXI9dm9pZCAwLHRoaXMuYm9keS5mdW5jdGlvbnMuZ2V0UG9pbnRlcj1GbyhnPXRoaXMuZ2V0UG9pbnRlcikuY2FsbChnLHRoaXMpLHRoaXMub3B0aW9ucz17fSx0aGlzLmRlZmF1bHRPcHRpb25zPXtkcmFnTm9kZXM6ITAsZHJhZ1ZpZXc6ITAsaG92ZXI6ITEsa2V5Ym9hcmQ6e2VuYWJsZWQ6ITEsc3BlZWQ6e3g6MTAseToxMCx6b29tOi4wMn0sYmluZFRvV2luZG93OiEwLGF1dG9Gb2N1czohMH0sbmF2aWdhdGlvbkJ1dHRvbnM6ITEsdG9vbHRpcERlbGF5OjMwMCx6b29tVmlldzohMCx6b29tU3BlZWQ6MX0sZm8odGhpcy5vcHRpb25zLHRoaXMuZGVmYXVsdE9wdGlvbnMpLHRoaXMuYmluZEV2ZW50TGlzdGVuZXJzKCl9cmV0dXJuICRsKHQsW3trZXk6XCJiaW5kRXZlbnRMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5ib2R5LmVtaXR0ZXIub24oXCJkZXN0cm95XCIsKGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHQucG9wdXBUaW1lciksZGVsZXRlIHQuYm9keS5mdW5jdGlvbnMuZ2V0UG9pbnRlcn0pKX19LHtrZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwIT09dCl7QXkoW1wiaGlkZUVkZ2VzT25EcmFnXCIsXCJoaWRlRWRnZXNPblpvb21cIixcImhpZGVOb2Rlc09uRHJhZ1wiLFwia2V5Ym9hcmRcIixcIm11bHRpc2VsZWN0XCIsXCJzZWxlY3RhYmxlXCIsXCJzZWxlY3RDb25uZWN0ZWRFZGdlc1wiXSx0aGlzLm9wdGlvbnMsdCksdG0odGhpcy5vcHRpb25zLHQsXCJrZXlib2FyZFwiKSx0LnRvb2x0aXAmJihmbyh0aGlzLm9wdGlvbnMudG9vbHRpcCx0LnRvb2x0aXApLHQudG9vbHRpcC5jb2xvciYmKHRoaXMub3B0aW9ucy50b29sdGlwLmNvbG9yPVl5KHQudG9vbHRpcC5jb2xvcikpKX10aGlzLm5hdmlnYXRpb25IYW5kbGVyLnNldE9wdGlvbnModGhpcy5vcHRpb25zKX19LHtrZXk6XCJnZXRQb2ludGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJue3g6dC54LShlPXRoaXMuY2FudmFzLmZyYW1lLmNhbnZhcyxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpLHk6dC55LUh5KHRoaXMuY2FudmFzLmZyYW1lLmNhbnZhcyl9O3ZhciBlfX0se2tleTpcIm9uVG91Y2hcIix2YWx1ZTpmdW5jdGlvbih0KXsobmV3IERhdGUpLnZhbHVlT2YoKS10aGlzLnRvdWNoVGltZT41MCYmKHRoaXMuZHJhZy5wb2ludGVyPXRoaXMuZ2V0UG9pbnRlcih0LmNlbnRlciksdGhpcy5kcmFnLnBpbmNoZWQ9ITEsdGhpcy5waW5jaC5zY2FsZT10aGlzLmJvZHkudmlldy5zY2FsZSx0aGlzLnRvdWNoVGltZT0obmV3IERhdGUpLnZhbHVlT2YoKSl9fSx7a2V5Olwib25UYXBcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldFBvaW50ZXIodC5jZW50ZXIpLGk9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLm9wdGlvbnMubXVsdGlzZWxlY3QmJih0LmNoYW5nZWRQb2ludGVyc1swXS5jdHJsS2V5fHx0LmNoYW5nZWRQb2ludGVyc1swXS5tZXRhS2V5KTt0aGlzLmNoZWNrU2VsZWN0aW9uQ2hhbmdlcyhlLGkpLHRoaXMuc2VsZWN0aW9uSGFuZGxlci5jb21taXRBbmRFbWl0KGUsdCksdGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImNsaWNrXCIsdCxlKX19LHtrZXk6XCJvbkRvdWJsZVRhcFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0UG9pbnRlcih0LmNlbnRlcik7dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImRvdWJsZUNsaWNrXCIsdCxlKX19LHtrZXk6XCJvbkhvbGRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldFBvaW50ZXIodC5jZW50ZXIpLGk9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLm9wdGlvbnMubXVsdGlzZWxlY3Q7dGhpcy5jaGVja1NlbGVjdGlvbkNoYW5nZXMoZSxpKSx0aGlzLnNlbGVjdGlvbkhhbmRsZXIuY29tbWl0QW5kRW1pdChlLHQpLHRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZW5lcmF0ZUNsaWNrRXZlbnQoXCJjbGlja1wiLHQsZSksdGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImhvbGRcIix0LGUpfX0se2tleTpcIm9uUmVsZWFzZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKChuZXcgRGF0ZSkudmFsdWVPZigpLXRoaXMudG91Y2hUaW1lPjEwKXt2YXIgZT10aGlzLmdldFBvaW50ZXIodC5jZW50ZXIpO3RoaXMuc2VsZWN0aW9uSGFuZGxlci5nZW5lcmF0ZUNsaWNrRXZlbnQoXCJyZWxlYXNlXCIsdCxlKSx0aGlzLnRvdWNoVGltZT0obmV3IERhdGUpLnZhbHVlT2YoKX19fSx7a2V5Olwib25Db250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRQb2ludGVyKHt4OnQuY2xpZW50WCx5OnQuY2xpZW50WX0pO3RoaXMuc2VsZWN0aW9uSGFuZGxlci5nZW5lcmF0ZUNsaWNrRXZlbnQoXCJvbmNvbnRleHRcIix0LGUpfX0se2tleTpcImNoZWNrU2VsZWN0aW9uQ2hhbmdlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07ITA9PT1lP3RoaXMuc2VsZWN0aW9uSGFuZGxlci5zZWxlY3RBZGRpdGlvbmFsT25Qb2ludCh0KTp0aGlzLnNlbGVjdGlvbkhhbmRsZXIuc2VsZWN0T25Qb2ludCh0KX19LHtrZXk6XCJfZGV0ZXJtaW5lRGlmZmVyZW5jZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9ZnVuY3Rpb24odCxlKXtmb3IodmFyIGk9W10sbz0wO288dC5sZW5ndGg7bysrKXt2YXIgbj10W29dOy0xPT09enAoZSkuY2FsbChlLG4pJiZpLnB1c2gobil9cmV0dXJuIGl9O3JldHVybntub2RlczppKHQubm9kZXMsZS5ub2RlcyksZWRnZXM6aSh0LmVkZ2VzLGUuZWRnZXMpfX19LHtrZXk6XCJvbkRyYWdTdGFydFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCF0aGlzLmRyYWcuZHJhZ2dpbmcpe3ZvaWQgMD09PXRoaXMuZHJhZy5wb2ludGVyJiZ0aGlzLm9uVG91Y2godCk7dmFyIGU9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldE5vZGVBdCh0aGlzLmRyYWcucG9pbnRlcik7aWYodGhpcy5kcmFnLmRyYWdnaW5nPSEwLHRoaXMuZHJhZy5zZWxlY3Rpb249W10sdGhpcy5kcmFnLnRyYW5zbGF0aW9uPWZvKHt9LHRoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uKSx0aGlzLmRyYWcubm9kZUlkPXZvaWQgMCx0LnNyY0V2ZW50LnNoaWZ0S2V5KXt0aGlzLmJvZHkuc2VsZWN0aW9uQm94LnNob3c9ITA7dmFyIGk9dGhpcy5nZXRQb2ludGVyKHQuY2VudGVyKTt0aGlzLmJvZHkuc2VsZWN0aW9uQm94LnBvc2l0aW9uLnN0YXJ0PXt4OnRoaXMuY2FudmFzLl9YY29udmVydERPTXRvQ2FudmFzKGkueCkseTp0aGlzLmNhbnZhcy5fWWNvbnZlcnRET010b0NhbnZhcyhpLnkpfSx0aGlzLmJvZHkuc2VsZWN0aW9uQm94LnBvc2l0aW9uLmVuZD17eDp0aGlzLmNhbnZhcy5fWGNvbnZlcnRET010b0NhbnZhcyhpLngpLHk6dGhpcy5jYW52YXMuX1ljb252ZXJ0RE9NdG9DYW52YXMoaS55KX19aWYodm9pZCAwIT09ZSYmITA9PT10aGlzLm9wdGlvbnMuZHJhZ05vZGVzKXt0aGlzLmRyYWcubm9kZUlkPWUuaWQsITE9PT1lLmlzU2VsZWN0ZWQoKSYmdGhpcy5zZWxlY3Rpb25IYW5kbGVyLnNldFNlbGVjdGlvbih7bm9kZXM6W2UuaWRdfSksdGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImRyYWdTdGFydFwiLHQsdGhpcy5kcmFnLnBvaW50ZXIpO3ZhciBvLG49ZEUodGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldFNlbGVjdGVkTm9kZXMoKSk7dHJ5e2ZvcihuLnMoKTshKG89bi5uKCkpLmRvbmU7KXt2YXIgcj1vLnZhbHVlLHM9e2lkOnIuaWQsbm9kZTpyLHg6ci54LHk6ci55LHhGaXhlZDpyLm9wdGlvbnMuZml4ZWQueCx5Rml4ZWQ6ci5vcHRpb25zLmZpeGVkLnl9O3Iub3B0aW9ucy5maXhlZC54PSEwLHIub3B0aW9ucy5maXhlZC55PSEwLHRoaXMuZHJhZy5zZWxlY3Rpb24ucHVzaChzKX19Y2F0Y2godCl7bi5lKHQpfWZpbmFsbHl7bi5mKCl9fWVsc2UgdGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImRyYWdTdGFydFwiLHQsdGhpcy5kcmFnLnBvaW50ZXIsdm9pZCAwLCEwKX19fSx7a2V5Olwib25EcmFnXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZighMCE9PXRoaXMuZHJhZy5waW5jaGVkKXt0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwidW5sb2NrTm9kZVwiKTt2YXIgaT10aGlzLmdldFBvaW50ZXIodC5jZW50ZXIpLG89dGhpcy5kcmFnLnNlbGVjdGlvbjtpZihvJiZvLmxlbmd0aCYmITA9PT10aGlzLm9wdGlvbnMuZHJhZ05vZGVzKXt0aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2VuZXJhdGVDbGlja0V2ZW50KFwiZHJhZ2dpbmdcIix0LGkpO3ZhciBuPWkueC10aGlzLmRyYWcucG9pbnRlci54LHI9aS55LXRoaXMuZHJhZy5wb2ludGVyLnk7RnUobykuY2FsbChvLChmdW5jdGlvbih0KXt2YXIgaT10Lm5vZGU7ITE9PT10LnhGaXhlZCYmKGkueD1lLmNhbnZhcy5fWGNvbnZlcnRET010b0NhbnZhcyhlLmNhbnZhcy5fWGNvbnZlcnRDYW52YXNUb0RPTSh0LngpK24pKSwhMT09PXQueUZpeGVkJiYoaS55PWUuY2FudmFzLl9ZY29udmVydERPTXRvQ2FudmFzKGUuY2FudmFzLl9ZY29udmVydENhbnZhc1RvRE9NKHQueSkrcikpfSkpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJzdGFydFNpbXVsYXRpb25cIil9ZWxzZXtpZih0LnNyY0V2ZW50LnNoaWZ0S2V5KXtpZih0aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2VuZXJhdGVDbGlja0V2ZW50KFwiZHJhZ2dpbmdcIix0LGksdm9pZCAwLCEwKSx2b2lkIDA9PT10aGlzLmRyYWcucG9pbnRlcilyZXR1cm4gdm9pZCB0aGlzLm9uRHJhZ1N0YXJ0KHQpO3RoaXMuYm9keS5zZWxlY3Rpb25Cb3gucG9zaXRpb24uZW5kPXt4OnRoaXMuY2FudmFzLl9YY29udmVydERPTXRvQ2FudmFzKGkueCkseTp0aGlzLmNhbnZhcy5fWWNvbnZlcnRET010b0NhbnZhcyhpLnkpfSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIil9aWYoITA9PT10aGlzLm9wdGlvbnMuZHJhZ1ZpZXcmJiF0LnNyY0V2ZW50LnNoaWZ0S2V5KXtpZih0aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2VuZXJhdGVDbGlja0V2ZW50KFwiZHJhZ2dpbmdcIix0LGksdm9pZCAwLCEwKSx2b2lkIDA9PT10aGlzLmRyYWcucG9pbnRlcilyZXR1cm4gdm9pZCB0aGlzLm9uRHJhZ1N0YXJ0KHQpO3ZhciBzPWkueC10aGlzLmRyYWcucG9pbnRlci54LGE9aS55LXRoaXMuZHJhZy5wb2ludGVyLnk7dGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb249e3g6dGhpcy5kcmFnLnRyYW5zbGF0aW9uLngrcyx5OnRoaXMuZHJhZy50cmFuc2xhdGlvbi55K2F9LHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVxdWVzdFJlZHJhd1wiKX19fX19LHtrZXk6XCJvbkRyYWdFbmRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKHRoaXMuZHJhZy5kcmFnZ2luZz0hMSx0aGlzLmJvZHkuc2VsZWN0aW9uQm94LnNob3cpe3ZhciBpO3RoaXMuYm9keS5zZWxlY3Rpb25Cb3guc2hvdz0hMTt2YXIgbz10aGlzLmJvZHkuc2VsZWN0aW9uQm94LnBvc2l0aW9uLG49e21pblg6TWF0aC5taW4oby5zdGFydC54LG8uZW5kLngpLG1pblk6TWF0aC5taW4oby5zdGFydC55LG8uZW5kLnkpLG1heFg6TWF0aC5tYXgoby5zdGFydC54LG8uZW5kLngpLG1heFk6TWF0aC5tYXgoby5zdGFydC55LG8uZW5kLnkpfSxyPVlmKGk9dGhpcy5ib2R5Lm5vZGVJbmRpY2VzKS5jYWxsKGksKGZ1bmN0aW9uKHQpe3ZhciBpPWUuYm9keS5ub2Rlc1t0XTtyZXR1cm4gaS54Pj1uLm1pblgmJmkueDw9bi5tYXhYJiZpLnk+PW4ubWluWSYmaS55PD1uLm1heFl9KSk7RnUocikuY2FsbChyLChmdW5jdGlvbih0KXtyZXR1cm4gZS5zZWxlY3Rpb25IYW5kbGVyLnNlbGVjdE9iamVjdChlLmJvZHkubm9kZXNbdF0pfSkpO3ZhciBzPXRoaXMuZ2V0UG9pbnRlcih0LmNlbnRlcik7dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmNvbW1pdEFuZEVtaXQocyx0KSx0aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2VuZXJhdGVDbGlja0V2ZW50KFwiZHJhZ0VuZFwiLHQsdGhpcy5nZXRQb2ludGVyKHQuY2VudGVyKSx2b2lkIDAsITApLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVxdWVzdFJlZHJhd1wiKX1lbHNle3ZhciBhPXRoaXMuZHJhZy5zZWxlY3Rpb247YSYmYS5sZW5ndGg/KEZ1KGEpLmNhbGwoYSwoZnVuY3Rpb24odCl7dC5ub2RlLm9wdGlvbnMuZml4ZWQueD10LnhGaXhlZCx0Lm5vZGUub3B0aW9ucy5maXhlZC55PXQueUZpeGVkfSkpLHRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZW5lcmF0ZUNsaWNrRXZlbnQoXCJkcmFnRW5kXCIsdCx0aGlzLmdldFBvaW50ZXIodC5jZW50ZXIpKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwic3RhcnRTaW11bGF0aW9uXCIpKToodGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImRyYWdFbmRcIix0LHRoaXMuZ2V0UG9pbnRlcih0LmNlbnRlciksdm9pZCAwLCEwKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIikpfX19LHtrZXk6XCJvblBpbmNoXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRQb2ludGVyKHQuY2VudGVyKTt0aGlzLmRyYWcucGluY2hlZD0hMCx2b2lkIDA9PT10aGlzLnBpbmNoLnNjYWxlJiYodGhpcy5waW5jaC5zY2FsZT0xKTt2YXIgaT10aGlzLnBpbmNoLnNjYWxlKnQuc2NhbGU7dGhpcy56b29tKGksZSl9fSx7a2V5Olwiem9vbVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoITA9PT10aGlzLm9wdGlvbnMuem9vbVZpZXcpe3ZhciBpPXRoaXMuYm9keS52aWV3LnNjYWxlO3Q8MWUtNSYmKHQ9MWUtNSksdD4xMCYmKHQ9MTApO3ZhciBvPXZvaWQgMDt2b2lkIDAhPT10aGlzLmRyYWcmJiEwPT09dGhpcy5kcmFnLmRyYWdnaW5nJiYobz10aGlzLmNhbnZhcy5ET010b0NhbnZhcyh0aGlzLmRyYWcucG9pbnRlcikpO3ZhciBuPXRoaXMuYm9keS52aWV3LnRyYW5zbGF0aW9uLHI9dC9pLHM9KDEtcikqZS54K24ueCpyLGE9KDEtcikqZS55K24ueSpyO2lmKHRoaXMuYm9keS52aWV3LnNjYWxlPXQsdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb249e3g6cyx5OmF9LG51bGwhPW8pe3ZhciBoPXRoaXMuY2FudmFzLmNhbnZhc1RvRE9NKG8pO3RoaXMuZHJhZy5wb2ludGVyLng9aC54LHRoaXMuZHJhZy5wb2ludGVyLnk9aC55fXRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVxdWVzdFJlZHJhd1wiKSxpPHQ/dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInpvb21cIix7ZGlyZWN0aW9uOlwiK1wiLHNjYWxlOnRoaXMuYm9keS52aWV3LnNjYWxlLHBvaW50ZXI6ZX0pOnRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJ6b29tXCIse2RpcmVjdGlvbjpcIi1cIixzY2FsZTp0aGlzLmJvZHkudmlldy5zY2FsZSxwb2ludGVyOmV9KX19fSx7a2V5Olwib25Nb3VzZVdoZWVsXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoITA9PT10aGlzLm9wdGlvbnMuem9vbVZpZXcpe2lmKDAhPT10LmRlbHRhWSl7dmFyIGU9dGhpcy5ib2R5LnZpZXcuc2NhbGU7ZSo9MSsodC5kZWx0YVk8MD8xOi0xKSooLjEqdGhpcy5vcHRpb25zLnpvb21TcGVlZCk7dmFyIGk9dGhpcy5nZXRQb2ludGVyKHt4OnQuY2xpZW50WCx5OnQuY2xpZW50WX0pO3RoaXMuem9vbShlLGkpfXQucHJldmVudERlZmF1bHQoKX19fSx7a2V5Olwib25Nb3VzZU1vdmVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLGk9dGhpcy5nZXRQb2ludGVyKHt4OnQuY2xpZW50WCx5OnQuY2xpZW50WX0pLG89ITE7dm9pZCAwIT09dGhpcy5wb3B1cCYmKCExPT09dGhpcy5wb3B1cC5oaWRkZW4mJnRoaXMuX2NoZWNrSGlkZVBvcHVwKGkpLCExPT09dGhpcy5wb3B1cC5oaWRkZW4mJihvPSEwLHRoaXMucG9wdXAuc2V0UG9zaXRpb24oaS54KzMsaS55LTUpLHRoaXMucG9wdXAuc2hvdygpKSksdGhpcy5vcHRpb25zLmtleWJvYXJkLmF1dG9Gb2N1cyYmITE9PT10aGlzLm9wdGlvbnMua2V5Ym9hcmQuYmluZFRvV2luZG93JiYhMD09PXRoaXMub3B0aW9ucy5rZXlib2FyZC5lbmFibGVkJiZ0aGlzLmNhbnZhcy5mcmFtZS5mb2N1cygpLCExPT09byYmKHZvaWQgMCE9PXRoaXMucG9wdXBUaW1lciYmKGNsZWFySW50ZXJ2YWwodGhpcy5wb3B1cFRpbWVyKSx0aGlzLnBvcHVwVGltZXI9dm9pZCAwKSx0aGlzLmRyYWcuZHJhZ2dpbmd8fCh0aGlzLnBvcHVwVGltZXI9YnYoKGZ1bmN0aW9uKCl7cmV0dXJuIGUuX2NoZWNrU2hvd1BvcHVwKGkpfSksdGhpcy5vcHRpb25zLnRvb2x0aXBEZWxheSkpKSwhMD09PXRoaXMub3B0aW9ucy5ob3ZlciYmdGhpcy5zZWxlY3Rpb25IYW5kbGVyLmhvdmVyT2JqZWN0KHQsaSl9fSx7a2V5OlwiX2NoZWNrU2hvd1BvcHVwXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jYW52YXMuX1hjb252ZXJ0RE9NdG9DYW52YXModC54KSxpPXRoaXMuY2FudmFzLl9ZY29udmVydERPTXRvQ2FudmFzKHQueSksbz17bGVmdDplLHRvcDppLHJpZ2h0OmUsYm90dG9tOml9LG49dm9pZCAwPT09dGhpcy5wb3B1cE9iaj92b2lkIDA6dGhpcy5wb3B1cE9iai5pZCxyPSExLHM9XCJub2RlXCI7aWYodm9pZCAwPT09dGhpcy5wb3B1cE9iail7Zm9yKHZhciBhLGg9dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLGQ9dGhpcy5ib2R5Lm5vZGVzLGw9W10sYz0wO2M8aC5sZW5ndGg7YysrKSEwPT09KGE9ZFtoW2NdXSkuaXNPdmVybGFwcGluZ1dpdGgobykmJihyPSEwLHZvaWQgMCE9PWEuZ2V0VGl0bGUoKSYmbC5wdXNoKGhbY10pKTtsLmxlbmd0aD4wJiYodGhpcy5wb3B1cE9iaj1kW2xbbC5sZW5ndGgtMV1dLHI9ITApfWlmKHZvaWQgMD09PXRoaXMucG9wdXBPYmomJiExPT09cil7Zm9yKHZhciB1LGY9dGhpcy5ib2R5LmVkZ2VJbmRpY2VzLHA9dGhpcy5ib2R5LmVkZ2VzLHY9W10sZz0wO2c8Zi5sZW5ndGg7ZysrKSEwPT09KHU9cFtmW2ddXSkuaXNPdmVybGFwcGluZ1dpdGgobykmJiEwPT09dS5jb25uZWN0ZWQmJnZvaWQgMCE9PXUuZ2V0VGl0bGUoKSYmdi5wdXNoKGZbZ10pO3YubGVuZ3RoPjAmJih0aGlzLnBvcHVwT2JqPXBbdlt2Lmxlbmd0aC0xXV0scz1cImVkZ2VcIil9dm9pZCAwIT09dGhpcy5wb3B1cE9iaj90aGlzLnBvcHVwT2JqLmlkIT09biYmKHZvaWQgMD09PXRoaXMucG9wdXAmJih0aGlzLnBvcHVwPW5ldyB2bSh0aGlzLmNhbnZhcy5mcmFtZSkpLHRoaXMucG9wdXAucG9wdXBUYXJnZXRUeXBlPXMsdGhpcy5wb3B1cC5wb3B1cFRhcmdldElkPXRoaXMucG9wdXBPYmouaWQsdGhpcy5wb3B1cC5zZXRQb3NpdGlvbih0LngrMyx0LnktNSksdGhpcy5wb3B1cC5zZXRUZXh0KHRoaXMucG9wdXBPYmouZ2V0VGl0bGUoKSksdGhpcy5wb3B1cC5zaG93KCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInNob3dQb3B1cFwiLHRoaXMucG9wdXBPYmouaWQpKTp2b2lkIDAhPT10aGlzLnBvcHVwJiYodGhpcy5wb3B1cC5oaWRlKCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcImhpZGVQb3B1cFwiKSl9fSx7a2V5OlwiX2NoZWNrSGlkZVBvcHVwXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLl9wb2ludGVyVG9Qb3NpdGlvbk9iamVjdCh0KSxpPSExO2lmKFwibm9kZVwiPT09dGhpcy5wb3B1cC5wb3B1cFRhcmdldFR5cGUpe2lmKHZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1t0aGlzLnBvcHVwLnBvcHVwVGFyZ2V0SWRdJiYhMD09PShpPXRoaXMuYm9keS5ub2Rlc1t0aGlzLnBvcHVwLnBvcHVwVGFyZ2V0SWRdLmlzT3ZlcmxhcHBpbmdXaXRoKGUpKSl7dmFyIG89dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldE5vZGVBdCh0KTtpPXZvaWQgMCE9PW8mJm8uaWQ9PT10aGlzLnBvcHVwLnBvcHVwVGFyZ2V0SWR9fWVsc2Ugdm9pZCAwPT09dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldE5vZGVBdCh0KSYmdm9pZCAwIT09dGhpcy5ib2R5LmVkZ2VzW3RoaXMucG9wdXAucG9wdXBUYXJnZXRJZF0mJihpPXRoaXMuYm9keS5lZGdlc1t0aGlzLnBvcHVwLnBvcHVwVGFyZ2V0SWRdLmlzT3ZlcmxhcHBpbmdXaXRoKGUpKTshMT09PWkmJih0aGlzLnBvcHVwT2JqPXZvaWQgMCx0aGlzLnBvcHVwLmhpZGUoKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiaGlkZVBvcHVwXCIpKX19XSksdH0oKTtudyhcIlNldFwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSkseHcpO3ZhciB1RT1HLlNldCxmRT15LHBFPXN3LHZFPWliLmV4cG9ydHMuZ2V0V2Vha0RhdGEsZ0U9WmUseUU9WCxtRT1XYixiRT1qYix3RT1WdCxrRT1Vbi5zZXQsX0U9VW4uZ2V0dGVyRm9yLHhFPVZoLmZpbmQsRUU9VmguZmluZEluZGV4LE9FPWZFKFtdLnNwbGljZSksQ0U9MCxTRT1mdW5jdGlvbih0KXtyZXR1cm4gdC5mcm96ZW58fCh0LmZyb3plbj1uZXcgVEUpfSxURT1mdW5jdGlvbigpe3RoaXMuZW50cmllcz1bXX0sTUU9ZnVuY3Rpb24odCxlKXtyZXR1cm4geEUodC5lbnRyaWVzLChmdW5jdGlvbih0KXtyZXR1cm4gdFswXT09PWV9KSl9O1RFLnByb3RvdHlwZT17Z2V0OmZ1bmN0aW9uKHQpe3ZhciBlPU1FKHRoaXMsdCk7aWYoZSlyZXR1cm4gZVsxXX0saGFzOmZ1bmN0aW9uKHQpe3JldHVybiEhTUUodGhpcyx0KX0sc2V0OmZ1bmN0aW9uKHQsZSl7dmFyIGk9TUUodGhpcyx0KTtpP2lbMV09ZTp0aGlzLmVudHJpZXMucHVzaChbdCxlXSl9LGRlbGV0ZTpmdW5jdGlvbih0KXt2YXIgZT1FRSh0aGlzLmVudHJpZXMsKGZ1bmN0aW9uKGUpe3JldHVybiBlWzBdPT09dH0pKTtyZXR1cm5+ZSYmT0UodGhpcy5lbnRyaWVzLGUsMSksISF+ZX19O3ZhciBQRSxERT17Z2V0Q29uc3RydWN0b3I6ZnVuY3Rpb24odCxlLGksbyl7dmFyIG49dCgoZnVuY3Rpb24odCxuKXttRSh0LHIpLGtFKHQse3R5cGU6ZSxpZDpDRSsrLGZyb3plbjp2b2lkIDB9KSxudWxsIT1uJiZiRShuLHRbb10se3RoYXQ6dCxBU19FTlRSSUVTOml9KX0pKSxyPW4ucHJvdG90eXBlLHM9X0UoZSksYT1mdW5jdGlvbih0LGUsaSl7dmFyIG89cyh0KSxuPXZFKGdFKGUpLCEwKTtyZXR1cm4hMD09PW4/U0Uobykuc2V0KGUsaSk6bltvLmlkXT1pLHR9O3JldHVybiBwRShyLHtkZWxldGU6ZnVuY3Rpb24odCl7dmFyIGU9cyh0aGlzKTtpZigheUUodCkpcmV0dXJuITE7dmFyIGk9dkUodCk7cmV0dXJuITA9PT1pP1NFKGUpLmRlbGV0ZSh0KTppJiZ3RShpLGUuaWQpJiZkZWxldGUgaVtlLmlkXX0saGFzOmZ1bmN0aW9uKHQpe3ZhciBlPXModGhpcyk7aWYoIXlFKHQpKXJldHVybiExO3ZhciBpPXZFKHQpO3JldHVybiEwPT09aT9TRShlKS5oYXModCk6aSYmd0UoaSxlLmlkKX19KSxwRShyLGk/e2dldDpmdW5jdGlvbih0KXt2YXIgZT1zKHRoaXMpO2lmKHlFKHQpKXt2YXIgaT12RSh0KTtyZXR1cm4hMD09PWk/U0UoZSkuZ2V0KHQpOmk/aVtlLmlkXTp2b2lkIDB9fSxzZXQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gYSh0aGlzLHQsZSl9fTp7YWRkOmZ1bmN0aW9uKHQpe3JldHVybiBhKHRoaXMsdCwhMCl9fSksbn19LEJFPW4sSUU9eSx6RT1zdyxGRT1pYi5leHBvcnRzLE5FPW53LEFFPURFLFJFPVgsakU9ZGIsTEU9VW4uZW5mb3JjZSxIRT14bixXRT0hQkUuQWN0aXZlWE9iamVjdCYmXCJBY3RpdmVYT2JqZWN0XCJpbiBCRSxWRT1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSxxRT1ORShcIldlYWtNYXBcIixWRSxBRSk7aWYoSEUmJldFKXtQRT1BRS5nZXRDb25zdHJ1Y3RvcihWRSxcIldlYWtNYXBcIiwhMCksRkUuZW5hYmxlKCk7dmFyIFVFPXFFLnByb3RvdHlwZSxZRT1JRShVRS5kZWxldGUpLFhFPUlFKFVFLmhhcyksR0U9SUUoVUUuZ2V0KSxLRT1JRShVRS5zZXQpO3pFKFVFLHtkZWxldGU6ZnVuY3Rpb24odCl7aWYoUkUodCkmJiFqRSh0KSl7dmFyIGU9TEUodGhpcyk7cmV0dXJuIGUuZnJvemVufHwoZS5mcm96ZW49bmV3IFBFKSxZRSh0aGlzLHQpfHxlLmZyb3plbi5kZWxldGUodCl9cmV0dXJuIFlFKHRoaXMsdCl9LGhhczpmdW5jdGlvbih0KXtpZihSRSh0KSYmIWpFKHQpKXt2YXIgZT1MRSh0aGlzKTtyZXR1cm4gZS5mcm96ZW58fChlLmZyb3plbj1uZXcgUEUpLFhFKHRoaXMsdCl8fGUuZnJvemVuLmhhcyh0KX1yZXR1cm4gWEUodGhpcyx0KX0sZ2V0OmZ1bmN0aW9uKHQpe2lmKFJFKHQpJiYhakUodCkpe3ZhciBlPUxFKHRoaXMpO3JldHVybiBlLmZyb3plbnx8KGUuZnJvemVuPW5ldyBQRSksWEUodGhpcyx0KT9HRSh0aGlzLHQpOmUuZnJvemVuLmdldCh0KX1yZXR1cm4gR0UodGhpcyx0KX0sc2V0OmZ1bmN0aW9uKHQsZSl7aWYoUkUodCkmJiFqRSh0KSl7dmFyIGk9TEUodGhpcyk7aS5mcm96ZW58fChpLmZyb3plbj1uZXcgUEUpLFhFKHRoaXMsdCk/S0UodGhpcyx0LGUpOmkuZnJvemVuLnNldCh0LGUpfWVsc2UgS0UodGhpcyx0LGUpO3JldHVybiB0aGlzfX0pfXZhciAkRSxaRSxRRSxKRSx0TyxlTz1HLldlYWtNYXA7XG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0Q29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblx0UGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5cdHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuXHRUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5cdFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuXHRBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5cdElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuXHRMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuXHRPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5cdFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG5cdCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5mdW5jdGlvbiBpTyh0LGUsaSxvKXtpZihcImFcIj09PWkmJiFvKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZT90IT09ZXx8IW86IWUuaGFzKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7cmV0dXJuXCJtXCI9PT1pP286XCJhXCI9PT1pP28uY2FsbCh0KTpvP28udmFsdWU6ZS5nZXQodCl9ZnVuY3Rpb24gb08odCxlLGksbyxuKXtpZihcIm1cIj09PW8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtpZihcImFcIj09PW8mJiFuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZT90IT09ZXx8IW46IWUuaGFzKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtyZXR1cm5cImFcIj09PW8/bi5jYWxsKHQsaSk6bj9uLnZhbHVlPWk6ZS5zZXQodCxpKSxpfWZ1bmN0aW9uIG5PKHQsZSl7dmFyIGk9dm9pZCAwIT09dHUmJm9oKHQpfHx0W1wiQEBpdGVyYXRvclwiXTtpZighaSl7aWYoaHUodCl8fChpPWZ1bmN0aW9uKHQsZSl7dmFyIGk7aWYoIXQpcmV0dXJuO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiByTyh0LGUpO3ZhciBvPWF1KGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKS5jYWxsKGksOCwtMSk7XCJPYmplY3RcIj09PW8mJnQuY29uc3RydWN0b3ImJihvPXQuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW98fFwiU2V0XCI9PT1vKXJldHVybiBqYSh0KTtpZihcIkFyZ3VtZW50c1wiPT09b3x8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobykpcmV0dXJuIHJPKHQsZSl9KHQpKXx8ZSYmdCYmXCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoKXtpJiYodD1pKTt2YXIgbz0wLG49ZnVuY3Rpb24oKXt9O3JldHVybntzOm4sbjpmdW5jdGlvbigpe3JldHVybiBvPj10Lmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6dFtvKytdfX0sZTpmdW5jdGlvbih0KXt0aHJvdyB0fSxmOm59fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgcixzPSEwLGE9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtpPWkuY2FsbCh0KX0sbjpmdW5jdGlvbigpe3ZhciB0PWkubmV4dCgpO3JldHVybiBzPXQuZG9uZSx0fSxlOmZ1bmN0aW9uKHQpe2E9ITAscj10fSxmOmZ1bmN0aW9uKCl7dHJ5e3N8fG51bGw9PWkucmV0dXJufHxpLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyByfX19fWZ1bmN0aW9uIHJPKHQsZSl7KG51bGw9PWV8fGU+dC5sZW5ndGgpJiYoZT10Lmxlbmd0aCk7Zm9yKHZhciBpPTAsbz1uZXcgQXJyYXkoZSk7aTxlO2krKylvW2ldPXRbaV07cmV0dXJuIG99ZnVuY3Rpb24gc08odCxlKXt2YXIgaSxvPW5ldyB1RSxuPW5PKGUpO3RyeXtmb3Iobi5zKCk7IShpPW4ubigpKS5kb25lOyl7dmFyIHI9aS52YWx1ZTt0LmhhcyhyKXx8by5hZGQocil9fWNhdGNoKHQpe24uZSh0KX1maW5hbGx5e24uZigpfXJldHVybiBvfXZhciBhTz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtYbCh0aGlzLHQpLCRFLnNldCh0aGlzLG5ldyB1RSksWkUuc2V0KHRoaXMsbmV3IHVFKX1yZXR1cm4gJGwodCxbe2tleTpcInNpemVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaU8odGhpcyxaRSxcImZcIikuc2l6ZX19LHtrZXk6XCJhZGRcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLGk9MDtpPHQ7aSsrKWVbaV09YXJndW1lbnRzW2ldO2Zvcih2YXIgbz0wLG49ZTtvPG4ubGVuZ3RoO28rKyl7dmFyIHI9bltvXTtpTyh0aGlzLFpFLFwiZlwiKS5hZGQocil9fX0se2tleTpcImRlbGV0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksaT0wO2k8dDtpKyspZVtpXT1hcmd1bWVudHNbaV07Zm9yKHZhciBvPTAsbj1lO288bi5sZW5ndGg7bysrKXt2YXIgcj1uW29dO2lPKHRoaXMsWkUsXCJmXCIpLmRlbGV0ZShyKX19fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe2lPKHRoaXMsWkUsXCJmXCIpLmNsZWFyKCl9fSx7a2V5OlwiZ2V0U2VsZWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gSmMoaU8odGhpcyxaRSxcImZcIikpfX0se2tleTpcImdldENoYW5nZXNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybnthZGRlZDpKYyhzTyhpTyh0aGlzLCRFLFwiZlwiKSxpTyh0aGlzLFpFLFwiZlwiKSkpLGRlbGV0ZWQ6SmMoc08oaU8odGhpcyxaRSxcImZcIiksaU8odGhpcywkRSxcImZcIikpKSxwcmV2aW91czpKYyhuZXcgdUUoaU8odGhpcywkRSxcImZcIikpKSxjdXJyZW50OkpjKG5ldyB1RShpTyh0aGlzLFpFLFwiZlwiKSkpfX19LHtrZXk6XCJjb21taXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0Q2hhbmdlcygpO29PKHRoaXMsJEUsaU8odGhpcyxaRSxcImZcIiksXCJmXCIpLG9PKHRoaXMsWkUsbmV3IHVFKGlPKHRoaXMsJEUsXCJmXCIpKSxcImZcIik7dmFyIGUsaT1uTyh0LmFkZGVkKTt0cnl7Zm9yKGkucygpOyEoZT1pLm4oKSkuZG9uZTspe2UudmFsdWUuc2VsZWN0KCl9fWNhdGNoKHQpe2kuZSh0KX1maW5hbGx5e2kuZigpfXZhciBvLG49bk8odC5kZWxldGVkKTt0cnl7Zm9yKG4ucygpOyEobz1uLm4oKSkuZG9uZTspe28udmFsdWUudW5zZWxlY3QoKX19Y2F0Y2godCl7bi5lKHQpfWZpbmFsbHl7bi5mKCl9cmV0dXJuIHR9fV0pLHR9KCk7JEU9bmV3IGVPLFpFPW5ldyBlTzt2YXIgaE89ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmZ1bmN0aW9uKCl7fTtYbCh0aGlzLHQpLFFFLnNldCh0aGlzLG5ldyBhTyksSkUuc2V0KHRoaXMsbmV3IGFPKSx0Ty5zZXQodGhpcyx2b2lkIDApLG9PKHRoaXMsdE8sZSxcImZcIil9cmV0dXJuICRsKHQsW3trZXk6XCJzaXplTm9kZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaU8odGhpcyxRRSxcImZcIikuc2l6ZX19LHtrZXk6XCJzaXplRWRnZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaU8odGhpcyxKRSxcImZcIikuc2l6ZX19LHtrZXk6XCJnZXROb2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGlPKHRoaXMsUUUsXCJmXCIpLmdldFNlbGVjdGlvbigpfX0se2tleTpcImdldEVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gaU8odGhpcyxKRSxcImZcIikuZ2V0U2VsZWN0aW9uKCl9fSx7a2V5OlwiYWRkTm9kZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0Oyh0PWlPKHRoaXMsUUUsXCJmXCIpKS5hZGQuYXBwbHkodCxhcmd1bWVudHMpfX0se2tleTpcImFkZEVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdDsodD1pTyh0aGlzLEpFLFwiZlwiKSkuYWRkLmFwcGx5KHQsYXJndW1lbnRzKX19LHtrZXk6XCJkZWxldGVOb2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lPKHRoaXMsUUUsXCJmXCIpLmRlbGV0ZSh0KX19LHtrZXk6XCJkZWxldGVFZGdlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lPKHRoaXMsSkUsXCJmXCIpLmRlbGV0ZSh0KX19LHtrZXk6XCJjbGVhclwiLHZhbHVlOmZ1bmN0aW9uKCl7aU8odGhpcyxRRSxcImZcIikuY2xlYXIoKSxpTyh0aGlzLEpFLFwiZlwiKS5jbGVhcigpfX0se2tleTpcImNvbW1pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsaT17bm9kZXM6aU8odGhpcyxRRSxcImZcIikuY29tbWl0KCksZWRnZXM6aU8odGhpcyxKRSxcImZcIikuY29tbWl0KCl9LG89YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShvKSxyPTA7cjxvO3IrKyluW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4odD1pTyh0aGlzLHRPLFwiZlwiKSkuY2FsbC5hcHBseSh0LHN1KGU9W3RoaXMsaV0pLmNhbGwoZSxuKSksaX19XSksdH0oKTtmdW5jdGlvbiBkTyh0LGUpe3ZhciBpPXZvaWQgMCE9PXR1JiZvaCh0KXx8dFtcIkBAaXRlcmF0b3JcIl07aWYoIWkpe2lmKGh1KHQpfHwoaT1mdW5jdGlvbih0LGUpe3ZhciBpO2lmKCF0KXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gbE8odCxlKTt2YXIgbz1hdShpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkuY2FsbChpLDgsLTEpO1wiT2JqZWN0XCI9PT1vJiZ0LmNvbnN0cnVjdG9yJiYobz10LmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1vfHxcIlNldFwiPT09bylyZXR1cm4gamEodCk7aWYoXCJBcmd1bWVudHNcIj09PW98fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG8pKXJldHVybiBsTyh0LGUpfSh0KSl8fGUmJnQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aCl7aSYmKHQ9aSk7dmFyIG89MCxuPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpuLG46ZnVuY3Rpb24oKXtyZXR1cm4gbz49dC5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbbysrXX19LGU6ZnVuY3Rpb24odCl7dGhyb3cgdH0sZjpufX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIHIscz0hMCxhPSExO3JldHVybntzOmZ1bmN0aW9uKCl7aT1pLmNhbGwodCl9LG46ZnVuY3Rpb24oKXt2YXIgdD1pLm5leHQoKTtyZXR1cm4gcz10LmRvbmUsdH0sZTpmdW5jdGlvbih0KXthPSEwLHI9dH0sZjpmdW5jdGlvbigpe3RyeXtzfHxudWxsPT1pLnJldHVybnx8aS5yZXR1cm4oKX1maW5hbGx5e2lmKGEpdGhyb3cgcn19fX1mdW5jdGlvbiBsTyh0LGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO2Zvcih2YXIgaT0wLG89bmV3IEFycmF5KGUpO2k8ZTtpKyspb1tpXT10W2ldO3JldHVybiBvfVFFPW5ldyBlTyxKRT1uZXcgZU8sdE89bmV3IGVPO3ZhciBjTz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxpKXt2YXIgbz10aGlzO1hsKHRoaXMsdCksdGhpcy5ib2R5PWUsdGhpcy5jYW52YXM9aSx0aGlzLl9zZWxlY3Rpb25BY2N1bXVsYXRvcj1uZXcgaE8sdGhpcy5ob3Zlck9iaj17bm9kZXM6e30sZWRnZXM6e319LHRoaXMub3B0aW9ucz17fSx0aGlzLmRlZmF1bHRPcHRpb25zPXttdWx0aXNlbGVjdDohMSxzZWxlY3RhYmxlOiEwLHNlbGVjdENvbm5lY3RlZEVkZ2VzOiEwLGhvdmVyQ29ubmVjdGVkRWRnZXM6ITB9LGZvKHRoaXMub3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9kYXRhQ2hhbmdlZFwiLChmdW5jdGlvbigpe28udXBkYXRlU2VsZWN0aW9uKCl9KSl9cmV0dXJuICRsKHQsW3trZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodm9pZCAwIT09dCl7TnkoW1wibXVsdGlzZWxlY3RcIixcImhvdmVyQ29ubmVjdGVkRWRnZXNcIixcInNlbGVjdGFibGVcIixcInNlbGVjdENvbm5lY3RlZEVkZ2VzXCJdLHRoaXMub3B0aW9ucyx0KX19fSx7a2V5Olwic2VsZWN0T25Qb2ludFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPSExO2lmKCEwPT09dGhpcy5vcHRpb25zLnNlbGVjdGFibGUpe3ZhciBpPXRoaXMuZ2V0Tm9kZUF0KHQpfHx0aGlzLmdldEVkZ2VBdCh0KTt0aGlzLnVuc2VsZWN0QWxsKCksdm9pZCAwIT09aSYmKGU9dGhpcy5zZWxlY3RPYmplY3QoaSkpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVxdWVzdFJlZHJhd1wiKX1yZXR1cm4gZX19LHtrZXk6XCJzZWxlY3RBZGRpdGlvbmFsT25Qb2ludFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPSExO2lmKCEwPT09dGhpcy5vcHRpb25zLnNlbGVjdGFibGUpe3ZhciBpPXRoaXMuZ2V0Tm9kZUF0KHQpfHx0aGlzLmdldEVkZ2VBdCh0KTt2b2lkIDAhPT1pJiYoZT0hMCwhMD09PWkuaXNTZWxlY3RlZCgpP3RoaXMuZGVzZWxlY3RPYmplY3QoaSk6dGhpcy5zZWxlY3RPYmplY3QoaSksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZXF1ZXN0UmVkcmF3XCIpKX1yZXR1cm4gZX19LHtrZXk6XCJfaW5pdEJhc2VFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9e307cmV0dXJuIGkucG9pbnRlcj17RE9NOnt4OmUueCx5OmUueX0sY2FudmFzOnRoaXMuY2FudmFzLkRPTXRvQ2FudmFzKGUpfSxpLmV2ZW50PXQsaX19LHtrZXk6XCJnZW5lcmF0ZUNsaWNrRXZlbnRcIix2YWx1ZTpmdW5jdGlvbih0LGUsaSxvKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSYmYXJndW1lbnRzWzRdLHI9dGhpcy5faW5pdEJhc2VFdmVudChlLGkpO2lmKCEwPT09bilyLm5vZGVzPVtdLHIuZWRnZXM9W107ZWxzZXt2YXIgcz10aGlzLmdldFNlbGVjdGlvbigpO3Iubm9kZXM9cy5ub2RlcyxyLmVkZ2VzPXMuZWRnZXN9dm9pZCAwIT09byYmKHIucHJldmlvdXNTZWxlY3Rpb249byksXCJjbGlja1wiPT10JiYoci5pdGVtcz10aGlzLmdldENsaWNrZWRJdGVtcyhpKSksdm9pZCAwIT09ZS5jb250cm9sRWRnZSYmKHIuY29udHJvbEVkZ2U9ZS5jb250cm9sRWRnZSksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdCh0LHIpfX0se2tleTpcInNlbGVjdE9iamVjdFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLm9wdGlvbnMuc2VsZWN0Q29ubmVjdGVkRWRnZXM7aWYodm9pZCAwIT09dCl7aWYodCBpbnN0YW5jZW9mIE1fKXt2YXIgaTtpZighMD09PWUpKGk9dGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IpLmFkZEVkZ2VzLmFwcGx5KGksSmModC5lZGdlcykpO3RoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLmFkZE5vZGVzKHQpfWVsc2UgdGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IuYWRkRWRnZXModCk7cmV0dXJuITB9cmV0dXJuITF9fSx7a2V5OlwiZGVzZWxlY3RPYmplY3RcIix2YWx1ZTpmdW5jdGlvbih0KXshMD09PXQuaXNTZWxlY3RlZCgpJiYodC5zZWxlY3RlZD0hMSx0aGlzLl9yZW1vdmVGcm9tU2VsZWN0aW9uKHQpKX19LHtrZXk6XCJfZ2V0QWxsTm9kZXNPdmVybGFwcGluZ1dpdGhcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10saT10aGlzLmJvZHkubm9kZXMsbz0wO288dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLmxlbmd0aDtvKyspe3ZhciBuPXRoaXMuYm9keS5ub2RlSW5kaWNlc1tvXTtpW25dLmlzT3ZlcmxhcHBpbmdXaXRoKHQpJiZlLnB1c2gobil9cmV0dXJuIGV9fSx7a2V5OlwiX3BvaW50ZXJUb1Bvc2l0aW9uT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jYW52YXMuRE9NdG9DYW52YXModCk7cmV0dXJue2xlZnQ6ZS54LTEsdG9wOmUueSsxLHJpZ2h0OmUueCsxLGJvdHRvbTplLnktMX19fSx7a2V5OlwiZ2V0Tm9kZUF0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXSxpPXRoaXMuX3BvaW50ZXJUb1Bvc2l0aW9uT2JqZWN0KHQpLG89dGhpcy5fZ2V0QWxsTm9kZXNPdmVybGFwcGluZ1dpdGgoaSk7cmV0dXJuIG8ubGVuZ3RoPjA/ITA9PT1lP3RoaXMuYm9keS5ub2Rlc1tvW28ubGVuZ3RoLTFdXTpvW28ubGVuZ3RoLTFdOnZvaWQgMH19LHtrZXk6XCJfZ2V0RWRnZXNPdmVybGFwcGluZ1dpdGhcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgaT10aGlzLmJvZHkuZWRnZXMsbz0wO288dGhpcy5ib2R5LmVkZ2VJbmRpY2VzLmxlbmd0aDtvKyspe3ZhciBuPXRoaXMuYm9keS5lZGdlSW5kaWNlc1tvXTtpW25dLmlzT3ZlcmxhcHBpbmdXaXRoKHQpJiZlLnB1c2gobil9fX0se2tleTpcIl9nZXRBbGxFZGdlc092ZXJsYXBwaW5nV2l0aFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiB0aGlzLl9nZXRFZGdlc092ZXJsYXBwaW5nV2l0aCh0LGUpLGV9fSx7a2V5OlwiZ2V0RWRnZUF0XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV0saT10aGlzLmNhbnZhcy5ET010b0NhbnZhcyh0KSxvPTEwLG49bnVsbCxyPXRoaXMuYm9keS5lZGdlcyxzPTA7czx0aGlzLmJvZHkuZWRnZUluZGljZXMubGVuZ3RoO3MrKyl7dmFyIGE9dGhpcy5ib2R5LmVkZ2VJbmRpY2VzW3NdLGg9clthXTtpZihoLmNvbm5lY3RlZCl7dmFyIGQ9aC5mcm9tLngsbD1oLmZyb20ueSxjPWgudG8ueCx1PWgudG8ueSxmPWguZWRnZVR5cGUuZ2V0RGlzdGFuY2VUb0VkZ2UoZCxsLGMsdSxpLngsaS55KTtmPG8mJihuPWEsbz1mKX19cmV0dXJuIG51bGwhPT1uPyEwPT09ZT90aGlzLmJvZHkuZWRnZXNbbl06bjp2b2lkIDB9fSx7a2V5OlwiX2FkZFRvSG92ZXJcIix2YWx1ZTpmdW5jdGlvbih0KXt0IGluc3RhbmNlb2YgTV8/dGhpcy5ob3Zlck9iai5ub2Rlc1t0LmlkXT10OnRoaXMuaG92ZXJPYmouZWRnZXNbdC5pZF09dH19LHtrZXk6XCJfcmVtb3ZlRnJvbVNlbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlO3QgaW5zdGFuY2VvZiBNXz8odGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IuZGVsZXRlTm9kZXModCksKGU9dGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IpLmRlbGV0ZUVkZ2VzLmFwcGx5KGUsSmModC5lZGdlcykpKTp0aGlzLl9zZWxlY3Rpb25BY2N1bXVsYXRvci5kZWxldGVFZGdlcyh0KX19LHtrZXk6XCJ1bnNlbGVjdEFsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IuY2xlYXIoKX19LHtrZXk6XCJnZXRTZWxlY3RlZE5vZGVDb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLnNpemVOb2Rlc319LHtrZXk6XCJnZXRTZWxlY3RlZEVkZ2VDb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLnNpemVFZGdlc319LHtrZXk6XCJfaG92ZXJDb25uZWN0ZWRFZGdlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5lZGdlcy5sZW5ndGg7ZSsrKXt2YXIgaT10LmVkZ2VzW2VdO2kuaG92ZXI9ITAsdGhpcy5fYWRkVG9Ib3ZlcihpKX19fSx7a2V5OlwiZW1pdEJsdXJFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgbz10aGlzLl9pbml0QmFzZUV2ZW50KHQsZSk7ITA9PT1pLmhvdmVyJiYoaS5ob3Zlcj0hMSxpIGluc3RhbmNlb2YgTV8/KG8ubm9kZT1pLmlkLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJibHVyTm9kZVwiLG8pKTooby5lZGdlPWkuaWQsdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcImJsdXJFZGdlXCIsbykpKX19LHtrZXk6XCJlbWl0SG92ZXJFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgbz10aGlzLl9pbml0QmFzZUV2ZW50KHQsZSksbj0hMTtyZXR1cm4hMT09PWkuaG92ZXImJihpLmhvdmVyPSEwLHRoaXMuX2FkZFRvSG92ZXIoaSksbj0hMCxpIGluc3RhbmNlb2YgTV8/KG8ubm9kZT1pLmlkLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJob3Zlck5vZGVcIixvKSk6KG8uZWRnZT1pLmlkLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJob3ZlckVkZ2VcIixvKSkpLG59fSx7a2V5OlwiaG92ZXJPYmplY3RcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuZ2V0Tm9kZUF0KGUpO3ZvaWQgMD09PWkmJihpPXRoaXMuZ2V0RWRnZUF0KGUpKTt2YXIgbz0hMTtmb3IodmFyIG4gaW4gdGhpcy5ob3Zlck9iai5ub2RlcylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ob3Zlck9iai5ub2RlcyxuKSYmKHZvaWQgMD09PWl8fGkgaW5zdGFuY2VvZiBNXyYmaS5pZCE9bnx8aSBpbnN0YW5jZW9mIFN4KSYmKHRoaXMuZW1pdEJsdXJFdmVudCh0LGUsdGhpcy5ob3Zlck9iai5ub2Rlc1tuXSksZGVsZXRlIHRoaXMuaG92ZXJPYmoubm9kZXNbbl0sbz0hMCk7Zm9yKHZhciByIGluIHRoaXMuaG92ZXJPYmouZWRnZXMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuaG92ZXJPYmouZWRnZXMscikmJighMD09PW8/KHRoaXMuaG92ZXJPYmouZWRnZXNbcl0uaG92ZXI9ITEsZGVsZXRlIHRoaXMuaG92ZXJPYmouZWRnZXNbcl0pOih2b2lkIDA9PT1pfHxpIGluc3RhbmNlb2YgU3gmJmkuaWQhPXJ8fGkgaW5zdGFuY2VvZiBNXyYmIWkuaG92ZXIpJiYodGhpcy5lbWl0Qmx1ckV2ZW50KHQsZSx0aGlzLmhvdmVyT2JqLmVkZ2VzW3JdKSxkZWxldGUgdGhpcy5ob3Zlck9iai5lZGdlc1tyXSxvPSEwKSk7aWYodm9pZCAwIT09aSl7dmFyIHM9bXUodGhpcy5ob3Zlck9iai5lZGdlcykubGVuZ3RoLGE9bXUodGhpcy5ob3Zlck9iai5ub2RlcykubGVuZ3RoOyhvfHxpIGluc3RhbmNlb2YgU3gmJjA9PT1zJiYwPT09YXx8aSBpbnN0YW5jZW9mIE1fJiYwPT09cyYmMD09PWEpJiYobz10aGlzLmVtaXRIb3ZlckV2ZW50KHQsZSxpKSksaSBpbnN0YW5jZW9mIE1fJiYhMD09PXRoaXMub3B0aW9ucy5ob3ZlckNvbm5lY3RlZEVkZ2VzJiZ0aGlzLl9ob3ZlckNvbm5lY3RlZEVkZ2VzKGkpfSEwPT09byYmdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZXF1ZXN0UmVkcmF3XCIpfX0se2tleTpcImNvbW1pdFdpdGhvdXRFbWl0dGluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IuY29tbWl0KCl9fSx7a2V5OlwiY29tbWl0QW5kRW1pdFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9ITEsbz10aGlzLl9zZWxlY3Rpb25BY2N1bXVsYXRvci5jb21taXQoKSxuPXtub2RlczpvLm5vZGVzLnByZXZpb3VzLGVkZ2VzOm8uZWRnZXMucHJldmlvdXN9O28uZWRnZXMuZGVsZXRlZC5sZW5ndGg+MCYmKHRoaXMuZ2VuZXJhdGVDbGlja0V2ZW50KFwiZGVzZWxlY3RFZGdlXCIsZSx0LG4pLGk9ITApLG8ubm9kZXMuZGVsZXRlZC5sZW5ndGg+MCYmKHRoaXMuZ2VuZXJhdGVDbGlja0V2ZW50KFwiZGVzZWxlY3ROb2RlXCIsZSx0LG4pLGk9ITApLG8ubm9kZXMuYWRkZWQubGVuZ3RoPjAmJih0aGlzLmdlbmVyYXRlQ2xpY2tFdmVudChcInNlbGVjdE5vZGVcIixlLHQpLGk9ITApLG8uZWRnZXMuYWRkZWQubGVuZ3RoPjAmJih0aGlzLmdlbmVyYXRlQ2xpY2tFdmVudChcInNlbGVjdEVkZ2VcIixlLHQpLGk9ITApLCEwPT09aSYmdGhpcy5nZW5lcmF0ZUNsaWNrRXZlbnQoXCJzZWxlY3RcIixlLHQpfX0se2tleTpcImdldFNlbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJue25vZGVzOnRoaXMuZ2V0U2VsZWN0ZWROb2RlSWRzKCksZWRnZXM6dGhpcy5nZXRTZWxlY3RlZEVkZ2VJZHMoKX19fSx7a2V5OlwiZ2V0U2VsZWN0ZWROb2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLmdldE5vZGVzKCl9fSx7a2V5OlwiZ2V0U2VsZWN0ZWRFZGdlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLmdldEVkZ2VzKCl9fSx7a2V5OlwiZ2V0U2VsZWN0ZWROb2RlSWRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gdnUodD10aGlzLl9zZWxlY3Rpb25BY2N1bXVsYXRvci5nZXROb2RlcygpKS5jYWxsKHQsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkfSkpfX0se2tleTpcImdldFNlbGVjdGVkRWRnZUlkc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHZ1KHQ9dGhpcy5fc2VsZWN0aW9uQWNjdW11bGF0b3IuZ2V0RWRnZXMoKSkuY2FsbCh0LChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZH0pKX19LHtrZXk6XCJzZXRTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307aWYoIXR8fCF0Lm5vZGVzJiYhdC5lZGdlcyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU2VsZWN0aW9uIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggbm9kZXMgYW5kL29yIGVkZ2VzIHByb3BlcnRpZXNcIik7aWYoKGUudW5zZWxlY3RBbGx8fHZvaWQgMD09PWUudW5zZWxlY3RBbGwpJiZ0aGlzLnVuc2VsZWN0QWxsKCksdC5ub2Rlcyl7dmFyIGksbz1kTyh0Lm5vZGVzKTt0cnl7Zm9yKG8ucygpOyEoaT1vLm4oKSkuZG9uZTspe3ZhciBuPWkudmFsdWUscj10aGlzLmJvZHkubm9kZXNbbl07aWYoIXIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ05vZGUgd2l0aCBpZCBcIicrbisnXCIgbm90IGZvdW5kJyk7dGhpcy5zZWxlY3RPYmplY3QocixlLmhpZ2hsaWdodEVkZ2VzKX19Y2F0Y2godCl7by5lKHQpfWZpbmFsbHl7by5mKCl9fWlmKHQuZWRnZXMpe3ZhciBzLGE9ZE8odC5lZGdlcyk7dHJ5e2ZvcihhLnMoKTshKHM9YS5uKCkpLmRvbmU7KXt2YXIgaD1zLnZhbHVlLGQ9dGhpcy5ib2R5LmVkZ2VzW2hdO2lmKCFkKXRocm93IG5ldyBSYW5nZUVycm9yKCdFZGdlIHdpdGggaWQgXCInK2grJ1wiIG5vdCBmb3VuZCcpO3RoaXMuc2VsZWN0T2JqZWN0KGQpfX1jYXRjaCh0KXthLmUodCl9ZmluYWxseXthLmYoKX19dGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZXF1ZXN0UmVkcmF3XCIpLHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLmNvbW1pdCgpfX0se2tleTpcInNlbGVjdE5vZGVzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtpZighdHx8dm9pZCAwPT09dC5sZW5ndGgpdGhyb3dcIlNlbGVjdGlvbiBtdXN0IGJlIGFuIGFycmF5IHdpdGggaWRzXCI7dGhpcy5zZXRTZWxlY3Rpb24oe25vZGVzOnR9LHtoaWdobGlnaHRFZGdlczplfSl9fSx7a2V5Olwic2VsZWN0RWRnZXNcIix2YWx1ZTpmdW5jdGlvbih0KXtpZighdHx8dm9pZCAwPT09dC5sZW5ndGgpdGhyb3dcIlNlbGVjdGlvbiBtdXN0IGJlIGFuIGFycmF5IHdpdGggaWRzXCI7dGhpcy5zZXRTZWxlY3Rpb24oe2VkZ2VzOnR9KX19LHtrZXk6XCJ1cGRhdGVTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLl9zZWxlY3Rpb25BY2N1bXVsYXRvci5nZXROb2RlcygpKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmJvZHkubm9kZXMsdC5pZCl8fHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLmRlbGV0ZU5vZGVzKHQpO2Zvcih2YXIgZSBpbiB0aGlzLl9zZWxlY3Rpb25BY2N1bXVsYXRvci5nZXRFZGdlcygpKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmJvZHkuZWRnZXMsZS5pZCl8fHRoaXMuX3NlbGVjdGlvbkFjY3VtdWxhdG9yLmRlbGV0ZUVkZ2VzKGUpfX0se2tleTpcImdldENsaWNrZWRJdGVtc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmNhbnZhcy5ET010b0NhbnZhcyh0KSxpPVtdLG89dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLG49dGhpcy5ib2R5Lm5vZGVzLHI9by5sZW5ndGgtMTtyPj0wO3ItLSl7dmFyIHM9bltvW3JdXS5nZXRJdGVtc09uUG9pbnQoZSk7aS5wdXNoLmFwcGx5KGkscyl9Zm9yKHZhciBhPXRoaXMuYm9keS5lZGdlSW5kaWNlcyxoPXRoaXMuYm9keS5lZGdlcyxkPWEubGVuZ3RoLTE7ZD49MDtkLS0pe3ZhciBsPWhbYVtkXV0uZ2V0SXRlbXNPblBvaW50KGUpO2kucHVzaC5hcHBseShpLGwpfXJldHVybiBpfX1dKSx0fSgpLHVPPXZoLGZPPU1hdGguZmxvb3IscE89ZnVuY3Rpb24odCxlKXt2YXIgaT10Lmxlbmd0aCxvPWZPKGkvMik7cmV0dXJuIGk8OD92Tyh0LGUpOmdPKHQscE8odU8odCwwLG8pLGUpLHBPKHVPKHQsbyksZSksZSl9LHZPPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBpLG8sbj10Lmxlbmd0aCxyPTE7cjxuOyl7Zm9yKG89cixpPXRbcl07byYmZSh0W28tMV0saSk+MDspdFtvXT10Wy0tb107byE9PXIrKyYmKHRbb109aSl9cmV0dXJuIHR9LGdPPWZ1bmN0aW9uKHQsZSxpLG8pe2Zvcih2YXIgbj1lLmxlbmd0aCxyPWkubGVuZ3RoLHM9MCxhPTA7czxufHxhPHI7KXRbcythXT1zPG4mJmE8cj9vKGVbc10saVthXSk8PTA/ZVtzKytdOmlbYSsrXTpzPG4/ZVtzKytdOmlbYSsrXTtyZXR1cm4gdH0seU89cE8sbU89ZXQubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSksYk89ISFtTyYmK21PWzFdLHdPPS9NU0lFfFRyaWRlbnQvLnRlc3QoZXQpLGtPPWV0Lm1hdGNoKC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8pLF9PPSEha08mJitrT1sxXSx4Tz14aSxFTz15LE9PPUV0LENPPUx0LFNPPXppLFRPPW9uLE1PPXIsUE89eU8sRE89T3UsQk89Yk8sSU89d08sek89aHQsRk89X08sTk89W10sQU89RU8oTk8uc29ydCksUk89RU8oTk8ucHVzaCksak89TU8oKGZ1bmN0aW9uKCl7Tk8uc29ydCh2b2lkIDApfSkpLExPPU1PKChmdW5jdGlvbigpe05PLnNvcnQobnVsbCl9KSksSE89RE8oXCJzb3J0XCIpLFdPPSFNTygoZnVuY3Rpb24oKXtpZih6TylyZXR1cm4gek88NzA7aWYoIShCTyYmQk8+Mykpe2lmKElPKXJldHVybiEwO2lmKEZPKXJldHVybiBGTzw2MDM7dmFyIHQsZSxpLG8sbj1cIlwiO2Zvcih0PTY1O3Q8NzY7dCsrKXtzd2l0Y2goZT1TdHJpbmcuZnJvbUNoYXJDb2RlKHQpLHQpe2Nhc2UgNjY6Y2FzZSA2OTpjYXNlIDcwOmNhc2UgNzI6aT0zO2JyZWFrO2Nhc2UgNjg6Y2FzZSA3MTppPTQ7YnJlYWs7ZGVmYXVsdDppPTJ9Zm9yKG89MDtvPDQ3O28rKylOTy5wdXNoKHtrOmUrbyx2Oml9KX1mb3IoTk8uc29ydCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS52LXQudn0pKSxvPTA7bzxOTy5sZW5ndGg7bysrKWU9Tk9bb10uay5jaGFyQXQoMCksbi5jaGFyQXQobi5sZW5ndGgtMSkhPT1lJiYobis9ZSk7cmV0dXJuXCJER0JFRkhBQ0lKS1wiIT09bn19KSk7eE8oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOmpPfHwhTE98fCFIT3x8IVdPfSx7c29ydDpmdW5jdGlvbih0KXt2b2lkIDAhPT10JiZPTyh0KTt2YXIgZT1DTyh0aGlzKTtpZihXTylyZXR1cm4gdm9pZCAwPT09dD9BTyhlKTpBTyhlLHQpO3ZhciBpLG8sbj1bXSxyPVNPKGUpO2ZvcihvPTA7bzxyO28rKylvIGluIGUmJlJPKG4sZVtvXSk7Zm9yKFBPKG4sZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsaSl7cmV0dXJuIHZvaWQgMD09PWk/LTE6dm9pZCAwPT09ZT8xOnZvaWQgMCE9PXQ/K3QoZSxpKXx8MDpUTyhlKT5UTyhpKT8xOi0xfX0odCkpLGk9bi5sZW5ndGgsbz0wO288aTspZVtvXT1uW28rK107Zm9yKDtvPHI7KWRlbGV0ZSBlW28rK107cmV0dXJuIGV9fSk7dmFyIFZPPU1vKFwiQXJyYXlcIikuc29ydCxxTz10dCxVTz1WTyxZTz1BcnJheS5wcm90b3R5cGUsWE89ZnVuY3Rpb24odCl7dmFyIGU9dC5zb3J0O3JldHVybiB0PT09WU98fHFPKFlPLHQpJiZlPT09WU8uc29ydD9VTzplfSxHTz1YTyxLTz1FdCwkTz1MdCxaTz1MLFFPPXppLEpPPW4uVHlwZUVycm9yLHRDPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLGksbyxuKXtLTyhpKTt2YXIgcj0kTyhlKSxzPVpPKHIpLGE9UU8ociksaD10P2EtMTowLGQ9dD8tMToxO2lmKG88Milmb3IoOzspe2lmKGggaW4gcyl7bj1zW2hdLGgrPWQ7YnJlYWt9aWYoaCs9ZCx0P2g8MDphPD1oKXRocm93IEpPKFwiUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZVwiKX1mb3IoO3Q/aD49MDphPmg7aCs9ZCloIGluIHMmJihuPWkobixzW2hdLGgscikpO3JldHVybiBufX0sZUM9e2xlZnQ6dEMoITEpLHJpZ2h0OnRDKCEwKX0saUM9XCJwcm9jZXNzXCI9PXoobi5wcm9jZXNzKSxvQz1lQy5sZWZ0LG5DPWh0LHJDPWlDO3hpKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohT3UoXCJyZWR1Y2VcIil8fCFyQyYmbkM+NzkmJm5DPDgzfSx7cmVkdWNlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIG9DKHRoaXMsdCxlLGU+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KTt2YXIgc0M9TW8oXCJBcnJheVwiKS5yZWR1Y2UsYUM9dHQsaEM9c0MsZEM9QXJyYXkucHJvdG90eXBlLGxDPWZ1bmN0aW9uKHQpe3ZhciBlPXQucmVkdWNlO3JldHVybiB0PT09ZEN8fGFDKGRDLHQpJiZlPT09ZEMucmVkdWNlP2hDOmV9LGNDPWxDLHVDPXt9OyFmdW5jdGlvbih0KXshZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9dC5fX2VzTW9kdWxlPSEwLHQuc29ydD12O3ZhciBpPTMyLG89NyxuPTI1NixyPVsxLDEwLDEwMCwxZTMsMWU0LDFlNSwxZTYsMWU3LDFlOCwxZTldO2Z1bmN0aW9uIHModCl7cmV0dXJuIHQ8MWU1P3Q8MTAwP3Q8MTA/MDoxOnQ8MWU0P3Q8MWUzPzI6Mzo0OnQ8MWU3P3Q8MWU2PzU6Njp0PDFlOT90PDFlOD83Ojg6OX1mdW5jdGlvbiBhKHQsZSl7aWYodD09PWUpcmV0dXJuIDA7aWYofn50PT09dCYmfn5lPT09ZSl7aWYoMD09PXR8fDA9PT1lKXJldHVybiB0PGU/LTE6MTtpZih0PDB8fGU8MCl7aWYoZT49MClyZXR1cm4tMTtpZih0Pj0wKXJldHVybiAxO3Q9LXQsZT0tZX12YXIgaT1zKHQpLG89cyhlKSxuPTA7cmV0dXJuIGk8bz8odCo9cltvLWktMV0sZS89MTAsbj0tMSk6aT5vJiYoZSo9cltpLW8tMV0sdC89MTAsbj0xKSx0PT09ZT9uOnQ8ZT8tMToxfXZhciBhPVN0cmluZyh0KSxoPVN0cmluZyhlKTtyZXR1cm4gYT09PWg/MDphPGg/LTE6MX1mdW5jdGlvbiBoKHQpe2Zvcih2YXIgZT0wO3Q+PWk7KWV8PTEmdCx0Pj49MTtyZXR1cm4gdCtlfWZ1bmN0aW9uIGQodCxlLGksbyl7dmFyIG49ZSsxO2lmKG49PT1pKXJldHVybiAxO2lmKG8odFtuKytdLHRbZV0pPDApe2Zvcig7bjxpJiZvKHRbbl0sdFtuLTFdKTwwOyluKys7bCh0LGUsbil9ZWxzZSBmb3IoO248aSYmbyh0W25dLHRbbi0xXSk+PTA7KW4rKztyZXR1cm4gbi1lfWZ1bmN0aW9uIGwodCxlLGkpe2ZvcihpLS07ZTxpOyl7dmFyIG89dFtlXTt0W2UrK109dFtpXSx0W2ktLV09b319ZnVuY3Rpb24gYyh0LGUsaSxvLG4pe2ZvcihvPT09ZSYmbysrO288aTtvKyspe2Zvcih2YXIgcj10W29dLHM9ZSxhPW87czxhOyl7dmFyIGg9cythPj4+MTtuKHIsdFtoXSk8MD9hPWg6cz1oKzF9dmFyIGQ9by1zO3N3aXRjaChkKXtjYXNlIDM6dFtzKzNdPXRbcysyXTtjYXNlIDI6dFtzKzJdPXRbcysxXTtjYXNlIDE6dFtzKzFdPXRbc107YnJlYWs7ZGVmYXVsdDpmb3IoO2Q+MDspdFtzK2RdPXRbcytkLTFdLGQtLX10W3NdPXJ9fWZ1bmN0aW9uIHUodCxlLGksbyxuLHIpe3ZhciBzPTAsYT0wLGg9MTtpZihyKHQsZVtpK25dKT4wKXtmb3IoYT1vLW47aDxhJiZyKHQsZVtpK24raF0pPjA7KXM9aCwoaD0xKyhoPDwxKSk8PTAmJihoPWEpO2g+YSYmKGg9YSkscys9bixoKz1ufWVsc2V7Zm9yKGE9bisxO2g8YSYmcih0LGVbaStuLWhdKTw9MDspcz1oLChoPTErKGg8PDEpKTw9MCYmKGg9YSk7aD5hJiYoaD1hKTt2YXIgZD1zO3M9bi1oLGg9bi1kfWZvcihzKys7czxoOyl7dmFyIGw9cysoaC1zPj4+MSk7cih0LGVbaStsXSk+MD9zPWwrMTpoPWx9cmV0dXJuIGh9ZnVuY3Rpb24gZih0LGUsaSxvLG4scil7dmFyIHM9MCxhPTAsaD0xO2lmKHIodCxlW2krbl0pPDApe2ZvcihhPW4rMTtoPGEmJnIodCxlW2krbi1oXSk8MDspcz1oLChoPTErKGg8PDEpKTw9MCYmKGg9YSk7aD5hJiYoaD1hKTt2YXIgZD1zO3M9bi1oLGg9bi1kfWVsc2V7Zm9yKGE9by1uO2g8YSYmcih0LGVbaStuK2hdKT49MDspcz1oLChoPTErKGg8PDEpKTw9MCYmKGg9YSk7aD5hJiYoaD1hKSxzKz1uLGgrPW59Zm9yKHMrKztzPGg7KXt2YXIgbD1zKyhoLXM+Pj4xKTtyKHQsZVtpK2xdKTwwP2g9bDpzPWwrMX1yZXR1cm4gaH12YXIgcD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxyKXtlKHRoaXMsdCksdGhpcy5hcnJheT1udWxsLHRoaXMuY29tcGFyZT1udWxsLHRoaXMubWluR2FsbG9wPW8sdGhpcy5sZW5ndGg9MCx0aGlzLnRtcFN0b3JhZ2VMZW5ndGg9bix0aGlzLnN0YWNrTGVuZ3RoPTAsdGhpcy5ydW5TdGFydD1udWxsLHRoaXMucnVuTGVuZ3RoPW51bGwsdGhpcy5zdGFja1NpemU9MCx0aGlzLmFycmF5PWksdGhpcy5jb21wYXJlPXIsdGhpcy5sZW5ndGg9aS5sZW5ndGgsdGhpcy5sZW5ndGg8MipuJiYodGhpcy50bXBTdG9yYWdlTGVuZ3RoPXRoaXMubGVuZ3RoPj4+MSksdGhpcy50bXA9bmV3IEFycmF5KHRoaXMudG1wU3RvcmFnZUxlbmd0aCksdGhpcy5zdGFja0xlbmd0aD10aGlzLmxlbmd0aDwxMjA/NTp0aGlzLmxlbmd0aDwxNTQyPzEwOnRoaXMubGVuZ3RoPDExOTE1MT8xOTo0MCx0aGlzLnJ1blN0YXJ0PW5ldyBBcnJheSh0aGlzLnN0YWNrTGVuZ3RoKSx0aGlzLnJ1bkxlbmd0aD1uZXcgQXJyYXkodGhpcy5zdGFja0xlbmd0aCl9cmV0dXJuIHQucHJvdG90eXBlLnB1c2hSdW49ZnVuY3Rpb24odCxlKXt0aGlzLnJ1blN0YXJ0W3RoaXMuc3RhY2tTaXplXT10LHRoaXMucnVuTGVuZ3RoW3RoaXMuc3RhY2tTaXplXT1lLHRoaXMuc3RhY2tTaXplKz0xfSx0LnByb3RvdHlwZS5tZXJnZVJ1bnM9ZnVuY3Rpb24oKXtmb3IoO3RoaXMuc3RhY2tTaXplPjE7KXt2YXIgdD10aGlzLnN0YWNrU2l6ZS0yO2lmKHQ+PTEmJnRoaXMucnVuTGVuZ3RoW3QtMV08PXRoaXMucnVuTGVuZ3RoW3RdK3RoaXMucnVuTGVuZ3RoW3QrMV18fHQ+PTImJnRoaXMucnVuTGVuZ3RoW3QtMl08PXRoaXMucnVuTGVuZ3RoW3RdK3RoaXMucnVuTGVuZ3RoW3QtMV0pdGhpcy5ydW5MZW5ndGhbdC0xXTx0aGlzLnJ1bkxlbmd0aFt0KzFdJiZ0LS07ZWxzZSBpZih0aGlzLnJ1bkxlbmd0aFt0XT50aGlzLnJ1bkxlbmd0aFt0KzFdKWJyZWFrO3RoaXMubWVyZ2VBdCh0KX19LHQucHJvdG90eXBlLmZvcmNlTWVyZ2VSdW5zPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLnN0YWNrU2l6ZT4xOyl7dmFyIHQ9dGhpcy5zdGFja1NpemUtMjt0PjAmJnRoaXMucnVuTGVuZ3RoW3QtMV08dGhpcy5ydW5MZW5ndGhbdCsxXSYmdC0tLHRoaXMubWVyZ2VBdCh0KX19LHQucHJvdG90eXBlLm1lcmdlQXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb21wYXJlLGk9dGhpcy5hcnJheSxvPXRoaXMucnVuU3RhcnRbdF0sbj10aGlzLnJ1bkxlbmd0aFt0XSxyPXRoaXMucnVuU3RhcnRbdCsxXSxzPXRoaXMucnVuTGVuZ3RoW3QrMV07dGhpcy5ydW5MZW5ndGhbdF09bitzLHQ9PT10aGlzLnN0YWNrU2l6ZS0zJiYodGhpcy5ydW5TdGFydFt0KzFdPXRoaXMucnVuU3RhcnRbdCsyXSx0aGlzLnJ1bkxlbmd0aFt0KzFdPXRoaXMucnVuTGVuZ3RoW3QrMl0pLHRoaXMuc3RhY2tTaXplLS07dmFyIGE9ZihpW3JdLGksbyxuLDAsZSk7bys9YSwwIT0obi09YSkmJjAhPT0ocz11KGlbbytuLTFdLGkscixzLHMtMSxlKSkmJihuPD1zP3RoaXMubWVyZ2VMb3cobyxuLHIscyk6dGhpcy5tZXJnZUhpZ2gobyxuLHIscykpfSx0LnByb3RvdHlwZS5tZXJnZUxvdz1mdW5jdGlvbih0LGUsaSxuKXt2YXIgcj10aGlzLmNvbXBhcmUscz10aGlzLmFycmF5LGE9dGhpcy50bXAsaD0wO2ZvcihoPTA7aDxlO2grKylhW2hdPXNbdCtoXTt2YXIgZD0wLGw9aSxjPXQ7aWYoc1tjKytdPXNbbCsrXSwwIT0tLW4paWYoMSE9PWUpe2Zvcih2YXIgcD10aGlzLm1pbkdhbGxvcDs7KXt2YXIgdj0wLGc9MCx5PSExO2Rve2lmKHIoc1tsXSxhW2RdKTwwKXtpZihzW2MrK109c1tsKytdLGcrKyx2PTAsMD09LS1uKXt5PSEwO2JyZWFrfX1lbHNlIGlmKHNbYysrXT1hW2QrK10sdisrLGc9MCwxPT0tLWUpe3k9ITA7YnJlYWt9fXdoaWxlKCh2fGcpPHApO2lmKHkpYnJlYWs7ZG97aWYoMCE9PSh2PWYoc1tsXSxhLGQsZSwwLHIpKSl7Zm9yKGg9MDtoPHY7aCsrKXNbYytoXT1hW2QraF07aWYoYys9dixkKz12LChlLT12KTw9MSl7eT0hMDticmVha319aWYoc1tjKytdPXNbbCsrXSwwPT0tLW4pe3k9ITA7YnJlYWt9aWYoMCE9PShnPXUoYVtkXSxzLGwsbiwwLHIpKSl7Zm9yKGg9MDtoPGc7aCsrKXNbYytoXT1zW2wraF07aWYoYys9ZyxsKz1nLDA9PShuLT1nKSl7eT0hMDticmVha319aWYoc1tjKytdPWFbZCsrXSwxPT0tLWUpe3k9ITA7YnJlYWt9cC0tfXdoaWxlKHY+PW98fGc+PW8pO2lmKHkpYnJlYWs7cDwwJiYocD0wKSxwKz0yfWlmKHRoaXMubWluR2FsbG9wPXAscDwxJiYodGhpcy5taW5HYWxsb3A9MSksMT09PWUpe2ZvcihoPTA7aDxuO2grKylzW2MraF09c1tsK2hdO3NbYytuXT1hW2RdfWVsc2V7aWYoMD09PWUpdGhyb3cgbmV3IEVycm9yKFwibWVyZ2VMb3cgcHJlY29uZGl0aW9ucyB3ZXJlIG5vdCByZXNwZWN0ZWRcIik7Zm9yKGg9MDtoPGU7aCsrKXNbYytoXT1hW2QraF19fWVsc2V7Zm9yKGg9MDtoPG47aCsrKXNbYytoXT1zW2wraF07c1tjK25dPWFbZF19ZWxzZSBmb3IoaD0wO2g8ZTtoKyspc1tjK2hdPWFbZCtoXX0sdC5wcm90b3R5cGUubWVyZ2VIaWdoPWZ1bmN0aW9uKHQsZSxpLG4pe3ZhciByPXRoaXMuY29tcGFyZSxzPXRoaXMuYXJyYXksYT10aGlzLnRtcCxoPTA7Zm9yKGg9MDtoPG47aCsrKWFbaF09c1tpK2hdO3ZhciBkPXQrZS0xLGw9bi0xLGM9aStuLTEscD0wLHY9MDtpZihzW2MtLV09c1tkLS1dLDAhPS0tZSlpZigxIT09bil7Zm9yKHZhciBnPXRoaXMubWluR2FsbG9wOzspe3ZhciB5PTAsbT0wLGI9ITE7ZG97aWYocihhW2xdLHNbZF0pPDApe2lmKHNbYy0tXT1zW2QtLV0seSsrLG09MCwwPT0tLWUpe2I9ITA7YnJlYWt9fWVsc2UgaWYoc1tjLS1dPWFbbC0tXSxtKysseT0wLDE9PS0tbil7Yj0hMDticmVha319d2hpbGUoKHl8bSk8Zyk7aWYoYilicmVhaztkb3tpZigwIT0oeT1lLWYoYVtsXSxzLHQsZSxlLTEscikpKXtmb3IoZS09eSx2PTErKGMtPXkpLHA9MSsoZC09eSksaD15LTE7aD49MDtoLS0pc1t2K2hdPXNbcCtoXTtpZigwPT09ZSl7Yj0hMDticmVha319aWYoc1tjLS1dPWFbbC0tXSwxPT0tLW4pe2I9ITA7YnJlYWt9aWYoMCE9KG09bi11KHNbZF0sYSwwLG4sbi0xLHIpKSl7Zm9yKG4tPW0sdj0xKyhjLT1tKSxwPTErKGwtPW0pLGg9MDtoPG07aCsrKXNbditoXT1hW3AraF07aWYobjw9MSl7Yj0hMDticmVha319aWYoc1tjLS1dPXNbZC0tXSwwPT0tLWUpe2I9ITA7YnJlYWt9Zy0tfXdoaWxlKHk+PW98fG0+PW8pO2lmKGIpYnJlYWs7ZzwwJiYoZz0wKSxnKz0yfWlmKHRoaXMubWluR2FsbG9wPWcsZzwxJiYodGhpcy5taW5HYWxsb3A9MSksMT09PW4pe2Zvcih2PTErKGMtPWUpLHA9MSsoZC09ZSksaD1lLTE7aD49MDtoLS0pc1t2K2hdPXNbcCtoXTtzW2NdPWFbbF19ZWxzZXtpZigwPT09bil0aHJvdyBuZXcgRXJyb3IoXCJtZXJnZUhpZ2ggcHJlY29uZGl0aW9ucyB3ZXJlIG5vdCByZXNwZWN0ZWRcIik7Zm9yKHA9Yy0obi0xKSxoPTA7aDxuO2grKylzW3AraF09YVtoXX19ZWxzZXtmb3Iodj0xKyhjLT1lKSxwPTErKGQtPWUpLGg9ZS0xO2g+PTA7aC0tKXNbditoXT1zW3AraF07c1tjXT1hW2xdfWVsc2UgZm9yKHA9Yy0obi0xKSxoPTA7aDxuO2grKylzW3AraF09YVtoXX0sdH0oKTtmdW5jdGlvbiB2KHQsZSxvLG4pe2lmKCFBcnJheS5pc0FycmF5KHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW4gb25seSBzb3J0IGFycmF5c1wiKTtlP1wiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJihuPW8sbz1lLGU9YSk6ZT1hLG98fChvPTApLG58fChuPXQubGVuZ3RoKTt2YXIgcj1uLW87aWYoIShyPDIpKXt2YXIgcz0wO2lmKHI8aSljKHQsbyxuLG8rKHM9ZCh0LG8sbixlKSksZSk7ZWxzZXt2YXIgbD1uZXcgcCh0LGUpLHU9aChyKTtkb3tpZigocz1kKHQsbyxuLGUpKTx1KXt2YXIgZj1yO2Y+dSYmKGY9dSksYyh0LG8sbytmLG8rcyxlKSxzPWZ9bC5wdXNoUnVuKG8scyksbC5tZXJnZVJ1bnMoKSxyLT1zLG8rPXN9d2hpbGUoMCE9PXIpO2wuZm9yY2VNZXJnZVJ1bnMoKX19fX0odCl9KHVDKTt2YXIgZkM9dUM7ZnVuY3Rpb24gcEModCl7dmFyIGU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IXprKXJldHVybiExO2lmKHprLnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoemsoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaSxvPUhrKHQpO2lmKGUpe3ZhciBuPUhrKHRoaXMpLmNvbnN0cnVjdG9yO2k9emsobyxhcmd1bWVudHMsbil9ZWxzZSBpPW8uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBqayh0aGlzLGkpfX12YXIgdkM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxbe2tleTpcImFic3RyYWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBpbnN0YW50aWF0ZSBhYnN0cmFjdCBjbGFzcyFcIil9fSx7a2V5OlwiZmFrZV91c2VcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJjdXJ2ZVR5cGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFic3RyYWN0KCl9fSx7a2V5OlwiZ2V0UG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5mYWtlX3VzZSh0KSx0aGlzLmFic3RyYWN0KCl9fSx7a2V5Olwic2V0UG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp2b2lkIDA7dGhpcy5mYWtlX3VzZSh0LGUsaSksdGhpcy5hYnN0cmFjdCgpfX0se2tleTpcImdldFRyZWVTaXplXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZmFrZV91c2UodCksdGhpcy5hYnN0cmFjdCgpfX0se2tleTpcInNvcnRcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmZha2VfdXNlKHQpLHRoaXMuYWJzdHJhY3QoKX19LHtrZXk6XCJmaXhcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuZmFrZV91c2UodCxlKSx0aGlzLmFic3RyYWN0KCl9fSx7a2V5Olwic2hpZnRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuZmFrZV91c2UodCxlKSx0aGlzLmFic3RyYWN0KCl9fV0pLHR9KCksZ0M9ZnVuY3Rpb24odCl7UmsoaSx0KTt2YXIgZT1wQyhpKTtmdW5jdGlvbiBpKHQpe3ZhciBvO3JldHVybiBYbCh0aGlzLGkpLChvPWUuY2FsbCh0aGlzKSkubGF5b3V0PXQsb31yZXR1cm4gJGwoaSxbe2tleTpcImN1cnZlVHlwZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJob3Jpem9udGFsXCJ9fSx7a2V5OlwiZ2V0UG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdC54fX0se2tleTpcInNldFBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dm9pZCAwO3ZvaWQgMCE9PWkmJnRoaXMubGF5b3V0LmhpZXJhcmNoaWNhbC5hZGRUb09yZGVyaW5nKHQsaSksdC54PWV9fSx7a2V5OlwiZ2V0VHJlZVNpemVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmxheW91dC5oaWVyYXJjaGljYWwuZ2V0VHJlZVNpemUodGhpcy5sYXlvdXQuYm9keS5ub2Rlcyx0KTtyZXR1cm57bWluOmUubWluX3gsbWF4OmUubWF4X3h9fX0se2tleTpcInNvcnRcIix2YWx1ZTpmdW5jdGlvbih0KXtmQy5zb3J0KHQsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQueC1lLnh9KSl9fSx7a2V5OlwiZml4XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0Lnk9dGhpcy5sYXlvdXQub3B0aW9ucy5oaWVyYXJjaGljYWwubGV2ZWxTZXBhcmF0aW9uKmUsdC5vcHRpb25zLmZpeGVkLnk9ITB9fSx7a2V5Olwic2hpZnRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMubGF5b3V0LmJvZHkubm9kZXNbdF0ueCs9ZX19XSksaX0odkMpLHlDPWZ1bmN0aW9uKHQpe1JrKGksdCk7dmFyIGU9cEMoaSk7ZnVuY3Rpb24gaSh0KXt2YXIgbztyZXR1cm4gWGwodGhpcyxpKSwobz1lLmNhbGwodGhpcykpLmxheW91dD10LG99cmV0dXJuICRsKGksW3trZXk6XCJjdXJ2ZVR5cGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwidmVydGljYWxcIn19LHtrZXk6XCJnZXRQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0Lnl9fSx7a2V5Olwic2V0UG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp2b2lkIDA7dm9pZCAwIT09aSYmdGhpcy5sYXlvdXQuaGllcmFyY2hpY2FsLmFkZFRvT3JkZXJpbmcodCxpKSx0Lnk9ZX19LHtrZXk6XCJnZXRUcmVlU2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubGF5b3V0LmhpZXJhcmNoaWNhbC5nZXRUcmVlU2l6ZSh0aGlzLmxheW91dC5ib2R5Lm5vZGVzLHQpO3JldHVybnttaW46ZS5taW5feSxtYXg6ZS5tYXhfeX19fSx7a2V5Olwic29ydFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2ZDLnNvcnQodCwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC55LWUueX0pKX19LHtrZXk6XCJmaXhcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3QueD10aGlzLmxheW91dC5vcHRpb25zLmhpZXJhcmNoaWNhbC5sZXZlbFNlcGFyYXRpb24qZSx0Lm9wdGlvbnMuZml4ZWQueD0hMH19LHtrZXk6XCJzaGlmdFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5sYXlvdXQuYm9keS5ub2Rlc1t0XS55Kz1lfX1dKSxpfSh2QyksbUM9VmguZXZlcnk7eGkoe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFPdShcImV2ZXJ5XCIpfSx7ZXZlcnk6ZnVuY3Rpb24odCl7cmV0dXJuIG1DKHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSk7dmFyIGJDPU1vKFwiQXJyYXlcIikuZXZlcnksd0M9dHQsa0M9YkMsX0M9QXJyYXkucHJvdG90eXBlLHhDPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZXZlcnk7cmV0dXJuIHQ9PT1fQ3x8d0MoX0MsdCkmJmU9PT1fQy5ldmVyeT9rQzplfSxFQz14QztmdW5jdGlvbiBPQyh0LGUpe3ZhciBpPXZvaWQgMCE9PXR1JiZvaCh0KXx8dFtcIkBAaXRlcmF0b3JcIl07aWYoIWkpe2lmKGh1KHQpfHwoaT1mdW5jdGlvbih0LGUpe3ZhciBpO2lmKCF0KXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gQ0ModCxlKTt2YXIgbz1hdShpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkuY2FsbChpLDgsLTEpO1wiT2JqZWN0XCI9PT1vJiZ0LmNvbnN0cnVjdG9yJiYobz10LmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1vfHxcIlNldFwiPT09bylyZXR1cm4gamEodCk7aWYoXCJBcmd1bWVudHNcIj09PW98fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG8pKXJldHVybiBDQyh0LGUpfSh0KSl8fGUmJnQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aCl7aSYmKHQ9aSk7dmFyIG89MCxuPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpuLG46ZnVuY3Rpb24oKXtyZXR1cm4gbz49dC5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbbysrXX19LGU6ZnVuY3Rpb24odCl7dGhyb3cgdH0sZjpufX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIHIscz0hMCxhPSExO3JldHVybntzOmZ1bmN0aW9uKCl7aT1pLmNhbGwodCl9LG46ZnVuY3Rpb24oKXt2YXIgdD1pLm5leHQoKTtyZXR1cm4gcz10LmRvbmUsdH0sZTpmdW5jdGlvbih0KXthPSEwLHI9dH0sZjpmdW5jdGlvbigpe3RyeXtzfHxudWxsPT1pLnJldHVybnx8aS5yZXR1cm4oKX1maW5hbGx5e2lmKGEpdGhyb3cgcn19fX1mdW5jdGlvbiBDQyh0LGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO2Zvcih2YXIgaT0wLG89bmV3IEFycmF5KGUpO2k8ZTtpKyspb1tpXT10W2ldO3JldHVybiBvfWZ1bmN0aW9uIFNDKHQsZSl7dmFyIGk9bmV3IHVFO3JldHVybiBGdSh0KS5jYWxsKHQsKGZ1bmN0aW9uKHQpe3ZhciBlO0Z1KGU9dC5lZGdlcykuY2FsbChlLChmdW5jdGlvbih0KXt0LmNvbm5lY3RlZCYmaS5hZGQodCl9KSl9KSksRnUoaSkuY2FsbChpLChmdW5jdGlvbih0KXt2YXIgaT10LmZyb20uaWQsbz10LnRvLmlkO251bGw9PWVbaV0mJihlW2ldPTApLChudWxsPT1lW29dfHxlW2ldPj1lW29dKSYmKGVbb109ZVtpXSsxKX0pKSxlfWZ1bmN0aW9uIFRDKHQsZSxpLG8pe3ZhciBuLHIscz1IcChudWxsKSxhPWNDKG49SmMobGsobykuY2FsbChvKSkpLmNhbGwobiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCsxK2UuZWRnZXMubGVuZ3RofSksMCksaD1pK1wiSWRcIixkPVwidG9cIj09PWk/MTotMSxsPU9DKG8pO3RyeXt2YXIgYz1mdW5jdGlvbigpe3ZhciBuPSRjKHIudmFsdWUsMiksbD1uWzBdLGM9blsxXTtpZighby5oYXMobCl8fCF0KGMpKXJldHVyblwiY29udGludWVcIjtzW2xdPTA7Zm9yKHZhciB1PVtjXSxmPTAscD12b2lkIDAsdj1mdW5jdGlvbigpe3ZhciB0LG47aWYoIW8uaGFzKGwpKXJldHVyblwiY29udGludWVcIjt2YXIgcj1zW3AuaWRdK2Q7aWYoRnUodD1ZZihuPXAuZWRnZXMpLmNhbGwobiwoZnVuY3Rpb24odCl7cmV0dXJuIHQuY29ubmVjdGVkJiZ0LnRvIT09dC5mcm9tJiZ0W2ldIT09cCYmby5oYXModC50b0lkKSYmby5oYXModC5mcm9tSWQpfSkpKS5jYWxsKHQsKGZ1bmN0aW9uKHQpe3ZhciBvPXRbaF0sbj1zW29dOyhudWxsPT1ufHxlKHIsbikpJiYoc1tvXT1yLHUucHVzaCh0W2ldKSl9KSksZj5hKXJldHVybnt2Ont2OlNDKG8scyl9fTsrK2Z9O3A9dS5wb3AoKTspe3ZhciBnPXYoKTtpZihcImNvbnRpbnVlXCIhPT1nJiZcIm9iamVjdFwiPT09UWMoZykpcmV0dXJuIGcudn19O2ZvcihsLnMoKTshKHI9bC5uKCkpLmRvbmU7KXt2YXIgdT1jKCk7aWYoXCJjb250aW51ZVwiIT09dSYmXCJvYmplY3RcIj09PVFjKHUpKXJldHVybiB1LnZ9fWNhdGNoKHQpe2wuZSh0KX1maW5hbGx5e2wuZigpfXJldHVybiBzfXZhciBNQz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtYbCh0aGlzLHQpLHRoaXMuY2hpbGRyZW5SZWZlcmVuY2U9e30sdGhpcy5wYXJlbnRSZWZlcmVuY2U9e30sdGhpcy50cmVlcz17fSx0aGlzLmRpc3RyaWJ1dGlvbk9yZGVyaW5nPXt9LHRoaXMubGV2ZWxzPXt9LHRoaXMuZGlzdHJpYnV0aW9uSW5kZXg9e30sdGhpcy5pc1RyZWU9ITEsdGhpcy50cmVlSW5kZXg9LTF9cmV0dXJuICRsKHQsW3trZXk6XCJhZGRSZWxhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09dGhpcy5jaGlsZHJlblJlZmVyZW5jZVt0XSYmKHRoaXMuY2hpbGRyZW5SZWZlcmVuY2VbdF09W10pLHRoaXMuY2hpbGRyZW5SZWZlcmVuY2VbdF0ucHVzaChlKSx2b2lkIDA9PT10aGlzLnBhcmVudFJlZmVyZW5jZVtlXSYmKHRoaXMucGFyZW50UmVmZXJlbmNlW2VdPVtdKSx0aGlzLnBhcmVudFJlZmVyZW5jZVtlXS5wdXNoKHQpfX0se2tleTpcImNoZWNrSWZUcmVlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5wYXJlbnRSZWZlcmVuY2UpaWYodGhpcy5wYXJlbnRSZWZlcmVuY2VbdF0ubGVuZ3RoPjEpcmV0dXJuIHZvaWQodGhpcy5pc1RyZWU9ITEpO3RoaXMuaXNUcmVlPSEwfX0se2tleTpcIm51bVRyZWVzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmVlSW5kZXgrMX19LHtrZXk6XCJzZXRUcmVlSW5kZXhcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZvaWQgMCE9PWUmJnZvaWQgMD09PXRoaXMudHJlZXNbdC5pZF0mJih0aGlzLnRyZWVzW3QuaWRdPWUsdGhpcy50cmVlSW5kZXg9TWF0aC5tYXgoZSx0aGlzLnRyZWVJbmRleCkpfX0se2tleTpcImVuc3VyZUxldmVsXCIsdmFsdWU6ZnVuY3Rpb24odCl7dm9pZCAwPT09dGhpcy5sZXZlbHNbdF0mJih0aGlzLmxldmVsc1t0XT0wKX19LHtrZXk6XCJnZXRNYXhMZXZlbFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsaT17fTtyZXR1cm4gZnVuY3Rpb24gdChvKXtpZih2b2lkIDAhPT1pW29dKXJldHVybiBpW29dO3ZhciBuPWUubGV2ZWxzW29dO2lmKGUuY2hpbGRyZW5SZWZlcmVuY2Vbb10pe3ZhciByPWUuY2hpbGRyZW5SZWZlcmVuY2Vbb107aWYoci5sZW5ndGg+MClmb3IodmFyIHM9MDtzPHIubGVuZ3RoO3MrKyluPU1hdGgubWF4KG4sdChyW3NdKSl9cmV0dXJuIGlbb109bixufSh0KX19LHtrZXk6XCJsZXZlbERvd25zdHJlYW1cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PXRoaXMubGV2ZWxzW2UuaWRdJiYodm9pZCAwPT09dGhpcy5sZXZlbHNbdC5pZF0mJih0aGlzLmxldmVsc1t0LmlkXT0wKSx0aGlzLmxldmVsc1tlLmlkXT10aGlzLmxldmVsc1t0LmlkXSsxKX19LHtrZXk6XCJzZXRNaW5MZXZlbFRvWmVyb1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPTFlOTtmb3IodmFyIGkgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKSYmdm9pZCAwIT09dGhpcy5sZXZlbHNbaV0mJihlPU1hdGgubWluKHRoaXMubGV2ZWxzW2ldLGUpKTtmb3IodmFyIG8gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSYmdm9pZCAwIT09dGhpcy5sZXZlbHNbb10mJih0aGlzLmxldmVsc1tvXS09ZSl9fSx7a2V5OlwiZ2V0VHJlZVNpemVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPTFlOSxvPS0xZTksbj0xZTkscj0tMWU5O2Zvcih2YXIgcyBpbiB0aGlzLnRyZWVzKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnRyZWVzLHMpJiZ0aGlzLnRyZWVzW3NdPT09ZSl7dmFyIGE9dFtzXTtpPU1hdGgubWluKGEueCxpKSxvPU1hdGgubWF4KGEueCxvKSxuPU1hdGgubWluKGEueSxuKSxyPU1hdGgubWF4KGEueSxyKX1yZXR1cm57bWluX3g6aSxtYXhfeDpvLG1pbl95Om4sbWF4X3k6cn19fSx7a2V5OlwiaGFzU2FtZVBhcmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5wYXJlbnRSZWZlcmVuY2VbdC5pZF0sbz10aGlzLnBhcmVudFJlZmVyZW5jZVtlLmlkXTtpZih2b2lkIDA9PT1pfHx2b2lkIDA9PT1vKXJldHVybiExO2Zvcih2YXIgbj0wO248aS5sZW5ndGg7bisrKWZvcih2YXIgcj0wO3I8by5sZW5ndGg7cisrKWlmKGlbbl09PW9bcl0pcmV0dXJuITA7cmV0dXJuITF9fSx7a2V5OlwiaW5TYW1lU3ViTmV0d29ya1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudHJlZXNbdC5pZF09PT10aGlzLnRyZWVzW2UuaWRdfX0se2tleTpcImdldExldmVsc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG11KHRoaXMuZGlzdHJpYnV0aW9uT3JkZXJpbmcpfX0se2tleTpcImFkZFRvT3JkZXJpbmdcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PXRoaXMuZGlzdHJpYnV0aW9uT3JkZXJpbmdbZV0mJih0aGlzLmRpc3RyaWJ1dGlvbk9yZGVyaW5nW2VdPVtdKTt2YXIgaT0hMSxvPXRoaXMuZGlzdHJpYnV0aW9uT3JkZXJpbmdbZV07Zm9yKHZhciBuIGluIG8paWYob1tuXT09PXQpe2k9ITA7YnJlYWt9aXx8KHRoaXMuZGlzdHJpYnV0aW9uT3JkZXJpbmdbZV0ucHVzaCh0KSx0aGlzLmRpc3RyaWJ1dGlvbkluZGV4W3QuaWRdPXRoaXMuZGlzdHJpYnV0aW9uT3JkZXJpbmdbZV0ubGVuZ3RoLTEpfX1dKSx0fSgpLFBDPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtYbCh0aGlzLHQpLHRoaXMuYm9keT1lLHRoaXMuX3Jlc2V0Uk5HKE1hdGgucmFuZG9tKCkrXCI6XCIreHUoKSksdGhpcy5zZXRQaHlzaWNzPSExLHRoaXMub3B0aW9ucz17fSx0aGlzLm9wdGlvbnNCYWNrdXA9e3BoeXNpY3M6e319LHRoaXMuZGVmYXVsdE9wdGlvbnM9e3JhbmRvbVNlZWQ6dm9pZCAwLGltcHJvdmVkTGF5b3V0OiEwLGNsdXN0ZXJUaHJlc2hvbGQ6MTUwLGhpZXJhcmNoaWNhbDp7ZW5hYmxlZDohMSxsZXZlbFNlcGFyYXRpb246MTUwLG5vZGVTcGFjaW5nOjEwMCx0cmVlU3BhY2luZzoyMDAsYmxvY2tTaGlmdGluZzohMCxlZGdlTWluaW1pemF0aW9uOiEwLHBhcmVudENlbnRyYWxpemF0aW9uOiEwLGRpcmVjdGlvbjpcIlVEXCIsc29ydE1ldGhvZDpcImh1YnNpemVcIn19LGZvKHRoaXMub3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zKSx0aGlzLmJpbmRFdmVudExpc3RlbmVycygpfXJldHVybiAkbCh0LFt7a2V5OlwiYmluZEV2ZW50TGlzdGVuZXJzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuYm9keS5lbWl0dGVyLm9uKFwiX2RhdGFDaGFuZ2VkXCIsKGZ1bmN0aW9uKCl7dC5zZXR1cEhpZXJhcmNoaWNhbExheW91dCgpfSkpLHRoaXMuYm9keS5lbWl0dGVyLm9uKFwiX2RhdGFMb2FkZWRcIiwoZnVuY3Rpb24oKXt0LmxheW91dE5ldHdvcmsoKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9yZXNldEhpZXJhcmNoaWNhbExheW91dFwiLChmdW5jdGlvbigpe3Quc2V0dXBIaWVyYXJjaGljYWxMYXlvdXQoKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9hZGp1c3RFZGdlc0ZvckhpZXJhcmNoaWNhbExheW91dFwiLChmdW5jdGlvbigpe2lmKCEwPT09dC5vcHRpb25zLmhpZXJhcmNoaWNhbC5lbmFibGVkKXt2YXIgZT10LmRpcmVjdGlvbi5jdXJ2ZVR5cGUoKTt0LmJvZHkuZW1pdHRlci5lbWl0KFwiX2ZvcmNlRGlzYWJsZUR5bmFtaWNDdXJ2ZXNcIixlLCExKX19KSl9fSx7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwIT09dCl7dmFyIGk9dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbCxvPWkuZW5hYmxlZDtpZihOeShbXCJyYW5kb21TZWVkXCIsXCJpbXByb3ZlZExheW91dFwiLFwiY2x1c3RlclRocmVzaG9sZFwiXSx0aGlzLm9wdGlvbnMsdCksdG0odGhpcy5vcHRpb25zLHQsXCJoaWVyYXJjaGljYWxcIiksdm9pZCAwIT09dC5yYW5kb21TZWVkJiZ0aGlzLl9yZXNldFJORyh0LnJhbmRvbVNlZWQpLCEwPT09aS5lbmFibGVkKXJldHVybiEwPT09byYmdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInJlZnJlc2hcIiwhMCksXCJSTFwiPT09aS5kaXJlY3Rpb258fFwiRFVcIj09PWkuZGlyZWN0aW9uP2kubGV2ZWxTZXBhcmF0aW9uPjAmJihpLmxldmVsU2VwYXJhdGlvbio9LTEpOmkubGV2ZWxTZXBhcmF0aW9uPDAmJihpLmxldmVsU2VwYXJhdGlvbio9LTEpLHRoaXMuc2V0RGlyZWN0aW9uU3RyYXRlZ3koKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3Jlc2V0SGllcmFyY2hpY2FsTGF5b3V0XCIpLHRoaXMuYWRhcHRBbGxPcHRpb25zRm9ySGllcmFyY2hpY2FsTGF5b3V0KGUpO2lmKCEwPT09bylyZXR1cm4gdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInJlZnJlc2hcIiksUnkoZSx0aGlzLm9wdGlvbnNCYWNrdXApfXJldHVybiBlfX0se2tleTpcIl9yZXNldFJOR1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuaW5pdGlhbFJhbmRvbVNlZWQ9dCx0aGlzLl9ybmc9X3kodGhpcy5pbml0aWFsUmFuZG9tU2VlZCl9fSx7a2V5OlwiYWRhcHRBbGxPcHRpb25zRm9ySGllcmFyY2hpY2FsTGF5b3V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoITA9PT10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLmVuYWJsZWQpe3ZhciBlPXRoaXMub3B0aW9uc0JhY2t1cC5waHlzaWNzO3ZvaWQgMD09PXQucGh5c2ljc3x8ITA9PT10LnBoeXNpY3M/KHQucGh5c2ljcz17ZW5hYmxlZDp2b2lkIDA9PT1lLmVuYWJsZWR8fGUuZW5hYmxlZCxzb2x2ZXI6XCJoaWVyYXJjaGljYWxSZXB1bHNpb25cIn0sZS5lbmFibGVkPXZvaWQgMD09PWUuZW5hYmxlZHx8ZS5lbmFibGVkLGUuc29sdmVyPWUuc29sdmVyfHxcImJhcm5lc0h1dFwiKTpcIm9iamVjdFwiPT09UWModC5waHlzaWNzKT8oZS5lbmFibGVkPXZvaWQgMD09PXQucGh5c2ljcy5lbmFibGVkfHx0LnBoeXNpY3MuZW5hYmxlZCxlLnNvbHZlcj10LnBoeXNpY3Muc29sdmVyfHxcImJhcm5lc0h1dFwiLHQucGh5c2ljcy5zb2x2ZXI9XCJoaWVyYXJjaGljYWxSZXB1bHNpb25cIik6ITEhPT10LnBoeXNpY3MmJihlLnNvbHZlcj1cImJhcm5lc0h1dFwiLHQucGh5c2ljcz17c29sdmVyOlwiaGllcmFyY2hpY2FsUmVwdWxzaW9uXCJ9KTt2YXIgaT10aGlzLmRpcmVjdGlvbi5jdXJ2ZVR5cGUoKTtpZih2b2lkIDA9PT10LmVkZ2VzKXRoaXMub3B0aW9uc0JhY2t1cC5lZGdlcz17c21vb3RoOntlbmFibGVkOiEwLHR5cGU6XCJkeW5hbWljXCJ9fSx0LmVkZ2VzPXtzbW9vdGg6ITF9O2Vsc2UgaWYodm9pZCAwPT09dC5lZGdlcy5zbW9vdGgpdGhpcy5vcHRpb25zQmFja3VwLmVkZ2VzPXtzbW9vdGg6e2VuYWJsZWQ6ITAsdHlwZTpcImR5bmFtaWNcIn19LHQuZWRnZXMuc21vb3RoPSExO2Vsc2UgaWYoXCJib29sZWFuXCI9PXR5cGVvZiB0LmVkZ2VzLnNtb290aCl0aGlzLm9wdGlvbnNCYWNrdXAuZWRnZXM9e3Ntb290aDp0LmVkZ2VzLnNtb290aH0sdC5lZGdlcy5zbW9vdGg9e2VuYWJsZWQ6dC5lZGdlcy5zbW9vdGgsdHlwZTppfTtlbHNle3ZhciBvPXQuZWRnZXMuc21vb3RoO3ZvaWQgMCE9PW8udHlwZSYmXCJkeW5hbWljXCIhPT1vLnR5cGUmJihpPW8udHlwZSksdGhpcy5vcHRpb25zQmFja3VwLmVkZ2VzPXtzbW9vdGg6e2VuYWJsZWQ6dm9pZCAwPT09by5lbmFibGVkfHxvLmVuYWJsZWQsdHlwZTp2b2lkIDA9PT1vLnR5cGU/XCJkeW5hbWljXCI6by50eXBlLHJvdW5kbmVzczp2b2lkIDA9PT1vLnJvdW5kbmVzcz8uNTpvLnJvdW5kbmVzcyxmb3JjZURpcmVjdGlvbjp2b2lkIDAhPT1vLmZvcmNlRGlyZWN0aW9uJiZvLmZvcmNlRGlyZWN0aW9ufX0sdC5lZGdlcy5zbW9vdGg9e2VuYWJsZWQ6dm9pZCAwPT09by5lbmFibGVkfHxvLmVuYWJsZWQsdHlwZTppLHJvdW5kbmVzczp2b2lkIDA9PT1vLnJvdW5kbmVzcz8uNTpvLnJvdW5kbmVzcyxmb3JjZURpcmVjdGlvbjp2b2lkIDAhPT1vLmZvcmNlRGlyZWN0aW9uJiZvLmZvcmNlRGlyZWN0aW9ufX10aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2ZvcmNlRGlzYWJsZUR5bmFtaWNDdXJ2ZXNcIixpKX1yZXR1cm4gdH19LHtrZXk6XCJwb3NpdGlvbkluaXRpYWxseVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCEwIT09dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5lbmFibGVkKXt0aGlzLl9yZXNldFJORyh0aGlzLmluaXRpYWxSYW5kb21TZWVkKTtmb3IodmFyIGU9dC5sZW5ndGgrNTAsaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbz10W2ldLG49MipNYXRoLlBJKnRoaXMuX3JuZygpO3ZvaWQgMD09PW8ueCYmKG8ueD1lKk1hdGguY29zKG4pKSx2b2lkIDA9PT1vLnkmJihvLnk9ZSpNYXRoLnNpbihuKSl9fX19LHtrZXk6XCJsYXlvdXROZXR3b3JrXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighMCE9PXRoaXMub3B0aW9ucy5oaWVyYXJjaGljYWwuZW5hYmxlZCYmITA9PT10aGlzLm9wdGlvbnMuaW1wcm92ZWRMYXlvdXQpe2Zvcih2YXIgdD10aGlzLmJvZHkubm9kZUluZGljZXMsZT0wLGk9MDtpPHQubGVuZ3RoO2krKyl7ITA9PT10aGlzLmJvZHkubm9kZXNbdFtpXV0ucHJlZGVmaW5lZFBvc2l0aW9uJiYoZSs9MSl9aWYoZTwuNSp0Lmxlbmd0aCl7dmFyIG89MCxuPXRoaXMub3B0aW9ucy5jbHVzdGVyVGhyZXNob2xkLHI9e2NsdXN0ZXJOb2RlUHJvcGVydGllczp7c2hhcGU6XCJlbGxpcHNlXCIsbGFiZWw6XCJcIixncm91cDpcIlwiLGZvbnQ6e211bHRpOiExfX0sY2x1c3RlckVkZ2VQcm9wZXJ0aWVzOntsYWJlbDpcIlwiLGZvbnQ6e211bHRpOiExfSxzbW9vdGg6e2VuYWJsZWQ6ITF9fX07aWYodC5sZW5ndGg+bil7Zm9yKHZhciBzPXQubGVuZ3RoO3QubGVuZ3RoPm4mJm88PTEwOyl7bys9MTt2YXIgYT10Lmxlbmd0aDtpZihvJTM9PTA/dGhpcy5ib2R5Lm1vZHVsZXMuY2x1c3RlcmluZy5jbHVzdGVyQnJpZGdlcyhyKTp0aGlzLmJvZHkubW9kdWxlcy5jbHVzdGVyaW5nLmNsdXN0ZXJPdXRsaWVycyhyKSxhPT10Lmxlbmd0aCYmbyUzIT0wKXJldHVybiB0aGlzLl9kZWNsdXN0ZXJBbGwoKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2xheW91dEZhaWxlZFwiKSx2b2lkIGNvbnNvbGUuaW5mbyhcIlRoaXMgbmV0d29yayBjb3VsZCBub3QgYmUgcG9zaXRpb25lZCBieSB0aGlzIHZlcnNpb24gb2YgdGhlIGltcHJvdmVkIGxheW91dCBhbGdvcml0aG0uIFBsZWFzZSBkaXNhYmxlIGltcHJvdmVkTGF5b3V0IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXCIpfXRoaXMuYm9keS5tb2R1bGVzLmthbWFkYUthd2FpLnNldE9wdGlvbnMoe3NwcmluZ0xlbmd0aDpNYXRoLm1heCgxNTAsMipzKX0pfW8+MTAmJmNvbnNvbGUuaW5mbyhcIlRoZSBjbHVzdGVyaW5nIGRpZG4ndCBzdWNjZWVkIHdpdGhpbiB0aGUgYW1vdW50IG9mIGludGVyYXRpb25zIGFsbG93ZWQsIHByb2dyZXNzaW5nIHdpdGggcGFydGlhbCByZXN1bHQuXCIpLHRoaXMuYm9keS5tb2R1bGVzLmthbWFkYUthd2FpLnNvbHZlKHQsdGhpcy5ib2R5LmVkZ2VJbmRpY2VzLCEwKSx0aGlzLl9zaGlmdFRvQ2VudGVyKCk7Zm9yKHZhciBoPTA7aDx0Lmxlbmd0aDtoKyspe3ZhciBkPXRoaXMuYm9keS5ub2Rlc1t0W2hdXTshMT09PWQucHJlZGVmaW5lZFBvc2l0aW9uJiYoZC54Kz03MCooLjUtdGhpcy5fcm5nKCkpLGQueSs9NzAqKC41LXRoaXMuX3JuZygpKSl9dGhpcy5fZGVjbHVzdGVyQWxsKCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZXBvc2l0aW9uQmV6aWVyTm9kZXNcIil9fX19LHtrZXk6XCJfc2hpZnRUb0NlbnRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PUd4LmdldFJhbmdlQ29yZSh0aGlzLmJvZHkubm9kZXMsdGhpcy5ib2R5Lm5vZGVJbmRpY2VzKSxlPUd4LmZpbmRDZW50ZXIodCksaT0wO2k8dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLmxlbmd0aDtpKyspe3ZhciBvPXRoaXMuYm9keS5ub2Rlc1t0aGlzLmJvZHkubm9kZUluZGljZXNbaV1dO28ueC09ZS54LG8ueS09ZS55fX19LHtrZXk6XCJfZGVjbHVzdGVyQWxsXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9ITA7ITA9PT10Oyl7dD0hMTtmb3IodmFyIGU9MDtlPHRoaXMuYm9keS5ub2RlSW5kaWNlcy5sZW5ndGg7ZSsrKSEwPT09dGhpcy5ib2R5Lm5vZGVzW3RoaXMuYm9keS5ub2RlSW5kaWNlc1tlXV0uaXNDbHVzdGVyJiYodD0hMCx0aGlzLmJvZHkubW9kdWxlcy5jbHVzdGVyaW5nLm9wZW5DbHVzdGVyKHRoaXMuYm9keS5ub2RlSW5kaWNlc1tlXSx7fSwhMSkpOyEwPT09dCYmdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKX19fSx7a2V5OlwiZ2V0U2VlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5pdGlhbFJhbmRvbVNlZWR9fSx7a2V5Olwic2V0dXBIaWVyYXJjaGljYWxMYXlvdXRcIix2YWx1ZTpmdW5jdGlvbigpe2lmKCEwPT09dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5lbmFibGVkJiZ0aGlzLmJvZHkubm9kZUluZGljZXMubGVuZ3RoPjApe3ZhciB0LGUsaT0hMSxvPSExO2ZvcihlIGluIHRoaXMubGFzdE5vZGVPbkxldmVsPXt9LHRoaXMuaGllcmFyY2hpY2FsPW5ldyBNQyx0aGlzLmJvZHkubm9kZXMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYm9keS5ub2RlcyxlKSYmKHZvaWQgMCE9PSh0PXRoaXMuYm9keS5ub2Rlc1tlXSkub3B0aW9ucy5sZXZlbD8oaT0hMCx0aGlzLmhpZXJhcmNoaWNhbC5sZXZlbHNbZV09dC5vcHRpb25zLmxldmVsKTpvPSEwKTtpZighMD09PW8mJiEwPT09aSl0aHJvdyBuZXcgRXJyb3IoXCJUbyB1c2UgdGhlIGhpZXJhcmNoaWNhbCBsYXlvdXQsIG5vZGVzIHJlcXVpcmUgZWl0aGVyIG5vIHByZWRlZmluZWQgbGV2ZWxzIG9yIGxldmVscyBoYXZlIHRvIGJlIGRlZmluZWQgZm9yIGFsbCBub2Rlcy5cIik7aWYoITA9PT1vKXt2YXIgbj10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLnNvcnRNZXRob2Q7XCJodWJzaXplXCI9PT1uP3RoaXMuX2RldGVybWluZUxldmVsc0J5SHVic2l6ZSgpOlwiZGlyZWN0ZWRcIj09PW4/dGhpcy5fZGV0ZXJtaW5lTGV2ZWxzRGlyZWN0ZWQoKTpcImN1c3RvbVwiPT09biYmdGhpcy5fZGV0ZXJtaW5lTGV2ZWxzQ3VzdG9tQ2FsbGJhY2soKX1mb3IodmFyIHIgaW4gdGhpcy5ib2R5Lm5vZGVzKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmJvZHkubm9kZXMscikmJnRoaXMuaGllcmFyY2hpY2FsLmVuc3VyZUxldmVsKHIpO3ZhciBzPXRoaXMuX2dldERpc3RyaWJ1dGlvbigpO3RoaXMuX2dlbmVyYXRlTWFwKCksdGhpcy5fcGxhY2VOb2Rlc0J5SGllcmFyY2h5KHMpLHRoaXMuX2NvbmRlbnNlSGllcmFyY2h5KCksdGhpcy5fc2hpZnRUb0NlbnRlcigpfX19LHtrZXk6XCJfY29uZGVuc2VIaWVyYXJjaHlcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT0hMSxpPXt9LG89ZnVuY3Rpb24oZSxpKXt2YXIgbz10LmhpZXJhcmNoaWNhbC50cmVlcztmb3IodmFyIG4gaW4gbylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxuKSYmb1tuXT09PWUmJnQuZGlyZWN0aW9uLnNoaWZ0KG4saSl9LG49ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10saT0wO2k8dC5oaWVyYXJjaGljYWwubnVtVHJlZXMoKTtpKyspZS5wdXNoKHQuZGlyZWN0aW9uLmdldFRyZWVTaXplKGkpKTtyZXR1cm4gZX0scj1mdW5jdGlvbiBlKGksbyl7aWYoIW9baS5pZF0mJihvW2kuaWRdPSEwLHQuaGllcmFyY2hpY2FsLmNoaWxkcmVuUmVmZXJlbmNlW2kuaWRdKSl7dmFyIG49dC5oaWVyYXJjaGljYWwuY2hpbGRyZW5SZWZlcmVuY2VbaS5pZF07aWYobi5sZW5ndGg+MClmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyllKHQuYm9keS5ub2Rlc1tuW3JdXSxvKX19LHM9ZnVuY3Rpb24oZSl7dmFyIGk9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjFlOSxvPTFlOSxuPTFlOSxyPTFlOSxzPS0xZTk7Zm9yKHZhciBhIGluIGUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsYSkpe3ZhciBoPXQuYm9keS5ub2Rlc1thXSxkPXQuaGllcmFyY2hpY2FsLmxldmVsc1toLmlkXSxsPXQuZGlyZWN0aW9uLmdldFBvc2l0aW9uKGgpLGM9dC5fZ2V0U3BhY2VBcm91bmROb2RlKGgsZSksdT0kYyhjLDIpLGY9dVswXSxwPXVbMV07bz1NYXRoLm1pbihmLG8pLG49TWF0aC5taW4ocCxuKSxkPD1pJiYocj1NYXRoLm1pbihsLHIpLHM9TWF0aC5tYXgobCxzKSl9cmV0dXJuW3IscyxvLG5dfSxhPWZ1bmN0aW9uKGUsaSl7dmFyIG89dC5oaWVyYXJjaGljYWwuZ2V0TWF4TGV2ZWwoZS5pZCksbj10LmhpZXJhcmNoaWNhbC5nZXRNYXhMZXZlbChpLmlkKTtyZXR1cm4gTWF0aC5taW4obyxuKX0saD1mdW5jdGlvbihlLGksbyl7Zm9yKHZhciBuPXQuaGllcmFyY2hpY2FsLHI9MDtyPGkubGVuZ3RoO3IrKyl7dmFyIHM9aVtyXSxhPW4uZGlzdHJpYnV0aW9uT3JkZXJpbmdbc107aWYoYS5sZW5ndGg+MSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoLTE7aCsrKXt2YXIgZD1hW2hdLGw9YVtoKzFdO24uaGFzU2FtZVBhcmVudChkLGwpJiZuLmluU2FtZVN1Yk5ldHdvcmsoZCxsKSYmZShkLGwsbyl9fX0sZD1mdW5jdGlvbihpLG8pe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl0saD10LmRpcmVjdGlvbi5nZXRQb3NpdGlvbihpKSxkPXQuZGlyZWN0aW9uLmdldFBvc2l0aW9uKG8pLGw9TWF0aC5hYnMoZC1oKSxjPXQub3B0aW9ucy5oaWVyYXJjaGljYWwubm9kZVNwYWNpbmc7aWYobD5jKXt2YXIgdT17fSxmPXt9O3IoaSx1KSxyKG8sZik7dmFyIHA9YShpLG8pLHY9cyh1LHApLGc9cyhmLHApLHk9dlsxXSxtPWdbMF0sYj1nWzJdLHc9TWF0aC5hYnMoeS1tKTtpZih3PmMpe3ZhciBrPXktbStjO2s8LWIrYyYmKGs9LWIrYyksazwwJiYodC5fc2hpZnRCbG9jayhvLmlkLGspLGU9ITAsITA9PT1uJiZ0Ll9jZW50ZXJQYXJlbnQobykpfX19LGw9ZnVuY3Rpb24obyxuKXtmb3IodmFyIGE9bi5pZCxoPW4uZWRnZXMsZD10LmhpZXJhcmNoaWNhbC5sZXZlbHNbbi5pZF0sbD10Lm9wdGlvbnMuaGllcmFyY2hpY2FsLmxldmVsU2VwYXJhdGlvbip0Lm9wdGlvbnMuaGllcmFyY2hpY2FsLmxldmVsU2VwYXJhdGlvbixjPXt9LHU9W10sZj0wO2Y8aC5sZW5ndGg7ZisrKXt2YXIgcD1oW2ZdO2lmKHAudG9JZCE9cC5mcm9tSWQpe3ZhciB2PXAudG9JZD09YT9wLmZyb206cC50bztjW2hbZl0uaWRdPXYsdC5oaWVyYXJjaGljYWwubGV2ZWxzW3YuaWRdPGQmJnUucHVzaChwKX19dmFyIGc9ZnVuY3Rpb24oZSxpKXtmb3IodmFyIG89MCxuPTA7bjxpLmxlbmd0aDtuKyspaWYodm9pZCAwIT09Y1tpW25dLmlkXSl7dmFyIHI9dC5kaXJlY3Rpb24uZ2V0UG9zaXRpb24oY1tpW25dLmlkXSktZTtvKz1yL01hdGguc3FydChyKnIrbCl9cmV0dXJuIG99LHk9ZnVuY3Rpb24oZSxpKXtmb3IodmFyIG89MCxuPTA7bjxpLmxlbmd0aDtuKyspaWYodm9pZCAwIT09Y1tpW25dLmlkXSl7dmFyIHI9dC5kaXJlY3Rpb24uZ2V0UG9zaXRpb24oY1tpW25dLmlkXSktZTtvLT1sKk1hdGgucG93KHIqcitsLC0xLjUpfXJldHVybiBvfSxtPWZ1bmN0aW9uKGUsaSl7Zm9yKHZhciBvPXQuZGlyZWN0aW9uLmdldFBvc2l0aW9uKG4pLHI9e30scz0wO3M8ZTtzKyspe3ZhciBhPWcobyxpKSxoPXkobyxpKTtpZih2b2lkIDAhPT1yW28tPU1hdGgubWF4KC00MCxNYXRoLm1pbig0MCxNYXRoLnJvdW5kKGEvaCkpKV0pYnJlYWs7cltvXT1zfXJldHVybiBvfSxiPW0obyx1KTshZnVuY3Rpb24obyl7dmFyIGE9dC5kaXJlY3Rpb24uZ2V0UG9zaXRpb24obik7aWYodm9pZCAwPT09aVtuLmlkXSl7dmFyIGg9e307cihuLGgpLGlbbi5pZF09aH12YXIgZD1zKGlbbi5pZF0pLGw9ZFsyXSxjPWRbM10sdT1vLWEsZj0wO3U+MD9mPU1hdGgubWluKHUsYy10Lm9wdGlvbnMuaGllcmFyY2hpY2FsLm5vZGVTcGFjaW5nKTp1PDAmJihmPS1NYXRoLm1pbigtdSxsLXQub3B0aW9ucy5oaWVyYXJjaGljYWwubm9kZVNwYWNpbmcpKSwwIT1mJiYodC5fc2hpZnRCbG9jayhuLmlkLGYpLGU9ITApfShiKSxmdW5jdGlvbihpKXt2YXIgbz10LmRpcmVjdGlvbi5nZXRQb3NpdGlvbihuKSxyPSRjKHQuX2dldFNwYWNlQXJvdW5kTm9kZShuKSwyKSxzPXJbMF0sYT1yWzFdLGg9aS1vLGQ9bztoPjA/ZD1NYXRoLm1pbihvKyhhLXQub3B0aW9ucy5oaWVyYXJjaGljYWwubm9kZVNwYWNpbmcpLGkpOmg8MCYmKGQ9TWF0aC5tYXgoby0ocy10Lm9wdGlvbnMuaGllcmFyY2hpY2FsLm5vZGVTcGFjaW5nKSxpKSksZCE9PW8mJih0LmRpcmVjdGlvbi5zZXRQb3NpdGlvbihuLGQpLGU9ITApfShiPW0obyxoKSl9OyEwPT09dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5ibG9ja1NoaWZ0aW5nJiYoZnVuY3Rpb24oaSl7dmFyIG89dC5oaWVyYXJjaGljYWwuZ2V0TGV2ZWxzKCk7bz1VdShvKS5jYWxsKG8pO2Zvcih2YXIgbj0wO248aSYmKGU9ITEsaChkLG8sITApLCEwPT09ZSk7bisrKTt9KDUpLGZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHQuYm9keS5ub2RlcylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodC5ib2R5Lm5vZGVzLGUpJiZ0Ll9jZW50ZXJQYXJlbnQodC5ib2R5Lm5vZGVzW2VdKX0oKSksITA9PT10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLmVkZ2VNaW5pbWl6YXRpb24mJmZ1bmN0aW9uKGkpe3ZhciBvPXQuaGllcmFyY2hpY2FsLmdldExldmVscygpO289VXUobykuY2FsbChvKTtmb3IodmFyIG49MDtuPGk7bisrKXtlPSExO2Zvcih2YXIgcj0wO3I8by5sZW5ndGg7cisrKWZvcih2YXIgcz1vW3JdLGE9dC5oaWVyYXJjaGljYWwuZGlzdHJpYnV0aW9uT3JkZXJpbmdbc10saD0wO2g8YS5sZW5ndGg7aCsrKWwoMWUzLGFbaF0pO2lmKCEwIT09ZSlicmVha319KDIwKSwhMD09PXRoaXMub3B0aW9ucy5oaWVyYXJjaGljYWwucGFyZW50Q2VudHJhbGl6YXRpb24mJmZ1bmN0aW9uKCl7dmFyIGU9dC5oaWVyYXJjaGljYWwuZ2V0TGV2ZWxzKCk7ZT1VdShlKS5jYWxsKGUpO2Zvcih2YXIgaT0wO2k8ZS5sZW5ndGg7aSsrKWZvcih2YXIgbz1lW2ldLG49dC5oaWVyYXJjaGljYWwuZGlzdHJpYnV0aW9uT3JkZXJpbmdbb10scj0wO3I8bi5sZW5ndGg7cisrKXQuX2NlbnRlclBhcmVudChuW3JdKX0oKSxmdW5jdGlvbigpe2Zvcih2YXIgZT1uKCksaT0wLHI9MDtyPGUubGVuZ3RoLTE7cisrKXtpKz1lW3JdLm1heC1lW3IrMV0ubWluK3Qub3B0aW9ucy5oaWVyYXJjaGljYWwudHJlZVNwYWNpbmcsbyhyKzEsaSl9fSgpfX0se2tleTpcIl9nZXRTcGFjZUFyb3VuZE5vZGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPSEwO3ZvaWQgMD09PWUmJihpPSExKTt2YXIgbz10aGlzLmhpZXJhcmNoaWNhbC5sZXZlbHNbdC5pZF07aWYodm9pZCAwIT09byl7dmFyIG49dGhpcy5oaWVyYXJjaGljYWwuZGlzdHJpYnV0aW9uSW5kZXhbdC5pZF0scj10aGlzLmRpcmVjdGlvbi5nZXRQb3NpdGlvbih0KSxzPXRoaXMuaGllcmFyY2hpY2FsLmRpc3RyaWJ1dGlvbk9yZGVyaW5nW29dLGE9MWU5LGg9MWU5O2lmKDAhPT1uKXt2YXIgZD1zW24tMV07aWYoITA9PT1pJiZ2b2lkIDA9PT1lW2QuaWRdfHwhMT09PWkpYT1yLXRoaXMuZGlyZWN0aW9uLmdldFBvc2l0aW9uKGQpfWlmKG4hPXMubGVuZ3RoLTEpe3ZhciBsPXNbbisxXTtpZighMD09PWkmJnZvaWQgMD09PWVbbC5pZF18fCExPT09aSl7dmFyIGM9dGhpcy5kaXJlY3Rpb24uZ2V0UG9zaXRpb24obCk7aD1NYXRoLm1pbihoLGMtcil9fXJldHVyblthLGhdfXJldHVyblswLDBdfX0se2tleTpcIl9jZW50ZXJQYXJlbnRcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLmhpZXJhcmNoaWNhbC5wYXJlbnRSZWZlcmVuY2VbdC5pZF0pZm9yKHZhciBlPXRoaXMuaGllcmFyY2hpY2FsLnBhcmVudFJlZmVyZW5jZVt0LmlkXSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBvPWVbaV0sbj10aGlzLmJvZHkubm9kZXNbb10scj10aGlzLmhpZXJhcmNoaWNhbC5jaGlsZHJlblJlZmVyZW5jZVtvXTtpZih2b2lkIDAhPT1yKXt2YXIgcz10aGlzLl9nZXRDZW50ZXJQb3NpdGlvbihyKSxhPXRoaXMuZGlyZWN0aW9uLmdldFBvc2l0aW9uKG4pLGg9JGModGhpcy5fZ2V0U3BhY2VBcm91bmROb2RlKG4pLDIpLGQ9aFswXSxsPWhbMV0sYz1hLXM7KGM8MCYmTWF0aC5hYnMoYyk8bC10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLm5vZGVTcGFjaW5nfHxjPjAmJk1hdGguYWJzKGMpPGQtdGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5ub2RlU3BhY2luZykmJnRoaXMuZGlyZWN0aW9uLnNldFBvc2l0aW9uKG4scyl9fX19LHtrZXk6XCJfcGxhY2VOb2Rlc0J5SGllcmFyY2h5XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlIGluIHRoaXMucG9zaXRpb25lZE5vZGVzPXt9LHQpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkpe3ZhciBpLG89bXUodFtlXSk7bz10aGlzLl9pbmRleEFycmF5VG9Ob2RlcyhvKSxHTyhpPXRoaXMuZGlyZWN0aW9uKS5jYWxsKGksbyk7Zm9yKHZhciBuPTAscj0wO3I8by5sZW5ndGg7cisrKXt2YXIgcz1vW3JdO2lmKHZvaWQgMD09PXRoaXMucG9zaXRpb25lZE5vZGVzW3MuaWRdKXt2YXIgYT10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLm5vZGVTcGFjaW5nLGg9YSpuO24+MCYmKGg9dGhpcy5kaXJlY3Rpb24uZ2V0UG9zaXRpb24ob1tyLTFdKSthKSx0aGlzLmRpcmVjdGlvbi5zZXRQb3NpdGlvbihzLGgsZSksdGhpcy5fdmFsaWRhdGVQb3NpdGlvbkFuZENvbnRpbnVlKHMsZSxoKSxuKyt9fX19fSx7a2V5OlwiX3BsYWNlQnJhbmNoTm9kZXNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpLG89dGhpcy5oaWVyYXJjaGljYWwuY2hpbGRyZW5SZWZlcmVuY2VbdF07aWYodm9pZCAwIT09byl7Zm9yKHZhciBuPVtdLHI9MDtyPG8ubGVuZ3RoO3IrKyluLnB1c2godGhpcy5ib2R5Lm5vZGVzW29bcl1dKTtHTyhpPXRoaXMuZGlyZWN0aW9uKS5jYWxsKGksbik7Zm9yKHZhciBzPTA7czxuLmxlbmd0aDtzKyspe3ZhciBhPW5bc10saD10aGlzLmhpZXJhcmNoaWNhbC5sZXZlbHNbYS5pZF07aWYoIShoPmUmJnZvaWQgMD09PXRoaXMucG9zaXRpb25lZE5vZGVzW2EuaWRdKSlyZXR1cm47dmFyIGQ9dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5ub2RlU3BhY2luZyxsPXZvaWQgMDtsPTA9PT1zP3RoaXMuZGlyZWN0aW9uLmdldFBvc2l0aW9uKHRoaXMuYm9keS5ub2Rlc1t0XSk6dGhpcy5kaXJlY3Rpb24uZ2V0UG9zaXRpb24obltzLTFdKStkLHRoaXMuZGlyZWN0aW9uLnNldFBvc2l0aW9uKGEsbCxoKSx0aGlzLl92YWxpZGF0ZVBvc2l0aW9uQW5kQ29udGludWUoYSxoLGwpfXZhciBjPXRoaXMuX2dldENlbnRlclBvc2l0aW9uKG4pO3RoaXMuZGlyZWN0aW9uLnNldFBvc2l0aW9uKHRoaXMuYm9keS5ub2Rlc1t0XSxjLGUpfX19LHtrZXk6XCJfdmFsaWRhdGVQb3NpdGlvbkFuZENvbnRpbnVlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLGkpe2lmKHRoaXMuaGllcmFyY2hpY2FsLmlzVHJlZSl7aWYodm9pZCAwIT09dGhpcy5sYXN0Tm9kZU9uTGV2ZWxbZV0pe3ZhciBvPXRoaXMuZGlyZWN0aW9uLmdldFBvc2l0aW9uKHRoaXMuYm9keS5ub2Rlc1t0aGlzLmxhc3ROb2RlT25MZXZlbFtlXV0pO2lmKGktbzx0aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLm5vZGVTcGFjaW5nKXt2YXIgbj1vK3RoaXMub3B0aW9ucy5oaWVyYXJjaGljYWwubm9kZVNwYWNpbmctaSxyPXRoaXMuX2ZpbmRDb21tb25QYXJlbnQodGhpcy5sYXN0Tm9kZU9uTGV2ZWxbZV0sdC5pZCk7dGhpcy5fc2hpZnRCbG9jayhyLndpdGhDaGlsZCxuKX19dGhpcy5sYXN0Tm9kZU9uTGV2ZWxbZV09dC5pZCx0aGlzLnBvc2l0aW9uZWROb2Rlc1t0LmlkXT0hMCx0aGlzLl9wbGFjZUJyYW5jaE5vZGVzKHQuaWQsZSl9fX0se2tleTpcIl9pbmRleEFycmF5VG9Ob2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxpPTA7aTx0Lmxlbmd0aDtpKyspZS5wdXNoKHRoaXMuYm9keS5ub2Rlc1t0W2ldXSk7cmV0dXJuIGV9fSx7a2V5OlwiX2dldERpc3RyaWJ1dGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZSxpPXt9O2Zvcih0IGluIHRoaXMuYm9keS5ub2RlcylpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ib2R5Lm5vZGVzLHQpKXtlPXRoaXMuYm9keS5ub2Rlc1t0XTt2YXIgbz12b2lkIDA9PT10aGlzLmhpZXJhcmNoaWNhbC5sZXZlbHNbdF0/MDp0aGlzLmhpZXJhcmNoaWNhbC5sZXZlbHNbdF07dGhpcy5kaXJlY3Rpb24uZml4KGUsbyksdm9pZCAwPT09aVtvXSYmKGlbb109e30pLGlbb11bdF09ZX1yZXR1cm4gaX19LHtrZXk6XCJfZ2V0QWN0aXZlRWRnZXNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLGk9W107cmV0dXJuIFd5KHQuZWRnZXMsKGZ1bmN0aW9uKHQpe3ZhciBvOy0xIT09enAobz1lLmJvZHkuZWRnZUluZGljZXMpLmNhbGwobyx0LmlkKSYmaS5wdXNoKHQpfSkpLGl9fSx7a2V5OlwiX2dldEh1YlNpemVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9e307V3kodGhpcy5ib2R5Lm5vZGVJbmRpY2VzLChmdW5jdGlvbihpKXt2YXIgbz10LmJvZHkubm9kZXNbaV0sbj10Ll9nZXRBY3RpdmVFZGdlcyhvKS5sZW5ndGg7ZVtuXT0hMH0pKTt2YXIgaT1bXTtyZXR1cm4gV3koZSwoZnVuY3Rpb24odCl7aS5wdXNoKE51bWJlcih0KSl9KSksR08oZkMpLmNhbGwoZkMsaSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS10fSkpLGl9fSx7a2V5OlwiX2RldGVybWluZUxldmVsc0J5SHVic2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMsZT1mdW5jdGlvbihlLGkpe3QuaGllcmFyY2hpY2FsLmxldmVsRG93bnN0cmVhbShlLGkpfSxpPXRoaXMuX2dldEh1YlNpemVzKCksbz1mdW5jdGlvbihvKXt2YXIgbj1pW29dO2lmKDA9PT1uKXJldHVyblwiYnJlYWtcIjtXeSh0LmJvZHkubm9kZUluZGljZXMsKGZ1bmN0aW9uKGkpe3ZhciBvPXQuYm9keS5ub2Rlc1tpXTtuPT09dC5fZ2V0QWN0aXZlRWRnZXMobykubGVuZ3RoJiZ0Ll9jcmF3bE5ldHdvcmsoZSxpKX0pKX0sbj0wO248aS5sZW5ndGg7KytuKXtpZihcImJyZWFrXCI9PT1vKG4pKWJyZWFrfX19LHtrZXk6XCJfZGV0ZXJtaW5lTGV2ZWxzQ3VzdG9tQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5fY3Jhd2xOZXR3b3JrKChmdW5jdGlvbihlLGksbyl7dmFyIG49dC5oaWVyYXJjaGljYWwubGV2ZWxzW2UuaWRdO3ZvaWQgMD09PW4mJihuPXQuaGllcmFyY2hpY2FsLmxldmVsc1tlLmlkXT0xZTUpO3ZhciByPShHeC5jbG9uZU9wdGlvbnMoZSxcIm5vZGVcIiksR3guY2xvbmVPcHRpb25zKGksXCJub2RlXCIpLHZvaWQgR3guY2xvbmVPcHRpb25zKG8sXCJlZGdlXCIpKTt0LmhpZXJhcmNoaWNhbC5sZXZlbHNbaS5pZF09bityfSkpLHRoaXMuaGllcmFyY2hpY2FsLnNldE1pbkxldmVsVG9aZXJvKHRoaXMuYm9keS5ub2Rlcyl9fSx7a2V5OlwiX2RldGVybWluZUxldmVsc0RpcmVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMsaT1jQyh0PXRoaXMuYm9keS5ub2RlSW5kaWNlcykuY2FsbCh0LChmdW5jdGlvbih0LGkpe3JldHVybiB0LnNldChpLGUuYm9keS5ub2Rlc1tpXSksdH0pLG5ldyBFdyk7XCJyb290c1wiPT09dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5zaGFrZVRvd2FyZHM/dGhpcy5oaWVyYXJjaGljYWwubGV2ZWxzPWZ1bmN0aW9uKHQpe3JldHVybiBUQygoZnVuY3Rpb24oZSl7dmFyIGksbztyZXR1cm4gRUMoaT1ZZihvPWUuZWRnZXMpLmNhbGwobywoZnVuY3Rpb24oZSl7cmV0dXJuIHQuaGFzKGUudG9JZCl9KSkpLmNhbGwoaSwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZnJvbT09PWV9KSl9KSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gZTx0fSksXCJ0b1wiLHQpfShpKTp0aGlzLmhpZXJhcmNoaWNhbC5sZXZlbHM9ZnVuY3Rpb24odCl7cmV0dXJuIFRDKChmdW5jdGlvbihlKXt2YXIgaSxvO3JldHVybiBFQyhpPVlmKG89ZS5lZGdlcykuY2FsbChvLChmdW5jdGlvbihlKXtyZXR1cm4gdC5oYXMoZS50b0lkKX0pKSkuY2FsbChpLChmdW5jdGlvbih0KXtyZXR1cm4gdC50bz09PWV9KSl9KSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gZT50fSksXCJmcm9tXCIsdCl9KGkpLHRoaXMuaGllcmFyY2hpY2FsLnNldE1pbkxldmVsVG9aZXJvKHRoaXMuYm9keS5ub2Rlcyl9fSx7a2V5OlwiX2dlbmVyYXRlTWFwXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuX2NyYXdsTmV0d29yaygoZnVuY3Rpb24oZSxpKXt0LmhpZXJhcmNoaWNhbC5sZXZlbHNbaS5pZF0+dC5oaWVyYXJjaGljYWwubGV2ZWxzW2UuaWRdJiZ0LmhpZXJhcmNoaWNhbC5hZGRSZWxhdGlvbihlLmlkLGkuaWQpfSkpLHRoaXMuaGllcmFyY2hpY2FsLmNoZWNrSWZUcmVlKCl9fSx7a2V5OlwiX2NyYXdsTmV0d29ya1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpmdW5jdGlvbigpe30saT1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCxvPXt9LG49ZnVuY3Rpb24gaShuLHIpe2lmKHZvaWQgMD09PW9bbi5pZF0pe3ZhciBzO3QuaGllcmFyY2hpY2FsLnNldFRyZWVJbmRleChuLHIpLG9bbi5pZF09ITA7Zm9yKHZhciBhPXQuX2dldEFjdGl2ZUVkZ2VzKG4pLGg9MDtoPGEubGVuZ3RoO2grKyl7dmFyIGQ9YVtoXTshMD09PWQuY29ubmVjdGVkJiYocz1kLnRvSWQ9PW4uaWQ/ZC5mcm9tOmQudG8sbi5pZCE9cy5pZCYmKGUobixzLGQpLGkocyxyKSkpfX19O2lmKHZvaWQgMD09PWkpZm9yKHZhciByPTAscz0wO3M8dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLmxlbmd0aDtzKyspe3ZhciBhPXRoaXMuYm9keS5ub2RlSW5kaWNlc1tzXTtpZih2b2lkIDA9PT1vW2FdKXt2YXIgaD10aGlzLmJvZHkubm9kZXNbYV07bihoLHIpLHIrPTF9fWVsc2V7dmFyIGQ9dGhpcy5ib2R5Lm5vZGVzW2ldO2lmKHZvaWQgMD09PWQpcmV0dXJuIHZvaWQgY29uc29sZS5lcnJvcihcIk5vZGUgbm90IGZvdW5kOlwiLGkpO24oZCl9fX0se2tleTpcIl9zaGlmdEJsb2NrXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLG89e307IWZ1bmN0aW9uIHQobil7aWYoIW9bbl0pe29bbl09ITAsaS5kaXJlY3Rpb24uc2hpZnQobixlKTt2YXIgcj1pLmhpZXJhcmNoaWNhbC5jaGlsZHJlblJlZmVyZW5jZVtuXTtpZih2b2lkIDAhPT1yKWZvcih2YXIgcz0wO3M8ci5sZW5ndGg7cysrKXQocltzXSl9fSh0KX19LHtrZXk6XCJfZmluZENvbW1vblBhcmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcyxvPXt9O3JldHVybiBmdW5jdGlvbiB0KGUsbyl7dmFyIG49aS5oaWVyYXJjaGljYWwucGFyZW50UmVmZXJlbmNlW29dO2lmKHZvaWQgMCE9PW4pZm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBzPW5bcl07ZVtzXT0hMCx0KGUscyl9fShvLHQpLGZ1bmN0aW9uIHQoZSxvKXt2YXIgbj1pLmhpZXJhcmNoaWNhbC5wYXJlbnRSZWZlcmVuY2Vbb107aWYodm9pZCAwIT09bilmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIHM9bltyXTtpZih2b2lkIDAhPT1lW3NdKXJldHVybntmb3VuZFBhcmVudDpzLHdpdGhDaGlsZDpvfTt2YXIgYT10KGUscyk7aWYobnVsbCE9PWEuZm91bmRQYXJlbnQpcmV0dXJuIGF9cmV0dXJue2ZvdW5kUGFyZW50Om51bGwsd2l0aENoaWxkOm99fShvLGUpfX0se2tleTpcInNldERpcmVjdGlvblN0cmF0ZWd5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1cIlVEXCI9PT10aGlzLm9wdGlvbnMuaGllcmFyY2hpY2FsLmRpcmVjdGlvbnx8XCJEVVwiPT09dGhpcy5vcHRpb25zLmhpZXJhcmNoaWNhbC5kaXJlY3Rpb247dGhpcy5kaXJlY3Rpb249dD9uZXcgZ0ModGhpcyk6bmV3IHlDKHRoaXMpfX0se2tleTpcIl9nZXRDZW50ZXJQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xZTksaT0tMWU5LG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIG49dm9pZCAwO2lmKHZvaWQgMCE9PXRbb10uaWQpbj10W29dO2Vsc2V7dmFyIHI9dFtvXTtuPXRoaXMuYm9keS5ub2Rlc1tyXX12YXIgcz10aGlzLmRpcmVjdGlvbi5nZXRQb3NpdGlvbihuKTtlPU1hdGgubWluKGUscyksaT1NYXRoLm1heChpLHMpfXJldHVybi41KihlK2kpfX1dKSx0fSgpO2Z1bmN0aW9uIERDKHQsZSl7dmFyIGk9dm9pZCAwIT09dHUmJm9oKHQpfHx0W1wiQEBpdGVyYXRvclwiXTtpZighaSl7aWYoaHUodCl8fChpPWZ1bmN0aW9uKHQsZSl7dmFyIGk7aWYoIXQpcmV0dXJuO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXJldHVybiBCQyh0LGUpO3ZhciBvPWF1KGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKS5jYWxsKGksOCwtMSk7XCJPYmplY3RcIj09PW8mJnQuY29uc3RydWN0b3ImJihvPXQuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW98fFwiU2V0XCI9PT1vKXJldHVybiBqYSh0KTtpZihcIkFyZ3VtZW50c1wiPT09b3x8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobykpcmV0dXJuIEJDKHQsZSl9KHQpKXx8ZSYmdCYmXCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoKXtpJiYodD1pKTt2YXIgbz0wLG49ZnVuY3Rpb24oKXt9O3JldHVybntzOm4sbjpmdW5jdGlvbigpe3JldHVybiBvPj10Lmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6dFtvKytdfX0sZTpmdW5jdGlvbih0KXt0aHJvdyB0fSxmOm59fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgcixzPSEwLGE9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtpPWkuY2FsbCh0KX0sbjpmdW5jdGlvbigpe3ZhciB0PWkubmV4dCgpO3JldHVybiBzPXQuZG9uZSx0fSxlOmZ1bmN0aW9uKHQpe2E9ITAscj10fSxmOmZ1bmN0aW9uKCl7dHJ5e3N8fG51bGw9PWkucmV0dXJufHxpLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyByfX19fWZ1bmN0aW9uIEJDKHQsZSl7KG51bGw9PWV8fGU+dC5sZW5ndGgpJiYoZT10Lmxlbmd0aCk7Zm9yKHZhciBpPTAsbz1uZXcgQXJyYXkoZSk7aTxlO2krKylvW2ldPXRbaV07cmV0dXJuIG99dmFyIElDPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyxuKXt2YXIgcixzLGE9dGhpcztYbCh0aGlzLHQpLHRoaXMuYm9keT1lLHRoaXMuY2FudmFzPWksdGhpcy5zZWxlY3Rpb25IYW5kbGVyPW8sdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXI9bix0aGlzLmVkaXRNb2RlPSExLHRoaXMubWFuaXB1bGF0aW9uRGl2PXZvaWQgMCx0aGlzLmVkaXRNb2RlRGl2PXZvaWQgMCx0aGlzLmNsb3NlRGl2PXZvaWQgMCx0aGlzLl9kb21FdmVudExpc3RlbmVyQ2xlYW51cFF1ZXVlPVtdLHRoaXMudGVtcG9yYXJ5VUlGdW5jdGlvbnM9e30sdGhpcy50ZW1wb3JhcnlFdmVudEZ1bmN0aW9ucz1bXSx0aGlzLnRvdWNoVGltZT0wLHRoaXMudGVtcG9yYXJ5SWRzPXtub2RlczpbXSxlZGdlczpbXX0sdGhpcy5ndWlFbmFibGVkPSExLHRoaXMuaW5Nb2RlPSExLHRoaXMuc2VsZWN0ZWRDb250cm9sTm9kZT12b2lkIDAsdGhpcy5vcHRpb25zPXt9LHRoaXMuZGVmYXVsdE9wdGlvbnM9e2VuYWJsZWQ6ITEsaW5pdGlhbGx5QWN0aXZlOiExLGFkZE5vZGU6ITAsYWRkRWRnZTohMCxlZGl0Tm9kZTp2b2lkIDAsZWRpdEVkZ2U6ITAsZGVsZXRlTm9kZTohMCxkZWxldGVFZGdlOiEwLGNvbnRyb2xOb2RlU3R5bGU6e3NoYXBlOlwiZG90XCIsc2l6ZTo2LGNvbG9yOntiYWNrZ3JvdW5kOlwiI2ZmMDAwMFwiLGJvcmRlcjpcIiMzYzNjM2NcIixoaWdobGlnaHQ6e2JhY2tncm91bmQ6XCIjMDdmOTY4XCIsYm9yZGVyOlwiIzNjM2MzY1wifX0sYm9yZGVyV2lkdGg6Mixib3JkZXJXaWR0aFNlbGVjdGVkOjJ9fSxmbyh0aGlzLm9wdGlvbnMsdGhpcy5kZWZhdWx0T3B0aW9ucyksdGhpcy5ib2R5LmVtaXR0ZXIub24oXCJkZXN0cm95XCIsKGZ1bmN0aW9uKCl7YS5fY2xlYW4oKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9kYXRhQ2hhbmdlZFwiLEZvKHI9dGhpcy5fcmVzdG9yZSkuY2FsbChyLHRoaXMpKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9yZXNldERhdGFcIixGbyhzPXRoaXMuX3Jlc3RvcmUpLmNhbGwocyx0aGlzKSl9cmV0dXJuICRsKHQsW3trZXk6XCJfcmVzdG9yZVwiLHZhbHVlOmZ1bmN0aW9uKCl7ITEhPT10aGlzLmluTW9kZSYmKCEwPT09dGhpcy5vcHRpb25zLmluaXRpYWxseUFjdGl2ZT90aGlzLmVuYWJsZUVkaXRNb2RlKCk6dGhpcy5kaXNhYmxlRWRpdE1vZGUoKSl9fSx7a2V5Olwic2V0T3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXt2b2lkIDAhPT1lJiYodm9pZCAwIT09ZS5sb2NhbGU/dGhpcy5vcHRpb25zLmxvY2FsZT1lLmxvY2FsZTp0aGlzLm9wdGlvbnMubG9jYWxlPWkubG9jYWxlLHZvaWQgMCE9PWUubG9jYWxlcz90aGlzLm9wdGlvbnMubG9jYWxlcz1lLmxvY2FsZXM6dGhpcy5vcHRpb25zLmxvY2FsZXM9aS5sb2NhbGVzKSx2b2lkIDAhPT10JiYoXCJib29sZWFuXCI9PXR5cGVvZiB0P3RoaXMub3B0aW9ucy5lbmFibGVkPXQ6KHRoaXMub3B0aW9ucy5lbmFibGVkPSEwLFJ5KHRoaXMub3B0aW9ucyx0KSksITA9PT10aGlzLm9wdGlvbnMuaW5pdGlhbGx5QWN0aXZlJiYodGhpcy5lZGl0TW9kZT0hMCksdGhpcy5fc2V0dXAoKSl9fSx7a2V5OlwidG9nZ2xlRWRpdE1vZGVcIix2YWx1ZTpmdW5jdGlvbigpeyEwPT09dGhpcy5lZGl0TW9kZT90aGlzLmRpc2FibGVFZGl0TW9kZSgpOnRoaXMuZW5hYmxlRWRpdE1vZGUoKX19LHtrZXk6XCJlbmFibGVFZGl0TW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5lZGl0TW9kZT0hMCx0aGlzLl9jbGVhbigpLCEwPT09dGhpcy5ndWlFbmFibGVkJiYodGhpcy5tYW5pcHVsYXRpb25EaXYuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdGhpcy5jbG9zZURpdi5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLmVkaXRNb2RlRGl2LnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy5zaG93TWFuaXB1bGF0b3JUb29sYmFyKCkpfX0se2tleTpcImRpc2FibGVFZGl0TW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5lZGl0TW9kZT0hMSx0aGlzLl9jbGVhbigpLCEwPT09dGhpcy5ndWlFbmFibGVkJiYodGhpcy5tYW5pcHVsYXRpb25EaXYuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLmNsb3NlRGl2LnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy5lZGl0TW9kZURpdi5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLl9jcmVhdGVFZGl0QnV0dG9uKCkpfX0se2tleTpcInNob3dNYW5pcHVsYXRvclRvb2xiYXJcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuX2NsZWFuKCksdGhpcy5tYW5pcHVsYXRpb25ET009e30sITA9PT10aGlzLmd1aUVuYWJsZWQpe3ZhciB0LGU7dGhpcy5lZGl0TW9kZT0hMCx0aGlzLm1hbmlwdWxhdGlvbkRpdi5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLmNsb3NlRGl2LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiO3ZhciBpPXRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZXRTZWxlY3RlZE5vZGVDb3VudCgpLG89dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldFNlbGVjdGVkRWRnZUNvdW50KCksbj1pK28scj10aGlzLm9wdGlvbnMubG9jYWxlc1t0aGlzLm9wdGlvbnMubG9jYWxlXSxzPSExOyExIT09dGhpcy5vcHRpb25zLmFkZE5vZGUmJih0aGlzLl9jcmVhdGVBZGROb2RlQnV0dG9uKHIpLHM9ITApLCExIT09dGhpcy5vcHRpb25zLmFkZEVkZ2UmJighMD09PXM/dGhpcy5fY3JlYXRlU2VwZXJhdG9yKDEpOnM9ITAsdGhpcy5fY3JlYXRlQWRkRWRnZUJ1dHRvbihyKSksMT09PWkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMub3B0aW9ucy5lZGl0Tm9kZT8oITA9PT1zP3RoaXMuX2NyZWF0ZVNlcGVyYXRvcigyKTpzPSEwLHRoaXMuX2NyZWF0ZUVkaXROb2RlQnV0dG9uKHIpKToxPT09byYmMD09PWkmJiExIT09dGhpcy5vcHRpb25zLmVkaXRFZGdlJiYoITA9PT1zP3RoaXMuX2NyZWF0ZVNlcGVyYXRvcigzKTpzPSEwLHRoaXMuX2NyZWF0ZUVkaXRFZGdlQnV0dG9uKHIpKSwwIT09biYmKGk+MCYmITEhPT10aGlzLm9wdGlvbnMuZGVsZXRlTm9kZXx8MD09PWkmJiExIT09dGhpcy5vcHRpb25zLmRlbGV0ZUVkZ2UpJiYoITA9PT1zJiZ0aGlzLl9jcmVhdGVTZXBlcmF0b3IoNCksdGhpcy5fY3JlYXRlRGVsZXRlQnV0dG9uKHIpKSx0aGlzLl9iaW5kRWxlbWVudEV2ZW50cyh0aGlzLmNsb3NlRGl2LEZvKHQ9dGhpcy50b2dnbGVFZGl0TW9kZSkuY2FsbCh0LHRoaXMpKSx0aGlzLl90ZW1wb3JhcnlCaW5kRXZlbnQoXCJzZWxlY3RcIixGbyhlPXRoaXMuc2hvd01hbmlwdWxhdG9yVG9vbGJhcikuY2FsbChlLHRoaXMpKX10aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlZHJhd1wiKX19LHtrZXk6XCJhZGROb2RlTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ7aWYoITAhPT10aGlzLmVkaXRNb2RlJiZ0aGlzLmVuYWJsZUVkaXRNb2RlKCksdGhpcy5fY2xlYW4oKSx0aGlzLmluTW9kZT1cImFkZE5vZGVcIiwhMD09PXRoaXMuZ3VpRW5hYmxlZCl7dmFyIGUsaT10aGlzLm9wdGlvbnMubG9jYWxlc1t0aGlzLm9wdGlvbnMubG9jYWxlXTt0aGlzLm1hbmlwdWxhdGlvbkRPTT17fSx0aGlzLl9jcmVhdGVCYWNrQnV0dG9uKGkpLHRoaXMuX2NyZWF0ZVNlcGVyYXRvcigpLHRoaXMuX2NyZWF0ZURlc2NyaXB0aW9uKGkuYWRkRGVzY3JpcHRpb258fHRoaXMub3B0aW9ucy5sb2NhbGVzLmVuLmFkZERlc2NyaXB0aW9uKSx0aGlzLl9iaW5kRWxlbWVudEV2ZW50cyh0aGlzLmNsb3NlRGl2LEZvKGU9dGhpcy50b2dnbGVFZGl0TW9kZSkuY2FsbChlLHRoaXMpKX10aGlzLl90ZW1wb3JhcnlCaW5kRXZlbnQoXCJjbGlja1wiLEZvKHQ9dGhpcy5fcGVyZm9ybUFkZE5vZGUpLmNhbGwodCx0aGlzKSl9fSx7a2V5OlwiZWRpdE5vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7ITAhPT10aGlzLmVkaXRNb2RlJiZ0aGlzLmVuYWJsZUVkaXRNb2RlKCksdGhpcy5fY2xlYW4oKTt2YXIgZT10aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2V0U2VsZWN0ZWROb2RlcygpWzBdO2lmKHZvaWQgMCE9PWUpe2lmKHRoaXMuaW5Nb2RlPVwiZWRpdE5vZGVcIixcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzLm9wdGlvbnMuZWRpdE5vZGUpdGhyb3cgbmV3IEVycm9yKFwiTm8gZnVuY3Rpb24gaGFzIGJlZW4gY29uZmlndXJlZCB0byBoYW5kbGUgdGhlIGVkaXRpbmcgb2Ygbm9kZXMuXCIpO2lmKCEwIT09ZS5pc0NsdXN0ZXIpe3ZhciBpPVJ5KHt9LGUub3B0aW9ucywhMSk7aWYoaS54PWUueCxpLnk9ZS55LDIhPT10aGlzLm9wdGlvbnMuZWRpdE5vZGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIlRoZSBmdW5jdGlvbiBmb3IgZWRpdCBkb2VzIG5vdCBzdXBwb3J0IHR3byBhcmd1bWVudHMgKGRhdGEsIGNhbGxiYWNrKVwiKTt0aGlzLm9wdGlvbnMuZWRpdE5vZGUoaSwoZnVuY3Rpb24oZSl7bnVsbCE9ZSYmXCJlZGl0Tm9kZVwiPT09dC5pbk1vZGUmJnQuYm9keS5kYXRhLm5vZGVzLmdldERhdGFTZXQoKS51cGRhdGUoZSksdC5zaG93TWFuaXB1bGF0b3JUb29sYmFyKCl9KSl9ZWxzZSBhbGVydCh0aGlzLm9wdGlvbnMubG9jYWxlc1t0aGlzLm9wdGlvbnMubG9jYWxlXS5lZGl0Q2x1c3RlckVycm9yfHx0aGlzLm9wdGlvbnMubG9jYWxlcy5lbi5lZGl0Q2x1c3RlckVycm9yKX1lbHNlIHRoaXMuc2hvd01hbmlwdWxhdG9yVG9vbGJhcigpfX0se2tleTpcImFkZEVkZ2VNb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlLGksbyxuO2lmKCEwIT09dGhpcy5lZGl0TW9kZSYmdGhpcy5lbmFibGVFZGl0TW9kZSgpLHRoaXMuX2NsZWFuKCksdGhpcy5pbk1vZGU9XCJhZGRFZGdlXCIsITA9PT10aGlzLmd1aUVuYWJsZWQpe3ZhciByLHM9dGhpcy5vcHRpb25zLmxvY2FsZXNbdGhpcy5vcHRpb25zLmxvY2FsZV07dGhpcy5tYW5pcHVsYXRpb25ET009e30sdGhpcy5fY3JlYXRlQmFja0J1dHRvbihzKSx0aGlzLl9jcmVhdGVTZXBlcmF0b3IoKSx0aGlzLl9jcmVhdGVEZXNjcmlwdGlvbihzLmVkZ2VEZXNjcmlwdGlvbnx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uZWRnZURlc2NyaXB0aW9uKSx0aGlzLl9iaW5kRWxlbWVudEV2ZW50cyh0aGlzLmNsb3NlRGl2LEZvKHI9dGhpcy50b2dnbGVFZGl0TW9kZSkuY2FsbChyLHRoaXMpKX10aGlzLl90ZW1wb3JhcnlCaW5kVUkoXCJvblRvdWNoXCIsRm8odD10aGlzLl9oYW5kbGVDb25uZWN0KS5jYWxsKHQsdGhpcykpLHRoaXMuX3RlbXBvcmFyeUJpbmRVSShcIm9uRHJhZ0VuZFwiLEZvKGU9dGhpcy5fZmluaXNoQ29ubmVjdCkuY2FsbChlLHRoaXMpKSx0aGlzLl90ZW1wb3JhcnlCaW5kVUkoXCJvbkRyYWdcIixGbyhpPXRoaXMuX2RyYWdDb250cm9sTm9kZSkuY2FsbChpLHRoaXMpKSx0aGlzLl90ZW1wb3JhcnlCaW5kVUkoXCJvblJlbGVhc2VcIixGbyhvPXRoaXMuX2ZpbmlzaENvbm5lY3QpLmNhbGwobyx0aGlzKSksdGhpcy5fdGVtcG9yYXJ5QmluZFVJKFwib25EcmFnU3RhcnRcIixGbyhuPXRoaXMuX2RyYWdTdGFydEVkZ2UpLmNhbGwobix0aGlzKSksdGhpcy5fdGVtcG9yYXJ5QmluZFVJKFwib25Ib2xkXCIsKGZ1bmN0aW9uKCl7fSkpfX0se2tleTpcImVkaXRFZGdlTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoITAhPT10aGlzLmVkaXRNb2RlJiZ0aGlzLmVuYWJsZUVkaXRNb2RlKCksdGhpcy5fY2xlYW4oKSx0aGlzLmluTW9kZT1cImVkaXRFZGdlXCIsXCJvYmplY3RcIiE9PVFjKHRoaXMub3B0aW9ucy5lZGl0RWRnZSl8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXMub3B0aW9ucy5lZGl0RWRnZS5lZGl0V2l0aG91dERyYWd8fCh0aGlzLmVkZ2VCZWluZ0VkaXRlZElkPXRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZXRTZWxlY3RlZEVkZ2VJZHMoKVswXSx2b2lkIDA9PT10aGlzLmVkZ2VCZWluZ0VkaXRlZElkKSl7aWYoITA9PT10aGlzLmd1aUVuYWJsZWQpe3ZhciB0LGU9dGhpcy5vcHRpb25zLmxvY2FsZXNbdGhpcy5vcHRpb25zLmxvY2FsZV07dGhpcy5tYW5pcHVsYXRpb25ET009e30sdGhpcy5fY3JlYXRlQmFja0J1dHRvbihlKSx0aGlzLl9jcmVhdGVTZXBlcmF0b3IoKSx0aGlzLl9jcmVhdGVEZXNjcmlwdGlvbihlLmVkaXRFZGdlRGVzY3JpcHRpb258fHRoaXMub3B0aW9ucy5sb2NhbGVzLmVuLmVkaXRFZGdlRGVzY3JpcHRpb24pLHRoaXMuX2JpbmRFbGVtZW50RXZlbnRzKHRoaXMuY2xvc2VEaXYsRm8odD10aGlzLnRvZ2dsZUVkaXRNb2RlKS5jYWxsKHQsdGhpcykpfWlmKHRoaXMuZWRnZUJlaW5nRWRpdGVkSWQ9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldFNlbGVjdGVkRWRnZUlkcygpWzBdLHZvaWQgMCE9PXRoaXMuZWRnZUJlaW5nRWRpdGVkSWQpe3ZhciBpLG8sbixyLHM9dGhpcy5ib2R5LmVkZ2VzW3RoaXMuZWRnZUJlaW5nRWRpdGVkSWRdLGE9dGhpcy5fZ2V0TmV3VGFyZ2V0Tm9kZShzLmZyb20ueCxzLmZyb20ueSksaD10aGlzLl9nZXROZXdUYXJnZXROb2RlKHMudG8ueCxzLnRvLnkpO3RoaXMudGVtcG9yYXJ5SWRzLm5vZGVzLnB1c2goYS5pZCksdGhpcy50ZW1wb3JhcnlJZHMubm9kZXMucHVzaChoLmlkKSx0aGlzLmJvZHkubm9kZXNbYS5pZF09YSx0aGlzLmJvZHkubm9kZUluZGljZXMucHVzaChhLmlkKSx0aGlzLmJvZHkubm9kZXNbaC5pZF09aCx0aGlzLmJvZHkubm9kZUluZGljZXMucHVzaChoLmlkKSx0aGlzLl90ZW1wb3JhcnlCaW5kVUkoXCJvblRvdWNoXCIsRm8oaT10aGlzLl9jb250cm9sTm9kZVRvdWNoKS5jYWxsKGksdGhpcykpLHRoaXMuX3RlbXBvcmFyeUJpbmRVSShcIm9uVGFwXCIsKGZ1bmN0aW9uKCl7fSkpLHRoaXMuX3RlbXBvcmFyeUJpbmRVSShcIm9uSG9sZFwiLChmdW5jdGlvbigpe30pKSx0aGlzLl90ZW1wb3JhcnlCaW5kVUkoXCJvbkRyYWdTdGFydFwiLEZvKG89dGhpcy5fY29udHJvbE5vZGVEcmFnU3RhcnQpLmNhbGwobyx0aGlzKSksdGhpcy5fdGVtcG9yYXJ5QmluZFVJKFwib25EcmFnXCIsRm8obj10aGlzLl9jb250cm9sTm9kZURyYWcpLmNhbGwobix0aGlzKSksdGhpcy5fdGVtcG9yYXJ5QmluZFVJKFwib25EcmFnRW5kXCIsRm8ocj10aGlzLl9jb250cm9sTm9kZURyYWdFbmQpLmNhbGwocix0aGlzKSksdGhpcy5fdGVtcG9yYXJ5QmluZFVJKFwib25Nb3VzZU1vdmVcIiwoZnVuY3Rpb24oKXt9KSksdGhpcy5fdGVtcG9yYXJ5QmluZEV2ZW50KFwiYmVmb3JlRHJhd2luZ1wiLChmdW5jdGlvbih0KXt2YXIgZT1zLmVkZ2VUeXBlLmZpbmRCb3JkZXJQb3NpdGlvbnModCk7ITE9PT1hLnNlbGVjdGVkJiYoYS54PWUuZnJvbS54LGEueT1lLmZyb20ueSksITE9PT1oLnNlbGVjdGVkJiYoaC54PWUudG8ueCxoLnk9ZS50by55KX0pKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlZHJhd1wiKX1lbHNlIHRoaXMuc2hvd01hbmlwdWxhdG9yVG9vbGJhcigpfWVsc2V7dmFyIGQ9dGhpcy5ib2R5LmVkZ2VzW3RoaXMuZWRnZUJlaW5nRWRpdGVkSWRdO3RoaXMuX3BlcmZvcm1FZGl0RWRnZShkLmZyb20uaWQsZC50by5pZCl9fX0se2tleTpcImRlbGV0ZVNlbGVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzOyEwIT09dGhpcy5lZGl0TW9kZSYmdGhpcy5lbmFibGVFZGl0TW9kZSgpLHRoaXMuX2NsZWFuKCksdGhpcy5pbk1vZGU9XCJkZWxldGVcIjt2YXIgZT10aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2V0U2VsZWN0ZWROb2RlSWRzKCksaT10aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2V0U2VsZWN0ZWRFZGdlSWRzKCksbz12b2lkIDA7aWYoZS5sZW5ndGg+MCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspaWYoITA9PT10aGlzLmJvZHkubm9kZXNbZVtuXV0uaXNDbHVzdGVyKXJldHVybiB2b2lkIGFsZXJ0KHRoaXMub3B0aW9ucy5sb2NhbGVzW3RoaXMub3B0aW9ucy5sb2NhbGVdLmRlbGV0ZUNsdXN0ZXJFcnJvcnx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uZGVsZXRlQ2x1c3RlckVycm9yKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuZGVsZXRlTm9kZSYmKG89dGhpcy5vcHRpb25zLmRlbGV0ZU5vZGUpfWVsc2UgaS5sZW5ndGg+MCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zLmRlbGV0ZUVkZ2UmJihvPXRoaXMub3B0aW9ucy5kZWxldGVFZGdlKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBvKXt2YXIgcj17bm9kZXM6ZSxlZGdlczppfTtpZigyIT09by5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGZ1bmN0aW9uIGZvciBkZWxldGUgZG9lcyBub3Qgc3VwcG9ydCB0d28gYXJndW1lbnRzIChkYXRhLCBjYWxsYmFjaylcIik7byhyLChmdW5jdGlvbihlKXtudWxsIT1lJiZcImRlbGV0ZVwiPT09dC5pbk1vZGU/KHQuYm9keS5kYXRhLmVkZ2VzLmdldERhdGFTZXQoKS5yZW1vdmUoZS5lZGdlcyksdC5ib2R5LmRhdGEubm9kZXMuZ2V0RGF0YVNldCgpLnJlbW92ZShlLm5vZGVzKSx0LmJvZHkuZW1pdHRlci5lbWl0KFwic3RhcnRTaW11bGF0aW9uXCIpLHQuc2hvd01hbmlwdWxhdG9yVG9vbGJhcigpKToodC5ib2R5LmVtaXR0ZXIuZW1pdChcInN0YXJ0U2ltdWxhdGlvblwiKSx0LnNob3dNYW5pcHVsYXRvclRvb2xiYXIoKSl9KSl9ZWxzZSB0aGlzLmJvZHkuZGF0YS5lZGdlcy5nZXREYXRhU2V0KCkucmVtb3ZlKGkpLHRoaXMuYm9keS5kYXRhLm5vZGVzLmdldERhdGFTZXQoKS5yZW1vdmUoZSksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcInN0YXJ0U2ltdWxhdGlvblwiKSx0aGlzLnNob3dNYW5pcHVsYXRvclRvb2xiYXIoKX19LHtrZXk6XCJfc2V0dXBcIix2YWx1ZTpmdW5jdGlvbigpeyEwPT09dGhpcy5vcHRpb25zLmVuYWJsZWQ/KHRoaXMuZ3VpRW5hYmxlZD0hMCx0aGlzLl9jcmVhdGVXcmFwcGVycygpLCExPT09dGhpcy5lZGl0TW9kZT90aGlzLl9jcmVhdGVFZGl0QnV0dG9uKCk6dGhpcy5zaG93TWFuaXB1bGF0b3JUb29sYmFyKCkpOih0aGlzLl9yZW1vdmVNYW5pcHVsYXRpb25ET00oKSx0aGlzLmd1aUVuYWJsZWQ9ITEpfX0se2tleTpcIl9jcmVhdGVXcmFwcGVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsZTsodm9pZCAwPT09dGhpcy5tYW5pcHVsYXRpb25EaXYmJih0aGlzLm1hbmlwdWxhdGlvbkRpdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMubWFuaXB1bGF0aW9uRGl2LmNsYXNzTmFtZT1cInZpcy1tYW5pcHVsYXRpb25cIiwhMD09PXRoaXMuZWRpdE1vZGU/dGhpcy5tYW5pcHVsYXRpb25EaXYuc3R5bGUuZGlzcGxheT1cImJsb2NrXCI6dGhpcy5tYW5pcHVsYXRpb25EaXYuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLmNhbnZhcy5mcmFtZS5hcHBlbmRDaGlsZCh0aGlzLm1hbmlwdWxhdGlvbkRpdikpLHZvaWQgMD09PXRoaXMuZWRpdE1vZGVEaXYmJih0aGlzLmVkaXRNb2RlRGl2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5lZGl0TW9kZURpdi5jbGFzc05hbWU9XCJ2aXMtZWRpdC1tb2RlXCIsITA9PT10aGlzLmVkaXRNb2RlP3RoaXMuZWRpdE1vZGVEaXYuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjp0aGlzLmVkaXRNb2RlRGl2LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHRoaXMuY2FudmFzLmZyYW1lLmFwcGVuZENoaWxkKHRoaXMuZWRpdE1vZGVEaXYpKSx2b2lkIDA9PT10aGlzLmNsb3NlRGl2KSYmKHRoaXMuY2xvc2VEaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSx0aGlzLmNsb3NlRGl2LmNsYXNzTmFtZT1cInZpcy1jbG9zZVwiLHRoaXMuY2xvc2VEaXYuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLG51bGwhPT0odD1udWxsPT09KGU9dGhpcy5vcHRpb25zLmxvY2FsZXNbdGhpcy5vcHRpb25zLmxvY2FsZV0pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNsb3NlKSYmdm9pZCAwIT09dD90OnRoaXMub3B0aW9ucy5sb2NhbGVzLmVuLmNsb3NlKSx0aGlzLmNsb3NlRGl2LnN0eWxlLmRpc3BsYXk9dGhpcy5tYW5pcHVsYXRpb25EaXYuc3R5bGUuZGlzcGxheSx0aGlzLmNhbnZhcy5mcmFtZS5hcHBlbmRDaGlsZCh0aGlzLmNsb3NlRGl2KSl9fSx7a2V5OlwiX2dldE5ld1RhcmdldE5vZGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPVJ5KHt9LHRoaXMub3B0aW9ucy5jb250cm9sTm9kZVN0eWxlKTtpLmlkPVwidGFyZ2V0Tm9kZVwiK1h4KCksaS5oaWRkZW49ITEsaS5waHlzaWNzPSExLGkueD10LGkueT1lO3ZhciBvPXRoaXMuYm9keS5mdW5jdGlvbnMuY3JlYXRlTm9kZShpKTtyZXR1cm4gby5zaGFwZS5ib3VuZGluZ0JveD17bGVmdDp0LHJpZ2h0OnQsdG9wOmUsYm90dG9tOmV9LG99fSx7a2V5OlwiX2NyZWF0ZUVkaXRCdXR0b25cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0O3RoaXMuX2NsZWFuKCksdGhpcy5tYW5pcHVsYXRpb25ET009e30sRHkodGhpcy5lZGl0TW9kZURpdik7dmFyIGU9dGhpcy5vcHRpb25zLmxvY2FsZXNbdGhpcy5vcHRpb25zLmxvY2FsZV0saT10aGlzLl9jcmVhdGVCdXR0b24oXCJlZGl0TW9kZVwiLFwidmlzLWVkaXQgdmlzLWVkaXQtbW9kZVwiLGUuZWRpdHx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uZWRpdCk7dGhpcy5lZGl0TW9kZURpdi5hcHBlbmRDaGlsZChpKSx0aGlzLl9iaW5kRWxlbWVudEV2ZW50cyhpLEZvKHQ9dGhpcy50b2dnbGVFZGl0TW9kZSkuY2FsbCh0LHRoaXMpKX19LHtrZXk6XCJfY2xlYW5cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaW5Nb2RlPSExLCEwPT09dGhpcy5ndWlFbmFibGVkJiYoRHkodGhpcy5lZGl0TW9kZURpdiksRHkodGhpcy5tYW5pcHVsYXRpb25EaXYpLHRoaXMuX2NsZWFudXBET01FdmVudExpc3RlbmVycygpKSx0aGlzLl9jbGVhbnVwVGVtcG9yYXJ5Tm9kZXNBbmRFZGdlcygpLHRoaXMuX3VuYmluZFRlbXBvcmFyeVVJcygpLHRoaXMuX3VuYmluZFRlbXBvcmFyeUV2ZW50cygpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJyZXN0b3JlUGh5c2ljc1wiKX19LHtrZXk6XCJfY2xlYW51cERPTUV2ZW50TGlzdGVuZXJzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlLGk9REModWYodD10aGlzLl9kb21FdmVudExpc3RlbmVyQ2xlYW51cFF1ZXVlKS5jYWxsKHQsMCkpO3RyeXtmb3IoaS5zKCk7IShlPWkubigpKS5kb25lOyl7KDAsZS52YWx1ZSkoKX19Y2F0Y2godCl7aS5lKHQpfWZpbmFsbHl7aS5mKCl9fX0se2tleTpcIl9yZW1vdmVNYW5pcHVsYXRpb25ET01cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2NsZWFuKCksRHkodGhpcy5tYW5pcHVsYXRpb25EaXYpLER5KHRoaXMuZWRpdE1vZGVEaXYpLER5KHRoaXMuY2xvc2VEaXYpLHRoaXMubWFuaXB1bGF0aW9uRGl2JiZ0aGlzLmNhbnZhcy5mcmFtZS5yZW1vdmVDaGlsZCh0aGlzLm1hbmlwdWxhdGlvbkRpdiksdGhpcy5lZGl0TW9kZURpdiYmdGhpcy5jYW52YXMuZnJhbWUucmVtb3ZlQ2hpbGQodGhpcy5lZGl0TW9kZURpdiksdGhpcy5jbG9zZURpdiYmdGhpcy5jYW52YXMuZnJhbWUucmVtb3ZlQ2hpbGQodGhpcy5jbG9zZURpdiksdGhpcy5tYW5pcHVsYXRpb25EaXY9dm9pZCAwLHRoaXMuZWRpdE1vZGVEaXY9dm9pZCAwLHRoaXMuY2xvc2VEaXY9dm9pZCAwfX0se2tleTpcIl9jcmVhdGVTZXBlcmF0b3JcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToxO3RoaXMubWFuaXB1bGF0aW9uRE9NW1wic2VwZXJhdG9yTGluZURpdlwiK3RdPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5tYW5pcHVsYXRpb25ET01bXCJzZXBlcmF0b3JMaW5lRGl2XCIrdF0uY2xhc3NOYW1lPVwidmlzLXNlcGFyYXRvci1saW5lXCIsdGhpcy5tYW5pcHVsYXRpb25EaXYuYXBwZW5kQ2hpbGQodGhpcy5tYW5pcHVsYXRpb25ET01bXCJzZXBlcmF0b3JMaW5lRGl2XCIrdF0pfX0se2tleTpcIl9jcmVhdGVBZGROb2RlQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsaT10aGlzLl9jcmVhdGVCdXR0b24oXCJhZGROb2RlXCIsXCJ2aXMtYWRkXCIsdC5hZGROb2RlfHx0aGlzLm9wdGlvbnMubG9jYWxlcy5lbi5hZGROb2RlKTt0aGlzLm1hbmlwdWxhdGlvbkRpdi5hcHBlbmRDaGlsZChpKSx0aGlzLl9iaW5kRWxlbWVudEV2ZW50cyhpLEZvKGU9dGhpcy5hZGROb2RlTW9kZSkuY2FsbChlLHRoaXMpKX19LHtrZXk6XCJfY3JlYXRlQWRkRWRnZUJ1dHRvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcy5fY3JlYXRlQnV0dG9uKFwiYWRkRWRnZVwiLFwidmlzLWNvbm5lY3RcIix0LmFkZEVkZ2V8fHRoaXMub3B0aW9ucy5sb2NhbGVzLmVuLmFkZEVkZ2UpO3RoaXMubWFuaXB1bGF0aW9uRGl2LmFwcGVuZENoaWxkKGkpLHRoaXMuX2JpbmRFbGVtZW50RXZlbnRzKGksRm8oZT10aGlzLmFkZEVkZ2VNb2RlKS5jYWxsKGUsdGhpcykpfX0se2tleTpcIl9jcmVhdGVFZGl0Tm9kZUJ1dHRvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcy5fY3JlYXRlQnV0dG9uKFwiZWRpdE5vZGVcIixcInZpcy1lZGl0XCIsdC5lZGl0Tm9kZXx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uZWRpdE5vZGUpO3RoaXMubWFuaXB1bGF0aW9uRGl2LmFwcGVuZENoaWxkKGkpLHRoaXMuX2JpbmRFbGVtZW50RXZlbnRzKGksRm8oZT10aGlzLmVkaXROb2RlKS5jYWxsKGUsdGhpcykpfX0se2tleTpcIl9jcmVhdGVFZGl0RWRnZUJ1dHRvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcy5fY3JlYXRlQnV0dG9uKFwiZWRpdEVkZ2VcIixcInZpcy1lZGl0XCIsdC5lZGl0RWRnZXx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uZWRpdEVkZ2UpO3RoaXMubWFuaXB1bGF0aW9uRGl2LmFwcGVuZENoaWxkKGkpLHRoaXMuX2JpbmRFbGVtZW50RXZlbnRzKGksRm8oZT10aGlzLmVkaXRFZGdlTW9kZSkuY2FsbChlLHRoaXMpKX19LHtrZXk6XCJfY3JlYXRlRGVsZXRlQnV0dG9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsaTtpPXRoaXMub3B0aW9ucy5ydGw/XCJ2aXMtZGVsZXRlLXJ0bFwiOlwidmlzLWRlbGV0ZVwiO3ZhciBvPXRoaXMuX2NyZWF0ZUJ1dHRvbihcImRlbGV0ZVwiLGksdC5kZWx8fHRoaXMub3B0aW9ucy5sb2NhbGVzLmVuLmRlbCk7dGhpcy5tYW5pcHVsYXRpb25EaXYuYXBwZW5kQ2hpbGQobyksdGhpcy5fYmluZEVsZW1lbnRFdmVudHMobyxGbyhlPXRoaXMuZGVsZXRlU2VsZWN0ZWQpLmNhbGwoZSx0aGlzKSl9fSx7a2V5OlwiX2NyZWF0ZUJhY2tCdXR0b25cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZSxpPXRoaXMuX2NyZWF0ZUJ1dHRvbihcImJhY2tcIixcInZpcy1iYWNrXCIsdC5iYWNrfHx0aGlzLm9wdGlvbnMubG9jYWxlcy5lbi5iYWNrKTt0aGlzLm1hbmlwdWxhdGlvbkRpdi5hcHBlbmRDaGlsZChpKSx0aGlzLl9iaW5kRWxlbWVudEV2ZW50cyhpLEZvKGU9dGhpcy5zaG93TWFuaXB1bGF0b3JUb29sYmFyKS5jYWxsKGUsdGhpcykpfX0se2tleTpcIl9jcmVhdGVCdXR0b25cIix2YWx1ZTpmdW5jdGlvbih0LGUsaSl7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOlwidmlzLWxhYmVsXCI7cmV0dXJuIHRoaXMubWFuaXB1bGF0aW9uRE9NW3QrXCJEaXZcIl09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSx0aGlzLm1hbmlwdWxhdGlvbkRPTVt0K1wiRGl2XCJdLmNsYXNzTmFtZT1cInZpcy1idXR0b24gXCIrZSx0aGlzLm1hbmlwdWxhdGlvbkRPTVt0K1wiTGFiZWxcIl09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLm1hbmlwdWxhdGlvbkRPTVt0K1wiTGFiZWxcIl0uY2xhc3NOYW1lPW8sdGhpcy5tYW5pcHVsYXRpb25ET01bdCtcIkxhYmVsXCJdLmlubmVyVGV4dD1pLHRoaXMubWFuaXB1bGF0aW9uRE9NW3QrXCJEaXZcIl0uYXBwZW5kQ2hpbGQodGhpcy5tYW5pcHVsYXRpb25ET01bdCtcIkxhYmVsXCJdKSx0aGlzLm1hbmlwdWxhdGlvbkRPTVt0K1wiRGl2XCJdfX0se2tleTpcIl9jcmVhdGVEZXNjcmlwdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMubWFuaXB1bGF0aW9uRE9NLmRlc2NyaXB0aW9uTGFiZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLm1hbmlwdWxhdGlvbkRPTS5kZXNjcmlwdGlvbkxhYmVsLmNsYXNzTmFtZT1cInZpcy1ub25lXCIsdGhpcy5tYW5pcHVsYXRpb25ET00uZGVzY3JpcHRpb25MYWJlbC5pbm5lclRleHQ9dCx0aGlzLm1hbmlwdWxhdGlvbkRpdi5hcHBlbmRDaGlsZCh0aGlzLm1hbmlwdWxhdGlvbkRPTS5kZXNjcmlwdGlvbkxhYmVsKX19LHtrZXk6XCJfdGVtcG9yYXJ5QmluZEV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLnRlbXBvcmFyeUV2ZW50RnVuY3Rpb25zLnB1c2goe2V2ZW50OnQsYm91bmRGdW5jdGlvbjplfSksdGhpcy5ib2R5LmVtaXR0ZXIub24odCxlKX19LHtrZXk6XCJfdGVtcG9yYXJ5QmluZFVJXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT10aGlzLmJvZHkuZXZlbnRMaXN0ZW5lcnNbdF0pdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBVSSBmdW5jdGlvbiBkb2VzIG5vdCBleGlzdC4gVHlwbz8gWW91IHRyaWVkOiBcIit0K1wiIHBvc3NpYmxlIGFyZTogXCIraHYobXUodGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzKSkpO3RoaXMudGVtcG9yYXJ5VUlGdW5jdGlvbnNbdF09dGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzW3RdLHRoaXMuYm9keS5ldmVudExpc3RlbmVyc1t0XT1lfX0se2tleTpcIl91bmJpbmRUZW1wb3JhcnlVSXNcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLnRlbXBvcmFyeVVJRnVuY3Rpb25zKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnRlbXBvcmFyeVVJRnVuY3Rpb25zLHQpJiYodGhpcy5ib2R5LmV2ZW50TGlzdGVuZXJzW3RdPXRoaXMudGVtcG9yYXJ5VUlGdW5jdGlvbnNbdF0sZGVsZXRlIHRoaXMudGVtcG9yYXJ5VUlGdW5jdGlvbnNbdF0pO3RoaXMudGVtcG9yYXJ5VUlGdW5jdGlvbnM9e319fSx7a2V5OlwiX3VuYmluZFRlbXBvcmFyeUV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDx0aGlzLnRlbXBvcmFyeUV2ZW50RnVuY3Rpb25zLmxlbmd0aDt0Kyspe3ZhciBlPXRoaXMudGVtcG9yYXJ5RXZlbnRGdW5jdGlvbnNbdF0uZXZlbnQsaT10aGlzLnRlbXBvcmFyeUV2ZW50RnVuY3Rpb25zW3RdLmJvdW5kRnVuY3Rpb247dGhpcy5ib2R5LmVtaXR0ZXIub2ZmKGUsaSl9dGhpcy50ZW1wb3JhcnlFdmVudEZ1bmN0aW9ucz1bXX19LHtrZXk6XCJfYmluZEVsZW1lbnRFdmVudHNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpPW5ldyBwbSh0LHt9KTtpRShpLGUpLHRoaXMuX2RvbUV2ZW50TGlzdGVuZXJDbGVhbnVwUXVldWUucHVzaCgoZnVuY3Rpb24oKXtpLmRlc3Ryb3koKX0pKTt2YXIgbz1mdW5jdGlvbih0KXt2YXIgaT10LmtleUNvZGUsbz10LmtleTtcIkVudGVyXCIhPT1vJiZcIiBcIiE9PW8mJjEzIT09aSYmMzIhPT1pfHxlKCl9O3QuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsbywhMSksdGhpcy5fZG9tRXZlbnRMaXN0ZW5lckNsZWFudXBRdWV1ZS5wdXNoKChmdW5jdGlvbigpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsbywhMSl9KSl9fSx7a2V5OlwiX2NsZWFudXBUZW1wb3JhcnlOb2Rlc0FuZEVkZ2VzXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PHRoaXMudGVtcG9yYXJ5SWRzLmVkZ2VzLmxlbmd0aDt0Kyspe3ZhciBlO3RoaXMuYm9keS5lZGdlc1t0aGlzLnRlbXBvcmFyeUlkcy5lZGdlc1t0XV0uZGlzY29ubmVjdCgpLGRlbGV0ZSB0aGlzLmJvZHkuZWRnZXNbdGhpcy50ZW1wb3JhcnlJZHMuZWRnZXNbdF1dO3ZhciBpLG89enAoZT10aGlzLmJvZHkuZWRnZUluZGljZXMpLmNhbGwoZSx0aGlzLnRlbXBvcmFyeUlkcy5lZGdlc1t0XSk7aWYoLTEhPT1vKXVmKGk9dGhpcy5ib2R5LmVkZ2VJbmRpY2VzKS5jYWxsKGksbywxKX1mb3IodmFyIG49MDtuPHRoaXMudGVtcG9yYXJ5SWRzLm5vZGVzLmxlbmd0aDtuKyspe3ZhciByO2RlbGV0ZSB0aGlzLmJvZHkubm9kZXNbdGhpcy50ZW1wb3JhcnlJZHMubm9kZXNbbl1dO3ZhciBzLGE9enAocj10aGlzLmJvZHkubm9kZUluZGljZXMpLmNhbGwocix0aGlzLnRlbXBvcmFyeUlkcy5ub2Rlc1tuXSk7aWYoLTEhPT1hKXVmKHM9dGhpcy5ib2R5Lm5vZGVJbmRpY2VzKS5jYWxsKHMsYSwxKX10aGlzLnRlbXBvcmFyeUlkcz17bm9kZXM6W10sZWRnZXM6W119fX0se2tleTpcIl9jb250cm9sTm9kZVRvdWNoXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5zZWxlY3Rpb25IYW5kbGVyLnVuc2VsZWN0QWxsKCksdGhpcy5sYXN0VG91Y2g9dGhpcy5ib2R5LmZ1bmN0aW9ucy5nZXRQb2ludGVyKHQuY2VudGVyKSx0aGlzLmxhc3RUb3VjaC50cmFuc2xhdGlvbj1mbyh7fSx0aGlzLmJvZHkudmlldy50cmFuc2xhdGlvbil9fSx7a2V5OlwiX2NvbnRyb2xOb2RlRHJhZ1N0YXJ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxhc3RUb3VjaCxlPXRoaXMuc2VsZWN0aW9uSGFuZGxlci5fcG9pbnRlclRvUG9zaXRpb25PYmplY3QodCksaT10aGlzLmJvZHkubm9kZXNbdGhpcy50ZW1wb3JhcnlJZHMubm9kZXNbMF1dLG89dGhpcy5ib2R5Lm5vZGVzW3RoaXMudGVtcG9yYXJ5SWRzLm5vZGVzWzFdXSxuPXRoaXMuYm9keS5lZGdlc1t0aGlzLmVkZ2VCZWluZ0VkaXRlZElkXTt0aGlzLnNlbGVjdGVkQ29udHJvbE5vZGU9dm9pZCAwO3ZhciByPWkuaXNPdmVybGFwcGluZ1dpdGgoZSkscz1vLmlzT3ZlcmxhcHBpbmdXaXRoKGUpOyEwPT09cj8odGhpcy5zZWxlY3RlZENvbnRyb2xOb2RlPWksbi5lZGdlVHlwZS5mcm9tPWkpOiEwPT09cyYmKHRoaXMuc2VsZWN0ZWRDb250cm9sTm9kZT1vLG4uZWRnZVR5cGUudG89byksdm9pZCAwIT09dGhpcy5zZWxlY3RlZENvbnRyb2xOb2RlJiZ0aGlzLnNlbGVjdGlvbkhhbmRsZXIuc2VsZWN0T2JqZWN0KHRoaXMuc2VsZWN0ZWRDb250cm9sTm9kZSksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZWRyYXdcIil9fSx7a2V5OlwiX2NvbnRyb2xOb2RlRHJhZ1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJkaXNhYmxlUGh5c2ljc1wiKTt2YXIgZT10aGlzLmJvZHkuZnVuY3Rpb25zLmdldFBvaW50ZXIodC5jZW50ZXIpLGk9dGhpcy5jYW52YXMuRE9NdG9DYW52YXMoZSk7dm9pZCAwIT09dGhpcy5zZWxlY3RlZENvbnRyb2xOb2RlPyh0aGlzLnNlbGVjdGVkQ29udHJvbE5vZGUueD1pLngsdGhpcy5zZWxlY3RlZENvbnRyb2xOb2RlLnk9aS55KTp0aGlzLmludGVyYWN0aW9uSGFuZGxlci5vbkRyYWcodCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZWRyYXdcIil9fSx7a2V5OlwiX2NvbnRyb2xOb2RlRHJhZ0VuZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYm9keS5mdW5jdGlvbnMuZ2V0UG9pbnRlcih0LmNlbnRlciksaT10aGlzLnNlbGVjdGlvbkhhbmRsZXIuX3BvaW50ZXJUb1Bvc2l0aW9uT2JqZWN0KGUpLG89dGhpcy5ib2R5LmVkZ2VzW3RoaXMuZWRnZUJlaW5nRWRpdGVkSWRdO2lmKHZvaWQgMCE9PXRoaXMuc2VsZWN0ZWRDb250cm9sTm9kZSl7dGhpcy5zZWxlY3Rpb25IYW5kbGVyLnVuc2VsZWN0QWxsKCk7Zm9yKHZhciBuPXRoaXMuc2VsZWN0aW9uSGFuZGxlci5fZ2V0QWxsTm9kZXNPdmVybGFwcGluZ1dpdGgoaSkscj12b2lkIDAscz1uLmxlbmd0aC0xO3M+PTA7cy0tKWlmKG5bc10hPT10aGlzLnNlbGVjdGVkQ29udHJvbE5vZGUuaWQpe3I9dGhpcy5ib2R5Lm5vZGVzW25bc11dO2JyZWFrfWlmKHZvaWQgMCE9PXImJnZvaWQgMCE9PXRoaXMuc2VsZWN0ZWRDb250cm9sTm9kZSlpZighMD09PXIuaXNDbHVzdGVyKWFsZXJ0KHRoaXMub3B0aW9ucy5sb2NhbGVzW3RoaXMub3B0aW9ucy5sb2NhbGVdLmNyZWF0ZUVkZ2VFcnJvcnx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uY3JlYXRlRWRnZUVycm9yKTtlbHNle3ZhciBhPXRoaXMuYm9keS5ub2Rlc1t0aGlzLnRlbXBvcmFyeUlkcy5ub2Rlc1swXV07dGhpcy5zZWxlY3RlZENvbnRyb2xOb2RlLmlkPT09YS5pZD90aGlzLl9wZXJmb3JtRWRpdEVkZ2Uoci5pZCxvLnRvLmlkKTp0aGlzLl9wZXJmb3JtRWRpdEVkZ2Uoby5mcm9tLmlkLHIuaWQpfWVsc2Ugby51cGRhdGVFZGdlVHlwZSgpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJyZXN0b3JlUGh5c2ljc1wiKTt0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlZHJhd1wiKX19fSx7a2V5OlwiX2hhbmRsZUNvbm5lY3RcIix2YWx1ZTpmdW5jdGlvbih0KXtpZigobmV3IERhdGUpLnZhbHVlT2YoKS10aGlzLnRvdWNoVGltZT4xMDApe3RoaXMubGFzdFRvdWNoPXRoaXMuYm9keS5mdW5jdGlvbnMuZ2V0UG9pbnRlcih0LmNlbnRlciksdGhpcy5sYXN0VG91Y2gudHJhbnNsYXRpb249Zm8oe30sdGhpcy5ib2R5LnZpZXcudHJhbnNsYXRpb24pLHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyLmRyYWcucG9pbnRlcj10aGlzLmxhc3RUb3VjaCx0aGlzLmludGVyYWN0aW9uSGFuZGxlci5kcmFnLnRyYW5zbGF0aW9uPXRoaXMubGFzdFRvdWNoLnRyYW5zbGF0aW9uO3ZhciBlPXRoaXMubGFzdFRvdWNoLGk9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdldE5vZGVBdChlKTtpZih2b2lkIDAhPT1pKWlmKCEwPT09aS5pc0NsdXN0ZXIpYWxlcnQodGhpcy5vcHRpb25zLmxvY2FsZXNbdGhpcy5vcHRpb25zLmxvY2FsZV0uY3JlYXRlRWRnZUVycm9yfHx0aGlzLm9wdGlvbnMubG9jYWxlcy5lbi5jcmVhdGVFZGdlRXJyb3IpO2Vsc2V7dmFyIG89dGhpcy5fZ2V0TmV3VGFyZ2V0Tm9kZShpLngsaS55KTt0aGlzLmJvZHkubm9kZXNbby5pZF09byx0aGlzLmJvZHkubm9kZUluZGljZXMucHVzaChvLmlkKTt2YXIgbj10aGlzLmJvZHkuZnVuY3Rpb25zLmNyZWF0ZUVkZ2Uoe2lkOlwiY29ubmVjdGlvbkVkZ2VcIitYeCgpLGZyb206aS5pZCx0bzpvLmlkLHBoeXNpY3M6ITEsc21vb3RoOntlbmFibGVkOiEwLHR5cGU6XCJjb250aW51b3VzXCIscm91bmRuZXNzOi41fX0pO3RoaXMuYm9keS5lZGdlc1tuLmlkXT1uLHRoaXMuYm9keS5lZGdlSW5kaWNlcy5wdXNoKG4uaWQpLHRoaXMudGVtcG9yYXJ5SWRzLm5vZGVzLnB1c2goby5pZCksdGhpcy50ZW1wb3JhcnlJZHMuZWRnZXMucHVzaChuLmlkKX10aGlzLnRvdWNoVGltZT0obmV3IERhdGUpLnZhbHVlT2YoKX19fSx7a2V5OlwiX2RyYWdDb250cm9sTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYm9keS5mdW5jdGlvbnMuZ2V0UG9pbnRlcih0LmNlbnRlciksaT10aGlzLnNlbGVjdGlvbkhhbmRsZXIuX3BvaW50ZXJUb1Bvc2l0aW9uT2JqZWN0KGUpLG89dm9pZCAwO3ZvaWQgMCE9PXRoaXMudGVtcG9yYXJ5SWRzLmVkZ2VzWzBdJiYobz10aGlzLmJvZHkuZWRnZXNbdGhpcy50ZW1wb3JhcnlJZHMuZWRnZXNbMF1dLmZyb21JZCk7Zm9yKHZhciBuPXRoaXMuc2VsZWN0aW9uSGFuZGxlci5fZ2V0QWxsTm9kZXNPdmVybGFwcGluZ1dpdGgoaSkscj12b2lkIDAscz1uLmxlbmd0aC0xO3M+PTA7cy0tKXt2YXIgYTtpZigtMT09PXpwKGE9dGhpcy50ZW1wb3JhcnlJZHMubm9kZXMpLmNhbGwoYSxuW3NdKSl7cj10aGlzLmJvZHkubm9kZXNbbltzXV07YnJlYWt9fWlmKHQuY29udHJvbEVkZ2U9e2Zyb206byx0bzpyP3IuaWQ6dm9pZCAwfSx0aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2VuZXJhdGVDbGlja0V2ZW50KFwiY29udHJvbE5vZGVEcmFnZ2luZ1wiLHQsZSksdm9pZCAwIT09dGhpcy50ZW1wb3JhcnlJZHMubm9kZXNbMF0pe3ZhciBoPXRoaXMuYm9keS5ub2Rlc1t0aGlzLnRlbXBvcmFyeUlkcy5ub2Rlc1swXV07aC54PXRoaXMuY2FudmFzLl9YY29udmVydERPTXRvQ2FudmFzKGUueCksaC55PXRoaXMuY2FudmFzLl9ZY29udmVydERPTXRvQ2FudmFzKGUueSksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZWRyYXdcIil9ZWxzZSB0aGlzLmludGVyYWN0aW9uSGFuZGxlci5vbkRyYWcodCl9fSx7a2V5OlwiX2ZpbmlzaENvbm5lY3RcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmJvZHkuZnVuY3Rpb25zLmdldFBvaW50ZXIodC5jZW50ZXIpLGk9dGhpcy5zZWxlY3Rpb25IYW5kbGVyLl9wb2ludGVyVG9Qb3NpdGlvbk9iamVjdChlKSxvPXZvaWQgMDt2b2lkIDAhPT10aGlzLnRlbXBvcmFyeUlkcy5lZGdlc1swXSYmKG89dGhpcy5ib2R5LmVkZ2VzW3RoaXMudGVtcG9yYXJ5SWRzLmVkZ2VzWzBdXS5mcm9tSWQpO2Zvcih2YXIgbj10aGlzLnNlbGVjdGlvbkhhbmRsZXIuX2dldEFsbE5vZGVzT3ZlcmxhcHBpbmdXaXRoKGkpLHI9dm9pZCAwLHM9bi5sZW5ndGgtMTtzPj0wO3MtLSl7dmFyIGE7aWYoLTE9PT16cChhPXRoaXMudGVtcG9yYXJ5SWRzLm5vZGVzKS5jYWxsKGEsbltzXSkpe3I9dGhpcy5ib2R5Lm5vZGVzW25bc11dO2JyZWFrfX10aGlzLl9jbGVhbnVwVGVtcG9yYXJ5Tm9kZXNBbmRFZGdlcygpLHZvaWQgMCE9PXImJighMD09PXIuaXNDbHVzdGVyP2FsZXJ0KHRoaXMub3B0aW9ucy5sb2NhbGVzW3RoaXMub3B0aW9ucy5sb2NhbGVdLmNyZWF0ZUVkZ2VFcnJvcnx8dGhpcy5vcHRpb25zLmxvY2FsZXMuZW4uY3JlYXRlRWRnZUVycm9yKTp2b2lkIDAhPT10aGlzLmJvZHkubm9kZXNbb10mJnZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1tyLmlkXSYmdGhpcy5fcGVyZm9ybUFkZEVkZ2UobyxyLmlkKSksdC5jb250cm9sRWRnZT17ZnJvbTpvLHRvOnI/ci5pZDp2b2lkIDB9LHRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZW5lcmF0ZUNsaWNrRXZlbnQoXCJjb250cm9sTm9kZURyYWdFbmRcIix0LGUpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVkcmF3XCIpfX0se2tleTpcIl9kcmFnU3RhcnRFZGdlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5sYXN0VG91Y2g7dGhpcy5zZWxlY3Rpb25IYW5kbGVyLmdlbmVyYXRlQ2xpY2tFdmVudChcImRyYWdTdGFydFwiLHQsZSx2b2lkIDAsITApfX0se2tleTpcIl9wZXJmb3JtQWRkTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsaT17aWQ6WHgoKSx4OnQucG9pbnRlci5jYW52YXMueCx5OnQucG9pbnRlci5jYW52YXMueSxsYWJlbDpcIm5ld1wifTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuYWRkTm9kZSl7aWYoMiE9PXRoaXMub3B0aW9ucy5hZGROb2RlLmxlbmd0aCl0aHJvdyB0aGlzLnNob3dNYW5pcHVsYXRvclRvb2xiYXIoKSxuZXcgRXJyb3IoXCJUaGUgZnVuY3Rpb24gZm9yIGFkZCBkb2VzIG5vdCBzdXBwb3J0IHR3byBhcmd1bWVudHMgKGRhdGEsY2FsbGJhY2spXCIpO3RoaXMub3B0aW9ucy5hZGROb2RlKGksKGZ1bmN0aW9uKHQpe251bGwhPXQmJlwiYWRkTm9kZVwiPT09ZS5pbk1vZGUmJmUuYm9keS5kYXRhLm5vZGVzLmdldERhdGFTZXQoKS5hZGQodCksZS5zaG93TWFuaXB1bGF0b3JUb29sYmFyKCl9KSl9ZWxzZSB0aGlzLmJvZHkuZGF0YS5ub2Rlcy5nZXREYXRhU2V0KCkuYWRkKGkpLHRoaXMuc2hvd01hbmlwdWxhdG9yVG9vbGJhcigpfX0se2tleTpcIl9wZXJmb3JtQWRkRWRnZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcyxvPXtmcm9tOnQsdG86ZX07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zLmFkZEVkZ2Upe2lmKDIhPT10aGlzLm9wdGlvbnMuYWRkRWRnZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGZ1bmN0aW9uIGZvciBjb25uZWN0IGRvZXMgbm90IHN1cHBvcnQgdHdvIGFyZ3VtZW50cyAoZGF0YSxjYWxsYmFjaylcIik7dGhpcy5vcHRpb25zLmFkZEVkZ2UobywoZnVuY3Rpb24odCl7bnVsbCE9dCYmXCJhZGRFZGdlXCI9PT1pLmluTW9kZSYmKGkuYm9keS5kYXRhLmVkZ2VzLmdldERhdGFTZXQoKS5hZGQodCksaS5zZWxlY3Rpb25IYW5kbGVyLnVuc2VsZWN0QWxsKCksaS5zaG93TWFuaXB1bGF0b3JUb29sYmFyKCkpfSkpfWVsc2UgdGhpcy5ib2R5LmRhdGEuZWRnZXMuZ2V0RGF0YVNldCgpLmFkZChvKSx0aGlzLnNlbGVjdGlvbkhhbmRsZXIudW5zZWxlY3RBbGwoKSx0aGlzLnNob3dNYW5pcHVsYXRvclRvb2xiYXIoKX19LHtrZXk6XCJfcGVyZm9ybUVkaXRFZGdlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLG89e2lkOnRoaXMuZWRnZUJlaW5nRWRpdGVkSWQsZnJvbTp0LHRvOmUsbGFiZWw6dGhpcy5ib2R5LmRhdGEuZWRnZXMuZ2V0KHRoaXMuZWRnZUJlaW5nRWRpdGVkSWQpLmxhYmVsfSxuPXRoaXMub3B0aW9ucy5lZGl0RWRnZTtpZihcIm9iamVjdFwiPT09UWMobikmJihuPW4uZWRpdFdpdGhvdXREcmFnKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXtpZigyIT09bi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGZ1bmN0aW9uIGZvciBlZGl0IGRvZXMgbm90IHN1cHBvcnQgdHdvIGFyZ3VtZW50cyAoZGF0YSwgY2FsbGJhY2spXCIpO24obywoZnVuY3Rpb24odCl7bnVsbD09dHx8XCJlZGl0RWRnZVwiIT09aS5pbk1vZGU/KGkuYm9keS5lZGdlc1tvLmlkXS51cGRhdGVFZGdlVHlwZSgpLGkuYm9keS5lbWl0dGVyLmVtaXQoXCJfcmVkcmF3XCIpLGkuc2hvd01hbmlwdWxhdG9yVG9vbGJhcigpKTooaS5ib2R5LmRhdGEuZWRnZXMuZ2V0RGF0YVNldCgpLnVwZGF0ZSh0KSxpLnNlbGVjdGlvbkhhbmRsZXIudW5zZWxlY3RBbGwoKSxpLnNob3dNYW5pcHVsYXRvclRvb2xiYXIoKSl9KSl9ZWxzZSB0aGlzLmJvZHkuZGF0YS5lZGdlcy5nZXREYXRhU2V0KCkudXBkYXRlKG8pLHRoaXMuc2VsZWN0aW9uSGFuZGxlci51bnNlbGVjdEFsbCgpLHRoaXMuc2hvd01hbmlwdWxhdG9yVG9vbGJhcigpfX1dKSx0fSgpLHpDPVwic3RyaW5nXCIsRkM9XCJib29sZWFuXCIsTkM9XCJudW1iZXJcIixBQz1cImFycmF5XCIsUkM9XCJvYmplY3RcIixqQz1bXCJhcnJvd1wiLFwiYmFyXCIsXCJib3hcIixcImNpcmNsZVwiLFwiY3Jvd1wiLFwiY3VydmVcIixcImRpYW1vbmRcIixcImltYWdlXCIsXCJpbnZfY3VydmVcIixcImludl90cmlhbmdsZVwiLFwidHJpYW5nbGVcIixcInZlZVwiXSxMQz17Ym9yZGVyV2lkdGg6e251bWJlcjpOQ30sYm9yZGVyV2lkdGhTZWxlY3RlZDp7bnVtYmVyOk5DLHVuZGVmaW5lZDpcInVuZGVmaW5lZFwifSxicm9rZW5JbWFnZTp7c3RyaW5nOnpDLHVuZGVmaW5lZDpcInVuZGVmaW5lZFwifSxjaG9zZW46e2xhYmVsOntib29sZWFuOkZDLGZ1bmN0aW9uOlwiZnVuY3Rpb25cIn0sbm9kZTp7Ym9vbGVhbjpGQyxmdW5jdGlvbjpcImZ1bmN0aW9uXCJ9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LGNvbG9yOntib3JkZXI6e3N0cmluZzp6Q30sYmFja2dyb3VuZDp7c3RyaW5nOnpDfSxoaWdobGlnaHQ6e2JvcmRlcjp7c3RyaW5nOnpDfSxiYWNrZ3JvdW5kOntzdHJpbmc6ekN9LF9fdHlwZV9fOntvYmplY3Q6UkMsc3RyaW5nOnpDfX0saG92ZXI6e2JvcmRlcjp7c3RyaW5nOnpDfSxiYWNrZ3JvdW5kOntzdHJpbmc6ekN9LF9fdHlwZV9fOntvYmplY3Q6UkMsc3RyaW5nOnpDfX0sX190eXBlX186e29iamVjdDpSQyxzdHJpbmc6ekN9fSxvcGFjaXR5OntudW1iZXI6TkMsdW5kZWZpbmVkOlwidW5kZWZpbmVkXCJ9LGZpeGVkOnt4Ontib29sZWFuOkZDfSx5Ontib29sZWFuOkZDfSxfX3R5cGVfXzp7b2JqZWN0OlJDLGJvb2xlYW46RkN9fSxmb250OnthbGlnbjp7c3RyaW5nOnpDfSxjb2xvcjp7c3RyaW5nOnpDfSxzaXplOntudW1iZXI6TkN9LGZhY2U6e3N0cmluZzp6Q30sYmFja2dyb3VuZDp7c3RyaW5nOnpDfSxzdHJva2VXaWR0aDp7bnVtYmVyOk5DfSxzdHJva2VDb2xvcjp7c3RyaW5nOnpDfSx2YWRqdXN0OntudW1iZXI6TkN9LG11bHRpOntib29sZWFuOkZDLHN0cmluZzp6Q30sYm9sZDp7Y29sb3I6e3N0cmluZzp6Q30sc2l6ZTp7bnVtYmVyOk5DfSxmYWNlOntzdHJpbmc6ekN9LG1vZDp7c3RyaW5nOnpDfSx2YWRqdXN0OntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsc3RyaW5nOnpDfX0sYm9sZGl0YWw6e2NvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30sZmFjZTp7c3RyaW5nOnpDfSxtb2Q6e3N0cmluZzp6Q30sdmFkanVzdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LGl0YWw6e2NvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30sZmFjZTp7c3RyaW5nOnpDfSxtb2Q6e3N0cmluZzp6Q30sdmFkanVzdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LG1vbm86e2NvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30sZmFjZTp7c3RyaW5nOnpDfSxtb2Q6e3N0cmluZzp6Q30sdmFkanVzdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LF9fdHlwZV9fOntvYmplY3Q6UkMsc3RyaW5nOnpDfX0sZ3JvdXA6e3N0cmluZzp6QyxudW1iZXI6TkMsdW5kZWZpbmVkOlwidW5kZWZpbmVkXCJ9LGhlaWdodENvbnN0cmFpbnQ6e21pbmltdW06e251bWJlcjpOQ30sdmFsaWduOntzdHJpbmc6ekN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQyxudW1iZXI6TkN9fSxoaWRkZW46e2Jvb2xlYW46RkN9LGljb246e2ZhY2U6e3N0cmluZzp6Q30sY29kZTp7c3RyaW5nOnpDfSxzaXplOntudW1iZXI6TkN9LGNvbG9yOntzdHJpbmc6ekN9LHdlaWdodDp7c3RyaW5nOnpDLG51bWJlcjpOQ30sX190eXBlX186e29iamVjdDpSQ319LGlkOntzdHJpbmc6ekMsbnVtYmVyOk5DfSxpbWFnZTp7c2VsZWN0ZWQ6e3N0cmluZzp6Qyx1bmRlZmluZWQ6XCJ1bmRlZmluZWRcIn0sdW5zZWxlY3RlZDp7c3RyaW5nOnpDLHVuZGVmaW5lZDpcInVuZGVmaW5lZFwifSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LGltYWdlUGFkZGluZzp7dG9wOntudW1iZXI6TkN9LHJpZ2h0OntudW1iZXI6TkN9LGJvdHRvbTp7bnVtYmVyOk5DfSxsZWZ0OntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsbnVtYmVyOk5DfX0sbGFiZWw6e3N0cmluZzp6Qyx1bmRlZmluZWQ6XCJ1bmRlZmluZWRcIn0sbGFiZWxIaWdobGlnaHRCb2xkOntib29sZWFuOkZDfSxsZXZlbDp7bnVtYmVyOk5DLHVuZGVmaW5lZDpcInVuZGVmaW5lZFwifSxtYXJnaW46e3RvcDp7bnVtYmVyOk5DfSxyaWdodDp7bnVtYmVyOk5DfSxib3R0b206e251bWJlcjpOQ30sbGVmdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLG51bWJlcjpOQ319LG1hc3M6e251bWJlcjpOQ30scGh5c2ljczp7Ym9vbGVhbjpGQ30sc2NhbGluZzp7bWluOntudW1iZXI6TkN9LG1heDp7bnVtYmVyOk5DfSxsYWJlbDp7ZW5hYmxlZDp7Ym9vbGVhbjpGQ30sbWluOntudW1iZXI6TkN9LG1heDp7bnVtYmVyOk5DfSxtYXhWaXNpYmxlOntudW1iZXI6TkN9LGRyYXdUaHJlc2hvbGQ6e251bWJlcjpOQ30sX190eXBlX186e29iamVjdDpSQyxib29sZWFuOkZDfX0sY3VzdG9tU2NhbGluZ0Z1bmN0aW9uOntmdW5jdGlvbjpcImZ1bmN0aW9uXCJ9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxzaGFkb3c6e2VuYWJsZWQ6e2Jvb2xlYW46RkN9LGNvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30seDp7bnVtYmVyOk5DfSx5OntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LHNoYXBlOntzdHJpbmc6W1wiY3VzdG9tXCIsXCJlbGxpcHNlXCIsXCJjaXJjbGVcIixcImRhdGFiYXNlXCIsXCJib3hcIixcInRleHRcIixcImltYWdlXCIsXCJjaXJjdWxhckltYWdlXCIsXCJkaWFtb25kXCIsXCJkb3RcIixcInN0YXJcIixcInRyaWFuZ2xlXCIsXCJ0cmlhbmdsZURvd25cIixcInNxdWFyZVwiLFwiaWNvblwiLFwiaGV4YWdvblwiXX0sY3R4UmVuZGVyZXI6e2Z1bmN0aW9uOlwiZnVuY3Rpb25cIn0sc2hhcGVQcm9wZXJ0aWVzOntib3JkZXJEYXNoZXM6e2Jvb2xlYW46RkMsYXJyYXk6QUN9LGJvcmRlclJhZGl1czp7bnVtYmVyOk5DfSxpbnRlcnBvbGF0aW9uOntib29sZWFuOkZDfSx1c2VJbWFnZVNpemU6e2Jvb2xlYW46RkN9LHVzZUJvcmRlcldpdGhJbWFnZTp7Ym9vbGVhbjpGQ30sY29vcmRpbmF0ZU9yaWdpbjp7c3RyaW5nOltcImNlbnRlclwiLFwidG9wLWxlZnRcIl19LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxzaXplOntudW1iZXI6TkN9LHRpdGxlOntzdHJpbmc6ekMsZG9tOlwiZG9tXCIsdW5kZWZpbmVkOlwidW5kZWZpbmVkXCJ9LHZhbHVlOntudW1iZXI6TkMsdW5kZWZpbmVkOlwidW5kZWZpbmVkXCJ9LHdpZHRoQ29uc3RyYWludDp7bWluaW11bTp7bnVtYmVyOk5DfSxtYXhpbXVtOntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQyxudW1iZXI6TkN9fSx4OntudW1iZXI6TkN9LHk6e251bWJlcjpOQ30sX190eXBlX186e29iamVjdDpSQ319LEhDPXtjb25maWd1cmU6e2VuYWJsZWQ6e2Jvb2xlYW46RkN9LGZpbHRlcjp7Ym9vbGVhbjpGQyxzdHJpbmc6ekMsYXJyYXk6QUMsZnVuY3Rpb246XCJmdW5jdGlvblwifSxjb250YWluZXI6e2RvbTpcImRvbVwifSxzaG93QnV0dG9uOntib29sZWFuOkZDfSxfX3R5cGVfXzp7b2JqZWN0OlJDLGJvb2xlYW46RkMsc3RyaW5nOnpDLGFycmF5OkFDLGZ1bmN0aW9uOlwiZnVuY3Rpb25cIn19LGVkZ2VzOnthcnJvd3M6e3RvOntlbmFibGVkOntib29sZWFuOkZDfSxzY2FsZUZhY3Rvcjp7bnVtYmVyOk5DfSx0eXBlOntzdHJpbmc6akN9LGltYWdlSGVpZ2h0OntudW1iZXI6TkN9LGltYWdlV2lkdGg6e251bWJlcjpOQ30sc3JjOntzdHJpbmc6ekN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LG1pZGRsZTp7ZW5hYmxlZDp7Ym9vbGVhbjpGQ30sc2NhbGVGYWN0b3I6e251bWJlcjpOQ30sdHlwZTp7c3RyaW5nOmpDfSxpbWFnZVdpZHRoOntudW1iZXI6TkN9LGltYWdlSGVpZ2h0OntudW1iZXI6TkN9LHNyYzp7c3RyaW5nOnpDfSxfX3R5cGVfXzp7b2JqZWN0OlJDLGJvb2xlYW46RkN9fSxmcm9tOntlbmFibGVkOntib29sZWFuOkZDfSxzY2FsZUZhY3Rvcjp7bnVtYmVyOk5DfSx0eXBlOntzdHJpbmc6akN9LGltYWdlV2lkdGg6e251bWJlcjpOQ30saW1hZ2VIZWlnaHQ6e251bWJlcjpOQ30sc3JjOntzdHJpbmc6ekN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LF9fdHlwZV9fOntzdHJpbmc6W1wiZnJvbVwiLFwidG9cIixcIm1pZGRsZVwiXSxvYmplY3Q6UkN9fSxlbmRQb2ludE9mZnNldDp7ZnJvbTp7bnVtYmVyOk5DfSx0bzp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLG51bWJlcjpOQ319LGFycm93U3RyaWtldGhyb3VnaDp7Ym9vbGVhbjpGQ30sYmFja2dyb3VuZDp7ZW5hYmxlZDp7Ym9vbGVhbjpGQ30sY29sb3I6e3N0cmluZzp6Q30sc2l6ZTp7bnVtYmVyOk5DfSxkYXNoZXM6e2Jvb2xlYW46RkMsYXJyYXk6QUN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LGNob3Nlbjp7bGFiZWw6e2Jvb2xlYW46RkMsZnVuY3Rpb246XCJmdW5jdGlvblwifSxlZGdlOntib29sZWFuOkZDLGZ1bmN0aW9uOlwiZnVuY3Rpb25cIn0sX190eXBlX186e29iamVjdDpSQyxib29sZWFuOkZDfX0sY29sb3I6e2NvbG9yOntzdHJpbmc6ekN9LGhpZ2hsaWdodDp7c3RyaW5nOnpDfSxob3Zlcjp7c3RyaW5nOnpDfSxpbmhlcml0OntzdHJpbmc6W1wiZnJvbVwiLFwidG9cIixcImJvdGhcIl0sYm9vbGVhbjpGQ30sb3BhY2l0eTp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LGRhc2hlczp7Ym9vbGVhbjpGQyxhcnJheTpBQ30sZm9udDp7Y29sb3I6e3N0cmluZzp6Q30sc2l6ZTp7bnVtYmVyOk5DfSxmYWNlOntzdHJpbmc6ekN9LGJhY2tncm91bmQ6e3N0cmluZzp6Q30sc3Ryb2tlV2lkdGg6e251bWJlcjpOQ30sc3Ryb2tlQ29sb3I6e3N0cmluZzp6Q30sYWxpZ246e3N0cmluZzpbXCJob3Jpem9udGFsXCIsXCJ0b3BcIixcIm1pZGRsZVwiLFwiYm90dG9tXCJdfSx2YWRqdXN0OntudW1iZXI6TkN9LG11bHRpOntib29sZWFuOkZDLHN0cmluZzp6Q30sYm9sZDp7Y29sb3I6e3N0cmluZzp6Q30sc2l6ZTp7bnVtYmVyOk5DfSxmYWNlOntzdHJpbmc6ekN9LG1vZDp7c3RyaW5nOnpDfSx2YWRqdXN0OntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsc3RyaW5nOnpDfX0sYm9sZGl0YWw6e2NvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30sZmFjZTp7c3RyaW5nOnpDfSxtb2Q6e3N0cmluZzp6Q30sdmFkanVzdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LGl0YWw6e2NvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30sZmFjZTp7c3RyaW5nOnpDfSxtb2Q6e3N0cmluZzp6Q30sdmFkanVzdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LG1vbm86e2NvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30sZmFjZTp7c3RyaW5nOnpDfSxtb2Q6e3N0cmluZzp6Q30sdmFkanVzdDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLHN0cmluZzp6Q319LF9fdHlwZV9fOntvYmplY3Q6UkMsc3RyaW5nOnpDfX0saGlkZGVuOntib29sZWFuOkZDfSxob3ZlcldpZHRoOntmdW5jdGlvbjpcImZ1bmN0aW9uXCIsbnVtYmVyOk5DfSxsYWJlbDp7c3RyaW5nOnpDLHVuZGVmaW5lZDpcInVuZGVmaW5lZFwifSxsYWJlbEhpZ2hsaWdodEJvbGQ6e2Jvb2xlYW46RkN9LGxlbmd0aDp7bnVtYmVyOk5DLHVuZGVmaW5lZDpcInVuZGVmaW5lZFwifSxwaHlzaWNzOntib29sZWFuOkZDfSxzY2FsaW5nOnttaW46e251bWJlcjpOQ30sbWF4OntudW1iZXI6TkN9LGxhYmVsOntlbmFibGVkOntib29sZWFuOkZDfSxtaW46e251bWJlcjpOQ30sbWF4OntudW1iZXI6TkN9LG1heFZpc2libGU6e251bWJlcjpOQ30sZHJhd1RocmVzaG9sZDp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLGJvb2xlYW46RkN9fSxjdXN0b21TY2FsaW5nRnVuY3Rpb246e2Z1bmN0aW9uOlwiZnVuY3Rpb25cIn0sX190eXBlX186e29iamVjdDpSQ319LHNlbGVjdGlvbldpZHRoOntmdW5jdGlvbjpcImZ1bmN0aW9uXCIsbnVtYmVyOk5DfSxzZWxmUmVmZXJlbmNlU2l6ZTp7bnVtYmVyOk5DfSxzZWxmUmVmZXJlbmNlOntzaXplOntudW1iZXI6TkN9LGFuZ2xlOntudW1iZXI6TkN9LHJlbmRlckJlaGluZFRoZU5vZGU6e2Jvb2xlYW46RkN9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxzaGFkb3c6e2VuYWJsZWQ6e2Jvb2xlYW46RkN9LGNvbG9yOntzdHJpbmc6ekN9LHNpemU6e251bWJlcjpOQ30seDp7bnVtYmVyOk5DfSx5OntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LHNtb290aDp7ZW5hYmxlZDp7Ym9vbGVhbjpGQ30sdHlwZTp7c3RyaW5nOltcImR5bmFtaWNcIixcImNvbnRpbnVvdXNcIixcImRpc2NyZXRlXCIsXCJkaWFnb25hbENyb3NzXCIsXCJzdHJhaWdodENyb3NzXCIsXCJob3Jpem9udGFsXCIsXCJ2ZXJ0aWNhbFwiLFwiY3VydmVkQ1dcIixcImN1cnZlZENDV1wiLFwiY3ViaWNCZXppZXJcIl19LHJvdW5kbmVzczp7bnVtYmVyOk5DfSxmb3JjZURpcmVjdGlvbjp7c3RyaW5nOltcImhvcml6b250YWxcIixcInZlcnRpY2FsXCIsXCJub25lXCJdLGJvb2xlYW46RkN9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LHRpdGxlOntzdHJpbmc6ekMsdW5kZWZpbmVkOlwidW5kZWZpbmVkXCJ9LHdpZHRoOntudW1iZXI6TkN9LHdpZHRoQ29uc3RyYWludDp7bWF4aW11bTp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDLGJvb2xlYW46RkMsbnVtYmVyOk5DfX0sdmFsdWU6e251bWJlcjpOQyx1bmRlZmluZWQ6XCJ1bmRlZmluZWRcIn0sX190eXBlX186e29iamVjdDpSQ319LGdyb3Vwczp7dXNlRGVmYXVsdEdyb3Vwczp7Ym9vbGVhbjpGQ30sX19hbnlfXzpMQyxfX3R5cGVfXzp7b2JqZWN0OlJDfX0saW50ZXJhY3Rpb246e2RyYWdOb2Rlczp7Ym9vbGVhbjpGQ30sZHJhZ1ZpZXc6e2Jvb2xlYW46RkN9LGhpZGVFZGdlc09uRHJhZzp7Ym9vbGVhbjpGQ30saGlkZUVkZ2VzT25ab29tOntib29sZWFuOkZDfSxoaWRlTm9kZXNPbkRyYWc6e2Jvb2xlYW46RkN9LGhvdmVyOntib29sZWFuOkZDfSxrZXlib2FyZDp7ZW5hYmxlZDp7Ym9vbGVhbjpGQ30sc3BlZWQ6e3g6e251bWJlcjpOQ30seTp7bnVtYmVyOk5DfSx6b29tOntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxiaW5kVG9XaW5kb3c6e2Jvb2xlYW46RkN9LGF1dG9Gb2N1czp7Ym9vbGVhbjpGQ30sX190eXBlX186e29iamVjdDpSQyxib29sZWFuOkZDfX0sbXVsdGlzZWxlY3Q6e2Jvb2xlYW46RkN9LG5hdmlnYXRpb25CdXR0b25zOntib29sZWFuOkZDfSxzZWxlY3RhYmxlOntib29sZWFuOkZDfSxzZWxlY3RDb25uZWN0ZWRFZGdlczp7Ym9vbGVhbjpGQ30saG92ZXJDb25uZWN0ZWRFZGdlczp7Ym9vbGVhbjpGQ30sdG9vbHRpcERlbGF5OntudW1iZXI6TkN9LHpvb21WaWV3Ontib29sZWFuOkZDfSx6b29tU3BlZWQ6e251bWJlcjpOQ30sX190eXBlX186e29iamVjdDpSQ319LGxheW91dDp7cmFuZG9tU2VlZDp7dW5kZWZpbmVkOlwidW5kZWZpbmVkXCIsbnVtYmVyOk5DLHN0cmluZzp6Q30saW1wcm92ZWRMYXlvdXQ6e2Jvb2xlYW46RkN9LGNsdXN0ZXJUaHJlc2hvbGQ6e251bWJlcjpOQ30saGllcmFyY2hpY2FsOntlbmFibGVkOntib29sZWFuOkZDfSxsZXZlbFNlcGFyYXRpb246e251bWJlcjpOQ30sbm9kZVNwYWNpbmc6e251bWJlcjpOQ30sdHJlZVNwYWNpbmc6e251bWJlcjpOQ30sYmxvY2tTaGlmdGluZzp7Ym9vbGVhbjpGQ30sZWRnZU1pbmltaXphdGlvbjp7Ym9vbGVhbjpGQ30scGFyZW50Q2VudHJhbGl6YXRpb246e2Jvb2xlYW46RkN9LGRpcmVjdGlvbjp7c3RyaW5nOltcIlVEXCIsXCJEVVwiLFwiTFJcIixcIlJMXCJdfSxzb3J0TWV0aG9kOntzdHJpbmc6W1wiaHVic2l6ZVwiLFwiZGlyZWN0ZWRcIl19LHNoYWtlVG93YXJkczp7c3RyaW5nOltcImxlYXZlc1wiLFwicm9vdHNcIl19LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQ319LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxtYW5pcHVsYXRpb246e2VuYWJsZWQ6e2Jvb2xlYW46RkN9LGluaXRpYWxseUFjdGl2ZTp7Ym9vbGVhbjpGQ30sYWRkTm9kZTp7Ym9vbGVhbjpGQyxmdW5jdGlvbjpcImZ1bmN0aW9uXCJ9LGFkZEVkZ2U6e2Jvb2xlYW46RkMsZnVuY3Rpb246XCJmdW5jdGlvblwifSxlZGl0Tm9kZTp7ZnVuY3Rpb246XCJmdW5jdGlvblwifSxlZGl0RWRnZTp7ZWRpdFdpdGhvdXREcmFnOntmdW5jdGlvbjpcImZ1bmN0aW9uXCJ9LF9fdHlwZV9fOntvYmplY3Q6UkMsYm9vbGVhbjpGQyxmdW5jdGlvbjpcImZ1bmN0aW9uXCJ9fSxkZWxldGVOb2RlOntib29sZWFuOkZDLGZ1bmN0aW9uOlwiZnVuY3Rpb25cIn0sZGVsZXRlRWRnZTp7Ym9vbGVhbjpGQyxmdW5jdGlvbjpcImZ1bmN0aW9uXCJ9LGNvbnRyb2xOb2RlU3R5bGU6TEMsX190eXBlX186e29iamVjdDpSQyxib29sZWFuOkZDfX0sbm9kZXM6TEMscGh5c2ljczp7ZW5hYmxlZDp7Ym9vbGVhbjpGQ30sYmFybmVzSHV0Ont0aGV0YTp7bnVtYmVyOk5DfSxncmF2aXRhdGlvbmFsQ29uc3RhbnQ6e251bWJlcjpOQ30sY2VudHJhbEdyYXZpdHk6e251bWJlcjpOQ30sc3ByaW5nTGVuZ3RoOntudW1iZXI6TkN9LHNwcmluZ0NvbnN0YW50OntudW1iZXI6TkN9LGRhbXBpbmc6e251bWJlcjpOQ30sYXZvaWRPdmVybGFwOntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxmb3JjZUF0bGFzMkJhc2VkOnt0aGV0YTp7bnVtYmVyOk5DfSxncmF2aXRhdGlvbmFsQ29uc3RhbnQ6e251bWJlcjpOQ30sY2VudHJhbEdyYXZpdHk6e251bWJlcjpOQ30sc3ByaW5nTGVuZ3RoOntudW1iZXI6TkN9LHNwcmluZ0NvbnN0YW50OntudW1iZXI6TkN9LGRhbXBpbmc6e251bWJlcjpOQ30sYXZvaWRPdmVybGFwOntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxyZXB1bHNpb246e2NlbnRyYWxHcmF2aXR5OntudW1iZXI6TkN9LHNwcmluZ0xlbmd0aDp7bnVtYmVyOk5DfSxzcHJpbmdDb25zdGFudDp7bnVtYmVyOk5DfSxub2RlRGlzdGFuY2U6e251bWJlcjpOQ30sZGFtcGluZzp7bnVtYmVyOk5DfSxfX3R5cGVfXzp7b2JqZWN0OlJDfX0saGllcmFyY2hpY2FsUmVwdWxzaW9uOntjZW50cmFsR3Jhdml0eTp7bnVtYmVyOk5DfSxzcHJpbmdMZW5ndGg6e251bWJlcjpOQ30sc3ByaW5nQ29uc3RhbnQ6e251bWJlcjpOQ30sbm9kZURpc3RhbmNlOntudW1iZXI6TkN9LGRhbXBpbmc6e251bWJlcjpOQ30sYXZvaWRPdmVybGFwOntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxtYXhWZWxvY2l0eTp7bnVtYmVyOk5DfSxtaW5WZWxvY2l0eTp7bnVtYmVyOk5DfSxzb2x2ZXI6e3N0cmluZzpbXCJiYXJuZXNIdXRcIixcInJlcHVsc2lvblwiLFwiaGllcmFyY2hpY2FsUmVwdWxzaW9uXCIsXCJmb3JjZUF0bGFzMkJhc2VkXCJdfSxzdGFiaWxpemF0aW9uOntlbmFibGVkOntib29sZWFuOkZDfSxpdGVyYXRpb25zOntudW1iZXI6TkN9LHVwZGF0ZUludGVydmFsOntudW1iZXI6TkN9LG9ubHlEeW5hbWljRWRnZXM6e2Jvb2xlYW46RkN9LGZpdDp7Ym9vbGVhbjpGQ30sX190eXBlX186e29iamVjdDpSQyxib29sZWFuOkZDfX0sdGltZXN0ZXA6e251bWJlcjpOQ30sYWRhcHRpdmVUaW1lc3RlcDp7Ym9vbGVhbjpGQ30sd2luZDp7eDp7bnVtYmVyOk5DfSx5OntudW1iZXI6TkN9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxfX3R5cGVfXzp7b2JqZWN0OlJDLGJvb2xlYW46RkN9fSxhdXRvUmVzaXplOntib29sZWFuOkZDfSxjbGlja1RvVXNlOntib29sZWFuOkZDfSxsb2NhbGU6e3N0cmluZzp6Q30sbG9jYWxlczp7X19hbnlfXzp7YW55OlwiYW55XCJ9LF9fdHlwZV9fOntvYmplY3Q6UkN9fSxoZWlnaHQ6e3N0cmluZzp6Q30sd2lkdGg6e3N0cmluZzp6Q30sX190eXBlX186e29iamVjdDpSQ319LFdDPXtub2Rlczp7Ym9yZGVyV2lkdGg6WzEsMCwxMCwxXSxib3JkZXJXaWR0aFNlbGVjdGVkOlsyLDAsMTAsMV0sY29sb3I6e2JvcmRlcjpbXCJjb2xvclwiLFwiIzJCN0NFOVwiXSxiYWNrZ3JvdW5kOltcImNvbG9yXCIsXCIjOTdDMkZDXCJdLGhpZ2hsaWdodDp7Ym9yZGVyOltcImNvbG9yXCIsXCIjMkI3Q0U5XCJdLGJhY2tncm91bmQ6W1wiY29sb3JcIixcIiNEMkU1RkZcIl19LGhvdmVyOntib3JkZXI6W1wiY29sb3JcIixcIiMyQjdDRTlcIl0sYmFja2dyb3VuZDpbXCJjb2xvclwiLFwiI0QyRTVGRlwiXX19LG9wYWNpdHk6WzAsMCwxLC4xXSxmaXhlZDp7eDohMSx5OiExfSxmb250Ontjb2xvcjpbXCJjb2xvclwiLFwiIzM0MzQzNFwiXSxzaXplOlsxNCwwLDEwMCwxXSxmYWNlOltcImFyaWFsXCIsXCJ2ZXJkYW5hXCIsXCJ0YWhvbWFcIl0sYmFja2dyb3VuZDpbXCJjb2xvclwiLFwibm9uZVwiXSxzdHJva2VXaWR0aDpbMCwwLDUwLDFdLHN0cm9rZUNvbG9yOltcImNvbG9yXCIsXCIjZmZmZmZmXCJdfSxoaWRkZW46ITEsbGFiZWxIaWdobGlnaHRCb2xkOiEwLHBoeXNpY3M6ITAsc2NhbGluZzp7bWluOlsxMCwwLDIwMCwxXSxtYXg6WzMwLDAsMjAwLDFdLGxhYmVsOntlbmFibGVkOiExLG1pbjpbMTQsMCwyMDAsMV0sbWF4OlszMCwwLDIwMCwxXSxtYXhWaXNpYmxlOlszMCwwLDIwMCwxXSxkcmF3VGhyZXNob2xkOls1LDAsMjAsMV19fSxzaGFkb3c6e2VuYWJsZWQ6ITEsY29sb3I6XCJyZ2JhKDAsMCwwLDAuNSlcIixzaXplOlsxMCwwLDIwLDFdLHg6WzUsLTMwLDMwLDFdLHk6WzUsLTMwLDMwLDFdfSxzaGFwZTpbXCJlbGxpcHNlXCIsXCJib3hcIixcImNpcmNsZVwiLFwiZGF0YWJhc2VcIixcImRpYW1vbmRcIixcImRvdFwiLFwic3F1YXJlXCIsXCJzdGFyXCIsXCJ0ZXh0XCIsXCJ0cmlhbmdsZVwiLFwidHJpYW5nbGVEb3duXCIsXCJoZXhhZ29uXCJdLHNoYXBlUHJvcGVydGllczp7Ym9yZGVyRGFzaGVzOiExLGJvcmRlclJhZGl1czpbNiwwLDIwLDFdLGludGVycG9sYXRpb246ITAsdXNlSW1hZ2VTaXplOiExfSxzaXplOlsyNSwwLDIwMCwxXX0sZWRnZXM6e2Fycm93czp7dG86e2VuYWJsZWQ6ITEsc2NhbGVGYWN0b3I6WzEsMCwzLC4wNV0sdHlwZTpcImFycm93XCJ9LG1pZGRsZTp7ZW5hYmxlZDohMSxzY2FsZUZhY3RvcjpbMSwwLDMsLjA1XSx0eXBlOlwiYXJyb3dcIn0sZnJvbTp7ZW5hYmxlZDohMSxzY2FsZUZhY3RvcjpbMSwwLDMsLjA1XSx0eXBlOlwiYXJyb3dcIn19LGVuZFBvaW50T2Zmc2V0Ontmcm9tOlswLC0xMCwxMCwxXSx0bzpbMCwtMTAsMTAsMV19LGFycm93U3RyaWtldGhyb3VnaDohMCxjb2xvcjp7Y29sb3I6W1wiY29sb3JcIixcIiM4NDg0ODRcIl0saGlnaGxpZ2h0OltcImNvbG9yXCIsXCIjODQ4NDg0XCJdLGhvdmVyOltcImNvbG9yXCIsXCIjODQ4NDg0XCJdLGluaGVyaXQ6W1wiZnJvbVwiLFwidG9cIixcImJvdGhcIiwhMCwhMV0sb3BhY2l0eTpbMSwwLDEsLjA1XX0sZGFzaGVzOiExLGZvbnQ6e2NvbG9yOltcImNvbG9yXCIsXCIjMzQzNDM0XCJdLHNpemU6WzE0LDAsMTAwLDFdLGZhY2U6W1wiYXJpYWxcIixcInZlcmRhbmFcIixcInRhaG9tYVwiXSxiYWNrZ3JvdW5kOltcImNvbG9yXCIsXCJub25lXCJdLHN0cm9rZVdpZHRoOlsyLDAsNTAsMV0sc3Ryb2tlQ29sb3I6W1wiY29sb3JcIixcIiNmZmZmZmZcIl0sYWxpZ246W1wiaG9yaXpvbnRhbFwiLFwidG9wXCIsXCJtaWRkbGVcIixcImJvdHRvbVwiXX0saGlkZGVuOiExLGhvdmVyV2lkdGg6WzEuNSwwLDUsLjFdLGxhYmVsSGlnaGxpZ2h0Qm9sZDohMCxwaHlzaWNzOiEwLHNjYWxpbmc6e21pbjpbMSwwLDEwMCwxXSxtYXg6WzE1LDAsMTAwLDFdLGxhYmVsOntlbmFibGVkOiEwLG1pbjpbMTQsMCwyMDAsMV0sbWF4OlszMCwwLDIwMCwxXSxtYXhWaXNpYmxlOlszMCwwLDIwMCwxXSxkcmF3VGhyZXNob2xkOls1LDAsMjAsMV19fSxzZWxlY3Rpb25XaWR0aDpbMS41LDAsNSwuMV0sc2VsZlJlZmVyZW5jZVNpemU6WzIwLDAsMjAwLDFdLHNlbGZSZWZlcmVuY2U6e3NpemU6WzIwLDAsMjAwLDFdLGFuZ2xlOltNYXRoLlBJLzIsLTYqTWF0aC5QSSw2Kk1hdGguUEksTWF0aC5QSS84XSxyZW5kZXJCZWhpbmRUaGVOb2RlOiEwfSxzaGFkb3c6e2VuYWJsZWQ6ITEsY29sb3I6XCJyZ2JhKDAsMCwwLDAuNSlcIixzaXplOlsxMCwwLDIwLDFdLHg6WzUsLTMwLDMwLDFdLHk6WzUsLTMwLDMwLDFdfSxzbW9vdGg6e2VuYWJsZWQ6ITAsdHlwZTpbXCJkeW5hbWljXCIsXCJjb250aW51b3VzXCIsXCJkaXNjcmV0ZVwiLFwiZGlhZ29uYWxDcm9zc1wiLFwic3RyYWlnaHRDcm9zc1wiLFwiaG9yaXpvbnRhbFwiLFwidmVydGljYWxcIixcImN1cnZlZENXXCIsXCJjdXJ2ZWRDQ1dcIixcImN1YmljQmV6aWVyXCJdLGZvcmNlRGlyZWN0aW9uOltcImhvcml6b250YWxcIixcInZlcnRpY2FsXCIsXCJub25lXCJdLHJvdW5kbmVzczpbLjUsMCwxLC4wNV19LHdpZHRoOlsxLDAsMzAsMV19LGxheW91dDp7aGllcmFyY2hpY2FsOntlbmFibGVkOiExLGxldmVsU2VwYXJhdGlvbjpbMTUwLDIwLDUwMCw1XSxub2RlU3BhY2luZzpbMTAwLDIwLDUwMCw1XSx0cmVlU3BhY2luZzpbMjAwLDIwLDUwMCw1XSxibG9ja1NoaWZ0aW5nOiEwLGVkZ2VNaW5pbWl6YXRpb246ITAscGFyZW50Q2VudHJhbGl6YXRpb246ITAsZGlyZWN0aW9uOltcIlVEXCIsXCJEVVwiLFwiTFJcIixcIlJMXCJdLHNvcnRNZXRob2Q6W1wiaHVic2l6ZVwiLFwiZGlyZWN0ZWRcIl0sc2hha2VUb3dhcmRzOltcImxlYXZlc1wiLFwicm9vdHNcIl19fSxpbnRlcmFjdGlvbjp7ZHJhZ05vZGVzOiEwLGRyYWdWaWV3OiEwLGhpZGVFZGdlc09uRHJhZzohMSxoaWRlRWRnZXNPblpvb206ITEsaGlkZU5vZGVzT25EcmFnOiExLGhvdmVyOiExLGtleWJvYXJkOntlbmFibGVkOiExLHNwZWVkOnt4OlsxMCwwLDQwLDFdLHk6WzEwLDAsNDAsMV0sem9vbTpbLjAyLDAsLjEsLjAwNV19LGJpbmRUb1dpbmRvdzohMCxhdXRvRm9jdXM6ITB9LG11bHRpc2VsZWN0OiExLG5hdmlnYXRpb25CdXR0b25zOiExLHNlbGVjdGFibGU6ITAsc2VsZWN0Q29ubmVjdGVkRWRnZXM6ITAsaG92ZXJDb25uZWN0ZWRFZGdlczohMCx0b29sdGlwRGVsYXk6WzMwMCwwLDFlMywyNV0sem9vbVZpZXc6ITAsem9vbVNwZWVkOlsxLC4xLDIsLjFdfSxtYW5pcHVsYXRpb246e2VuYWJsZWQ6ITEsaW5pdGlhbGx5QWN0aXZlOiExfSxwaHlzaWNzOntlbmFibGVkOiEwLGJhcm5lc0h1dDp7dGhldGE6Wy41LC4xLDEsLjA1XSxncmF2aXRhdGlvbmFsQ29uc3RhbnQ6Wy0yZTMsLTNlNCwwLDUwXSxjZW50cmFsR3Jhdml0eTpbLjMsMCwxMCwuMDVdLHNwcmluZ0xlbmd0aDpbOTUsMCw1MDAsNV0sc3ByaW5nQ29uc3RhbnQ6Wy4wNCwwLDEuMiwuMDA1XSxkYW1waW5nOlsuMDksMCwxLC4wMV0sYXZvaWRPdmVybGFwOlswLDAsMSwuMDFdfSxmb3JjZUF0bGFzMkJhc2VkOnt0aGV0YTpbLjUsLjEsMSwuMDVdLGdyYXZpdGF0aW9uYWxDb25zdGFudDpbLTUwLC01MDAsMCwxXSxjZW50cmFsR3Jhdml0eTpbLjAxLDAsMSwuMDA1XSxzcHJpbmdMZW5ndGg6Wzk1LDAsNTAwLDVdLHNwcmluZ0NvbnN0YW50OlsuMDgsMCwxLjIsLjAwNV0sZGFtcGluZzpbLjQsMCwxLC4wMV0sYXZvaWRPdmVybGFwOlswLDAsMSwuMDFdfSxyZXB1bHNpb246e2NlbnRyYWxHcmF2aXR5OlsuMiwwLDEwLC4wNV0sc3ByaW5nTGVuZ3RoOlsyMDAsMCw1MDAsNV0sc3ByaW5nQ29uc3RhbnQ6Wy4wNSwwLDEuMiwuMDA1XSxub2RlRGlzdGFuY2U6WzEwMCwwLDUwMCw1XSxkYW1waW5nOlsuMDksMCwxLC4wMV19LGhpZXJhcmNoaWNhbFJlcHVsc2lvbjp7Y2VudHJhbEdyYXZpdHk6Wy4yLDAsMTAsLjA1XSxzcHJpbmdMZW5ndGg6WzEwMCwwLDUwMCw1XSxzcHJpbmdDb25zdGFudDpbLjAxLDAsMS4yLC4wMDVdLG5vZGVEaXN0YW5jZTpbMTIwLDAsNTAwLDVdLGRhbXBpbmc6Wy4wOSwwLDEsLjAxXSxhdm9pZE92ZXJsYXA6WzAsMCwxLC4wMV19LG1heFZlbG9jaXR5Ols1MCwwLDE1MCwxXSxtaW5WZWxvY2l0eTpbLjEsLjAxLC41LC4wMV0sc29sdmVyOltcImJhcm5lc0h1dFwiLFwiZm9yY2VBdGxhczJCYXNlZFwiLFwicmVwdWxzaW9uXCIsXCJoaWVyYXJjaGljYWxSZXB1bHNpb25cIl0sdGltZXN0ZXA6Wy41LC4wMSwxLC4wMV0sd2luZDp7eDpbMCwtMTAsMTAsLjFdLHk6WzAsLTEwLDEwLC4xXX19fSxWQz1mdW5jdGlvbih0LGUsaSl7dmFyIG87cmV0dXJuISghemYodCkuY2FsbCh0LFwicGh5c2ljc1wiKXx8IXpmKG89V0MucGh5c2ljcy5zb2x2ZXIpLmNhbGwobyxlKXx8aS5waHlzaWNzLnNvbHZlcj09PWV8fFwid2luZFwiPT09ZSl9LHFDPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGNvbmZpZ3VyYXRvckhpZGVPcHRpb246VkMsYWxsT3B0aW9uczpIQyxjb25maWd1cmVPcHRpb25zOldDfSksVUM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7WGwodGhpcyx0KX1yZXR1cm4gJGwodCxbe2tleTpcImdldERpc3RhbmNlc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIG89e30sbj10LmVkZ2VzLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIHM9e307b1tlW3JdXT1zO2Zvcih2YXIgYT0wO2E8ZS5sZW5ndGg7YSsrKXNbZVthXV09cj09YT8wOjFlOX1mb3IodmFyIGg9MDtoPGkubGVuZ3RoO2grKyl7dmFyIGQ9bltpW2hdXTshMD09PWQuY29ubmVjdGVkJiZ2b2lkIDAhPT1vW2QuZnJvbUlkXSYmdm9pZCAwIT09b1tkLnRvSWRdJiYob1tkLmZyb21JZF1bZC50b0lkXT0xLG9bZC50b0lkXVtkLmZyb21JZF09MSl9Zm9yKHZhciBsPWUubGVuZ3RoLGM9MDtjPGw7YysrKWZvcih2YXIgdT1lW2NdLGY9b1t1XSxwPTA7cDxsLTE7cCsrKWZvcih2YXIgdj1lW3BdLGc9b1t2XSx5PXArMTt5PGw7eSsrKXt2YXIgbT1lW3ldLGI9b1ttXSx3PU1hdGgubWluKGdbbV0sZ1t1XStmW21dKTtnW21dPXcsYlt2XT13fXJldHVybiBvfX1dKSx0fSgpLFlDPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLGksbyl7WGwodGhpcyx0KSx0aGlzLmJvZHk9ZSx0aGlzLnNwcmluZ0xlbmd0aD1pLHRoaXMuc3ByaW5nQ29uc3RhbnQ9byx0aGlzLmRpc3RhbmNlU29sdmVyPW5ldyBVQ31yZXR1cm4gJGwodCxbe2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt0JiYodC5zcHJpbmdMZW5ndGgmJih0aGlzLnNwcmluZ0xlbmd0aD10LnNwcmluZ0xlbmd0aCksdC5zcHJpbmdDb25zdGFudCYmKHRoaXMuc3ByaW5nQ29uc3RhbnQ9dC5zcHJpbmdDb25zdGFudCkpfX0se2tleTpcInNvbHZlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG89dGhpcy5kaXN0YW5jZVNvbHZlci5nZXREaXN0YW5jZXModGhpcy5ib2R5LHQsZSk7dGhpcy5fY3JlYXRlTF9tYXRyaXgobyksdGhpcy5fY3JlYXRlS19tYXRyaXgobyksdGhpcy5fY3JlYXRlRV9tYXRyaXgoKTtmb3IodmFyIG49LjAxLHI9MSxzPTAsYT1NYXRoLm1heCgxZTMsTWF0aC5taW4oMTAqdGhpcy5ib2R5Lm5vZGVJbmRpY2VzLmxlbmd0aCw2ZTMpKSxoPTUsZD0xZTksbD0wLGM9MCx1PTAsZj0wLHA9MDtkPm4mJnM8YTspe3MrPTE7dmFyIHY9dGhpcy5fZ2V0SGlnaGVzdEVuZXJneU5vZGUoaSksZz0kYyh2LDQpO2ZvcihsPWdbMF0sZD1nWzFdLGM9Z1syXSx1PWdbM10sZj1kLHA9MDtmPnImJnA8aDspe3ArPTEsdGhpcy5fbW92ZU5vZGUobCxjLHUpO3ZhciB5PXRoaXMuX2dldEVuZXJneShsKSxtPSRjKHksMyk7Zj1tWzBdLGM9bVsxXSx1PW1bMl19fX19LHtrZXk6XCJfZ2V0SGlnaGVzdEVuZXJneU5vZGVcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLGk9dGhpcy5ib2R5Lm5vZGVzLG89MCxuPWVbMF0scj0wLHM9MCxhPTA7YTxlLmxlbmd0aDthKyspe3ZhciBoPWVbYV07aWYoITAhPT1pW2hdLnByZWRlZmluZWRQb3NpdGlvbnx8ITA9PT1pW2hdLmlzQ2x1c3RlciYmITA9PT10fHwhMCE9PWlbaF0ub3B0aW9ucy5maXhlZC54fHwhMCE9PWlbaF0ub3B0aW9ucy5maXhlZC55KXt2YXIgZD0kYyh0aGlzLl9nZXRFbmVyZ3koaCksMyksbD1kWzBdLGM9ZFsxXSx1PWRbMl07bzxsJiYobz1sLG49aCxyPWMscz11KX19cmV0dXJuW24sbyxyLHNdfX0se2tleTpcIl9nZXRFbmVyZ3lcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT0kYyh0aGlzLkVfc3Vtc1t0XSwyKSxpPWVbMF0sbz1lWzFdO3JldHVybltNYXRoLnNxcnQoTWF0aC5wb3coaSwyKStNYXRoLnBvdyhvLDIpKSxpLG9dfX0se2tleTpcIl9tb3ZlTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxpKXtmb3IodmFyIG89dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLG49dGhpcy5ib2R5Lm5vZGVzLHI9MCxzPTAsYT0wLGg9blt0XS54LGQ9blt0XS55LGw9dGhpcy5LX21hdHJpeFt0XSxjPXRoaXMuTF9tYXRyaXhbdF0sdT0wO3U8by5sZW5ndGg7dSsrKXt2YXIgZj1vW3VdO2lmKGYhPT10KXt2YXIgcD1uW2ZdLngsdj1uW2ZdLnksZz1sW2ZdLHk9Y1tmXSxtPTEvTWF0aC5wb3coTWF0aC5wb3coaC1wLDIpK01hdGgucG93KGQtdiwyKSwxLjUpO3IrPWcqKDEteSpNYXRoLnBvdyhkLXYsMikqbSkscys9ZyooeSooaC1wKSooZC12KSptKSxhKz1nKigxLXkqTWF0aC5wb3coaC1wLDIpKm0pfX12YXIgYj0oZS9yK2kvcykvKHMvci1hL3MpLHc9LShzKmIrZSkvcjtuW3RdLngrPXcsblt0XS55Kz1iLHRoaXMuX3VwZGF0ZUVfbWF0cml4KHQpfX0se2tleTpcIl9jcmVhdGVMX21hdHJpeFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYm9keS5ub2RlSW5kaWNlcyxpPXRoaXMuc3ByaW5nTGVuZ3RoO3RoaXMuTF9tYXRyaXg9W107Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3RoaXMuTF9tYXRyaXhbZVtvXV09e307Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspdGhpcy5MX21hdHJpeFtlW29dXVtlW25dXT1pKnRbZVtvXV1bZVtuXV19fX0se2tleTpcIl9jcmVhdGVLX21hdHJpeFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYm9keS5ub2RlSW5kaWNlcyxpPXRoaXMuc3ByaW5nQ29uc3RhbnQ7dGhpcy5LX21hdHJpeD1bXTtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dGhpcy5LX21hdHJpeFtlW29dXT17fTtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl0aGlzLktfbWF0cml4W2Vbb11dW2Vbbl1dPWkqTWF0aC5wb3codFtlW29dXVtlW25dXSwtMil9fX0se2tleTpcIl9jcmVhdGVFX21hdHJpeFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5ib2R5Lm5vZGVJbmRpY2VzLGU9dGhpcy5ib2R5Lm5vZGVzO3RoaXMuRV9tYXRyaXg9e30sdGhpcy5FX3N1bXM9e307Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspdGhpcy5FX21hdHJpeFt0W2ldXT1bXTtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7Zm9yKHZhciBuPXRbb10scj1lW25dLngscz1lW25dLnksYT0wLGg9MCxkPW87ZDx0Lmxlbmd0aDtkKyspe3ZhciBsPXRbZF07aWYobCE9PW4pe3ZhciBjPWVbbF0ueCx1PWVbbF0ueSxmPTEvTWF0aC5zcXJ0KE1hdGgucG93KHItYywyKStNYXRoLnBvdyhzLXUsMikpO3RoaXMuRV9tYXRyaXhbbl1bZF09W3RoaXMuS19tYXRyaXhbbl1bbF0qKHItYy10aGlzLkxfbWF0cml4W25dW2xdKihyLWMpKmYpLHRoaXMuS19tYXRyaXhbbl1bbF0qKHMtdS10aGlzLkxfbWF0cml4W25dW2xdKihzLXUpKmYpXSx0aGlzLkVfbWF0cml4W2xdW29dPXRoaXMuRV9tYXRyaXhbbl1bZF0sYSs9dGhpcy5FX21hdHJpeFtuXVtkXVswXSxoKz10aGlzLkVfbWF0cml4W25dW2RdWzFdfX10aGlzLkVfc3Vtc1tuXT1bYSxoXX19fSx7a2V5OlwiX3VwZGF0ZUVfbWF0cml4XCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuYm9keS5ub2RlSW5kaWNlcyxpPXRoaXMuYm9keS5ub2RlcyxvPXRoaXMuRV9tYXRyaXhbdF0sbj10aGlzLktfbWF0cml4W3RdLHI9dGhpcy5MX21hdHJpeFt0XSxzPWlbdF0ueCxhPWlbdF0ueSxoPTAsZD0wLGw9MDtsPGUubGVuZ3RoO2wrKyl7dmFyIGM9ZVtsXTtpZihjIT09dCl7dmFyIHU9b1tsXSxmPXVbMF0scD11WzFdLHY9aVtjXS54LGc9aVtjXS55LHk9MS9NYXRoLnNxcnQoTWF0aC5wb3cocy12LDIpK01hdGgucG93KGEtZywyKSksbT1uW2NdKihzLXYtcltjXSoocy12KSp5KSxiPW5bY10qKGEtZy1yW2NdKihhLWcpKnkpO29bbF09W20sYl0saCs9bSxkKz1iO3ZhciB3PXRoaXMuRV9zdW1zW2NdO3dbMF0rPW0tZix3WzFdKz1iLXB9fXRoaXMuRV9zdW1zW3RdPVtoLGRdfX1dKSx0fSgpO2Z1bmN0aW9uIFhDKHQsZSxpKXt2YXIgbyxuLHIscyxhPXRoaXM7aWYoISh0aGlzIGluc3RhbmNlb2YgWEMpKXRocm93IG5ldyBTeW50YXhFcnJvcihcIkNvbnN0cnVjdG9yIG11c3QgYmUgY2FsbGVkIHdpdGggdGhlIG5ldyBvcGVyYXRvclwiKTt0aGlzLm9wdGlvbnM9e30sdGhpcy5kZWZhdWx0T3B0aW9ucz17bG9jYWxlOlwiZW5cIixsb2NhbGVzOkptLGNsaWNrVG9Vc2U6ITF9LGZvKHRoaXMub3B0aW9ucyx0aGlzLmRlZmF1bHRPcHRpb25zKSx0aGlzLmJvZHk9e2NvbnRhaW5lcjp0LG5vZGVzOnt9LG5vZGVJbmRpY2VzOltdLGVkZ2VzOnt9LGVkZ2VJbmRpY2VzOltdLGVtaXR0ZXI6e29uOkZvKG89dGhpcy5vbikuY2FsbChvLHRoaXMpLG9mZjpGbyhuPXRoaXMub2ZmKS5jYWxsKG4sdGhpcyksZW1pdDpGbyhyPXRoaXMuZW1pdCkuY2FsbChyLHRoaXMpLG9uY2U6Rm8ocz10aGlzLm9uY2UpLmNhbGwocyx0aGlzKX0sZXZlbnRMaXN0ZW5lcnM6e29uVGFwOmZ1bmN0aW9uKCl7fSxvblRvdWNoOmZ1bmN0aW9uKCl7fSxvbkRvdWJsZVRhcDpmdW5jdGlvbigpe30sb25Ib2xkOmZ1bmN0aW9uKCl7fSxvbkRyYWdTdGFydDpmdW5jdGlvbigpe30sb25EcmFnOmZ1bmN0aW9uKCl7fSxvbkRyYWdFbmQ6ZnVuY3Rpb24oKXt9LG9uTW91c2VXaGVlbDpmdW5jdGlvbigpe30sb25QaW5jaDpmdW5jdGlvbigpe30sb25Nb3VzZU1vdmU6ZnVuY3Rpb24oKXt9LG9uUmVsZWFzZTpmdW5jdGlvbigpe30sb25Db250ZXh0OmZ1bmN0aW9uKCl7fX0sZGF0YTp7bm9kZXM6bnVsbCxlZGdlczpudWxsfSxmdW5jdGlvbnM6e2NyZWF0ZU5vZGU6ZnVuY3Rpb24oKXt9LGNyZWF0ZUVkZ2U6ZnVuY3Rpb24oKXt9LGdldFBvaW50ZXI6ZnVuY3Rpb24oKXt9fSxtb2R1bGVzOnt9LHZpZXc6e3NjYWxlOjEsdHJhbnNsYXRpb246e3g6MCx5OjB9fSxzZWxlY3Rpb25Cb3g6e3Nob3c6ITEscG9zaXRpb246e3N0YXJ0Ont4OjAseTowfSxlbmQ6e3g6MCx5OjB9fX19LHRoaXMuYmluZEV2ZW50TGlzdGVuZXJzKCksdGhpcy5pbWFnZXM9bmV3IGViKChmdW5jdGlvbigpe3JldHVybiBhLmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIil9KSksdGhpcy5ncm91cHM9bmV3IE93LHRoaXMuY2FudmFzPW5ldyBuRSh0aGlzLmJvZHkpLHRoaXMuc2VsZWN0aW9uSGFuZGxlcj1uZXcgY08odGhpcy5ib2R5LHRoaXMuY2FudmFzKSx0aGlzLmludGVyYWN0aW9uSGFuZGxlcj1uZXcgY0UodGhpcy5ib2R5LHRoaXMuY2FudmFzLHRoaXMuc2VsZWN0aW9uSGFuZGxlciksdGhpcy52aWV3PW5ldyBzRSh0aGlzLmJvZHksdGhpcy5jYW52YXMpLHRoaXMucmVuZGVyZXI9bmV3IHRFKHRoaXMuYm9keSx0aGlzLmNhbnZhcyksdGhpcy5waHlzaWNzPW5ldyBMeCh0aGlzLmJvZHkpLHRoaXMubGF5b3V0RW5naW5lPW5ldyBQQyh0aGlzLmJvZHkpLHRoaXMuY2x1c3RlcmluZz1uZXcgWngodGhpcy5ib2R5KSx0aGlzLm1hbmlwdWxhdGlvbj1uZXcgSUModGhpcy5ib2R5LHRoaXMuY2FudmFzLHRoaXMuc2VsZWN0aW9uSGFuZGxlcix0aGlzLmludGVyYWN0aW9uSGFuZGxlciksdGhpcy5ub2Rlc0hhbmRsZXI9bmV3IEJfKHRoaXMuYm9keSx0aGlzLmltYWdlcyx0aGlzLmdyb3Vwcyx0aGlzLmxheW91dEVuZ2luZSksdGhpcy5lZGdlc0hhbmRsZXI9bmV3IFR4KHRoaXMuYm9keSx0aGlzLmltYWdlcyx0aGlzLmdyb3VwcyksdGhpcy5ib2R5Lm1vZHVsZXMua2FtYWRhS2F3YWk9bmV3IFlDKHRoaXMuYm9keSwxNTAsLjA1KSx0aGlzLmJvZHkubW9kdWxlcy5jbHVzdGVyaW5nPXRoaXMuY2x1c3RlcmluZyx0aGlzLmNhbnZhcy5fY3JlYXRlKCksdGhpcy5zZXRPcHRpb25zKGkpLHRoaXMuc2V0RGF0YShlKX1WbyhYQy5wcm90b3R5cGUpLFhDLnByb3RvdHlwZS5zZXRPcHRpb25zPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYobnVsbD09PXQmJih0PXZvaWQgMCksdm9pZCAwIT09dCl7ITA9PT15bS52YWxpZGF0ZSh0LEhDKSYmY29uc29sZS5lcnJvcihcIiVjRXJyb3JzIGhhdmUgYmVlbiBmb3VuZCBpbiB0aGUgc3VwcGxpZWQgb3B0aW9ucyBvYmplY3QuXCIsZ20pO2lmKE55KFtcImxvY2FsZVwiLFwibG9jYWxlc1wiLFwiY2xpY2tUb1VzZVwiXSx0aGlzLm9wdGlvbnMsdCksdm9pZCAwIT09dC5sb2NhbGUmJih0LmxvY2FsZT1mdW5jdGlvbih0LGUpe3RyeXt2YXIgaT0kYyhlLnNwbGl0KC9bLV8gL10vLDIpLDIpLG89aVswXSxuPWlbMV0scj1udWxsIT1vP28udG9Mb3dlckNhc2UoKTpudWxsLHM9bnVsbCE9bj9uLnRvVXBwZXJDYXNlKCk6bnVsbDtpZihyJiZzKXt2YXIgYSxoPXIrXCItXCIrcztpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxoKSlyZXR1cm4gaDtjb25zb2xlLndhcm4oc3UoYT1cIlVua25vd24gdmFyaWFudCBcIi5jb25jYXQocyxcIiBvZiBsYW5ndWFnZSBcIikpLmNhbGwoYSxyLFwiLlwiKSl9aWYocil7dmFyIGQ9cjtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxkKSlyZXR1cm4gZDtjb25zb2xlLndhcm4oXCJVbmtub3duIGxhbmd1YWdlIFwiLmNvbmNhdChyKSl9cmV0dXJuIGNvbnNvbGUud2FybihcIlVua25vd24gbG9jYWxlIFwiLmNvbmNhdChlLFwiLCBmYWxsaW5nIGJhY2sgdG8gRW5nbGlzaC5cIikpLFwiZW5cIn1jYXRjaCh0KXtyZXR1cm4gY29uc29sZS5lcnJvcih0KSxjb25zb2xlLndhcm4oXCJVbmV4cGVjdGVkIGVycm9yIHdoaWxlIG5vcm1hbGl6aW5nIGxvY2FsZSBcIi5jb25jYXQoZSxcIiwgZmFsbGluZyBiYWNrIHRvIEVuZ2xpc2guXCIpKSxcImVuXCJ9fSh0LmxvY2FsZXN8fHRoaXMub3B0aW9ucy5sb2NhbGVzLHQubG9jYWxlKSksdD10aGlzLmxheW91dEVuZ2luZS5zZXRPcHRpb25zKHQubGF5b3V0LHQpLHRoaXMuY2FudmFzLnNldE9wdGlvbnModCksdGhpcy5ncm91cHMuc2V0T3B0aW9ucyh0Lmdyb3VwcyksdGhpcy5ub2Rlc0hhbmRsZXIuc2V0T3B0aW9ucyh0Lm5vZGVzKSx0aGlzLmVkZ2VzSGFuZGxlci5zZXRPcHRpb25zKHQuZWRnZXMpLHRoaXMucGh5c2ljcy5zZXRPcHRpb25zKHQucGh5c2ljcyksdGhpcy5tYW5pcHVsYXRpb24uc2V0T3B0aW9ucyh0Lm1hbmlwdWxhdGlvbix0LHRoaXMub3B0aW9ucyksdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIuc2V0T3B0aW9ucyh0LmludGVyYWN0aW9uKSx0aGlzLnJlbmRlcmVyLnNldE9wdGlvbnModC5pbnRlcmFjdGlvbiksdGhpcy5zZWxlY3Rpb25IYW5kbGVyLnNldE9wdGlvbnModC5pbnRlcmFjdGlvbiksdm9pZCAwIT09dC5ncm91cHMmJnRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJyZWZyZXNoTm9kZXNcIiksXCJjb25maWd1cmVcImluIHQmJih0aGlzLmNvbmZpZ3VyYXRvcnx8KHRoaXMuY29uZmlndXJhdG9yPW5ldyBmbSh0aGlzLHRoaXMuYm9keS5jb250YWluZXIsV0MsdGhpcy5jYW52YXMucGl4ZWxSYXRpbyxWQykpLHRoaXMuY29uZmlndXJhdG9yLnNldE9wdGlvbnModC5jb25maWd1cmUpKSx0aGlzLmNvbmZpZ3VyYXRvciYmITA9PT10aGlzLmNvbmZpZ3VyYXRvci5vcHRpb25zLmVuYWJsZWQpe3ZhciBpPXtub2Rlczp7fSxlZGdlczp7fSxsYXlvdXQ6e30saW50ZXJhY3Rpb246e30sbWFuaXB1bGF0aW9uOnt9LHBoeXNpY3M6e30sZ2xvYmFsOnt9fTtSeShpLm5vZGVzLHRoaXMubm9kZXNIYW5kbGVyLm9wdGlvbnMpLFJ5KGkuZWRnZXMsdGhpcy5lZGdlc0hhbmRsZXIub3B0aW9ucyksUnkoaS5sYXlvdXQsdGhpcy5sYXlvdXRFbmdpbmUub3B0aW9ucyksUnkoaS5pbnRlcmFjdGlvbix0aGlzLnNlbGVjdGlvbkhhbmRsZXIub3B0aW9ucyksUnkoaS5pbnRlcmFjdGlvbix0aGlzLnJlbmRlcmVyLm9wdGlvbnMpLFJ5KGkuaW50ZXJhY3Rpb24sdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIub3B0aW9ucyksUnkoaS5tYW5pcHVsYXRpb24sdGhpcy5tYW5pcHVsYXRpb24ub3B0aW9ucyksUnkoaS5waHlzaWNzLHRoaXMucGh5c2ljcy5vcHRpb25zKSxSeShpLmdsb2JhbCx0aGlzLmNhbnZhcy5vcHRpb25zKSxSeShpLmdsb2JhbCx0aGlzLm9wdGlvbnMpLHRoaXMuY29uZmlndXJhdG9yLnNldE1vZHVsZU9wdGlvbnMoaSl9dm9pZCAwIT09dC5jbGlja1RvVXNlPyEwPT09dC5jbGlja1RvVXNlP3ZvaWQgMD09PXRoaXMuYWN0aXZhdG9yJiYodGhpcy5hY3RpdmF0b3I9bmV3IHVtKHRoaXMuY2FudmFzLmZyYW1lKSx0aGlzLmFjdGl2YXRvci5vbihcImNoYW5nZVwiLChmdW5jdGlvbigpe2UuYm9keS5lbWl0dGVyLmVtaXQoXCJhY3RpdmF0ZVwiKX0pKSk6KHZvaWQgMCE9PXRoaXMuYWN0aXZhdG9yJiYodGhpcy5hY3RpdmF0b3IuZGVzdHJveSgpLGRlbGV0ZSB0aGlzLmFjdGl2YXRvciksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcImFjdGl2YXRlXCIpKTp0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiYWN0aXZhdGVcIiksdGhpcy5jYW52YXMuc2V0U2l6ZSgpLHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJzdGFydFNpbXVsYXRpb25cIil9fSxYQy5wcm90b3R5cGUuX3VwZGF0ZVZpc2libGVJbmRpY2VzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5ib2R5Lm5vZGVzLGU9dGhpcy5ib2R5LmVkZ2VzO2Zvcih2YXIgaSBpbiB0aGlzLmJvZHkubm9kZUluZGljZXM9W10sdGhpcy5ib2R5LmVkZ2VJbmRpY2VzPVtdLHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsaSkmJih0aGlzLmNsdXN0ZXJpbmcuX2lzQ2x1c3RlcmVkTm9kZShpKXx8ITEhPT10W2ldLm9wdGlvbnMuaGlkZGVufHx0aGlzLmJvZHkubm9kZUluZGljZXMucHVzaCh0W2ldLmlkKSk7Zm9yKHZhciBvIGluIGUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykpe3ZhciBuPWVbb10scj10W24uZnJvbUlkXSxzPXRbbi50b0lkXSxhPXZvaWQgMCE9PXImJnZvaWQgMCE9PXM7IXRoaXMuY2x1c3RlcmluZy5faXNDbHVzdGVyZWRFZGdlKG8pJiYhMT09PW4ub3B0aW9ucy5oaWRkZW4mJmEmJiExPT09ci5vcHRpb25zLmhpZGRlbiYmITE9PT1zLm9wdGlvbnMuaGlkZGVuJiZ0aGlzLmJvZHkuZWRnZUluZGljZXMucHVzaChuLmlkKX19LFhDLnByb3RvdHlwZS5iaW5kRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuYm9keS5lbWl0dGVyLm9uKFwiX2RhdGFDaGFuZ2VkXCIsKGZ1bmN0aW9uKCl7dC5lZGdlc0hhbmRsZXIuX3VwZGF0ZVN0YXRlKCksdC5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhVXBkYXRlZFwiKX0pKSx0aGlzLmJvZHkuZW1pdHRlci5vbihcIl9kYXRhVXBkYXRlZFwiLChmdW5jdGlvbigpe3QuY2x1c3RlcmluZy5fdXBkYXRlU3RhdGUoKSx0Ll91cGRhdGVWaXNpYmxlSW5kaWNlcygpLHQuX3VwZGF0ZVZhbHVlUmFuZ2UodC5ib2R5Lm5vZGVzKSx0Ll91cGRhdGVWYWx1ZVJhbmdlKHQuYm9keS5lZGdlcyksdC5ib2R5LmVtaXR0ZXIuZW1pdChcInN0YXJ0U2ltdWxhdGlvblwiKSx0LmJvZHkuZW1pdHRlci5lbWl0KFwiX3JlcXVlc3RSZWRyYXdcIil9KSl9LFhDLnByb3RvdHlwZS5zZXREYXRhPWZ1bmN0aW9uKHQpe2lmKHRoaXMuYm9keS5lbWl0dGVyLmVtaXQoXCJyZXNldFBoeXNpY3NcIiksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9yZXNldERhdGFcIiksdGhpcy5zZWxlY3Rpb25IYW5kbGVyLnVuc2VsZWN0QWxsKCksdCYmdC5kb3QmJih0Lm5vZGVzfHx0LmVkZ2VzKSl0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0RhdGEgbXVzdCBjb250YWluIGVpdGhlciBwYXJhbWV0ZXIgXCJkb3RcIiBvciAgcGFyYW1ldGVyIHBhaXIgXCJub2Rlc1wiIGFuZCBcImVkZ2VzXCIsIGJ1dCBub3QgYm90aC4nKTtpZih0aGlzLnNldE9wdGlvbnModCYmdC5vcHRpb25zKSx0JiZ0LmRvdCl7Y29uc29sZS53YXJuKFwiVGhlIGRvdCBwcm9wZXJ0eSBoYXMgYmVlbiBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRoZSBzdGF0aWMgY29udmVydERvdCBtZXRob2QgdG8gY29udmVydCBET1QgaW50byB2aXMubmV0d29yayBmb3JtYXQgYW5kIHVzZSB0aGUgbm9ybWFsIGRhdGEgZm9ybWF0IHdpdGggbm9kZXMgYW5kIGVkZ2VzLiBUaGlzIGNvbnZlcnRlciBpcyB1c2VkIGxpa2UgdGhpczogdmFyIGRhdGEgPSB2aXMubmV0d29yay5jb252ZXJ0RG90KGRvdFN0cmluZyk7XCIpO3ZhciBlPUttKHQuZG90KTt0aGlzLnNldERhdGEoZSl9ZWxzZSBpZih0JiZ0LmdlcGhpKXtjb25zb2xlLndhcm4oXCJUaGUgZ2VwaGkgcHJvcGVydHkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0aGUgc3RhdGljIGNvbnZlcnRHZXBoaSBtZXRob2QgdG8gY29udmVydCBnZXBoaSBpbnRvIHZpcy5uZXR3b3JrIGZvcm1hdCBhbmQgdXNlIHRoZSBub3JtYWwgZGF0YSBmb3JtYXQgd2l0aCBub2RlcyBhbmQgZWRnZXMuIFRoaXMgY29udmVydGVyIGlzIHVzZWQgbGlrZSB0aGlzOiB2YXIgZGF0YSA9IHZpcy5uZXR3b3JrLmNvbnZlcnRHZXBoaShnZXBoaUpzb24pO1wiKTt2YXIgaT1abSh0LmdlcGhpKTt0aGlzLnNldERhdGEoaSl9ZWxzZSB0aGlzLm5vZGVzSGFuZGxlci5zZXREYXRhKHQmJnQubm9kZXMsITApLHRoaXMuZWRnZXNIYW5kbGVyLnNldERhdGEodCYmdC5lZGdlcywhMCksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcIl9kYXRhQ2hhbmdlZFwiKSx0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiX2RhdGFMb2FkZWRcIiksdGhpcy5ib2R5LmVtaXR0ZXIuZW1pdChcImluaXRQaHlzaWNzXCIpfSxYQy5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLmJvZHkuZW1pdHRlci5lbWl0KFwiZGVzdHJveVwiKSx0aGlzLmJvZHkuZW1pdHRlci5vZmYoKSx0aGlzLm9mZigpLGRlbGV0ZSB0aGlzLmdyb3VwcyxkZWxldGUgdGhpcy5jYW52YXMsZGVsZXRlIHRoaXMuc2VsZWN0aW9uSGFuZGxlcixkZWxldGUgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIsZGVsZXRlIHRoaXMudmlldyxkZWxldGUgdGhpcy5yZW5kZXJlcixkZWxldGUgdGhpcy5waHlzaWNzLGRlbGV0ZSB0aGlzLmxheW91dEVuZ2luZSxkZWxldGUgdGhpcy5jbHVzdGVyaW5nLGRlbGV0ZSB0aGlzLm1hbmlwdWxhdGlvbixkZWxldGUgdGhpcy5ub2Rlc0hhbmRsZXIsZGVsZXRlIHRoaXMuZWRnZXNIYW5kbGVyLGRlbGV0ZSB0aGlzLmNvbmZpZ3VyYXRvcixkZWxldGUgdGhpcy5pbWFnZXMsdGhpcy5ib2R5Lm5vZGVzKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmJvZHkubm9kZXMsdCkmJmRlbGV0ZSB0aGlzLmJvZHkubm9kZXNbdF07Zm9yKHZhciBlIGluIHRoaXMuYm9keS5lZGdlcylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ib2R5LmVkZ2VzLGUpJiZkZWxldGUgdGhpcy5ib2R5LmVkZ2VzW2VdO0R5KHRoaXMuYm9keS5jb250YWluZXIpfSxYQy5wcm90b3R5cGUuX3VwZGF0ZVZhbHVlUmFuZ2U9ZnVuY3Rpb24odCl7dmFyIGUsaT12b2lkIDAsbz12b2lkIDAsbj0wO2ZvcihlIGluIHQpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkpe3ZhciByPXRbZV0uZ2V0VmFsdWUoKTt2b2lkIDAhPT1yJiYoaT12b2lkIDA9PT1pP3I6TWF0aC5taW4ocixpKSxvPXZvaWQgMD09PW8/cjpNYXRoLm1heChyLG8pLG4rPXIpfWlmKHZvaWQgMCE9PWkmJnZvaWQgMCE9PW8pZm9yKGUgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSYmdFtlXS5zZXRWYWx1ZVJhbmdlKGksbyxuKX0sWEMucHJvdG90eXBlLmlzQWN0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuYWN0aXZhdG9yfHx0aGlzLmFjdGl2YXRvci5hY3RpdmV9LFhDLnByb3RvdHlwZS5zZXRTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FudmFzLnNldFNpemUuYXBwbHkodGhpcy5jYW52YXMsYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmNhbnZhc1RvRE9NPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FudmFzLmNhbnZhc1RvRE9NLmFwcGx5KHRoaXMuY2FudmFzLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5ET010b0NhbnZhcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNhbnZhcy5ET010b0NhbnZhcy5hcHBseSh0aGlzLmNhbnZhcyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZmluZE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbHVzdGVyaW5nLmZpbmROb2RlLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuaXNDbHVzdGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2x1c3RlcmluZy5pc0NsdXN0ZXIuYXBwbHkodGhpcy5jbHVzdGVyaW5nLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5vcGVuQ2x1c3Rlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNsdXN0ZXJpbmcub3BlbkNsdXN0ZXIuYXBwbHkodGhpcy5jbHVzdGVyaW5nLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5jbHVzdGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2x1c3RlcmluZy5jbHVzdGVyLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0Tm9kZXNJbkNsdXN0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbHVzdGVyaW5nLmdldE5vZGVzSW5DbHVzdGVyLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuY2x1c3RlckJ5Q29ubmVjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNsdXN0ZXJpbmcuY2x1c3RlckJ5Q29ubmVjdGlvbi5hcHBseSh0aGlzLmNsdXN0ZXJpbmcsYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmNsdXN0ZXJCeUh1YnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbHVzdGVyaW5nLmNsdXN0ZXJCeUh1YnNpemUuYXBwbHkodGhpcy5jbHVzdGVyaW5nLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS51cGRhdGVDbHVzdGVyZWROb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2x1c3RlcmluZy51cGRhdGVDbHVzdGVyZWROb2RlLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0Q2x1c3RlcmVkRWRnZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbHVzdGVyaW5nLmdldENsdXN0ZXJlZEVkZ2VzLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0QmFzZUVkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbHVzdGVyaW5nLmdldEJhc2VFZGdlLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0QmFzZUVkZ2VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2x1c3RlcmluZy5nZXRCYXNlRWRnZXMuYXBwbHkodGhpcy5jbHVzdGVyaW5nLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS51cGRhdGVFZGdlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2x1c3RlcmluZy51cGRhdGVFZGdlLmFwcGx5KHRoaXMuY2x1c3RlcmluZyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuY2x1c3Rlck91dGxpZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2x1c3RlcmluZy5jbHVzdGVyT3V0bGllcnMuYXBwbHkodGhpcy5jbHVzdGVyaW5nLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRTZWVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGF5b3V0RW5naW5lLmdldFNlZWQuYXBwbHkodGhpcy5sYXlvdXRFbmdpbmUsYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmVuYWJsZUVkaXRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFuaXB1bGF0aW9uLmVuYWJsZUVkaXRNb2RlLmFwcGx5KHRoaXMubWFuaXB1bGF0aW9uLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5kaXNhYmxlRWRpdE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYW5pcHVsYXRpb24uZGlzYWJsZUVkaXRNb2RlLmFwcGx5KHRoaXMubWFuaXB1bGF0aW9uLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5hZGROb2RlTW9kZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hbmlwdWxhdGlvbi5hZGROb2RlTW9kZS5hcHBseSh0aGlzLm1hbmlwdWxhdGlvbixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZWRpdE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYW5pcHVsYXRpb24uZWRpdE5vZGUuYXBwbHkodGhpcy5tYW5pcHVsYXRpb24sYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmVkaXROb2RlTW9kZT1mdW5jdGlvbigpe3JldHVybiBjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkOiBQbGVhc2UgdXNlIGVkaXROb2RlIGluc3RlYWQgb2YgZWRpdE5vZGVNb2RlLlwiKSx0aGlzLm1hbmlwdWxhdGlvbi5lZGl0Tm9kZS5hcHBseSh0aGlzLm1hbmlwdWxhdGlvbixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuYWRkRWRnZU1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYW5pcHVsYXRpb24uYWRkRWRnZU1vZGUuYXBwbHkodGhpcy5tYW5pcHVsYXRpb24sYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmVkaXRFZGdlTW9kZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hbmlwdWxhdGlvbi5lZGl0RWRnZU1vZGUuYXBwbHkodGhpcy5tYW5pcHVsYXRpb24sYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmRlbGV0ZVNlbGVjdGVkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFuaXB1bGF0aW9uLmRlbGV0ZVNlbGVjdGVkLmFwcGx5KHRoaXMubWFuaXB1bGF0aW9uLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRQb3NpdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2Rlc0hhbmRsZXIuZ2V0UG9zaXRpb25zLmFwcGx5KHRoaXMubm9kZXNIYW5kbGVyLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRQb3NpdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVzSGFuZGxlci5nZXRQb3NpdGlvbi5hcHBseSh0aGlzLm5vZGVzSGFuZGxlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuc3RvcmVQb3NpdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2Rlc0hhbmRsZXIuc3RvcmVQb3NpdGlvbnMuYXBwbHkodGhpcy5ub2Rlc0hhbmRsZXIsYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLm1vdmVOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXNIYW5kbGVyLm1vdmVOb2RlLmFwcGx5KHRoaXMubm9kZXNIYW5kbGVyLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRCb3VuZGluZ0JveD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVzSGFuZGxlci5nZXRCb3VuZGluZ0JveC5hcHBseSh0aGlzLm5vZGVzSGFuZGxlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0Q29ubmVjdGVkTm9kZXM9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuYm9keS5ub2Rlc1t0XT90aGlzLm5vZGVzSGFuZGxlci5nZXRDb25uZWN0ZWROb2Rlcy5hcHBseSh0aGlzLm5vZGVzSGFuZGxlcixhcmd1bWVudHMpOnRoaXMuZWRnZXNIYW5kbGVyLmdldENvbm5lY3RlZE5vZGVzLmFwcGx5KHRoaXMuZWRnZXNIYW5kbGVyLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRDb25uZWN0ZWRFZGdlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVzSGFuZGxlci5nZXRDb25uZWN0ZWRFZGdlcy5hcHBseSh0aGlzLm5vZGVzSGFuZGxlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuc3RhcnRTaW11bGF0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGh5c2ljcy5zdGFydFNpbXVsYXRpb24uYXBwbHkodGhpcy5waHlzaWNzLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5zdG9wU2ltdWxhdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBoeXNpY3Muc3RvcFNpbXVsYXRpb24uYXBwbHkodGhpcy5waHlzaWNzLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5zdGFiaWxpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5waHlzaWNzLnN0YWJpbGl6ZS5hcHBseSh0aGlzLnBoeXNpY3MsYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLmdldFNlbGVjdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2V0U2VsZWN0aW9uLmFwcGx5KHRoaXMuc2VsZWN0aW9uSGFuZGxlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuc2V0U2VsZWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0aW9uSGFuZGxlci5zZXRTZWxlY3Rpb24uYXBwbHkodGhpcy5zZWxlY3Rpb25IYW5kbGVyLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRTZWxlY3RlZE5vZGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZXRTZWxlY3RlZE5vZGVJZHMuYXBwbHkodGhpcy5zZWxlY3Rpb25IYW5kbGVyLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXRTZWxlY3RlZEVkZ2VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZXRTZWxlY3RlZEVkZ2VJZHMuYXBwbHkodGhpcy5zZWxlY3Rpb25IYW5kbGVyLGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5nZXROb2RlQXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnNlbGVjdGlvbkhhbmRsZXIuZ2V0Tm9kZUF0LmFwcGx5KHRoaXMuc2VsZWN0aW9uSGFuZGxlcixhcmd1bWVudHMpO3JldHVybiB2b2lkIDAhPT10JiZ2b2lkIDAhPT10LmlkP3QuaWQ6dH0sWEMucHJvdG90eXBlLmdldEVkZ2VBdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuc2VsZWN0aW9uSGFuZGxlci5nZXRFZGdlQXQuYXBwbHkodGhpcy5zZWxlY3Rpb25IYW5kbGVyLGFyZ3VtZW50cyk7cmV0dXJuIHZvaWQgMCE9PXQmJnZvaWQgMCE9PXQuaWQ/dC5pZDp0fSxYQy5wcm90b3R5cGUuc2VsZWN0Tm9kZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3Rpb25IYW5kbGVyLnNlbGVjdE5vZGVzLmFwcGx5KHRoaXMuc2VsZWN0aW9uSGFuZGxlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuc2VsZWN0RWRnZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3Rpb25IYW5kbGVyLnNlbGVjdEVkZ2VzLmFwcGx5KHRoaXMuc2VsZWN0aW9uSGFuZGxlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUudW5zZWxlY3RBbGw9ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdGlvbkhhbmRsZXIudW5zZWxlY3RBbGwuYXBwbHkodGhpcy5zZWxlY3Rpb25IYW5kbGVyLGFyZ3VtZW50cyksdGhpcy5zZWxlY3Rpb25IYW5kbGVyLmNvbW1pdFdpdGhvdXRFbWl0dGluZy5hcHBseSh0aGlzLnNlbGVjdGlvbkhhbmRsZXIpLHRoaXMucmVkcmF3KCl9LFhDLnByb3RvdHlwZS5yZWRyYXc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZW5kZXJlci5yZWRyYXcuYXBwbHkodGhpcy5yZW5kZXJlcixhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0U2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWV3LmdldFNjYWxlLmFwcGx5KHRoaXMudmlldyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0Vmlld1Bvc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmlldy5nZXRWaWV3UG9zaXRpb24uYXBwbHkodGhpcy52aWV3LGFyZ3VtZW50cyl9LFhDLnByb3RvdHlwZS5maXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWV3LmZpdC5hcHBseSh0aGlzLnZpZXcsYXJndW1lbnRzKX0sWEMucHJvdG90eXBlLm1vdmVUbz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZpZXcubW92ZVRvLmFwcGx5KHRoaXMudmlldyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZm9jdXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWV3LmZvY3VzLmFwcGx5KHRoaXMudmlldyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUucmVsZWFzZU5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aWV3LnJlbGVhc2VOb2RlLmFwcGx5KHRoaXMudmlldyxhcmd1bWVudHMpfSxYQy5wcm90b3R5cGUuZ2V0T3B0aW9uc0Zyb21Db25maWd1cmF0b3I9ZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gdGhpcy5jb25maWd1cmF0b3ImJih0PXRoaXMuY29uZmlndXJhdG9yLmdldE9wdGlvbnMuYXBwbHkodGhpcy5jb25maWd1cmF0b3IpKSx0fTt2YXIgR0M9S207dC5OZXR3b3JrPVhDLHQuTmV0d29ya0ltYWdlcz1lYix0Lm5ldHdvcmtET1RQYXJzZXI9JG0sdC5uZXR3b3JrR2VwaGlQYXJzZXI9UW0sdC5uZXR3b3JrT3B0aW9ucz1xQyx0LnBhcnNlRE9UTmV0d29yaz1HQyx0LnBhcnNlR2VwaGlOZXR3b3JrPVptLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlzLW5ldHdvcmsubWluLmpzLm1hcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiIiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL3Zpc19jZGF3Zy50c1wiKTtcbiIsIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==